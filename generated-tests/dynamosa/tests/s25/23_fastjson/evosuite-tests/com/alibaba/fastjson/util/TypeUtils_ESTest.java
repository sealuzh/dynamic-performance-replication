/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 13:56:31 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.geom.Line2D;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormatSymbols;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.Instant;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("Z|iJD=(<@~/");
      assertEquals(1848846536189587302L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<DataTruncation> class0 = DataTruncation.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      int[] intArray0 = new int[0];
      FieldDeserializer fieldDeserializer0 = throwableDeserializer0.smartMatch(",)0gX?3wAlsH:QP", intArray0);
      assertNull(fieldDeserializer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "@");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("[long", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      assertTrue(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "writeDirect");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("long", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[J", classLoader0);
      assertTrue(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.asm.Item", (ClassLoader) null);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.ManyToMany");
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Font");
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("DSyVkR}7L f");
      assertEquals(1478897697918247212L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer((-785));
      Long long0 = TypeUtils.castToLong(integer0);
      assertEquals((-785L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("@");
      assertEquals('@', (char)character0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("t");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long(0);
      Byte byte0 = TypeUtils.castToByte(long0);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long((-1L));
      Byte byte0 = TypeUtils.castToByte(long0);
      assertEquals((byte) (-1), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("");
      assertEquals("", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Insets insets0 = new Insets(0, 0, 0, (-631));
      boolean boolean0 = TypeUtils.isHibernateInitialized(insets0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Field[] fieldArray0 = new Field[1];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "5wu*`c.6", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "org.springframework.aop.", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, false, (PropertyNamingStrategy) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Long> class0 = Long.class;
      linkedHashMap0.put((String) null, "R<");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) hashtable0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) concurrentHashMap0, false, (PropertyNamingStrategy) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      linkedHashMap0.put((String) null, (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      String string0 = TypeUtils.castToString(mockNullPointerException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Insets insets0 = new Insets((-500), 3914, (-529), 197);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.awt.Insets[top=-500,left=3914,bottom=-529,right=197]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.isPath(class0);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<Time> class1 = Time.class;
      weakHashMap0.clear();
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", linkedHashMap0);
      TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class1, parserConfig0);
      Locale locale0 = TypeUtils.toLocale("=DFS/k.");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<Short> class0 = Short.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<Time> class1 = Time.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      weakHashMap0.put("fastjson.parser.autoTypeSupport", class0);
      Time time0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class1, parserConfig0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("_asm_prefix__", "_asm_prefix__", 0, hashtable0);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("writeDirect", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockIllegalStateException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : MINUTES
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("istoString", "Ljava.util.concurrent.ConcurrentSkipListSet", 17, hashtable0);
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sQLClientInfoException0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.StringCharacterIterator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Class<Character> class0 = Character.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) threadGroup0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Character
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Insets insets0 = new Insets(823, 1430, 28, 1430);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(28, 823, 28, 28, 28, 0.75, 823, 823, insets0, 30, 26);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.awt.GridBagConstraints@11c38c2b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Insets insets0 = new Insets(21, 21, 21, 84);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Insets[top=21,left=21,bottom=21,right=84]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, (-1219.0429181207), 3558.242124776, (-1219.0429181207));
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(line2D_Double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.geom.Line2D$Double@4f0e4273
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(aSMDeserializerFactory0.classLoader);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.ASMClassLoader@383b7b7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("hX gN|>$~");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockNullPointerException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.evos\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Long long0 = new Long((-1189L));
      String string0 = "java.awt.Rectangle";
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) long0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      MockUUID.fromString("java.awt.Rectangle");
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      Class<Short> class0 = Short.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, type0, type0);
      TypeUtils.isNumber("java.awt.Rectangle");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[{}],\"rawType\":{},\"typeName\":\"java.util.List<java.lang.String>\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationError0, (ParameterizedType) null, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      ClassLoader classLoader0 = TypeUtils.cast((Object) null, class0, (ParserConfig) null);
      assertNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(7);
      Class<JobAttributes> class0 = JobAttributes.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, (PropertyNamingStrategy) null, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      identityHashMap0.put("`-$]ttM;", "`-$]ttM;");
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent((String) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, parserConfig0.propertyNamingStrategy);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, (String) null, (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      Class<Short> class1 = Short.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, hashtable0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, map0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) choiceFormat0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) concurrentHashMap0, parserConfig0.propertyNamingStrategy);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.isKotlin(class0);
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Collection collection0 = TypeUtils.createCollection(parameterizedTypeImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("t");
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("LC");
      assertEquals("LC", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertSame(type0, type1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>(1108);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("WriteBigDecimalAsPlain", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TypeUtils.fnv1a_64("Could not obtain an instance of DatatypeFactory.");
      MockThread mockThread0 = new MockThread();
      String string0 = "javax.xml.datatype.XMLGregorianCalendar";
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("javax.xml.datatype.XMLGregorianCalendar", classLoader0, true);
      TypeUtils.loadClass("getobservesDaylightTime", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("GRr}0`R.+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"GRr}0`R.+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("fastjson.parser.deny", (ClassLoader) null, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("L", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockThread mockThread0 = new MockThread((Runnable) null, "Lorg.springframework.util.LinkedMultiValueMap");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.isPath(class0);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<AtomicInteger> class0 = AtomicInteger.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "L;", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.atomic.AtomicInteger
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("com.alibaba.fastjson.JSONReader");
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) interruptedException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Time> class0 = Time.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Constructor<BufferCapabilities>[] constructorArray0 = (Constructor<BufferCapabilities>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Constructor<BufferCapabilities>[] constructorArray0 = (Constructor<BufferCapabilities>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("_");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("I-fgp<|!");
      assertEquals(2353156045921187848L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Collection collection0 = TypeUtils.createCollection(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotSame(type0, type1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<Properties> class0 = Properties.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToEnum((Object) "", class0, parserConfig0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "L", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertTrue(class0.isInterface());
      assertEquals(1537, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.unwrapOptional((Type) null);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Properties> class0 = Properties.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, parserConfig0.propertyNamingStrategy, false, false);
      TypeUtils.getGenericParamType(javaBeanInfo0.clazz);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Dimension> class0 = Dimension.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      ParserConfig parserConfig0 = ParserConfig.global;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Double> class0 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Class<?> class1 = javaBeanSerializer0.getType();
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertFalse(class2.isArray());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(13, list0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashtable1, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      TypeUtils.fnv1a_64("Could not obtain an instance of DatatypeFactory.");
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setClassAssertionStatus("GRr}0`R.+", false);
      Class<?> class1 = TypeUtils.loadClass("javax.xml.datatype.XMLGregorianCalendar", classLoader0, false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      Class<Short> class2 = Short.TYPE;
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[4]);
      SQLDataException sQLDataException0 = new SQLDataException("GRr}0`R.+", "l~lX'7");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("getFieldDeserializer", "Could not obtain an instance of DatatypeFactory.", sQLDataException0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      TypeUtils.cast((Object) sQLTransientConnectionException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockThread mockThread0 = new MockThread("L;");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("L;", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[tu_%o|KW(l_TrCXJo", (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ConcurrentHashMap<Object, PageAttributes> concurrentHashMap0 = new ConcurrentHashMap<Object, PageAttributes>();
      Class<Integer> class0 = Integer.TYPE;
      SimpleDateFormat simpleDateFormat0 = TypeUtils.cast((Object) concurrentHashMap0, (Type) class0, (ParserConfig) null);
      assertNull(simpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ConcurrentHashMap<SQLTimeoutException, JobAttributes> concurrentHashMap0 = new ConcurrentHashMap<SQLTimeoutException, JobAttributes>();
      Type[] typeArray0 = new Type[1];
      Class<IllegalStateException> class0 = IllegalStateException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, identityHashMap0);
      Class<?> class1 = javaBeanSerializer0.getType();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) concurrentHashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@74db
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      RuleBasedCollator ruleBasedCollator0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(ruleBasedCollator0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<IllegalStateException> class0 = IllegalStateException.class;
      Class<Timestamp> class1 = Timestamp.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "oracle.sql.TIMESTAMP", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Could not obtain an instance of DatatypeFactory.", type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DataTruncation dataTruncation0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertNull(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "DSyVkR}7L f", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Double double0 = new Double(1102.7692844630396);
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) double0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("dk_hyYcb+M");
      assertEquals("dk_HYYCB+M", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DataTruncation dataTruncation0 = TypeUtils.cast((Object) "", (Type) class0, parserConfig0);
      assertNull(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Integer integer0 = new Integer((-881));
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) integer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockCalendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Date> class0 = Date.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaObjectDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "@");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("int", classLoader0, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaBeanDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("to");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("to", (String) null, sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 72, longArray0, sQLTransactionRollbackException0);
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) batchUpdateException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.BatchUpdateException: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      WeakHashMap<OutOfMemoryError, Boolean> weakHashMap0 = new WeakHashMap<OutOfMemoryError, Boolean>();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      AtomicInteger atomicInteger0 = TypeUtils.cast((Object) weakHashMap0, class0, parserConfig0);
      assertEquals(0, atomicInteger0.get());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("fastjson.parser.autoTypeAccept");
      NoSuchMethodException noSuchMethodException1 = TypeUtils.castToJavaBean((Object) noSuchMethodException0, class0);
      assertSame(noSuchMethodException0, noSuchMethodException1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      NoSuchMethodException noSuchMethodException0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(noSuchMethodException0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : @
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("nDzO\"}");
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedHashMap<Calendar, OptionalCodec> linkedHashMap0 = new LinkedHashMap<Calendar, OptionalCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : C
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long0 = TypeUtils.castToLong(bigDecimal0);
      assertEquals(1L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Long long0 = new Long((-4739L));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -4739
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4270347329889690746L));
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockDate0);
      assertEquals(254000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : W
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(52);
      Time time0 = TypeUtils.castToSqlTime(atomicInteger0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(bitSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : t
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate("3");
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Integer integer0 = new Integer(588);
      Date date0 = TypeUtils.castToSqlDate(integer0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Date date0 = new Date(1099511628211L);
      Date date1 = TypeUtils.castToSqlDate(date0);
      assertSame(date1, date0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("M4`coXI&xQ%@]J{C");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"M4`coXI&xQ%@]J{C\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("2~nf8'-U:4{x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 2~nf8'-U:4{x
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Long long0 = new Long((-1189L));
      java.util.Date date0 = TypeUtils.castToDate(long0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1839), (-1839), (-26705495), (-1839), 3008);
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      java.util.Date date0 = TypeUtils.castToDate(timestamp0);
      assertSame(timestamp0, date0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("java.util.ArrayList@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Collator collator0 = Collator.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(collator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.RuleBasedCollator@ed5d3ef6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("PATTERN_EXPONENT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(Double.NaN, 0.0, 80.46993246, 80.46993246);
      Float float0 = TypeUtils.castToFloat(line2D_Double0.y1);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Double double0 = new Double((-1.0));
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte) (-1), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(7);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(concurrentHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("t");
      assertEquals('t', (char)character0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("w+'\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : w+'\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("");
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("Ljava.awt.Rectangle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Rectangle\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Long long0 = new Long((-1189L));
      Byte byte0 = TypeUtils.castToByte(long0);
      assertEquals((byte)91, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("][o9MO");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeUtils0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }
}
