/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:22:43 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.accessToString(88);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)67, (byte)125);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.clearBit((byte)125, (byte)54);
      constantFloat0.toString();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFloat0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 86, 139);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.isSet(52, 52);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)66;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, (int) (byte) (-32));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString(283);
      assertEquals("public private static final native", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)44;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-6), (byte)44);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)44, (byte) (-117));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2711), 283, true);
      assertEquals("0:    fconst_0\n1:    fload_3\n2:    <illegal opcode>\n3:    f2i\n4:    aload_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Otk\\79ES~L";
      try { 
        Utility.typeOfSignature("Otk\u00079ES~L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Otk\u00079ES~L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 112, (int) (byte) (-77));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-21);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 1, 2048);
      assertEquals("1:    <illegal opcode>\n2:    monitorenter\n3:    bipush\t\t7\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.convertString("oS%");
      Utility.compactClassName("oS%", false);
      Utility.getSignature("oS%");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1484, (int) (byte)78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("/hYZ?p*+", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)78;
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-54), (byte)119);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant constant0 = constantMethodHandle1.copy();
      constantArray0[0] = constant0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)77);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-54), (byte)110);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong((-618L));
      constantArray0[3] = (Constant) constantLong0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)110, (byte)77);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong1 = new ConstantLong(1L);
      constantArray0[5] = (Constant) constantLong1;
      ConstantString constantString0 = new ConstantString(545);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[6] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, (int) (byte) (-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.accessToString(2136);
      Utility.setBit(5, 2136);
      Utility.format(16777221, (-1791061651), true, 'z');
      int int0 = 8;
      Utility.classOrInterface(8);
      Utility.compactClassName("U&W2$8~Ht(|P!^T", "class", true);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)68;
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 8, (int) (byte) (-107), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "astore");
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-58), 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)40;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-83);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-83), (int) (byte) (-81));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    nop
         // 2:    dreturn
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.isJavaIdentifierPart('X');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)52;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-95);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-35), (int) (byte) (-35), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_1
         // 1:    <illegal opcode>
         // 2:    lstore_0
         // 3:    nop
         // 4:    caload
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.setBit(49, 49);
      Utility.isJavaIdentifierPart('e');
      Utility.signatureToString("TPi}g1jy;L6s(MB}DZ", true);
      String string0 = "byte";
      Utility.methodTypeToSignature("byte", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("TPi}g1jy;L6s(MB}DZ", "TPi}g1jy;L6s(MB}DZ", "byte", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: TPi}g1jy;L6s(MB}DZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 2110;
      Utility.classOrInterface(2110);
      String string0 = "I]tf&5sc{";
      Utility.replace("class", "class", "I]tf&5sc{");
      Utility.isSet(1006, 2110);
      String string1 = "&i\"IohKH";
      try { 
        Utility.typeOfSignature("&i\"IohKH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &i\"IohKH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t");
      String[] stringArray0 = Constants.TYPE_NAMES;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-109);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("\t\t");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-20), (int) (byte) (-1));
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.compactClassName("Invalid signature: `");
      String string0 = "fload";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("fload", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, 3, 255);
      String string1 = "iconst_3";
      // Undeclared exception!
      try { 
        Utility.signatureToString("iconst_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iconst_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-4);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 880, (int) (byte) (-107), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte) (-15);
      byte byte0 = (byte)14;
      byteArray0[8] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore\t\t%43
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)84;
      byte byte0 = (byte)82;
      byteArray0[3] = (byte)82;
      byte byte1 = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, 4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.compactClassName("@ak^haB91", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      char char0 = 'y';
      Utility.format((-1963), (byte)104, true, 'y');
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)82, (-1418));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantString constantString0 = new ConstantString(756);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-106);
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)45;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^L5z1{Jjy|?!MzB");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, 88, true);
      try { 
        Utility.decode("1:    saload\n2:    aconst_null\n3:    <illegal opcode>\n4:    aload_3\n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.compactClassName("JIps`it`$mewt", "JIps`it`$mewt", true);
      String string0 = "instanceof";
      Utility.replace("newarray", "X#r&4z:\"4w}=v\"-2P~g", "instanceof");
      Utility.searchOpcode("instanceof");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "newarray");
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("? super ", (String[]) null);
      Utility.typeOfMethodSignature("()L?;");
      LocalVariableTable localVariableTable0 = null;
      Utility.methodSignatureToString("()L?;", "X#r&4z:\"4w}=v\"-2P~g", "org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations", false, (LocalVariableTable) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("X#r&4z:\"4w}=v\"-2P~g", "s2W]Wx:rc}", "newarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X#r&4z:\"4w}=v\"-2P~g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, 85, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(189, 189);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-106);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "!x";
      try { 
        Utility.typeOfSignature("!x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.setBit((-2274), (-2274));
      MockFile mockFile0 = new MockFile((File) null, "monitorexit");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockFile0;
      Object object0 = new Object();
      mockFile0.setWritable(true);
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockFile0;
      mockPrintStream0.println('Q');
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      mockPrintStream0.print(object0);
      objectArray0[7] = object1;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.getSignature("monitorexit");
      try { 
        Utility.typeOfSignature("17W<e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 17W<e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "class_index";
      Utility.getSignature("class_index");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)80;
      byteArray0[0] = (byte)80;
      byte byte1 = (byte)81;
      byteArray0[1] = (byte)81;
      byte byte2 = (byte)57;
      byteArray0[2] = (byte)57;
      byte byte3 = (byte)98;
      byteArray0[3] = (byte)98;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (int) (byte)98, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.replace("3_T$=V72JbK6#", "b", "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4848, (int) (byte) (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(16384, (-1077));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte) (-18);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 850);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "/ghbr%x+|i";
      try { 
        Utility.typeOfSignature("/ghbr%x+|i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /ghbr%x+|i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.getSignature(" /ghbr%x+|i");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2405, (-2068));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.getSignature("X_)m!zB6y{N");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)7;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-761), 13);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    dup_x1\n1:    aload_3\n2:    <illegal opcode>\n3:    f2d\n4:    laload\n5:    fconst_0\n6:    lrem\n7:    dup\n8:    iconst_4\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    dup_x1
         // 1:    aload_3
         // 2:    <illegal opcode>
         // 3:    f2d
         // 4:    laload
         // 5:    fconst_0
         // 6:    lrem
         // 7:    dup
         // 8:    iconst_4
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.searchOpcode("zY2NG .3X;;Pb");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-53);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), 2045);
      MockFile mockFile0 = new MockFile(".~bE@:lRli<T;F", "imul");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "0:    dstore\t\t%194\n2:    aconst_null\n3:    d2f\n4:    <illegal opcode>\n";
      objectArray0[1] = (Object) "double";
      objectArray0[2] = (Object) (byte) (-62);
      objectArray0[3] = (Object) "double";
      objectArray0[4] = (Object) "double";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "double", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.accessToString(3, false);
      String string0 = Utility.accessToString(3, false);
      assertEquals("public private", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)124;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)36);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-37), (int) (byte)96);
      assertEquals("0:    nop\n1:    fload_2\n2:    <illegal opcode>\n3:    iadd\n4:    d2l\n5:    dconst_0\n6:    iushr\n", string1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface((byte)126);
      int int0 = 56;
      Utility.clearBit(2890, 56);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, 56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.%lT=1<YJrp)'[ [";
      stringArray0[1] = "java.lang.%lT=1<YJrp)'[ [";
      stringArray0[2] = "java.lang.%lT=1<YJrp)'[ [";
      stringArray0[3] = "java.lang.%lT=1<YJrp)'[ [";
      stringArray0[4] = "java.lang.%lT=1<YJrp)'[ [";
      stringArray0[5] = "java.lang.%lT=1<YJrp)'[ [";
      stringArray0[6] = "lb)2iX";
      stringArray0[7] = "java.lang.%lT=1<YJrp)'[ [";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("java.lang.%lT=1<YJrp)'[ [", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[ [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.accessToString(88);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)67, (byte)125);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantFieldref0.setClassIndex((byte)54);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.clearBit((byte)125, (byte)54);
      constantFloat0.toString();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFloat0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 86, 139);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.classOrInterface((-1365));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)72;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)47, (int) (byte)124, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "SYSTEM";
      Utility.typeOfSignature("SYSTEM");
      String string1 = "<illegal opcode>";
      String string2 = "if_acmpne";
      Utility.compactClassName("<illegal opcode>", "if_acmpne", true);
      String string3 = "Jz>{C+E";
      try { 
        Utility.typeOfMethodSignature("Jz>{C+E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Jz>{C+E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.printArray((Object[]) null, true, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)36;
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-130), 51);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(16384, (-1077));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("ifne\t\t#-25079", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("B", false);
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[1] = "B";
      stringArray0[2] = "B";
      stringArray0[3] = "B";
      stringArray0[4] = "B";
      Utility.methodTypeToSignature("B", stringArray0);
      Utility.typeOfSignature("B");
      Utility.accessToString(81);
      int int0 = 755;
      Utility.setBit(77, 755);
      // Undeclared exception!
      try { 
        Utility.signatureToString("(L$l$8b$I$A$A$A$A$A$A$A;LB;LB;LB;LB;)LB;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(L$l$8b$I$A$A$A$A$A$A$A;LB;LB;LB;LB;)LB;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Gdc6ma/SBrL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gdc6ma/SBrL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.classOrInterface((-2671));
      Utility.classOrInterface(1857);
      Utility.compactClassName("interface", "class", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1521, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "+p";
      try { 
        Utility.typeOfSignature("+p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-10);
      byte byte0 = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.searchOpcode("<illegal opcode>");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte) (-10), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-8);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, 73, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "NAVJ%";
      try { 
        Utility.methodSignatureReturnType("NAVJ%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NAVJ%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.PMGClass");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.bcel.classfile.PMGClass";
      stringArray0[1] = ">";
      stringArray0[2] = "org.apache.bcel.classfile.PMGClass";
      stringArray0[3] = "org.apache.bcel.classfile.PMGClass";
      stringArray0[4] = "org.apache.bcel.classfile.PMGClass";
      stringArray0[5] = ">";
      stringArray0[6] = ">";
      Utility.methodTypeToSignature(">", stringArray0);
      try { 
        Utility.typeOfSignature("N8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte)5;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(36, 36);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 59, (int) (byte)76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)2, (-570));
      Constant constant0 = constantInvokeDynamic0.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "putstaticLclass;";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putstaticLclass;");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-123);
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8*(S(0_+$|gL:Myr+HV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8*(S(0_+$|gL:Myr+HV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)46;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("Mc>iv~$~@aUwJ=5zc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mc>iv~$~@aUwJ=5zc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.replace("long", "\nAttribute(s) = ", "\nAttribute(s) = ");
      assertEquals("long", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "long";
      stringArray0[1] = "long";
      stringArray0[2] = "long";
      stringArray0[3] = "long";
      stringArray0[4] = "\nAttribute(s) = ";
      String string1 = Utility.methodTypeToSignature("long", stringArray0);
      assertEquals("(JJJJLAttribute(s);)J", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore\t\t%122", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Utility.compactClassName("nop", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.classOrInterface(64);
      assertEquals("class", string0);
      
      String string1 = Utility.fillup("/$M'^_PxY", 64, true, '@');
      assertEquals("/$M'^_PxY@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload\t\t%71", string2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.equals(byteArray0, byteArray0);
      String string0 = "WymyZ3ZJ\\7])+++";
      try { 
        Utility.typeOfSignature("WymyZ3ZJ\u0007])+++");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WymyZ3ZJ\u0007])+++
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.setBit((-2274), (-2274));
      MockFile mockFile0 = new MockFile((File) null, "monitorexit");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockFile0;
      Object object0 = new Object();
      mockFile0.setWritable(true);
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockFile0;
      mockPrintStream0.println('Q');
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      mockPrintStream0.print(object0);
      objectArray0[7] = object1;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.getSignature("monitorexit");
      try { 
        Utility.typeOfSignature("4#kr|HG#s\"a-CG`+~#(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4#kr|HG#s\"a-CG`+~#(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "6F)/[TYk";
      try { 
        Utility.typeOfSignature("6F)/[TYk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6F)/[TYk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.searchOpcode("S]-E+T&]k9");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("D=-S{ZE0k)1$.}+");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-12);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "Lcu";
      Utility.typeOfSignature("Lcu");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      try { 
        Utility.methodSignatureArgumentTypes("J|7(g-sF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J|7(g-sF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfMethodSignature("(anonymous)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":yCgWoHOq~{VFI)2");
      String string0 = "A\\fX 8baX$_#";
      String[] stringArray0 = new String[4];
      stringArray0[0] = ":yCgWoHOq~{VFI)2";
      stringArray0[1] = ":yCgWoHOq~{VFI)2";
      stringArray0[2] = "3c";
      stringArray0[3] = ":yCgWoHOq~{VFI)2";
      Utility.methodTypeToSignature("A\fX 8baX$_#", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      try { 
        Utility.typeOfSignature("3c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-127);
      Utility.encode(byteArray0, false);
      Utility.replace("K$b0$91$E$e6$d0$81", "K$b0$91$E$e6$d0$81", "=gcjbVbE6JS?i[|]K.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'biK\u0006ZE";
      stringArray0[1] = "=gcjbVbE6JS?i[|]K.";
      stringArray0[2] = "K$b0$91$E$e6$d0$81";
      stringArray0[3] = "=gcjbVbE6JS?i[|]K.";
      stringArray0[4] = "'biK\u0006ZE";
      stringArray0[5] = "int";
      stringArray0[6] = "K$b0$91$E$e6$d0$81";
      Utility.methodTypeToSignature("'biK\u0006ZE", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("byte", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)3;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "P~-*W";
      try { 
        Utility.typeOfSignature("P~-*W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P~-*W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.isSet(16, (-1928));
      Utility.searchOpcode("");
      Utility.compactClassName("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)73;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 28, (-1928), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.compactClassName("'", false);
      Utility.fillup("ut;)yEnoVgK5X.", (-1975), false, '\'');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(957, (byte) (-71));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantDouble constantDouble0 = new ConstantDouble((-1976.61));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(957);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantMethodType0.dump(dataOutputStream0);
      constantArray0[3] = (Constant) constantMethodType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.compactClassName(")");
      try { 
        Utility.typeOfSignature("UX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)103;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2, (int) (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("0uomG %Uyj(UW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0uomG %Uyj(UW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)62;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2983), 72);
      assertEquals("0:    l2i\n1:    frem\n2:    dstore_0\n3:    istore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "a@qc.$";
      Utility.replace("a@qc.$", "&@RY\r@*s`I!snWI2>", "a@qc.$");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "&@RY\r@*s`I!snWI2>";
      objectArray0[1] = (Object) "&@RY\r@*s`I!snWI2>";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "&@RY\r@*s`I!snWI2>";
      objectArray0[4] = (Object) "a@qc.$";
      objectArray0[5] = (Object) "a@qc.$";
      Utility.printArray(objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.decode("{&@RY\r@*s`I!snWI2>, &@RY\r@*s`I!snWI2>, java.lang.Object@1d63a40f, &@RY\r@*s`I!snWI2>, a@qc.$, a@qc.$}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.isSet((-625), 36);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, 67, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.fillup("Invalid method signature: ", 168, false, 'S');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-65);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid method signature: ");
      byteArray0[7] = (byte)87;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokevirtual");
      Utility.codeToString(byteArray0, (ConstantPool) null, (-974), (int) (byte) (-65), false);
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface(98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 113
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-80);
      byteArray0[0] = (byte) (-80);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte1 = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("R+kJlz1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R+kJlz1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@a6400a8, java.lang.Object@a3c0ca6, java.lang.Object@5343f9ed, java.lang.Object@6e6290c3, java.lang.Object@4429bce7, java.lang.Object@2e9ad1f8, java.lang.Object@625ad957, java.lang.Object@18c4a957");
      Utility.fillup("multianewarray", 192, false, 'N');
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.compactClassName("g[0Pt", "invokespecial", true);
      Utility.compactClassName("g[0Pt");
      Utility.compactClassName("g[0Pt", "pE rPk7wFS;\"4g-", true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "pE rPk7wFS;\"4g-";
      objectArray0[1] = (Object) "g[0Pt";
      objectArray0[2] = (Object) "g[0Pt";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)1;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 16, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)73;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("5*YP3,R3{>@9h(<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5*YP3,R3{>@9h(<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.methodTypeToSignature("?>...", (String[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("?>...");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantClass constantClass0 = new ConstantClass(102);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(10, (byte) (-92));
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-99), 10);
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[5] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(96, 39);
      int int0 = Utility.setBit(113, (-861));
      assertEquals(121, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.accessToString((-517), false);
      Utility.searchOpcode("public private static final synchronized volatile transient native abstract strictfp synthetic annotation enum");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*?tNMfm1K", "*?tNMfm1K", "public private static final synchronized volatile transient native abstract strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *?tNMfm1K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("0BU~O,>j-Qz+-9~j,H");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)116, (-3144));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("0BU~O,>j-Qz+-9~j,H");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("lreturn");
      constantArray0[3] = (Constant) constantUtf8_2;
      ConstantClass constantClass0 = new ConstantClass(95);
      constantArray0[4] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-8), (byte) (-25));
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_3 = ConstantUtf8.getCachedInstance("lreturn");
      constantArray0[6] = (Constant) constantUtf8_3;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[7] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.convertString(" methods:\n");
      assertEquals(" methods:\\n", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.classOrInterface((-1563));
      Utility.setBit((-1563), (-1563));
      Utility.setBit(98, (-1489));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)90;
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Dont call getValueLong() on a non LONG ElementValue");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(11, 40);
      constantArray0[1] = (Constant) constantFieldref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(dataInputStream0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 306, (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "2xH?#Ow75k4";
      try { 
        Utility.typeOfSignature("2xH?#Ow75k4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2xH?#Ow75k4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.accessToString(5, true);
      Utility.format(5, 5, true, '}');
      Utility.searchOpcode("PmtAc\"J=G?AKMd");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y]wS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y]wS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)116;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)125;
      objectArray0[1] = (Object) "f3 7d 00 67 76 0f 74";
      objectArray0[2] = (Object) (byte)15;
      objectArray0[3] = (Object) (byte) (-13);
      objectArray0[4] = (Object) (byte)103;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte) (-13);
      objectArray0[7] = (Object) (byte)103;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 500, (int) (byte)116, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "+P'$d\\sB";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("+P'$dsB", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ds\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.decode("k", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "k";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("_Vqq>1p+/!)D", true);
      assertEquals("double", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("freturn", string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.compactClassName("invokedynamic");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("=M'RC'F.)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.format(1384, (-2817), false, '-');
      Utility.setBit(1679, 1384);
      Utility.format(512, 1935, true, 'x');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantString constantString0 = new ConstantString((byte)108);
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantString constantString1 = new ConstantString(255);
      constantArray0[3] = (Constant) constantString1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[4] = (Constant) constantMethodref1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)40);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[5] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2555), (-825));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#|*JLQ}0>585-K$x-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #|*JLQ}0>585-K$x-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "*H,67*:G]hde5X@xK2";
      try { 
        Utility.typeOfSignature("*H,67*:G]hde5X@xK2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H,67*:G]hde5X@xK2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.fillup("synthetic", 100, false, 'j');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    iaload
         // 2:    iconst_4
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.convertString("9xfOO.nd1d2x/");
      Utility.printArray((Object[]) null, true, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte) (-126);
      Constant[] constantArray0 = new Constant[15];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)32, (-565));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 512, (int) (byte)32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Utility.typeOfSignature("):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-32));
      assertEquals("0:    lload_2\n1:    dcmpl\n2:    drem\n3:    iload_3\n4:    <illegal opcode>\n5:    iconst_4\n6:    dload_3\n7:    astore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.typeOfSignature("Could not create the directory ");
      Utility.clearBit((byte)5, (byte)5);
      Object[] objectArray0 = new Object[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = (Object) "Could not create the directory ";
      objectArray0[1] = (Object) "Could not create the directory ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Utility.printArray(objectArray0, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(5);
      Utility.decode("Could not create the directory ", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9D/eGCiiD7hTyFE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9D/eGCiiD7hTyFE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "[";
      Utility.typeOfSignature("[");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[", "[", "void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("Illegal type: ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "void";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Illegal type: ";
      Utility.methodTypeToSignature("void", stringArray0);
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)49;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("M>!IWSto;$Mr#[2");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass((byte)25);
      constantArray0[1] = (Constant) constantClass0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1253), (-1253));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 89, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZN`J");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.replace("{.l88", "ZN`J", "ZN`J");
      assertEquals("{.l88", string0);
      
      String string1 = Utility.accessToString((-696), true);
      assertEquals("static volatile native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)7;
      int int0 = (-1350);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (-1350), true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 11, 2971);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      stringArray0[3] = "[]";
      stringArray0[4] = "[]";
      stringArray0[5] = "[]";
      stringArray0[6] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char char0 = '3';
      Utility.format((-1169), (-1169), true, '3');
      Utility.isSet(93, 93);
      Utility.accessToString(239);
      Utility.isSet((-1), 233);
      try { 
        Utility.typeOfSignature("-1169");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1169
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.isSet(26, 3324);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WXQ");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, (-1359), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "M>d*>sileN6s";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M>d*>sileN6s");
      Utility.isSet(2, 2);
      try { 
        Utility.typeOfSignature("M>d*>sileN6s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M>d*>sileN6s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.replace("Vfmw|H<CXl)X", "a8DX9OES)$J", "Vfmw|H<CXl)X");
      Utility.compactClassName("a8DX9OES)$J", false);
      Utility.compactClassName("Vfmw|H<CXl)X");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)44;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(598);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-23), (-2680), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 59835. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "H_5pEtG";
      try { 
        Utility.typeOfSignature("H_5pEtG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H_5pEtG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "X&0's>I:+#+w:,";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X&0's>I:+#+w:,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X&0's>I:+#+w:,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-68);
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, (int) (byte)28, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "XeKz?r)sLhV\"'kB";
      try { 
        Utility.typeOfSignature("XeKz?r)sLhV\"'kB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XeKz?r)sLhV\"'kB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Utility.format(127, 1152, false, 'I');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cV6'eN7P-dO");
      Utility.searchOpcode(string0);
      Utility.clearBit(127, 1152);
      Utility.typeOfSignature(string0);
      Utility.compactClassName("RjtIHw9;y;");
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = "invokevirtual";
      stringArray0[2] = "invokevirtual";
      stringArray0[3] = string0;
      stringArray0[4] = "invokevirtual";
      stringArray0[5] = "RjtIHw9;y;";
      String string1 = Utility.methodTypeToSignature("invokevirtual", stringArray0);
      Utility.printArray((Object[]) stringArray0, false, false);
      Utility.compactClassName(string1, false);
      Utility.getSignature(stringArray0[0]);
      Utility.format(2103, (-1743), false, 'I');
      Utility.compactClassName("invokevirtual", string0, false);
      Utility.methodSignatureReturnType(stringArray0[0]);
      try { 
        Utility.typeOfSignature("cV6'eN7P-dO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cV6'eN7P-dO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "CO:%Tee\"A$";
      boolean boolean0 = true;
      try { 
        Utility.decode("CO:%Tee\"A$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-109);
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte) (-109));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0:    i2s\n1:    aload_3\n");
      String string0 = "hL)Y(D[ci9ah~sV!";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("hL)Y(D[ci9ah~sV!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `hL)Y(D[ci9ah~sV!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.compactClassName("-Q0_\"JV/", true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-116);
      byteArray0[0] = (byte) (-116);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), 25);
      try { 
        Utility.methodSignatureArgumentTypes("0:    f2l\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    f2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("K2lVz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K2lVz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("J+Vgi9_iHY 0 |y&");
      String string0 = "x$e93\\Yrzd`";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "J+Vgi9_iHY 0 |y&";
      stringArray0[1] = "J+Vgi9_iHY 0 |y&";
      stringArray0[2] = "x$e93Yrzd`";
      stringArray0[3] = "x$e93Yrzd`";
      Utility.methodTypeToSignature("x$e93Yrzd`", stringArray0);
      Utility.getSignature("monitorenter");
      try { 
        Utility.decode("x$e93Yrzd`", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2c");
      Utility.printArray(objectArray0, true, true);
      Utility.convertString("{\"java.lang.Object@21dd279d\", \"java.lang.Object@14b48186\"}");
      Utility.accessToString((-662));
      try { 
        Utility.typeOfSignature("iconst_4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iconst_4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface(57);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.accessToString((-98));
      boolean boolean0 = false;
      Utility.methodSignatureArgumentTypes("()Lclass;", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-4), 3255);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "9ga[=)[";
      try { 
        Utility.methodSignatureReturnType("9ga[=)[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 40, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte) (-39);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1168868737), 108);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("0:    lastore\n1:    lload_3\n2:    <illegal opcode>\n3:    fconst_1\n4:    ladd\n5:    istore_2\n6:    ret\t\t%180\n8:    <illegal opcode>\n", "0:    lastore\n1:    lload_3\n2:    <illegal opcode>\n3:    fconst_1\n4:    ladd\n5:    istore_2\n6:    ret\t\t%180\n8:    <illegal opcode>\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0:    lastore
         // 1:    lload_3
         // 2:    <illegal opcode>
         // 3:    fconst_1
         // 4:    ladd
         // 5:    istore_2
         // 6:    ret\t\t%180
         // 8:    <illegal opcode>
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Utility.accessToString(79);
      assertEquals("public private protected static volatile", string0);
      
      String string1 = Utility.getSignature("float");
      assertEquals("F", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('U');
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("F");
      assertEquals((byte)6, byte0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iconst_3", string2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)6;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) "public private protected static volatile";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray1 = Utility.decode("org.apache.bcel.util.ByteSequence", false);
      assertEquals(33, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-69);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1714), 240, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_1
         // 1:    fconst_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "E/,RPA'?$c[7f{>";
      try { 
        Utility.methodSignatureReturnType("E/,RPA'?$c[7f{>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E/,RPA'?$c[7f{>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-16);
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)78;
      Utility.toHexString(byteArray0);
      Utility.convertString("f0 4e");
      Utility.equals(byteArray0, byteArray0);
      String string0 = "'GK@9\\ z*]cH{_";
      try { 
        Utility.typeOfSignature("'GK@9 z*]cH{_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'GK@9 z*]cH{_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-53);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 211, 211, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.decode("@<M=Tm<z!$'", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(";%Q7('iLEH6H?");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 327);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-66));
      constantArray0[3] = (Constant) constantClass0;
      ConstantFloat constantFloat2 = new ConstantFloat(0.0F);
      constantArray0[4] = (Constant) constantFloat2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "_Vqq>1p+/!)D";
      String string1 = "anewarray";
      Utility.replace("_Vqq>1p+/!)D", "anewarray", "anewarray");
      String string2 = "%lT=1<YJrp)'[ [";
      Utility.compactClassName("%lT=1<YJrp)'[ [");
      Utility.compactClassName("$U}.,aHj%8wS8?", true);
      Utility.compactClassName("$U}.,aHj%8wS8?", "_Vqq>1p+/!)D", true);
      String string3 = "Jg5joQZzZ$$l#G~z";
      Utility.methodSignatureReturnType("Jg5joQZzZ$$l#G~z");
      Utility.isJavaIdentifierPart('b');
      try { 
        Utility.decode("_Vqq>1p+/!)D", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 208;
      Utility.accessToString(208, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(WW$", "float", "(WW$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WW$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.replace(", npairs = ", "cSYG'jmBg-Pl}", "cSYG'jmBg-Pl}");
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-128);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 579, 579, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@7272989e, java.lang.Object@4a1ee15b", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Utility.compactClassName("Invalid method signature: ");
      assertEquals("Invalid method signature: ", string1);
      
      byte byte0 = Utility.typeOfSignature("Tp<z0(!0>V}+");
      assertEquals((byte)14, byte0);
      
      Utility.compactClassName("Invalid method signature: ", false);
      String string2 = Utility.printArray(objectArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("zqV~^eWj.nV=+>", "zqV~^eWj.nV=+>", false);
      try { 
        Utility.typeOfSignature(">M/W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >M/W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "TT-0>Lt|b#)I";
      // Undeclared exception!
      try { 
        Utility.signatureToString("TT-0>Lt|b#)I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TT-0>Lt|b#)I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.convertString("9xfOO.nd1d2x/");
      Utility.printArray((Object[]) null, true, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte) (-126);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)86, (-565));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 512, (int) (byte)32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)64;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, 77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "I";
      Utility.compactClassName("I");
      String string1 = "";
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byte byte0 = (byte)71;
      byteArray0[1] = (byte)71;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("$[ ,-R@^*BF&Ef1mP;1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $[ ,-R@^*BF&Ef1mP;1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "QZzi=ynoKa_8:yKo";
      try { 
        Utility.methodSignatureReturnType("QZzi=ynoKa_8:yKo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QZzi=ynoKa_8:yKo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)40;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)69;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-84);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte)50;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.compactClassName("caload", false);
      assertEquals("caload", string0);
      
      int int0 = Utility.setBit((byte)69, (-4980));
      assertEquals(4165, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.isJavaIdentifierPart('#');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)30);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)33, (-116));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)30, (-116));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantFieldref0.copy();
      constantFieldref0.setClassIndex((-116));
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-116), 100);
      // Undeclared exception!
      try { 
        Utility.signatureToString("@nzB+?b.W&pc.p5=jW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@nzB+?b.W&pc.p5=jW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "HpPs&W/o";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("HpPs&W/o", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HpPs&W/o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.replace("^bcUUz", "^bcUUz", "\".wU;SxpYikg76");
      Utility.accessToString(3410);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("class");
      mockPrintStream0.print("boolean");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_2
         // 1:    i2l
         // 2:    ineg
         // 3:    istore_1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = (-1813);
      Utility.clearBit((-1813), (-2446));
      try { 
        Utility.typeOfSignature(".$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-97));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-100);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-907), 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore_2
         // 1:    jsr\t\t#585
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.convertString("'");
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "Y?pt";
      try { 
        Utility.typeOfSignature("Y?pt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y?pt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.searchOpcode("(U");
      Utility.setBit(123, 123);
      try { 
        Utility.typeOfSignature("ACC_SUPER flag\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ACC_SUPER flag\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnullifnull");
      Utility.compactClassName("Ds", "", true);
      Utility.methodSignatureReturnType("Ds", true);
      Utility.signatureToString("Ds", true);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("WY&.2vOEq%D1;9D~;?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WY&.2vOEq%D1;9D~;?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)3;
      byte byte0 = (byte)104;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-65);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = (-1191);
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-61), (-1191), true);
      String string0 = "Z(!a6y2#tje|-W";
      String string1 = "impdep1";
      boolean boolean0 = true;
      int int1 = 1071;
      CodeException[] codeExceptionArray0 = new CodeException[3];
      CodeException codeException0 = new CodeException((byte)104, (byte) (-61), 832, (byte)104);
      codeExceptionArray0[0] = codeException0;
      CodeException codeException1 = new CodeException(81, (byte) (-61), 73, (-1472));
      codeExceptionArray0[1] = codeException1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      CodeException codeException2 = null;
      try {
        codeException2 = new CodeException(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Only element values of type array can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type array can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = ", length = new";
      String string1 = "(@+`Xd";
      boolean boolean0 = false;
      Utility.compactClassName(", length = new", "(@+`Xd", false);
      Utility.isJavaIdentifierPart('_');
      Utility.convertString(", length = new");
      int int0 = (-1868);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1868));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1868
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-16);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorenter");
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-16), (int) (byte) (-16), false);
      assertEquals("0:    dneg\n1:    <illegal opcode>\n", string0);
      
      String string1 = Utility.format((byte)119, (byte)119, true, 'C');
      assertEquals("119CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.signatureToString("V$OxU/o_3");
      Utility.accessToString(7, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lxor", "lxor", "lxor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lxor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "2=hes;}caNQn~U8[tw5";
      // Undeclared exception!
      try { 
        Utility.getSignature("2=hes;}caNQn~U8[tw5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[tw5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Utility.getSignature("n#Rjw?U2_@z-]&k");
      assertEquals("Ln#Rjw?U2_@z-]&k;", string0);
      
      String string1 = Utility.methodSignatureReturnType("Ln#Rjw?U2_@z-]&k;", false);
      assertEquals("n#Rjw?U2_@z-]&k", string1);
      
      Utility.signatureToString("Fbak'*,s");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "n#Rjw?U2_@z-]&k";
      objectArray0[1] = (Object) "Ln#Rjw?U2_@z-]&k;";
      objectArray0[2] = (Object) "Fbak'*,s";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "n#Rjw?U2_@z-]&k";
      objectArray0[5] = (Object) "n#Rjw?U2_@z-]&k";
      objectArray0[6] = (Object) "Ln#Rjw?U2_@z-]&k;";
      objectArray0[7] = (Object) "Fbak'*,s";
      String string2 = Utility.printArray(objectArray0, false, false);
      int int0 = Utility.setBit(86, 86);
      assertEquals(4194390, int0);
      
      String string3 = Utility.fillup("O-u6e2m#s", 251, false, 'y');
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyO-u6e2m#s", string3);
      
      String string4 = Utility.printArray(objectArray0, true);
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = Utility.isSet((-2823), 128);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)60;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, 6, 48);
      Utility.replace("athrow", "oG", "");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ret", "athrow", "rW-%/GUml'6h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ret
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<s_]kJYq$b");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("<s_]kJYq$b");
      Utility.getSignature("<s_]kJYq$b");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<s_]kJYq$b;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<s_]kJYq$b;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("V !O:h%pdQ_4");
      Utility.clearBit((byte)12, (byte)12);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "V !O:h%pdQ_4";
      objectArray0[1] = (Object) "V !O:h%pdQ_4";
      objectArray0[2] = (Object) "V !O:h%pdQ_4";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("\"V !O:h%pdQ_4\", \"V !O:h%pdQ_4\", \"V !O:h%pdQ_4\"", "\"V !O:h%pdQ_4\", \"V !O:h%pdQ_4\", \"V !O:h%pdQ_4\"", false);
      String string0 = "java.lang.Byte code error: ";
      try { 
        Utility.decode("java.lang.Byte code error: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("", (String[]) null);
      assertEquals("()L;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_2", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "PDuUYSAOD(QNrcgDD";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("PDuUYSAOD(QNrcgDD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PDuUYSAOD(QNrcgDD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid method signature: ");
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)22;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("fb 5d 30 16", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "fb 5d 30 16";
      stringArray0[1] = "monitorexit";
      stringArray0[2] = "dd";
      stringArray0[3] = "monitorexit";
      stringArray0[4] = "monitorexit";
      stringArray0[5] = "int";
      String string2 = Utility.methodTypeToSignature("monitorexit", stringArray0);
      assertEquals("(Lfb;Lmonitorexit;Ldd;Lmonitorexit;Lmonitorexit;I)Lmonitorexit;", string2);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)65;
      byteArray1[4] = (byte)84;
      byteArray1[5] = (byte) (-5);
      byteArray1[6] = (byte) (-5);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-64);
      byteArray0[1] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)49;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("M>!IWSto;$Mr#[2");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass((byte)66);
      constantArray0[1] = (Constant) constantClass0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1253), (-1253));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 89, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "G$";
      try { 
        Utility.methodSignatureReturnType("G$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-904), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.compactClassName("A^[z/RJSTf4", "A^[z/RJSTf4", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xg+z_");
      String string0 = Utility.convertString("tO!!!%0/pR91h");
      Utility.compactClassName("tO!!\\!%0/pR\\91h", "tO!!\\!%0/pR\\91h", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "tO!!!%0/pR91h";
      objectArray0[1] = (Object) "A^[z.RJSTf4";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "tO!!\\!%0.pR\\91h";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "xg+z_";
      objectArray0[7] = (Object) "tO!!\\!%0.pR\\91h";
      objectArray0[8] = (Object) null;
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "hn\\/oO:3s";
      Utility.compactClassName("hn/oO:3s", false);
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "']j-8Cp";
      stringArray0[1] = "']j-8Cp";
      stringArray0[2] = "']j-8Cp";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = "\t\t";
      stringArray0[4] = "']j-8Cp";
      stringArray0[5] = "']j-8Cp";
      stringArray0[6] = "']j-8Cp";
      stringArray0[7] = "']j-8Cp";
      stringArray0[8] = "']j-8Cp";
      Utility.methodTypeToSignature("']j-8Cp", stringArray0);
      boolean boolean0 = false;
      Utility.accessToString(226, false);
      try { 
        Utility.methodSignatureArgumentTypes("']j-8Cp", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ']j-8Cp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)49;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("M>!IWSto;$Mr#[2");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass((byte)25);
      constantArray0[1] = (Constant) constantClass0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1253), (-1253));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 89, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 11841. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = ", reference_index = ";
      Utility.compactClassName(", reference_index = ");
      String string1 = "? super ";
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "impdep2";
      Utility.searchOpcode("impdep2");
      int int0 = 157;
      Utility.accessToString(157, true);
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(157);
      constantArray0[0] = (Constant) constantString0;
      int int1 = 122;
      ConstantInteger constantInteger0 = new ConstantInteger(122);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Constant.readConstant((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "@n_dZ32P<(*oe;95";
      try { 
        Utility.typeOfSignature("@n_dZ32P<(*oe;95");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @n_dZ32P<(*oe;95
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureArgumentTypes("(I6In@ZmLN)PL CMz>n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6In@ZmLN)PL CMz>n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)97;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.fillup("boolean", (byte)8, true, 'A');
      Utility.compactClassName("$e3$be$aa$In$baa", false);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) null, (-1110));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.setBit((-28), 1084);
      Utility.replace("short", "Illegally nested brackets:", "org.apache.commons.io.filefilter.AbstractFileFilter");
      Utility.getSignature("V|W<%A");
      Utility.methodSignatureReturnType("Zn63iv~B");
      try { 
        Utility.methodSignatureArgumentTypes("SyntheticRepository could not load ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SyntheticRepository could not load 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (-1596));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.classOrInterface(1831);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("interface");
      Utility.isJavaIdentifierPart('0');
      Utility.classOrInterface(1831);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("r", "r", ")qaZ@0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.isSet(17, 233);
      String string0 = "c2K";
      Utility.searchOpcode("c2K");
      try { 
        Utility.methodSignatureReturnType("c2K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c2K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jsr");
      File file0 = MockFile.createTempFile("java.lang.null", "newarray", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append('`');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "java.lang.null";
      objectArray0[1] = (Object) "java.lang.null";
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) "newarray";
      objectArray0[4] = (Object) "jsr";
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) mockFile0;
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-76);
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)102;
      byte byte1 = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)22;
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(16384, 141);
      constantArray0[0] = (Constant) constantNameAndType0;
      String string0 = "invokeinterface";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "invokeinterface");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"invokeinterface\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (-1596));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("dsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("monitorenter", "monitorenter", " and got ");
      Utility.clearBit(1485, 1485);
      Utility.compactClassName("*.");
      Utility.clearBit((-453), 1217);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "anewarray";
      stringArray0[1] = " and got ";
      stringArray0[2] = "*.";
      stringArray0[3] = " and got ";
      stringArray0[4] = "new";
      stringArray0[5] = "monitorenter";
      Utility.methodTypeToSignature("new", stringArray0);
      try { 
        Utility.typeOfMethodSignature("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.compactClassName("java.lang.", true);
      Utility.classOrInterface(82);
      try { 
        Utility.methodSignatureArgumentTypes("(R=kd><NJO^.lg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R=kd><NJO^.lg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.convertString("-5w~3k0]}%");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "-Js#'C5+r";
      try { 
        Utility.methodSignatureReturnType("-Js#'C5+r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-Js#'C5+r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "new";
      try { 
        Utility.typeOfSignature("new");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.format(512, (-1649), false, 'x');
      assertEquals("512", string0);
      
      String string1 = Utility.accessToString(1503, true);
      assertEquals("public private protected static final volatile transient native abstract", string1);
      
      Utility.replace("if_icmpne", "A_`#](*", "if_icmpne");
      String string2 = Utility.fillup("a7;<K2nkJ:", 36, false, 'x');
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxxxxa7;<K2nkJ:", string2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.accessToString(1811);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "public private final native interface abstract";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"public private final native interface abstract\"", string1);
      
      String string2 = Utility.getSignature("\"public private final native interface abstract\"");
      Utility.fillup("`uw(M`Q/Dc1", 143, false, ']');
      String string3 = Utility.printArray(objectArray0, true);
      assertEquals("{public private final native interface abstract}", string3);
      
      String string4 = Utility.replace("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]`uw(M`Q/Dc1", "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]`uw(M`Q/Dc1", "L\"public;");
      assertTrue(string4.equals((Object)string2));
      
      String string5 = Utility.printArray(objectArray0, false);
      assertTrue(string5.equals((Object)string0));
      
      Utility.accessToString(169);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)3;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string6 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte)92, false);
      assertEquals("0:    if_icmpne\t\t#1628\n3:    nop\n4:    fconst_0\n5:    ior\n6:    imul\n7:    dconst_1\n8:    iconst_0\n", string6);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.getSignature("=");
      Utility.isJavaIdentifierPart('3');
      Utility.compactClassName("=", "=", true);
      Utility.methodSignatureReturnType("L=;");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("=", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.decode("/", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) "/";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "/";
      objectArray0[4] = (Object) "/";
      objectArray0[5] = (Object) null;
      Utility.printArray(objectArray0, true);
      String string0 = Utility.compactClassName("strictfp", "\"", false);
      Utility.accessToString(1877);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) (byte) (-58);
      objectArray1[1] = (Object) "/";
      Object object1 = new Object();
      objectArray1[2] = object1;
      objectArray1[3] = (Object) "/";
      objectArray1[4] = (Object) "c6 10 00";
      Object object2 = new Object();
      objectArray1[5] = object2;
      String string1 = Utility.printArray(objectArray1, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "\t\t";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t");
      try { 
        Utility.methodSignatureArgumentTypes("\t\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "(6IO{";
      boolean boolean0 = true;
      try { 
        Utility.decode("(6IO{", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.fillup("+d9m207QgDXv-j)", 1453, true, 'Z');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)60;
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$ab$c6$F$dc$b7$86$3c";
      stringArray0[1] = "Is&Vva1lOEQ$Cia^";
      stringArray0[2] = string0;
      stringArray0[3] = "Is&Vva1lOEQ$Cia^";
      stringArray0[4] = "$ab$c6$F$dc$b7$86$3c";
      stringArray0[5] = "$ab$c6$F$dc$b7$86$3c";
      stringArray0[6] = "Is&Vva1lOEQ$Cia^";
      stringArray0[7] = string0;
      String string1 = Utility.methodTypeToSignature("Is&Vva1lOEQ$Cia^", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.decode(".", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ".";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ".";
      objectArray0[3] = (Object) ".";
      objectArray0[4] = (Object) ".";
      objectArray0[5] = (Object) ".";
      objectArray0[6] = (Object) ".";
      objectArray0[7] = (Object) ".";
      objectArray0[8] = (Object) ".";
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode(".");
      assertEquals((short) (-1), short0);
      
      Utility.compactClassName(".", "{., java.lang.Object@7ee8d9a3, ., ., ., ., ., ., .}", false);
      String string1 = Utility.methodSignatureReturnType("C.`4KRzWkRrq|&HTeb", true);
      assertEquals("char", string1);
      
      String string2 = Utility.format(174, 13, false, 'E');
      assertEquals("EEEEEEEEEE174", string2);
      
      Utility.fillup("<illegal opcode>", (short) (-1), true, 'A');
      String string3 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string3);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jsr_w");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "L@?do";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L@?do");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L@?do
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)92;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("af 66 1c 5b b6 01 fb 5c", string1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.compactClassName("ifnull", "ifnull", true);
      Utility.setBit(2122, 2122);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-21);
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.fillup("if_icmpge", 16, true, 't');
      assertEquals("if_icmpgettttttt", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)9;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "(";
      Utility.compactClassName("(");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "boolean", "boolean", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)72;
      Utility.equals(byteArray0, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("invokeinterface");
      mockPrintWriter0.print((double) (byte)84);
      PrintWriter printWriter0 = mockPrintWriter0.format("invokeinterface", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("54 48", "Illegal type: ", ", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 54 48
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.compactClassName("null");
      try { 
        Utility.typeOfMethodSignature("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "@%zl~5X[T{rjA:s@";
      String string1 = "impdep1";
      Utility.replace("@%zl~5X[T{rjA:s@", "@%zl~5X[T{rjA:s@", "impdep1");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("impdep1", "impdep1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // impdep1
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.getSignature("");
      Utility.isJavaIdentifierPart('3');
      Utility.compactClassName("L;");
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L;", "L;", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "Kw7qca~V~Ed&";
      Utility.compactClassName("Kw7qca~V~Ed&", false);
      try { 
        Utility.typeOfSignature("Kw7qca~V~Ed&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kw7qca~V~Ed&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.accessToString((-3013), false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.classOrInterface(109);
      String string0 = "a/aMtO\\^w>H1uA\"@x";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("class", "a/aMtO^w>H1uA\"@x");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // a/aMtO^w>H1uA\"@x
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.compactClassName("lV{<S", "fstore_1", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-121);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.compactClassName("byte");
      Utility.isJavaIdentifierPart('C');
      try { 
        Utility.typeOfSignature("E=?qc6oEF)tA2w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E=?qc6oEF)tA2w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)36;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.isJavaIdentifierPart('<');
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q\"");
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)112;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte)112, (byte)5);
      Utility.compactClassName(",dcw^ 2OJv)XYO>.@Q", true);
      Utility.classOrInterface(88);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("q\"", ",dcw^ 2OJv)XYO>.@Q", ",dcw^ 2OJv)XYO>.@Q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: q\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("^=FI");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "^=FI";
      Utility.printArray(objectArray0, true, true);
      int int0 = 1910;
      Utility.accessToString(1910, true);
      Utility.methodSignatureReturnType("Bmrmq&&cn77r$-^Vt", true);
      Utility.signatureToString("Swp");
      Utility.accessToString(1910, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*e:t87Udy";
      stringArray0[1] = "*e:t87Udy";
      stringArray0[2] = "*e:t87Udy";
      stringArray0[3] = "*e:t87Udy";
      stringArray0[4] = "*e:t87Udy";
      stringArray0[5] = "*e:t87Udy";
      Utility.methodTypeToSignature("*e:t87Udy", stringArray0);
      boolean boolean0 = false;
      Utility.printArray((Object[]) stringArray0, false, false);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{Ju.g#");
      Utility.compactClassName("{Ju.g#", true);
      Utility.searchOpcode("{Ju.g#");
      String string0 = "_,";
      String string1 = "astore_3";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("_,", "_,", "astore_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.convertString("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "u]$I2~y)ylv7G";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("u]$I2~y)ylv7G", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("OAs2F.%p3ZN\fX", false);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantDouble0.clone();
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1978.0F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, 79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(1524);
      Utility.clearBit(1524, 1524);
      Utility.getSignature("iQ`elH4Cz\">]_j/k");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)9;
      byte byte0 = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)47;
      Utility.encode(byteArray0, true);
      Utility.accessToString(36);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" ", "Dont call getValueBoolean() on a non BOOLEAN ElementValue", "lstore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
