/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:04:24 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      CompressedVector compressedVector0 = CompressedVector.random(1, 1.0, (Random) mockRandom0);
      compressedVector0.swapElements(1, 1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector.zero(6);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector0.is(vectorPredicate0);
      String string0 = "";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer((-1246));
      Short short0 = new Short((short)454);
      hashMap0.put(integer0, short0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1, 1);
      compressedVector0.setAll(1);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(601, (-2006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2006.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-0.4746804896146286);
      CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        Vector.fromMatrixMarket("O.q|+=VxeeG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2972, 2972);
      boolean boolean0 = compressedVector0.nonZeroAt(2972);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2085, 2085);
      compressedVector0.swapElements(2085, 2085);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, (-2010), doubleArray0, intArray0);
      compressedVector0.toCSV();
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2010.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        CompressedVector.random(586, (double) 586, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        CompressedVector.random((-1147), (double) (-1147), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.iterator();
      int int0 = (-1793);
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-1793));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1793
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2010);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, (-2010), doubleArray0, intArray0);
      compressedVector0.toSparseVector();
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2010.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1606), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1606
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2154.226604718633;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      int int0 = 902;
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(902, 2154.226604718633);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '902' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.nonZeroIterator();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, 3088);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(425);
      compressedVector0.swapElements(9, 425);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-2);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 1;
      int[] intArray0 = new int[1];
      CompressedVector compressedVector0 = new CompressedVector(630, 1, doubleArray0, intArray0);
      compressedVector0.select(intArray0);
      compressedVector0.swapElements((-235), 630);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      // Undeclared exception!
      try { 
        CompressedVector.zero(49, 1163);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1163.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1, 1);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(13, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(2446);
      Long long0 = new Long(2446);
      hashMap0.put(integer0, long0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      int int0 = (-699);
      compressedVector0.swapElements((-611), (-699));
      compressedVector0.nonZeroAt((-611));
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((-699), (byte)25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -699
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.max();
      double double0 = new Double(0.0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 645932474;
      doubleArray0[1] = (double) 645932474;
      doubleArray0[2] = (double) 645932474;
      int[] intArray0 = new int[3];
      intArray0[0] = 645932474;
      intArray0[1] = 645932474;
      intArray0[2] = (-77);
      CompressedVector compressedVector0 = new CompressedVector(645932474, 645932474, doubleArray0, intArray0);
      // Undeclared exception!
      compressedVector0.sum();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(821);
      Double double0 = new Double((-3550.73));
      hashMap0.put(integer0, double0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2851);
      compressedVector0.swapElements(2851, 278);
      compressedVector0.getOrElse(278, 278);
      compressedVector0.nonZeroIterator();
      compressedVector0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(5);
      Double double0 = new Double((-1.0));
      hashMap1.put(integer0, double0);
      SparseVector.fromMap(hashMap1, 9);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("$^4w");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(418);
      compressedVector0.setAll(418);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)49;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 9);
      compressedVector0.setAll(9);
      compressedVector0.isZeroAt((byte)0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, 3, doubleArray0, intArray0);
      MockRandom mockRandom0 = new MockRandom();
      Vector.random(1, mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.is((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(34, 34);
      Object object0 = new Object();
      compressedVector0.equals(object0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)34).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(34, vectorFunction0);
      compressedVector0.swapElements(34, 1);
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((-563), 904);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -563
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[8] = (double) 8;
      CompressedVector compressedVector0 = CompressedVector.zero(8);
      compressedVector0.copyOfLength(7);
      compressedVector0.getOrElse(1, 7);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 19);
      Integer integer0 = new Integer(0);
      Byte byte0 = new Byte((byte)16);
      hashMap0.put(integer0, byte0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)19).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(19, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 34;
      CompressedVector compressedVector0 = new CompressedVector();
      Object object0 = new Object();
      compressedVector0.equals(object0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)34).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(34, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1800.08;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.add(1800.08);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      compressedVector1.swapElements((-1088), (-1088));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1800.08;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.add(1800.08);
      compressedVector0.toBinary();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      compressedVector0.toCSV(numberFormat0);
      compressedVector0.swapElements(8, 2828);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.43).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(31, vectorFunction0);
      compressedVector0.innerProduct(compressedVector0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Vector.fromCollection(linkedList0);
      compressedVector0.swapElements(6, 6);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[2] = 6;
      intArray0[0] = 7;
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 7;
      CompressedVector compressedVector0 = new CompressedVector(6, 7, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2787), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[2] = 6;
      intArray0[3] = 7;
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 7;
      CompressedVector compressedVector0 = new CompressedVector(6, 7, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2787), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[6];
      intArray0[0] = 4851;
      intArray0[1] = 34;
      intArray0[2] = 4851;
      intArray0[3] = 34;
      intArray0[4] = 4851;
      intArray0[5] = 34;
      CompressedVector compressedVector0 = new CompressedVector(34, 4851, doubleArray0, intArray0);
      compressedVector0.setAll(4851);
      compressedVector0.copyOfLength(1871);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(34, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 34;
      CompressedVector compressedVector0 = CompressedVector.zero(34, 34);
      Object object0 = new Object();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)34).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(34, vectorFunction0);
      Vector vector0 = compressedVector0.copyOfLength(34);
      vector0.innerProduct(compressedVector0);
      compressedVector0.swapElements(1829, 34);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      Vector vector0 = compressedVector0.copyOfLength(6);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3522.1), (-3522.1), (double)6, 1337.0, 4764.9049743).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      vector0.update(vectorFunction1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(273, 273);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      compressedVector0.toMatrixMarket(numberFormat0);
      compressedVector0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1102).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1102, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(356.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(273, vectorFunction1);
      compressedVector0.nonZeroIterator();
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(282, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(6);
      Object object0 = new Object();
      compressedVector0.equals(object0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.non(vectorPredicate0);
      compressedVector0.innerProduct(compressedVector0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = (double) 34;
      doubleArray0[3] = (double) 1570;
      int[] intArray0 = new int[6];
      intArray0[0] = 1570;
      intArray0[1] = 6;
      intArray0[2] = 2;
      intArray0[3] = 399;
      intArray0[4] = 34;
      intArray0[5] = 1261;
      CompressedVector compressedVector1 = new CompressedVector(399, 1570, doubleArray0, intArray0);
      compressedVector1.setAll(1.0);
      compressedVector0.copyOfLength(6);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.each(vectorProcedure0);
      compressedVector1.swapElements(10, 2);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap((Map<Integer, ? extends Number>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.euclideanNorm();
      compressedVector0.swapElements(9, 611);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6);
      Object object0 = new Object();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.43).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(31, vectorFunction0);
      compressedVector0.innerProduct(compressedVector0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(31, vectorFunction1);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("&Nfx7<fTQdt{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(273, 273);
      compressedVector0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1102).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1102, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1102, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[2] = 6;
      intArray0[3] = 7;
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 7;
      Integer integer0 = new Integer(7);
      Integer.getInteger("RIs#>d\"", integer0);
      CompressedVector compressedVector0 = new CompressedVector(7, 6, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(6, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(34, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(34, vectorFunction1);
      compressedVector0.nonZeroAt(0);
      int int0 = 32;
      compressedVector0.nonZeroAt(32);
      compressedVector0.swapElements(6, 34);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1327;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[0] = (double) 1327;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      Vector.random(1327, mockRandom0);
      compressedVector0.nonZeroIterator();
      compressedVector0.iterator();
      compressedVector0.shuffle();
      compressedVector0.manhattanNorm();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      // Undeclared exception!
      try { 
        CompressedVector.random(1327, (double) 1327, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(34, vectorFunction0);
      Vector vector0 = compressedVector0.copyOfLength(6);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      vector0.updateAt(34, vectorFunction1);
      compressedVector0.nonZeroAt(0);
      compressedVector0.swapElements(2, 34);
      vector0.iterator();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        CompressedVector.zero((int) (byte) (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -18
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(34, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(34, vectorFunction1);
      compressedVector0.nonZeroAt(0);
      compressedVector0.nonZeroAt(32);
      compressedVector0.swapElements(2, 34);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-18);
      compressedVector0.iterator();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        CompressedVector.zero((int) (byte) (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -18
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[6];
      intArray0[0] = 4851;
      intArray0[1] = 34;
      intArray0[2] = 4851;
      intArray0[3] = 34;
      intArray0[4] = 4851;
      intArray0[5] = 34;
      CompressedVector compressedVector0 = new CompressedVector(34, 4851, doubleArray0, intArray0);
      compressedVector0.setAll(4851);
      Vector vector0 = compressedVector0.copyOfLength(1871);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      vector0.swapElements(8, (-285));
      compressedVector0.nonZeroAt(2226);
  }
}
