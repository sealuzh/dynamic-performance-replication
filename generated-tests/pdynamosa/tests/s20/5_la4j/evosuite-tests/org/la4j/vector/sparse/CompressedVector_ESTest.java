/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 06:13:00 GMT 2019
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(293, (-4296.14329361), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 120;
      CompressedVector compressedVector0 = new CompressedVector(120);
      assertNotNull(compressedVector0);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long((-2431L));
      assertEquals((-2431L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(120);
      assertEquals(120L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      boolean boolean0 = linkedList0.add(long1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(long1));
      assertFalse(linkedList0.contains((-2431L)));
      assertEquals(1, linkedList0.size());
      assertFalse(long1.equals((Object)long0));
      
      Vector vector0 = Vector.fromCollection(linkedList0);
      assertNotNull(vector0);
      assertTrue(linkedList0.contains(long1));
      assertFalse(linkedList0.contains((-2431L)));
      assertEquals(1, linkedList0.size());
      assertEquals(1, vector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(120, (-384));
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.norm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -384
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37, 4);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(37, compressedVector0.length());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (double) 4;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorIterator vectorIterator0 = compressedVector1.nonZeroIterator();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(vectorIterator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      DenseVector denseVector0 = compressedVector1.toDenseVector();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(denseVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(6, denseVector0.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(37, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      CompressedVector compressedVector2 = CompressedVector.zero(37, 37);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertEquals(37, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      
      boolean boolean0 = compressedVector1.nonZeroAt(37);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector1.set(4, (-794.03235314));
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)Vector.zero(3046);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(3046, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      Spliterator<Double> spliterator0 = compressedVector0.spliterator();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(spliterator0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.shuffle();
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      
      boolean boolean0 = compressedVector0.nonZeroAt(4243);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("3z{})$dzl8Ry[vy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(3, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)3, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(compressedVector0, sparseVector0);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 16);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(16, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(713, 713);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '713' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = hashMap0.remove((Object) null, (Object) float0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 509);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(509);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      assertEquals(509, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      assertEquals(509, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Spliterator<Double> spliterator0 = compressedVector0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      assertEquals(509, compressedVector0.cardinality());
      
      boolean boolean1 = compressedVector0.nonZeroAt((-1412));
      assertFalse(boolean1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      assertEquals(509, compressedVector0.cardinality());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      double double0 = 0.0;
      compressedVector0.setAll(0.0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      int int0 = 0;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      
      CompressedVector compressedVector2 = CompressedVector.fromCollection(linkedList0);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector2.length());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector2.copyOfLength(4242);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotNull(compressedVector3);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector2.length());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(4242, compressedVector3.length());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int1 = (-694);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -694
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector1 = CompressedVector.random(98, 0.0, (Random) mockRandom0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(98, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector1.swapElements((-340), 90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(120);
      assertNotNull(compressedVector0);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.get(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)120, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 793);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(793, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      String string0 = compressedVector2.toCSV();
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(793, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotNull(compressedVector3);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      
      CompressedVector compressedVector4 = CompressedVector.fromCSV(string0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector4);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotNull(compressedVector4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(793, compressedVector2.length());
      assertEquals(0.0, compressedVector4.density(), 0.01);
      assertEquals(793, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertTrue(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      
      double double1 = compressedVector0.min();
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector4);
      assertEquals(0.0, double1, 0.01);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(293, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(293, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.getOrElse(16, 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(293, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.random(2612, 0.0, (Random) mockRandom0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(2612, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ",mKRv1";
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(",mKRv1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(211L);
      assertEquals(211L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = linkedList0.add(long0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(211L));
      assertEquals(1, linkedList0.size());
      
      BasicVector basicVector0 = (BasicVector)Vector.fromCollection(linkedList0);
      assertNotNull(basicVector0);
      assertTrue(linkedList0.contains(211L));
      assertEquals(1, linkedList0.size());
      assertEquals(1, basicVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(0, 0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.norm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2402), vectorFunction1);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1601));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1601
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector2 = compressedVector1.to(vectorFactory0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNull(compressedVector2);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(3, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      DenseVector denseVector0 = compressedVector1.toDenseVector();
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(denseVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(3, compressedVector1.length());
      assertEquals(3, denseVector0.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector1.swapElements(8, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap((Map<Integer, ? extends Number>) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(9, denseVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(9, compressedVector1.length());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector1.swapElements((-2586), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 4;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, denseVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.6666666666666666, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector2 = CompressedVector.zero(37, 4);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(37, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      boolean boolean0 = compressedVector0.equals((Vector) denseVector0, 4.0);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, denseVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      
      BasicVector basicVector0 = (BasicVector)compressedVector2.toDenseVector();
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(basicVector0, denseVector0);
      assertNotNull(basicVector0);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(37, compressedVector2.length());
      assertEquals(37, basicVector0.length());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(basicVector0.equals((Object)denseVector0));
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector1.copy();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotNull(compressedVector3);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.6666666666666666, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(4, compressedVector3.cardinality());
      assertEquals(6, compressedVector3.length());
      assertEquals(0.6666666666666666, compressedVector3.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      
      compressedVector2.eachNonZero(vectorProcedure0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(37, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      CompressedVector compressedVector4 = CompressedVector.zero(37, 3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotNull(compressedVector4);
      assertEquals(37, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(0.0, compressedVector4.density(), 0.01);
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector2));
      
      CompressedVector compressedVector5 = CompressedVector.zero(4);
      assertNotSame(compressedVector5, compressedVector0);
      assertNotSame(compressedVector5, compressedVector3);
      assertNotSame(compressedVector5, compressedVector2);
      assertNotSame(compressedVector5, compressedVector1);
      assertNotSame(compressedVector5, compressedVector4);
      assertNotNull(compressedVector5);
      assertEquals(0, compressedVector5.cardinality());
      assertEquals(0.0, compressedVector5.density(), 0.01);
      assertEquals(4, compressedVector5.length());
      assertFalse(compressedVector5.equals((Object)compressedVector0));
      assertFalse(compressedVector5.equals((Object)compressedVector3));
      assertFalse(compressedVector5.equals((Object)compressedVector2));
      assertFalse(compressedVector5.equals((Object)compressedVector1));
      assertFalse(compressedVector5.equals((Object)compressedVector4));
      
      Spliterator<Double> spliterator0 = compressedVector5.spliterator();
      assertNotSame(compressedVector5, compressedVector0);
      assertNotSame(compressedVector5, compressedVector3);
      assertNotSame(compressedVector5, compressedVector2);
      assertNotSame(compressedVector5, compressedVector1);
      assertNotSame(compressedVector5, compressedVector4);
      assertNotNull(spliterator0);
      assertEquals(0, compressedVector5.cardinality());
      assertEquals(0.0, compressedVector5.density(), 0.01);
      assertEquals(4, compressedVector5.length());
      assertFalse(compressedVector5.equals((Object)compressedVector0));
      assertFalse(compressedVector5.equals((Object)compressedVector3));
      assertFalse(compressedVector5.equals((Object)compressedVector2));
      assertFalse(compressedVector5.equals((Object)compressedVector1));
      assertFalse(compressedVector5.equals((Object)compressedVector4));
      
      double double0 = compressedVector5.getOrElse(3, 3);
      assertNotSame(compressedVector5, compressedVector0);
      assertNotSame(compressedVector5, compressedVector3);
      assertNotSame(compressedVector5, compressedVector2);
      assertNotSame(compressedVector5, compressedVector1);
      assertNotSame(compressedVector5, compressedVector4);
      assertEquals(3.0, double0, 0.01);
      assertEquals(0, compressedVector5.cardinality());
      assertEquals(0.0, compressedVector5.density(), 0.01);
      assertEquals(4, compressedVector5.length());
      assertFalse(compressedVector5.equals((Object)compressedVector0));
      assertFalse(compressedVector5.equals((Object)compressedVector3));
      assertFalse(compressedVector5.equals((Object)compressedVector2));
      assertFalse(compressedVector5.equals((Object)compressedVector1));
      assertFalse(compressedVector5.equals((Object)compressedVector4));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1300.0;
      doubleArray0[3] = (-539.92971857);
      doubleArray0[4] = (-744.6235);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 1347.7105358;
      doubleArray0[7] = 557.5;
      doubleArray0[8] = 3666.0501444007;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, 1300.0, (-539.92971857), (-744.6235), (-1.0), 1347.7105358, 557.5, 3666.0501444007}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.8888888888888888, compressedVector1.density(), 0.01);
      assertEquals(9, compressedVector1.length());
      assertEquals(8, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(denseVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, denseVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      compressedVector1.swapElements(8, (-4395));
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, 1300.0, (-539.92971857), (-744.6235), (-1.0), 1347.7105358, 557.5, 3666.0501444007}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.8888888888888888, compressedVector1.density(), 0.01);
      assertEquals(9, compressedVector1.length());
      assertEquals(8, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-572.505575);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1666.4078863325;
      doubleArray0[3] = 4631.5027556;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1751.3460688984);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2107.607830084;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-572.505575), 1.0, 1666.4078863325, 4631.5027556, 1.0, (-1751.3460688984), 0.0, 0.0, 2107.607830084}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.7777777777777778, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertArrayEquals(new double[] {(-572.505575), 1.0, 1666.4078863325, 4631.5027556, 1.0, (-1751.3460688984), 0.0, 0.0, 2107.607830084}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.7777777777777778, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(9, denseVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, compressedVector1.cardinality());
      assertEquals(9, compressedVector1.length());
      assertEquals(0.8888888888888888, compressedVector1.density(), 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector1.swapElements((-2586), 8);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, compressedVector1.cardinality());
      assertEquals(9, compressedVector1.length());
      assertEquals(0.8888888888888888, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37, 4);
      assertNotNull(compressedVector0);
      assertEquals(37, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      Integer integer0 = Integer.valueOf(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(37);
      assertEquals(37.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer1 = new Integer((-400));
      assertEquals((-400), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Double double1 = hashMap0.put(integer1, double0);
      assertNull(double1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 32;
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) (-1);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 3;
      intArray0[2] = (-1);
      intArray0[3] = 245;
      intArray0[4] = 3;
      CompressedVector compressedVector0 = new CompressedVector(3, (-1), doubleArray0, intArray0);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 3.0, 3.0, (-1.0), 3.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-1), 3, (-1), 245, 3}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals((-1), compressedVector0.cardinality());
      assertEquals((-0.3333333333333333), compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.toBinary();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 293;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(293, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(293, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1472.9134226718472, 0.0, 1220.995910828221).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(120);
      assertNotNull(compressedVector0);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.get(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)120, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap1, 0);
      assertNotSame(hashMap1, hashMap0);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0, compressedVector2.length());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      CompressedVector compressedVector3 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)120, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotNull(compressedVector3);
      assertEquals(9, byteArray0.length);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(120, compressedVector3.length());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      
      String string0 = compressedVector3.toCSV();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)120, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertEqualsstring0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      assertEquals(120, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(120, compressedVector3.length());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 991;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 977;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 0;
      CompressedVector compressedVector4 = new CompressedVector(977, 991, doubleArray0, (int[]) null);
      assertArrayEquals(new double[] {991.0, 0.0, 3.0, 3.0, 0.0, 977.0, 3.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector4);
      assertEquals(9, doubleArray0.length);
      assertEquals(991, compressedVector4.cardinality());
      assertEquals(1.0143295803480041, compressedVector4.density(), 0.01);
      assertEquals(977, compressedVector4.length());
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector4.blankOfLength((-1585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1585
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      compressedVector0.set(0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        compressedVector0.set(1435, (-1819.47187382611));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1435' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 32;
      CompressedVector compressedVector0 = CompressedVector.zero(32, 32);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      
      int int1 = 2;
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.add((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.foldNonZero(vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      SparseVector sparseVector0 = SparseVector.zero(8, 1293);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(8, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      
      double double1 = compressedVector0.sum();
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(double1, double0, 0.01);
      
      Vector vector0 = Vector.constant(0, 0.0);
      assertNotNull(vector0);
      assertEquals(0, vector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotSame(compressedVector0, sparseVector0);
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      
      VectorIterator vectorIterator1 = compressedVector0.nonZeroIterator();
      assertNotSame(compressedVector0, sparseVector0);
      assertNotNull(vectorIterator1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      
      double double2 = compressedVector0.min();
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(4116);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(4116, compressedVector1.length());
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte byte0 = (byte)23;
      Byte byte1 = new Byte((byte)23);
      assertEquals((byte)23, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int int0 = Byte.toUnsignedInt((byte)0);
      assertEquals(0, int0);
      
      int int1 = Byte.toUnsignedInt((byte)23);
      assertEquals(23, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = linkedList0.add(byte1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains((byte)23));
      assertFalse(linkedList0.contains((byte)0));
      assertEquals(1, linkedList0.size());
      assertTrue(byte1.equals((Object)byte0));
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertTrue(linkedList0.contains((byte)23));
      assertFalse(linkedList0.contains((byte)0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)66;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      double double0 = (-1653.0);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(290, (-1653.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '290' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1025.8253928801;
      doubleArray0[3] = 3843.6612;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), 1025.8253928801, 3843.6612, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(5, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector1.set((-747), (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-747' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2255);
      assertNotNull(compressedVector0);
      assertEquals(2255, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = CompressedVector.zero(721);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(721, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      double double0 = compressedVector0.getOrElse(721, (-500.1));
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals((-500.1), double0, 0.01);
      assertEquals(2255, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector2 = CompressedVector.fromCollection(linkedList0);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(126);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long((-2431L));
      assertEquals((-2431L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(126);
      assertEquals(126L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(126);
      assertEquals(126L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      boolean boolean0 = linkedList0.add(long2);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(long0));
      assertTrue(linkedList0.contains(long1));
      assertEquals(1, linkedList0.size());
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      boolean boolean1 = linkedList0.add(long1);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(long0));
      assertTrue(linkedList0.contains(long1));
      assertEquals(2, linkedList0.size());
      assertFalse(long1.equals((Object)long0));
      assertTrue(long1.equals((Object)long2));
      assertTrue(boolean1 == boolean0);
      
      Vector vector0 = Vector.fromCollection(linkedList0);
      assertNotNull(vector0);
      assertFalse(linkedList0.contains(long0));
      assertTrue(linkedList0.contains(long1));
      assertEquals(2, linkedList0.size());
      assertEquals(2, vector0.length());
      
      String string0 = compressedVector0.toCSV();
      assertEqualsstring0);
      assertNotNull(string0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 126;
      doubleArray0[2] = (double) (-2431L);
      compressedVector0.setAll((-2431.0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(126, compressedVector1.cardinality());
      assertEquals(126, compressedVector1.length());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(byteArray0);
      assertEquals(2025, byteArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertEquals(2025, byteArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(126, compressedVector2.cardinality());
      assertEquals(126, compressedVector2.length());
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector2.toColumnMatrix();
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(cCSMatrix0);
      assertEquals(2025, byteArray0.length);
      assertEquals(126, cCSMatrix0.cardinality());
      assertEquals(126, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals((-2431.0), cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(126, compressedVector2.cardinality());
      assertEquals(126, compressedVector2.length());
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(920.18151003).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(104, vectorFunction0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(126, compressedVector1.cardinality());
      assertEquals(126, compressedVector1.length());
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(0, 1666.4078863325, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 4;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(6, denseVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(0.6666666666666666, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector2 = CompressedVector.zero(37, 4);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertEquals(37, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      boolean boolean0 = compressedVector0.equals((Vector) denseVector0, 4.0);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(6, denseVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      
      boolean boolean1 = compressedVector0.nonZeroAt(3);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(Integer.MAX_VALUE, 3115.5411156099);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2147483647' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 4;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      CompressedVector compressedVector0 = new CompressedVector(0, 0, doubleArray0, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 4, 0, 0, 0, 0}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, intArray0.length);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1300.0;
      doubleArray0[3] = (-539.92971857);
      doubleArray0[4] = (-744.6235);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 1362.5126496020382;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(48, 0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(48, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      boolean boolean0 = compressedVector1.nonZeroAt(2133);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(boolean0);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(48, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector1.set(3, (-1.0));
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(48, compressedVector1.length());
      assertEquals(0.020833333333333332, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(37, vectorFunction0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      org.evosuite.runtime.Random.setNextRandom((-1510));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector1.swapElements((-1510), 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(1226);
      assertEquals(1226, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer1 = new Integer(1226);
      assertEquals(1226, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      long long0 = Byte.toUnsignedLong((byte)76);
      assertEquals(76L, long0);
      
      Byte byte1 = hashMap0.put(integer1, byte0);
      assertNull(byte1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(integer1.equals((Object)integer0));
      
      Byte byte2 = hashMap0.put(integer0, byte0);
      assertEquals((byte)76, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(integer0.equals((Object)integer1));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1226);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.4910744496727522;
      doubleArray0[5] = (double) 4;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 4.0, 4.0, (-1.0), 0.4910744496727522, 4.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertArrayEquals(new double[] {0.0, 4.0, 4.0, (-1.0), 0.4910744496727522, 4.0}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertArrayEquals(new double[] {0.0, 4.0, 4.0, (-1.0), 0.4910744496727522, 4.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, denseVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertArrayEquals(new double[] {0.0, 4.0, 4.0, (-1.0), 0.4910744496727522, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.set(3, 0.4910744496727522);
      assertArrayEquals(new double[] {0.0, 4.0, 4.0, (-1.0), 0.4910744496727522, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-2044);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-3399), (-2044));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3399
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(120);
      assertNotNull(compressedVector0);
      assertEquals(120, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(120, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.get(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(120, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(120, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)120, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(120, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      String string0 = compressedVector2.toCSV();
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.blankOfLength(3);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotNull(compressedVector3);
      assertEquals(120, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(3, compressedVector3.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("/ y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37, 4);
      assertNotNull(compressedVector0);
      assertEquals(37, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 4;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorIterator vectorIterator0 = compressedVector1.nonZeroIterator();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(vectorIterator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      DenseVector denseVector0 = compressedVector1.toDenseVector();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(denseVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(6, denseVector0.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copy();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(0.8333333333333334, compressedVector2.density(), 0.01);
      assertEquals(6, compressedVector2.length());
      assertEquals(5, compressedVector2.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals(37, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      CompressedVector compressedVector3 = CompressedVector.zero(37, 6);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotNull(compressedVector3);
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(37, compressedVector3.length());
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      
      boolean boolean0 = compressedVector3.nonZeroAt(4);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertFalse(boolean0);
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(37, compressedVector3.length());
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      
      compressedVector1.set(3, 0.0);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector1, compressedVector2);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.6666666666666666, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector3));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = hashMap0.remove((Object) null, (Object) float0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 509);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(509, compressedVector0.length());
      
      compressedVector0.setAll(509);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.cardinality());
      assertEquals(509, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.cardinality());
      assertEquals(509, compressedVector0.length());
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.cardinality());
      assertEquals(509, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.zero(509);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(509, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(126);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long((-2431L));
      assertEquals((-2431L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(126);
      assertEquals(126L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(126);
      assertEquals(126L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      boolean boolean0 = linkedList0.add(long2);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(long0));
      assertTrue(linkedList0.contains(long1));
      assertEquals(1, linkedList0.size());
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      boolean boolean1 = linkedList0.add(long1);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(long0));
      assertTrue(linkedList0.contains(long1));
      assertEquals(2, linkedList0.size());
      assertFalse(long1.equals((Object)long0));
      assertTrue(long1.equals((Object)long2));
      assertTrue(boolean1 == boolean0);
      
      String string0 = compressedVector0.toCSV();
      assertEqualsstring0);
      assertNotNull(string0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(126, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 126;
      doubleArray0[2] = (double) (-2431L);
      compressedVector0.setAll((-2431.0));
      assertEquals(126, compressedVector0.length());
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(126, compressedVector0.length());
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(126, compressedVector1.length());
      assertEquals(126, compressedVector1.cardinality());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(byteArray0);
      assertEquals(2025, byteArray0.length);
      assertEquals(126, compressedVector0.length());
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertEquals(2025, byteArray0.length);
      assertEquals(126, compressedVector0.length());
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector2.cardinality());
      assertEquals(126, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector2.toColumnMatrix();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(cCSMatrix0);
      assertEquals(2025, byteArray0.length);
      assertEquals(126, compressedVector0.length());
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector2.cardinality());
      assertEquals(126, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(126, cCSMatrix0.cardinality());
      assertEquals((-2431.0), cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(126, cCSMatrix0.rows());
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(126, compressedVector0.length());
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2424.6607)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(104, vectorFunction0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertEquals(126, compressedVector0.length());
      assertEquals(126, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(126, compressedVector1.length());
      assertEquals(126, compressedVector1.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37, 4);
      assertNotNull(compressedVector0);
      assertEquals(37, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 4;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorIterator vectorIterator0 = compressedVector1.nonZeroIterator();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(vectorIterator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      DenseVector denseVector0 = compressedVector1.toDenseVector();
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(denseVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(6, denseVector0.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      org.evosuite.runtime.Random.setNextRandom(37);
      compressedVector1.swapElements((-2087), (-1432));
      assertArrayEquals(new double[] {37.0, 4.0, 4.0, (-1.0), 0.0, 4.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1952), vectorFunction0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-1952), (-1952));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1952' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 8);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1373.466247);
      doubleArray0[1] = (double) 8;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-1373.466247), 8.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(2, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector1.setAll((-1373.466247));
      assertArrayEquals(new double[] {(-1373.466247), 8.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(2, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      boolean boolean0 = compressedVector0.nonZeroAt(8);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 509);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(509);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.cardinality());
      assertEquals(509, compressedVector0.length());
      
      SparseVector sparseVector0 = SparseVector.zero(509, (-871));
      assertNotSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      assertEquals(509, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      
      CompressedVector compressedVector1 = CompressedVector.zero(509, 9);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(509, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector1.equals((Object)sparseVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.subtract((Vector) compressedVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector2, sparseVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.cardinality());
      assertEquals(509, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(509, compressedVector1.length());
      assertEquals(509, compressedVector2.cardinality());
      assertEquals(509, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector2.equals((Object)sparseVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector1.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-1653));
      assertFalse(boolean0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 8);
      assertNotNull(compressedVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(8);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(0, 2282);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2282.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(120);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(120, compressedVector0.length());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long((-2431L));
      assertEquals((-2431L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(120);
      assertEquals(120L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      boolean boolean0 = linkedList0.add(long1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(long1));
      assertFalse(linkedList0.contains((-2431L)));
      assertEquals(1, linkedList0.size());
      assertFalse(long1.equals((Object)long0));
      
      Vector vector0 = Vector.fromCollection(linkedList0);
      assertNotNull(vector0);
      assertTrue(linkedList0.contains(long1));
      assertFalse(linkedList0.contains((-2431L)));
      assertEquals(1, linkedList0.size());
      assertEquals(1, vector0.length());
      
      String string0 = compressedVector0.toCSV();
      assertEqualsstring0);
      assertNotNull(string0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(120, compressedVector0.length());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 120;
      doubleArray0[2] = (double) (-2431L);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 120;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 4532.351679326109;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 120.0, (-2431.0), 0.0, 120.0, (-1.0), 4532.351679326109}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.8571428571428571, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorIterator vectorIterator0 = compressedVector1.nonZeroIterator();
      assertArrayEquals(new double[] {(-1.0), 120.0, (-2431.0), 0.0, 120.0, (-1.0), 4532.351679326109}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(vectorIterator0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.8571428571428571, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean1 = compressedVector1.non(vectorPredicate0);
      assertArrayEquals(new double[] {(-1.0), 120.0, (-2431.0), 0.0, 120.0, (-1.0), 4532.351679326109}, doubleArray0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.8571428571428571, compressedVector1.density(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(denseVector0, vector0);
      assertNotNull(denseVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(120, compressedVector0.length());
      assertEquals(120, denseVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(denseVector0.equals((Object)vector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copy();
      assertArrayEquals(new double[] {(-1.0), 120.0, (-2431.0), 0.0, 120.0, (-1.0), 4532.351679326109}, doubleArray0, 0.01);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector2);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.8571428571428571, compressedVector2.density(), 0.01);
      assertEquals(6, compressedVector2.cardinality());
      assertEquals(7, compressedVector2.length());
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.8571428571428571, compressedVector1.density(), 0.01);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(120, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      CompressedVector compressedVector3 = CompressedVector.zero(120, 120);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotNull(compressedVector3);
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(120, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      
      Spliterator<Double> spliterator0 = compressedVector3.spliterator();
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotNull(spliterator0);
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(120, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      
      boolean boolean2 = compressedVector0.nonZeroAt(13);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean2);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(120, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 509);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      
      compressedVector0.setAll(509);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      assertEquals(509, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      
      CompressedVector compressedVector1 = new CompressedVector(846);
      assertNotNull(compressedVector1);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(846, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector1.setAll(509);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(846, compressedVector1.cardinality());
      assertEquals(846, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      boolean boolean0 = compressedVector0.nonZeroAt(509);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(509, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5253, 5253);
      assertNotNull(compressedVector0);
      assertEquals(5253, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.set(1708, (-1.0));
      assertEquals(5253, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.9036740909956216E-4, compressedVector0.density(), 0.01);
      
      Long long0 = new Long(5253);
      assertEquals(5253L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(5253);
      assertFalse(boolean0);
      assertEquals(5253, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.9036740909956216E-4, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5253, (double)5253, (double)5253, (double)5253, (double)5253).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(5253, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5253, compressedVector0.cardinality());
      
      compressedVector0.setAll(5253);
      assertEquals(5253, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5253, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(5253, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5253, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(5253, compressedVector1.length());
      assertEquals(5253, compressedVector1.cardinality());
      
      // Undeclared exception!
      compressedVector0.equals((Vector) compressedVector1, (-1.0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(0, (-1136.11));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(16, (-1275));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1275.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      compressedVector0.eachNonZero((VectorProcedure) null);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.zero(0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector1.setAll(1.0);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(9, denseVector0.length());
      
      compressedVector0.swapElements((-2413), 1);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-1733), 56.42, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        CompressedVector.random(8, (double) 8, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      String string0 = "J-CKr;P#&R";
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends Byte>) linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      byte byte0 = (byte)3;
      Byte byte1 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int int0 = Byte.compare((byte) (-71), (byte)0);
      assertEquals((-71), int0);
      
      linkedList0.addFirst(byte1);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.contains((byte) (-71)));
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(byte1.equals((Object)byte0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)3;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = Integer.getInteger((String) null, 4192);
      assertEquals(4192, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double((-1351.0));
      assertEquals((-1351.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertNull(double1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      int int0 = 8;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 5.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(281, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(120);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-2431L));
      linkedList0.add(long0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2425.5868106895473, (double)120, 2425.5868106895473, (double)(-2431L), 1007.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.shuffle();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-3578), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3578
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 120;
      CompressedVector compressedVector0 = new CompressedVector(120);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-2431L));
      Long long1 = new Long(120);
      linkedList0.add(long1);
      Vector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2425.5868106895473, (double)120, 2425.5868106895473, (double)(-2431L), 1007.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements(120, (-384));
      compressedVector0.norm();
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -384
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      Vector vector0 = compressedVector0.sliceLeft(0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, compressedVector1.cardinality());
      assertTrue(compressedVector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(120);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-2431L));
      Long long1 = new Long(120);
      linkedList0.add(long1);
      Vector.fromCollection(linkedList0);
      String string0 = compressedVector0.toCSV();
      assertEqualsstring0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 120;
      doubleArray0[1] = (double) 120;
      doubleArray0[2] = (double) (-2431L);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 120;
      doubleArray0[5] = (double) 120;
      doubleArray0[6] = 4532.351679326109;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.nonZeroIterator();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt((-13), vectorFunction0);
      assertEquals(6, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(120);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.get(0);
      compressedVector0.copyOfLength(2);
      compressedVector0.toBinary();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 0);
      compressedVector1.toCSV();
      compressedVector0.blankOfLength(3);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("/ y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5253, 5253);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5253);
      int int0 = 5;
      CompressedVector compressedVector1 = (CompressedVector)columnMajorSparseMatrix0.getColumn(5);
      compressedVector1.add((double) 5);
      compressedVector1.nonZeroAt(0);
      CompressedVector.zero(1909);
      // Undeclared exception!
      compressedVector0.equals((Vector) compressedVector1, 100.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 2;
      CompressedVector compressedVector0 = CompressedVector.zero(2);
      compressedVector0.toSparseVector();
      compressedVector0.spliterator();
      org.evosuite.runtime.Random.setNextRandom(2);
      compressedVector0.nonZeroIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.set(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("W0%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(32.0);
      linkedList0.add(double0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(25, byteArray0.length);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      DenseVector denseVector0 = DenseVector.zero(1518);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(denseVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toColumnMatrix();
      Long long0 = new Long(211L);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements(0, 0);
      compressedVector0.norm();
      compressedVector0.copyOfLength(0);
      int int0 = (-2402);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2107.607830084).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2402), vectorFunction1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(3614);
      CompressedVector compressedVector0 = CompressedVector.zero(3614);
      compressedVector0.setAll(3614);
      // Undeclared exception!
      compressedVector0.shuffle();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 32;
      CompressedVector compressedVector0 = new CompressedVector(32);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      String string0 = "@YDUKLWL,\\)|R_pV";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("@YDUKLWL,)|R_pV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37, 4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 4;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[5] = (double) 4;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.nonZeroIterator();
      compressedVector1.toDenseVector();
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copy();
      assertEquals(0.6666666666666666, compressedVector2.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      CompressedVector compressedVector3 = CompressedVector.zero(37, 4);
      assertEquals(37, compressedVector3.length());
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.each(vectorProcedure1);
      assertTrue(compressedVector1.equals((Object)compressedVector2));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = Integer.valueOf(0);
      Double double0 = new Double(0);
      hashMap0.put(integer0, double0);
      CompressedVector.fromMap(hashMap0, 32);
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(120);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-2431L));
      linkedList0.add(long0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2425.5868106895473, (double)120, 2425.5868106895473, (double)(-2431L), 1007.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements(120, (-401));
      compressedVector0.norm();
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2402), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll(0.0);
      int int0 = 0;
      Vector vector0 = compressedVector0.copyOfLength(0);
      compressedVector0.toBinary();
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      compressedVector0.apply((VectorVectorOperation<Double>) ooPlaceInnerProduct0, vector0);
      DecimalFormat decimalFormat0 = new DecimalFormat("C*\"");
      compressedVector0.toCSV((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("C*\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(276);
      compressedVector0.setAll(276);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-251.502), 1939.069297051908, (-251.502), 329.0, 1939.069297051908).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((-776), 276);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -776
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(120);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-2431L));
      Long long1 = new Long(120);
      Long long2 = new Long(120);
      linkedList0.add(long2);
      linkedList0.add(long1);
      Vector.fromCollection(linkedList0);
      compressedVector0.toCSV();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 120;
      doubleArray0[2] = (double) (-2431L);
      compressedVector0.setAll((-2431.0));
      compressedVector0.shuffle();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      compressedVector1.toColumnMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      // Undeclared exception!
      try { 
        compressedVector1.swapElements(32, 2257);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      double double0 = Double.POSITIVE_INFINITY;
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      double double1 = 1666.4078863325;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        CompressedVector.random(0, 1666.4078863325, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      int int0 = 32;
      compressedVector0.copyOfLength(32);
      compressedVector0.toBinary();
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      int int1 = 109;
      MockRandom mockRandom0 = new MockRandom(109);
      // Undeclared exception!
      try { 
        CompressedVector.random(109, 2135.97, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll(0.0);
      assertEquals(0, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37, 4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 4;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.nonZeroIterator();
      compressedVector1.toDenseVector();
      Vector vector0 = compressedVector1.copy();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      CompressedVector compressedVector2 = CompressedVector.zero(37, 4);
      assertEquals(37, compressedVector2.length());
      
      boolean boolean0 = compressedVector1.nonZeroAt(3);
      assertTrue(boolean0);
      assertEquals(5, compressedVector1.cardinality());
      assertTrue(compressedVector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(551);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(551);
      Long long1 = new Long(0L);
      Long long2 = new Long(551);
      linkedList0.add(long2);
      linkedList0.add(long0);
      Vector.fromCollection(linkedList0);
      compressedVector0.toCSV();
      compressedVector0.setAll(551);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      compressedVector0.toBinary();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(105, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.eachNonZero(vectorProcedure0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector1.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      MockRandom mockRandom0 = new MockRandom(1L);
      CompressedVector compressedVector1 = CompressedVector.random(3162, (double) 1L, (Random) mockRandom0);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<Vector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(126);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-2431L));
      Long long1 = new Long(126);
      Long long2 = new Long(126);
      linkedList0.add(long2);
      linkedList0.add(long1);
      Vector.fromCollection(linkedList0);
      compressedVector0.toCSV();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 126;
      doubleArray0[2] = (double) (-2431L);
      compressedVector0.setAll((-2431.0));
      Vector vector0 = compressedVector0.shuffle();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      compressedVector1.toColumnMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      vector0.updateAt(104, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(126, compressedVector0.cardinality());
  }
}
