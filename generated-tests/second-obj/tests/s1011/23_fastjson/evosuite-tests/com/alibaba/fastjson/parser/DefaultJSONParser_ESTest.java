/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:48:18 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Time;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unterminated");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()C", parserConfig0);
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("`9^K|jjE", parserConfig0, (-1035));
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(yhgO}g7y'}f;R|!g");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (, pos 1, json : (yhgO}g7y'}f;R|!g
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("e\"V", parserConfig0);
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : e\"V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("O");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : O
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, (-1154), parserConfig0, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5e[;C3N2n");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()C", parserConfig0, 305);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ()C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bsc1Cx/_<'cw");
      defaultJSONParser0.getDateFomartPattern();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : bsc1Cx/_<'cw
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|dk(yd(/u");
      defaultJSONParser0.getResolveTaskList();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Kab`'");
      defaultJSONParser0.getContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'V';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";L(", parserConfig0, 39);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.handleResovleTask("");
      defaultJSONParser0.checkMapResolve((Map) null, "");
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      TreeSet<Boolean> treeSet1 = new TreeSet<Boolean>((SortedSet<Boolean>) treeSet0);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      defaultJSONParser0.parseKey();
      defaultJSONParser0.checkListResolve(treeSet0);
      Hashtable<ImageCapabilities, SequenceInputStream> hashtable0 = new Hashtable<ImageCapabilities, SequenceInputStream>();
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5e[;C3N2n");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 2, json : 5e[;C3N2n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5e[;C3N2n");
      JSONScanner jSONScanner1 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner1);
      JavaBeanDeserializer javaBeanDeserializer0 = defaultJSONParser0.parseObject((Type) null);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect error, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(15, 15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ], actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d#.oRwfxiF]r|f{^r");
      ArrayList<Date> arrayList0 = new ArrayList<Date>();
      defaultJSONParser0.getInput();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("java.lang.String@0000000003");
      defaultJSONParser0.setContext((Object) choiceFormat0, (Object) "java.lang.String@0000000003");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d#.oRwfxiF]r|f{^r");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|dk(yd(/u");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.JSONAwareSerializer");
      defaultJSONParser0.getInput();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getContext();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, (Object) null, (Object) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "ggO7k|7");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()C", parserConfig0);
      defaultJSONParser0.getContext();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("E`{es>", parserConfig0, 5);
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F_@SH@*R>K<|", parserConfig0);
      Class<RenderingHints> class0 = RenderingHints.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupport type class java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("];N~7aBNi+@");
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      linkedHashSet0.add((Field) null);
      defaultJSONParser0.getSymbolTable();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ], pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gZf8u+\"", parserConfig0);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      ParserConfig.getFieldFromCache("fastjson.parser.deny", hashtable0);
      defaultJSONParser0.getSymbolTable();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      parserConfig0.clearDeserializers();
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("java.util.Collections$EmptyMap", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.accept(1, 2455);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("java.util.Collections$EmptyMap", hashMap0);
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      ArrayDeque<SimpleTimeZone> arrayDeque0 = new ArrayDeque<SimpleTimeZone>();
      Boolean boolean0 = new Boolean("java.util.Collections$EmptyMap");
      Spliterator<SimpleTimeZone> spliterator0 = arrayDeque0.spliterator();
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(spliterator0, jSONScanner0, parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.handleResovleTask("");
      defaultJSONParser0.setResolveStatus(46);
      defaultJSONParser0.checkMapResolve((Map) null, "");
      defaultJSONParser0.setDateFormat("wkH=7e!\"tu&");
      assertEquals(46, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("[cd~ Mcgc.5M");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("`9^K|jjE", parserConfig0, (-1035));
      List<ExtraTypeProvider> list0 = new Vector<ExtraTypeProvider>();
      Class<NumberFormat> class0 = NumberFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      parserConfig0.checkAutoType("=M?fk!<~[Cc?Z/)?", class0, (-2965));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\t", parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getConfig();
      defaultJSONParser0.close();
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0);
      Object object0 = defaultJSONParser0.resolveReference("88t;VX6");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ", parserConfig0, (byte)14);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      imageCapabilities0.clone();
      Locale locale0 = Locale.KOREA;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("java.util.Collections$EmptyMap", hashMap0);
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      ArrayDeque<SimpleTimeZone> arrayDeque0 = new ArrayDeque<SimpleTimeZone>();
      arrayDeque0.spliterator();
      Class<Float> class0 = Float.TYPE;
      HashMap<String, Field> hashMap2 = new HashMap<String, Field>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("csQ", parserConfig0, 849);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()C", parserConfig0, 305);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(83);
      linkedHashSet0.add((Integer) 2);
      linkedHashSet0.add((Integer) 1);
      defaultJSONParser0.getInput();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "()C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual (, pos 0, fieldName ()C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      JSONScanner jSONScanner0 = new JSONScanner("|dk(yd(/u", (-1028));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(bufferCapabilities0, jSONScanner0, parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.popContext();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d#.oRwfxiF]r|f{^r");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("om.alibaba.fastjson.serializer.JSONAwareSerializer");
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.config(feature0, true);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9", parserConfig0, 90);
      Object object0 = defaultJSONParser0.parse();
      assertEquals(9, object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("java.util.Collections$EmptyMap", hashMap0);
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      ArrayDeque<SimpleTimeZone> arrayDeque0 = new ArrayDeque<SimpleTimeZone>();
      Boolean boolean0 = Boolean.TRUE;
      Spliterator<SimpleTimeZone> spliterator0 = arrayDeque0.spliterator();
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(spliterator0, jSONScanner0, parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getResolveTaskList();
      Class<JSONScanner> class1 = JSONScanner.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 2, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      defaultJSONParser0.checkListResolve(linkedHashSet0);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      defaultJSONParser0.isEnabled(feature0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("EvO(W", parserConfig0);
      String string0 = "bsc1Cx/_<'cw";
      Feature feature0 = Feature.SupportAutoType;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      classLoader0.getParent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5e[;C3N2n", parserConfig0, 1628);
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()C", parserConfig0, 305);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      defaultJSONParser0.checkMapResolve((Map) null, (Object) null);
      Hashtable<RenderingHints.Key, Point> hashtable0 = new Hashtable<RenderingHints.Key, Point>();
      Time time0 = new Time(1142L);
      Properties properties0 = new Properties();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(time0, defaultJSONParser0.lexer, parserConfig0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R!-s:\u0002xk2};v0]Du");
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : ()C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}aXN+bmccN Up");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.fieldTypeResolver = null;
      defaultJSONParser0.getInput();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.handleResovleTask((Object) null);
      defaultJSONParser0.getExtraTypeProviders();
      Feature feature0 = Feature.AllowComment;
      defaultJSONParser0.config(feature0, true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual }, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0, 4096);
      defaultJSONParser0.setConfig(parserConfig0);
      Object object0 = defaultJSONParser0.getObject("O[O78]!Sc;y%[b");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      String string0 = "[cd~ Mcgc.5M";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[cd~ Mcgc.5M", 3427);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setDateFormat("-*BXFC+m&xV7");
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      RenderingHints renderingHints1 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      Type[] typeArray0 = new Type[8];
      Class<Byte> class0 = Byte.TYPE;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[5]);
      Time time0 = new Time(997L);
      Object object0 = new Object();
      Long long0 = new Long(997L);
      Long.toUnsignedString((long) 3427);
      defaultJSONParser0.setContext((Object) jSONReaderScanner0, (Object) long0);
      // Undeclared exception!
      try { 
        Time.valueOf("-*BXFC+m&xV7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d#.oRwfxiF]r|f{^r");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<ExtraTypeProvider> linkedList0 = new LinkedList<ExtraTypeProvider>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      defaultJSONParser0.getFieldTypeResolver();
      linkedList0.toArray();
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.checkListResolve(linkedList0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) jSONType0, (Object) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      Boolean boolean0 = Boolean.TRUE;
      defaultJSONParser0.setContext(parseContext0, (Object) numberFormat0, (Object) boolean0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "];N~7aBNi+@";
      JSONScanner jSONScanner0 = new JSONScanner("];N~7aBNi+@");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ];N~7aBNi+@
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9", parserConfig0);
      defaultJSONParser0.parse((Object) "9");
      parserConfig0.addDeny("`W}`.:mL2");
      defaultJSONParser0.getDateFormat();
      String string0 = File.pathSeparator;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) defaultJSONParser0);
      predicate0.test(":");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      JSONArray jSONArray0 = new JSONArray();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      stack0.removeElement(imageCapabilities0);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Type[] typeArray0 = new Type[0];
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(".q1/543v12{AQd@t]", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .q1/543v12{AQd@t]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[cd~ Mcgc.5M");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[cd~ Mcgc.5M");
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[1] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0[1], (Collection) linkedHashSet0, (Object) typeArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "java.util.Collections$EmptyMap";
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSON((Object) jSONScanner0);
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      JSONScanner jSONScanner0 = new JSONScanner("+", 3482);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.close();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[cd~ Mcgc.5M", 1179);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setDateFormat("[cd~ Mcgc.5M");
      TreeMap<RenderingHints.Key, StringCharacterIterator> treeMap0 = new TreeMap<RenderingHints.Key, StringCharacterIterator>();
      RenderingHints renderingHints0 = new RenderingHints(treeMap0);
      RenderingHints renderingHints1 = new RenderingHints(treeMap0);
      Class<Byte> class0 = Byte.TYPE;
      Time time0 = new Time((-8109300701639721088L));
      Object object0 = new Object();
      Long long0 = new Long((-8109300701639721088L));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultJSONParser0.setContext((Object) "java.util.Collections$EmptyMap", (Object) jSONReaderScanner0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1367, "[cd~ Mcgc.5M");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) linkedHashSet0, (Object) mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONScanner jSONScanner0 = new JSONScanner("[cd~e9 Mcgc.5M");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [cd~e9 Mcgc.5M
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      TimeZone.getTimeZone("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 2, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      Feature feature0 = Feature.OrderedField;
      Feature[] featureArray0 = new Feature[10];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ", parserConfig0, (byte)14);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      EvoSuiteFile evoSuiteFile0 = null;
      Locale locale0 = Locale.KOREA;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class com.alibaba.fastjson.parser.Feature, property null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()C", parserConfig0);
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.checkMapResolve((Map) null, (Object) null);
      IdentityHashMap<RenderingHints.Key, JavaBeanDeserializer> identityHashMap0 = new IdentityHashMap<RenderingHints.Key, JavaBeanDeserializer>();
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject("NaN", featureArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      TreeSet<Rectangle> treeSet0 = new TreeSet<Rectangle>();
      defaultJSONParser1.checkListResolve(treeSet0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory1.classLoader);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setDefaultClassLoader(aSMDeserializerFactory0.classLoader);
      MockDate mockDate0 = new MockDate((-710), 0, 21, 470, 0, 1787);
      TimeZone.getDefault();
      BigDecimal bigDecimal0 = new BigDecimal(1787);
      MockDate mockDate1 = new MockDate();
      BigDecimal bigDecimal1 = new BigDecimal((long) 1787);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 12, json : unterminated
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{O:bh2;SM{");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : {O:bh2;SM{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated", parserConfig0, (-1977));
      FieldTypeResolver fieldTypeResolver0 = null;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("unterminated", class0, 4902);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. unterminated
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()C", parserConfig0, 305);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      TreeMap<Feature, GridBagConstraints> treeMap0 = new TreeMap<Feature, GridBagConstraints>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      defaultJSONParser0.checkMapResolve((Map) null, imageCapabilities0);
      Hashtable<RenderingHints.Key, Point> hashtable0 = new Hashtable<RenderingHints.Key, Point>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Set");
      JSONArray jSONArray0 = new JSONArray(14);
      Class<Rectangle> class0 = Rectangle.class;
      List<Rectangle> list0 = jSONArray0.toJavaList(class0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Type) null, (Collection) list0, (Object) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : Set
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParserConfig parserConfig0 = new ParserConfig();
      MockDate mockDate0 = new MockDate(0, 0, (-2771), 2, 2);
      TimeZone timeZone0 = TimeZone.getDefault();
      BigDecimal bigDecimal0 = new BigDecimal((-2771));
      MockDate mockDate1 = new MockDate();
      BigDecimal bigDecimal1 = new BigDecimal((-3L));
      defaultJSONParser0.setContext((Object) timeZone0, (Object) timeZone0);
      defaultJSONParser0.getObject("");
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[cd~ Mcgc.5M");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[4] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("java.util.Collections$EmptyMap", hashMap0);
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      ArrayDeque<SimpleTimeZone> arrayDeque0 = new ArrayDeque<SimpleTimeZone>();
      Boolean boolean0 = new Boolean("java.util.Collections$EmptyMap");
      arrayDeque0.spliterator();
      arrayDeque0.pollFirst();
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z2M|uy", parserConfig0, (-145));
      defaultJSONParser0.getDateFomartPattern();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Line2D.Double line2D_Double1 = new Line2D.Double(0.0, 2, 1, 0);
      line2D_Double0.setLine((Line2D) line2D_Double1);
      Short short0 = new Short((short)26);
      defaultJSONParser0.checkMapResolve(hashMap0, point2D_Float0);
      Class<Double> class1 = Double.TYPE;
      Class<Float> class2 = Float.TYPE;
      Float float0 = new Float(0.0);
      Feature feature0 = Feature.DisableFieldSmartMatch;
      defaultJSONParser0.isEnabled(feature0);
      defaultJSONParser0.setResolveStatus(102);
      defaultJSONParser0.getContext();
      Short short1 = new Short((short)25);
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) ", ");
      assertEquals(102, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8?uK1[5XO87", parserConfig0);
      parserConfig0.getDeserializer((Type) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", linkedHashMap0);
      ParserConfig.getFieldFromCache("fastjson.parser.deny", linkedHashMap0);
      Class<Boolean> class0 = Boolean.class;
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class1, class1, class1, (Field) null, 2, 0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 844);
      parserConfig0.setAsmEnable(false);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser1.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5e[;C3N2n");
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.resolveReference("5e[;C3N2n");
      JSONScanner jSONScanner0 = new JSONScanner("5e[;C3N2n");
      defaultJSONParser0.setDateFormat("5e[;C3N2n");
      defaultJSONParser0.getInput();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getDateFomartPattern();
      Class<RenderingHints> class0 = RenderingHints.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.String@0000000004";
      stringArray0[1] = "java.lang.String@0000000004";
      stringArray0[1] = "java.lang.String@0000000004";
      stringArray0[4] = "5e[;C3N2n";
      stringArray0[5] = "java.lang.String@0000000004";
      stringArray0[6] = stringArray0[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("N3mhUF");
      defaultJSONParser0.accept(3);
      // Undeclared exception!
      try { 
        defaultJSONParser1.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      String string0 = "[3d~Mcgc.5M";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[3d~Mcgc.5M");
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[4];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0[1], (Collection) linkedHashSet0, (Object) typeArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [3d~Mcgc.5M
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bsc1Cx/_<'cw");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory((ClassLoader) null);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      defaultJSONParser0.setConfig(parserConfig0);
      LinkedList<ExtraProcessor> linkedList0 = new LinkedList<ExtraProcessor>();
      ExtraProcessor extraProcessor0 = mock(ExtraProcessor.class, new ViolatedAssumptionAnswer());
      linkedList0.add(extraProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()C", parserConfig0, 320);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      TreeMap<Feature, GridBagConstraints> treeMap0 = new TreeMap<Feature, GridBagConstraints>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      defaultJSONParser0.checkMapResolve((Map) null, imageCapabilities0);
      Hashtable<RenderingHints.Key, Point> hashtable0 = new Hashtable<RenderingHints.Key, Point>();
      Type type0 = null;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        JSON.parseArray("Set");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      ParserConfig.global = parserConfig0;
      JSONArray jSONArray0 = new JSONArray();
      Polygon polygon0 = new Polygon();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{,Ih2;sb{");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      JSONArray jSONArray0 = new JSONArray();
      Polygon polygon0 = new Polygon();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = new Object();
      JSONScanner jSONScanner0 = new JSONScanner(", actual ", 3089);
      jSONArray0.add((Object) ", actual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      String string0 = "[3d~Mcgc.5M";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[3d~Mcgc.5M");
      Class<Byte> class0 = Byte.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[3d~Mcgc.5M");
      Type[] typeArray0 = new Type[4];
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setResolveStatus(178);
      Stack<SimpleTimeZone> stack0 = new Stack<SimpleTimeZone>();
      defaultJSONParser0.handleResovleTask(linkedHashSet0);
      Map<Float, ImageCapabilities> map0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("^xr;c. Fm!12|P$EX", parserConfig0);
      defaultJSONParser1.checkMapResolve((Map) null, parserConfig0);
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      TreeSet<Boolean> treeSet1 = new TreeSet<Boolean>((SortedSet<Boolean>) treeSet0);
      Boolean.valueOf("Sa>I<_8c)]IQZ8!");
      Boolean boolean0 = new Boolean("fastjson.parser.autoTypeAccept");
      LinkedHashSet<Field> linkedHashSet1 = new LinkedHashSet<Field>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [3d~Mcgc.5M
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
