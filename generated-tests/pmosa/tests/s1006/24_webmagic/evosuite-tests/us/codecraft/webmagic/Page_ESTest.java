/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:21:24 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.PlainText;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.Selectable;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Page page0 = new Page();
      boolean boolean0 = true;
      page0.setSkip(true);
      String string0 = "";
      Page page1 = page0.setRawText("");
      Request request0 = new Request();
      Request request1 = request0.setCharset("");
      Request request2 = request1.addHeader("_cycle_tried_times", "");
      page1.addTargetRequest(request2);
      int int0 = (-421);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("_cycle_tried_times", (-421));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page page0 = new Page();
      page0.getBytes();
      Page page1 = page0.setRawText(", targetRequests=");
      Page page2 = page1.setRawText(", targetRequests=");
      page2.toString();
      page2.getHeaders();
      page1.setHeaders((Map<String, List<String>>) null);
      page0.setHtml((Html) null);
      // Undeclared exception!
      try { 
        page0.addTargetRequest("M");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Page page0 = new Page();
      String string0 = "<";
      Page page1 = Page.fail();
      page0.putField("<", "<");
      String string1 = "s! 3";
      Page page2 = page0.setRawText("s! 3");
      page2.setDownloadSuccess(true);
      page1.putField("<", page2);
      page0.setRawText("<");
      PlainText.create("s! 3");
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("s! 3");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      page0.getRequest();
      page0.setRequest((Request) null);
      // Undeclared exception!
      try { 
        page1.addTargetRequest("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Page page0 = new Page();
      page0.setCharset("");
      Page page1 = page0.setRawText("");
      Request request0 = new Request();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      Request request1 = request0.setExtras(hashMap0);
      request1.setBinaryContent(false);
      Request request2 = request1.setMethod("text/xml");
      Request request3 = request2.setPriority((-1L));
      request2.putExtra("_cycle_tried_times", "");
      Request request4 = request3.addHeader("_cycle_tried_times", "");
      Object object0 = new Object();
      request3.putExtra("", object0);
      request4.setMethod("_cycle_tried_times");
      request1.setMethod("_cycle_tried_times");
      request4.setMethod("");
      page1.setRequest(request4);
      page1.getResultItems();
      page0.getRequest();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setRawText("5n>>)2,zq,9vz[9w/n");
      Page page2 = page1.setSkip(false);
      page2.setStatusCode((-261));
      Request request0 = new Request();
      request0.setPriority(0L);
      page2.addTargetRequest(request0);
      page0.getHeaders();
      page2.setHeaders((Map<String, List<String>>) null);
      page2.isDownloadSuccess();
      page2.setCharset(", html=");
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      Page page2 = page1.setRawText(", url=");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-103);
      page0.setBytes(byteArray0);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-65);
      page2.setBytes(byteArray0);
      page1.setStatusCode((byte) (-103));
      Request request0 = new Request();
      Request request1 = request0.putExtra("", page2);
      Request request2 = request1.setUrl("_cycle_tried_times");
      Request request3 = request2.setMethod("_cycle_tried_times");
      Request request4 = request3.addCookie("", "_cycle_tried_times");
      page1.addTargetRequest(request4);
      assertEquals((-103), page2.getStatusCode());
      assertEquals((-103), page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Page page0 = new Page();
      page0.getCharset();
      Page page1 = page0.setSkip(false);
      Json json0 = page1.getJson();
      assertEquals(200, page1.getStatusCode());
      assertNotNull(json0);
      assertTrue(page1.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        page0.addTargetRequest("4#T'`");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      page1.getStatusCode();
      page0.setSkip(false);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      page0.putField("", list0);
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      page1.getCharset();
      assertEquals(200, page1.getStatusCode());
      assertFalse(page1.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Page page0 = new Page();
      page0.getRawText();
      // Undeclared exception!
      try { 
        page0.addTargetRequest((String) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0, 0L);
      page0.getUrl();
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = Page.fail();
      Request request0 = new Request("}?jpQ6fO,d'+yQ4xB3");
      Request request1 = request0.addHeader("}?jpQ6fO,d'+yQ4xB3", "}?jpQ6fO,d'+yQ4xB3");
      Request request2 = request1.setPriority((-1583L));
      Request request3 = request2.setMethod("WEB\"n~=}Ba[M]m");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page1.addTargetRequests((List<String>) linkedList0, (-1583L));
      Request request4 = request3.addCookie("WEB\"n~=}Ba[M]m", "");
      page1.setRequest(request4);
      // Undeclared exception!
      try { 
        page0.addTargetRequest("20jw/6XbA9,!o");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Page page0 = new Page();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      page0.setHeaders(hashMap0);
      page0.getUrl();
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Page page0 = Page.fail();
      Request request0 = new Request();
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      Request request2 = request1.setMethod("_cycle_tried_times");
      Request request3 = request2.setUrl("");
      Request request4 = request3.addHeader("_cycle_tried_times", "");
      page0.setRequest(request4);
      page0.getJson();
      Json json0 = page0.getJson();
      assertNotNull(json0);
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
  }
}
