/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:03:18 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.impl.store.access.btree.BTree;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainerSupport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.engine.SessionRemote;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbcDriver;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
      // Undeclared exception!
      try { 
        DBUtil.queryLong("$ysyBj`", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBUtil.available("INSTR", "NestedRawUpdateUserTransaction", "INSTR", "NestedRawUpdateUserTransaction");
      DBUtil.assertAllDbResourcesClosed(false);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("Fn:-y8k_t", false, true, false, false, "W_2k", true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'Fn:-y8k_t.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      DBUtil.existsEnvironment("2AOXdCtn:|Xu");
      // Undeclared exception!
      try { 
        DBUtil.connect("l-anHa!03AN<0nH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'l-anHa!03AN<0nH.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
      long long0 = Long.MAX_VALUE;
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = BTree.ROOTPAGEID;
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      DBUtil.close((Connection) null);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "t(_[(Wk#Ws${<P4.w+", false, 4, 3, (-1837));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "3x2b0f";
      DBUtil.available("IFEXISTS", "IFEXISTS", "IFEXISTS", "3x2b0f");
      DBUtil.checkReadOnly("3x2b0f", false);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      // Undeclared exception!
      try { 
        jdbcDataSource0.getConnection("IFEXISTS", "constraint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value  for parameter \"url\" [90008-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      DBUtil.resetMonitors();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBUtil.getOpenPreparedStatementCount();
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      dBForeignKeyConstraint0.toString();
      DBTable dBTable0 = defaultDBTable0.getProvider(0);
      dBForeignKeyConstraint0.setTable(dBTable0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.closeResultSetAndStatement(simpleResultSet0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBForeignKeyConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBUtil.resetMonitors();
      DBUtil.available("'CACHE'", "'CACHE'", "7(~a=/B1A", "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" FE=> StartupPacket(");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("|Y]");
      dBSchema0.getTriggers();
      DBUtil.dependencyOrderedTables(dBSchema0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      JdbcDataSource jdbcDataSource2 = new JdbcDataSource();
      assertEquals(33, jdbcDataSource2.getTraceId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "escape";
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      String string1 = "";
      // Undeclared exception!
      try { 
        DBUtil.countRows("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<DBCatalog> class0 = DBCatalog.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("#T9Cx>./FK+Wl", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "42S22";
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("42S22", "42S22", "42XA6", "42S22", "42XA6", "42S22");
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting 42S22 failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.format(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n=========================\n");
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "'>`^:]", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: '>`^:]
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUtil.assertAllDbResourcesClosed(true);
      long long0 = BTree.ROOTPAGEID;
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      System.setCurrentTimeMillis(0L);
      DBUtil.executeUpdate("", (Connection) null);
      try { 
        DBUtil.getMetaData((Connection) null, "", "", true, false, true, false, "Error closing connection", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getPassword();
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("", "\u0001\uFFFF\u0001\u0001\u0003\uFFFF\u0001\u0006\u0001\u0007\u0001\b\u0011\uFFFF\u0001L\u0001\uFFFF\u0001Q\u0001R\u0002\uFFFF\u0001]\u0001\uFFFF\u0001_\u0001\uFFFF\u0001a\u0001b\u0001n\u0001o\u0001q\u0001r\u0001s7\uFFFF\u0001S\u0001W\u0001V\u0001U\u0001T\u0001p\u0001^\u0001`\u001D\uFFFF\u0001&\u0004\uFFFF\u0001N\u0001\u001A\u0005\uFFFF\u0001[\u0001X\u0018\uFFFF\u0001:\u001F\uFFFF\u0001Y\b\uFFFF\u0001\u000E\u0011\uFFFF\u0001\u0017\u000F\uFFFF\u00019\u0003\uFFFF\u0001A\u0001O\u0003\uFFFF\u0001P\u0001\uFFFF\u0001\u000B\t\uFFFF\u0001h\u0003\uFFFF\u0001/\u0004\uFFFF\u0001 \u0004\uFFFF\u0001Z\u0002\uFFFF\u0001\n\u0001\uFFFF\u0001g\u0012\uFFFF\u0001\u001D\u0007\uFFFF\u0001?\u0001i\u0004\uFFFF\u0001(\u0001)\u0001.\r\uFFFF\u00014\u0001\uFFFF\u0001;\u0001F\u0003\uFFFF\u0001\u0005\u0003\uFFFF\u0001\f\u0013\uFFFF\u0001=\u0006\uFFFF\u0001c\u0001'\u0006\uFFFF\u0001,\u0005\uFFFF\u0001>\u0001B\u0002\uFFFF\u0001\u0002\u0002\uFFFF\u0001\u001B\u0001\uFFFF\u0001K\u0001\uFFFF\u0001\u0003\u0004\uFFFF\u0001\t\u0004\uFFFF\u0001d\u0003\uFFFF\u0001k\u000F\uFFFF\u0001\u0016\u0003\uFFFF\u0001\u001C\u0005\uFFFF\u0001-\u0001\uFFFF\u0001E\u0003\uFFFF\u0001J\u0001@\u0002\uFFFF\u0001M\u0003\uFFFF\u00015\u0003\uFFFF\u0001\u0001\uFFFF\u0001\u0011\u0001\u0012\u0003\uFFFF\u0001l\u0001\uFFFF\u0001\u001F\b\uFFFF\u0001\u0019\u0001m\u0001\u001E\u0002\uFFFF\u00011\u0001\uFFFF\u0001C\u0001\uFFFF\u0001\u0015\f\uFFFF\u0001\u0013\u0001\uFFFF\u0001\u0014\u0001\uFFFF\u0001\u0018\u0005\uFFFF\u0001I\u0001e\u0001\uFFFF\u0001\u0004\u0001\uFFFF\u0001j\u00012\u0002\uFFFF\u0001f\u0005\uFFFF\u0001%\u0001H\u0003\uFFFF\u00018\u0003\uFFFF\u0001\r\u0001\u0010\u00013\u00016\u0003\uFFFF\u0001<\u0001+\u0001\"\u00017\u0001!\u0001D\u0001\uFFFF\u0001G\u0001$\u0001\uFFFF\u0001#\u0001\uFFFF\u0001\u000F\u0001\uFFFF\u0001*\u00010", "xlv3r4~*I0", "\u0001\uFFFF\u0001\u0001\u0003\uFFFF\u0001\u0006\u0001\u0007\u0001\b\u0011\uFFFF\u0001L\u0001\uFFFF\u0001Q\u0001R\u0002\uFFFF\u0001]\u0001\uFFFF\u0001_\u0001\uFFFF\u0001a\u0001b\u0001n\u0001o\u0001q\u0001r\u0001s7\uFFFF\u0001S\u0001W\u0001V\u0001U\u0001T\u0001p\u0001^\u0001`\u001D\uFFFF\u0001&\u0004\uFFFF\u0001N\u0001\u001A\u0005\uFFFF\u0001[\u0001X\u0018\uFFFF\u0001:\u001F\uFFFF\u0001Y\b\uFFFF\u0001\u000E\u0011\uFFFF\u0001\u0017\u000F\uFFFF\u00019\u0003\uFFFF\u0001A\u0001O\u0003\uFFFF\u0001P\u0001\uFFFF\u0001\u000B\t\uFFFF\u0001h\u0003\uFFFF\u0001/\u0004\uFFFF\u0001 \u0004\uFFFF\u0001Z\u0002\uFFFF\u0001\n\u0001\uFFFF\u0001g\u0012\uFFFF\u0001\u001D\u0007\uFFFF\u0001?\u0001i\u0004\uFFFF\u0001(\u0001)\u0001.\r\uFFFF\u00014\u0001\uFFFF\u0001;\u0001F\u0003\uFFFF\u0001\u0005\u0003\uFFFF\u0001\f\u0013\uFFFF\u0001=\u0006\uFFFF\u0001c\u0001'\u0006\uFFFF\u0001,\u0005\uFFFF\u0001>\u0001B\u0002\uFFFF\u0001\u0002\u0002\uFFFF\u0001\u001B\u0001\uFFFF\u0001K\u0001\uFFFF\u0001\u0003\u0004\uFFFF\u0001\t\u0004\uFFFF\u0001d\u0003\uFFFF\u0001k\u000F\uFFFF\u0001\u0016\u0003\uFFFF\u0001\u001C\u0005\uFFFF\u0001-\u0001\uFFFF\u0001E\u0003\uFFFF\u0001J\u0001@\u0002\uFFFF\u0001M\u0003\uFFFF\u00015\u0003\uFFFF\u0001\u0001\uFFFF\u0001\u0011\u0001\u0012\u0003\uFFFF\u0001l\u0001\uFFFF\u0001\u001F\b\uFFFF\u0001\u0019\u0001m\u0001\u001E\u0002\uFFFF\u00011\u0001\uFFFF\u0001C\u0001\uFFFF\u0001\u0015\f\uFFFF\u0001\u0013\u0001\uFFFF\u0001\u0014\u0001\uFFFF\u0001\u0018\u0005\uFFFF\u0001I\u0001e\u0001\uFFFF\u0001\u0004\u0001\uFFFF\u0001j\u00012\u0002\uFFFF\u0001f\u0005\uFFFF\u0001%\u0001H\u0003\uFFFF\u00018\u0003\uFFFF\u0001\r\u0001\u0010\u00013\u00016\u0003\uFFFF\u0001<\u0001+\u0001\"\u00017\u0001!\u0001D\u0001\uFFFF\u0001G\u0001$\u0001\uFFFF\u0001#\u0001\uFFFF\u0001\u000F\u0001\uFFFF\u0001*\u00010", "", "#T9Cx>./FK+Wl");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBUtil.escape("");
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("sl]Ha g(Jy", "", "$ITF4SU7JKyAT7<RE", " got ", "hashKeyColumns[", "");
      JDBCConnectData jDBCConnectData1 = new JDBCConnectData("sl]Ha g(Jy", "", "hashKeyColumns[", "[e6!;~}=SPp>Zc", "", "$ITF4SU7JKyAT7<RE");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/databene/' found.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Connecting the database failed silently - probably due to wrong driver (");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      boolean boolean0 = true;
      try { 
        DBUtil.getMetaData("' found", true, true, false, false, "", true, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("INSTR");
      List<DBTable> list0 = new GenericDescriptorList();
      DBUtil.assertAllDbResourcesClosed(false);
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      System.setCurrentTimeMillis(11);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("INSTR", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBUtil.assertAllDbResourcesClosed(false);
      SessionRemote sessionRemote0 = new SessionRemote();
      SessionRemote sessionRemote1 = new SessionRemote();
      sessionRemote1.readSessionState();
      sessionRemote0.getLobConnection();
      System.setCurrentTimeMillis(13);
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("rY]w8KnKa", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/databene/' found.env.properties");
      String string0 = "Connecting the database failed silently - probably due to wrong driver (";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Connecting the database failed silently - probably due to wrong driver (");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      boolean boolean0 = true;
      try { 
        DBUtil.getMetaData("' found", true, true, true, false, "", false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBSchema dBSchema0 = new DBSchema("INSTR");
      dBSchema0.getTables(true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("INSTR", dBSchema0);
      Connection connection0 = null;
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "INSTR";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" zpLK41-MjFgc", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      DBUtil.assertAllDbResourcesClosed(false);
      String string0 = "Not on the insert row.";
      // Undeclared exception!
      try { 
        DBUtil.query("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }
}
