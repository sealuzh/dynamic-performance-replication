/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:24:13 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      TypeUtils.isPath(class0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.text.MockDateFormat@2ef15a16
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("h\"Gg@0h]?lexy,4?D|5", (ClassLoader) aSMClassLoader0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C,L6+");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTimeoutException: C,L6+
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("java.lang.Class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils.isGenericParamType(class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("(CLjava/lang/String;F)");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("double");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(choiceFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.ChoiceFormat@0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      TypeUtils.loadClass("NonStringKeyAsString");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultJSONParser0.setContext((Object) null, (Object) mockDateFormat0);
      NumberFormatException numberFormatException0 = new NumberFormatException("NonStringKeyAsString");
      // Undeclared exception!
      try { 
        optionalCodec0.deserialze(defaultJSONParser0, (Type) null, (Object) numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Ljava.awt.Point
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.loadClass("kotlin.ranges.ClosedFloatRange");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      linkedHashMap0.remove((Object) null, (Object) "kotlin.ranges.ClosedFloatRange");
      linkedHashMap0.remove((Object) list0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedHashMap0.merge("kotlin.ranges.ClosedFloatRange", (String) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.isPath(class0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(560);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, concurrentHashMap0, true, propertyNamingStrategy0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.toLocale("2 Pwm!{,");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.toLocale("2 Pwm!{,");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.isProxy(class0);
      Class<Object> class1 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("U5x", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "U5x", sQLRecoverableException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap", "S};2/MLoEnhu", (-38));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("U5x", "U5x", "699l1=6Ub?),Rt\"rS=", (-1622));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("U5x", "S};2/MLoEnhu", "fyIUpK&%z2+;{", (-38));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("k&^vN#lJ_ktyxlnRx", "k&^vN#lJ_ktyxlnRx", "fyIUpK&%z2+;{", 826);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("OrderedField", "OrderedField", " Hwy8]6M[", 31);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("com.alibaba.fastjson.serializer.DoubleSerializer", "com.alibaba.fastjson.serializer.DoubleSerializer", "L", 25);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("k&^vN#lJ_ktyxlnRx", "1fGD(=VG(5tc=S\"&", "U5x", 13);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      SecurityException securityException0 = new SecurityException("", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.SecurityException: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<InternalError> class0 = InternalError.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@99
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getParserFeatures(class0);
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedHashSet<PropertyProcessableDeserializer> linkedHashSet0 = new LinkedHashSet<PropertyProcessableDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-39);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.doubleValue();
      TypeUtils.castToDate(bigInteger0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = ';';
      charArray0[2] = ' ';
      charArray0[3] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) noSuchFieldException0, (Object) noSuchFieldException0);
      Type type0 = parseContext0.type;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.isGenericParamType((Type) null);
      Class<Insets> class0 = Insets.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getCollectionItemType((Type) null);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.isHibernateInitialized(class0);
      InstantiationException instantiationException0 = new InstantiationException("<#aC T");
      TypeUtils.isHibernateInitialized(class0);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "4Rm)x6`%\"@/us";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("4Rm)x6`%\"@/us", classLoader0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.decapitalize("4Rm)x6`%\"@/us");
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.global;
      Long long0 = new Long((-461L));
      TypeUtils.fnv1a_64_lower("=fH^");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      SQLDataException sQLDataException0 = new SQLDataException("ugC\"d8*kwK WQ(BE<", negativeArraySizeException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ugC\"d8*kwK WQ(BE<", "ugC\"d8*kwK WQ(BE<", 125, sQLDataException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLTransientConnectionException: ugC\"d8*kwK WQ(BE<
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      weakHashMap0.getOrDefault(propertyNamingStrategy0, "_GUrVP}Sg}Vb");
      weakHashMap0.put("_GUrVP}Sg}Vb", "@|k&");
      weakHashMap0.get(propertyNamingStrategy0);
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      TypeUtils.loadClass(")Pl1?l{7)ma");
      TypeUtils.clearClassMapping();
      Class<MockDate> class1 = MockDate.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) ")Pl1?l{7)ma", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.clearClassMapping();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      boolean boolean0 = TypeUtils.isHibernateInitialized(stackTraceElementDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oracle.sql.DATE");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", (ClassLoader) aSMClassLoader0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.toLocale("ha");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.ClassLoader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<?> class1 = TypeUtils.loadClass("Ljava/lang/Object;Ljava/lang/Object;)");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setPackageAssertionStatus("Lorg.springframework.util.LinkedMultiValueMap", false);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", (ClassLoader) aSMClassLoader0);
      TypeUtils.castToInt((Object) null);
      classLoader0.setPackageAssertionStatus("!>,&?=LKAZ0*", true);
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0, false);
      Class<Integer> class0 = Integer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.castToBoolean((Object) null);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("Lorg.springframework.util.LinkedMultiValueMap", (Class<?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<StackTraceElement> class1 = StackTraceElement.class;
      TypeUtils.isProxy(class1);
      Dimension dimension0 = new Dimension((-2915), (-2915));
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.Dimension[width=-2915,height=-2915]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = new Locale("Ljava.util.concurrent.ConcurrentSkipListMap");
      MessageFormat messageFormat0 = new MessageFormat("Ljava.util.concurrent.ConcurrentSkipListMap", locale0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      Class<?> class1 = javaBeanSerializer0.getType();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) messageFormat0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : it
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.toLocale("Yexi[>+Im");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Yexi[>+Im");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Yexi[>+Im
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "boolean";
      TypeUtils.decapitalize("boolean");
      TypeUtils.fnv1a_64_lower("boolean");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      long long0 = TypeUtils.fnv1a_64("HfD&e");
      assertEquals(201518106519839252L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      Class<StringCharacterIterator> class1 = StringCharacterIterator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.isProxy(class0);
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      TypeUtils.isProxy(class0);
      String string0 = "o";
      TypeUtils.loadClass("o");
      Class<MockDate> class1 = MockDate.class;
      TypeUtils.isProxy(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("error parse null", "o", sQLTransactionRollbackException0);
      sQLTimeoutException0.spliterator();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLTimeoutException: error parse null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      TypeUtils.isKotlin(class1);
      String string0 = "b%F";
      TypeUtils.loadClass("b%F");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("-+9i&Vg2z2X(T?~zj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : -+9i&Vg2z2X(T?~zj
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      String string0 = "hcVWVcm:O";
      TypeUtils.fnv1a_64_lower("hcVWVcm:O");
      String string1 = "j";
      int int0 = (-1954);
      StackTraceElement stackTraceElement0 = new StackTraceElement("hcVWVcm:O", "j", "Ljava.util.concurrent.ConcurrentSkipListSet", (-1954));
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : hcVWVcm:O.j(Ljava.util.concurrent.ConcurrentSkipListSet)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      TypeUtils.toLocale("#M7l[}.O");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap1 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<LinkageError> class0 = LinkageError.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      Class<Object> class1 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = null;
      try {
        javaBeanSerializer0 = new JavaBeanSerializer(class1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.keySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      TypeUtils.fnv1a_64("#K{|Y?yLVZQJ?-x;");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      String string0 = "\\cM5a)M,S2";
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("cM5a)M,S2", parserConfig0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("unsupported array put operation. ");
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "oQ=E]hxr&bS12T/", fieldArray0);
      defaultJSONParser0.setContext((Object) mockIllegalArgumentException0, (Object) null);
      NumberFormatException numberFormatException0 = new NumberFormatException("cM5a)M,S2");
      OptionalCodec optionalCodec0 = new OptionalCodec();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("unsupported array put operation. ");
      // Undeclared exception!
      try { 
        optionalCodec0.deserialze(defaultJSONParser0, (Type) class0, (Object) illegalAccessError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      Class<MockDate> class1 = MockDate.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JavaObjectDeserializer> class2 = JavaObjectDeserializer.class;
      parserConfig0.createJavaBeanDeserializer(class2, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addDeny("java.");
      boolean boolean0 = true;
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 8);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class5;
      Class<SQLFeatureNotSupportedException> class6 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class6;
      Class<SQLFeatureNotSupportedException> class7 = SQLFeatureNotSupportedException.class;
      classArray0[6] = class7;
      Class<SQLFeatureNotSupportedException> class8 = SQLFeatureNotSupportedException.class;
      classArray0[7] = class8;
      // Undeclared exception!
      try { 
        parserConfig0.initJavaBeanDeserializers(classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm deserializer error, java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      DataTruncation dataTruncation0 = new DataTruncation(2517, false, false, 749, 102);
      dataTruncation0.getIndex();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.DataTruncation: Data truncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("gethashCode");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.isKotlin(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport", (-5121), noSuchFieldException0);
      Hashtable<UUID, Float> hashtable0 = new Hashtable<UUID, Float>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type[] typeArray0 = new Type[3];
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      TypeUtils.getClass(type0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SecurityException securityException0 = new SecurityException(sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation0 = new DataTruncation(180, true, false, 180, 180, securityException0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@625dc6e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Type[] typeArray0 = new Type[3];
      Class<Double> class0 = Double.TYPE;
      typeArray0[0] = (Type) class0;
      TypeUtils.getClassFromMapping("WJY,P");
      typeArray0[1] = (Type) null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Float> class1 = Float.TYPE;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@855e9c70
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TypeUtils.isHibernateInitialized("java.lang.Class");
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isKotlin(class0);
      Constructor<ChronoLocalDate>[] constructorArray0 = (Constructor<ChronoLocalDate>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<NoSuchMethodException> arrayList0 = new ArrayList<NoSuchMethodException>();
      Class<Character> class0 = Character.class;
      TypeUtils.isKotlin(class0);
      String string0 = "Bi_";
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getClass((Type) class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.isProxy(class0);
      Class<Calendar> class1 = Calendar.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.util.Calendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      Locale.getISOCountries();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      TypeUtils.isKotlin(class0);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("~b$E", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("bXu\u0002FO)Nxd*C", classLoader0);
      Class<AtomicLong> class0 = AtomicLong.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      AtomicLong atomicLong0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(atomicLong0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getCollectionItemClass(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      TypeUtils.isProxy(class1);
      Class<LinkageError> class2 = LinkageError.class;
      LinkageError linkageError0 = TypeUtils.castToJavaBean((Object) null, class2);
      assertNull(linkageError0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.isKotlin(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addDeny("4zZKd?Q=xX&1vxSFW");
      parserConfig0.getDeserializer((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      boolean boolean0 = TypeUtils.isNumber("toS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("java.lang.Class");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Class\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.isKotlin(class0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader1);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeUtils.toLocale("Superclass");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<JavaBeanDeserializer> class2 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class2, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      typeArray0[0] = (Type) null;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      Class<?> class1 = TypeUtils.loadClass("[double", (ClassLoader) null, true);
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[8], typeArray0[6]);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      InstantiationError instantiationError0 = new InstantiationError();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      mockNullPointerException0.getCause();
      // Undeclared exception!
      try { 
        instantiationError0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(identityHashMap0);
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("yyyy-MM-dd HH:mm:ss", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setAutoTypeSupport(false);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      TypeUtils.isGenericParamType(class0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class1, (ParserConfig) null);
      Class<?> class2 = TypeUtils.getRawClass(class0);
      assertFalse(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Rt,$hm");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "Message");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("Rt,$hm", classLoader0);
      TypeUtils.getCollectionItemType((Type) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.isKotlin(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize((String) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [S", class1.toString());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<StackTraceElement> class1 = StackTraceElement.class;
      Class<SQLDataException> class2 = SQLDataException.class;
      TypeUtils.isPath(class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      TypeUtils.isProxy(class0);
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      Class<SQLException> class2 = SQLException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("SUPPRESSED_SENTINEL", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("SUPPRESSED_SENTINEL", class2, class2, class1, (Field) null, 197, (-2059913273), 197);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      Class<?> class3 = beanContext0.getBeanClass();
      typeArray0[2] = (Type) class3;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.NumberFormatException -> java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Type[] typeArray0 = new Type[3];
      Class<Double> class0 = Double.TYPE;
      typeArray0[0] = (Type) class0;
      TypeUtils.getClassFromMapping("WJY,P");
      typeArray0[1] = (Type) null;
      Class<Float> class1 = Float.TYPE;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Timestamp> class0 = Timestamp.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      Class<?> class1 = TypeUtils.getCollectionItemClass(typeArray0[0]);
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[2]);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DecimalFormatSymbols.getInstance();
      HashSet<EnumDeserializer> hashSet0 = new HashSet<EnumDeserializer>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashSet0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ParserConfig.getGlobalInstance();
      Class<Field> class0 = Field.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(15, 1598.471F);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      Class<?> class1 = TypeUtils.loadClass("org.springframework.security.core.authority.SimpleGrantedAuthority", (ClassLoader) null, true);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<HttpCookie> class0 = HttpCookie.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.loadClass("java.util.LinkedHashMap@0000000003");
      Class<ClassLoader> class1 = ClassLoader.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "java.util.LinkedHashMap@0000000003", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.ClassLoader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.fnv1a_64_lower("#M7l[}.O");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"URLs\":[{\"authority\":\"\",\"content\":{},\"defaultPort\":-1,\"file\":\"/tmp/EvoSuite_pathingJar8190590330820601437.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jdk8DateCodec0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = null;
      Class<Calendar> class1 = Calendar.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      WeakHashMap<NoSuchMethodException, RuleBasedCollator> weakHashMap0 = new WeakHashMap<NoSuchMethodException, RuleBasedCollator>();
      try { 
        javaBeanSerializer0.getFieldValuesMap(weakHashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("java.lang.Class");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Class\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TypeUtils.isProxy(class0);
      Dimension dimension0 = new Dimension(8233, 8233);
      AtomicInteger atomicInteger0 = new AtomicInteger((-2915));
      TypeUtils.castToBoolean(atomicInteger0);
      String string0 = "4&KU9('R}JCJQ7^g";
      Method method0 = null;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("4&KU9('R}JCJQ7^g", treeMap0);
      TypeUtils.getCollectionItemClass(class0);
      int int0 = 127;
      int int1 = 1143;
      Class<HttpCookie> class1 = HttpCookie.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.isProxy(class0);
      System.setCurrentTimeMillis((-2989L));
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(hashtable0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.keys();
      Type[] typeArray0 = new Type[3];
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("java.sql.SQLInvalidAuthorizationSpecException", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLInvalidAuthorizationSpecException -> java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("+\"i&VR2zM(T?~zj", classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "+\"i&VR2zM(T?~zj", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "(\"imVR2zM(T?~zj", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      LinkageError linkageError0 = TypeUtils.cast((Object) "", (Type) null, parserConfig0);
      assertNull(linkageError0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("(\"imVR2zM(T?~zj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (\"imVR2zM(T?~zj
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("A%L;O", outOfMemoryError0);
      Class<Character> class1 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLSyntaxErrorException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLSyntaxErrorException: A%L;O
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.toLocale("2 Pwm!{,");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "set property error, ", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"set property error, \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      hashtable0.put("scanStringArray", "scanStringArray");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(hashtable0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      Class<?> class2 = javaBeanSerializer0.getType();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal((-778.676));
      TypeUtils.castToDate((Object) null);
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("boolean", class1.toString());
      
      boolean boolean0 = TypeUtils.isNumber("+\"i&VR2zM(T?~zj");
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64("IizSxQn");
      assertEquals(1363628920891826459L, long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.fnv1a_64_lower("Ml[}.O");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Ml[}.O", (Type) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(\"imVR2zM(T?~zj";
      stringArray0[1] = "(\"imVR2zM(T?~zj";
      stringArray0[2] = "(\"imVR2zM(T?~zj";
      stringArray0[3] = "(\"imVR2zM(T?~zj";
      stringArray0[4] = "(\"imVR2zM(T?~zj";
      stringArray0[5] = "(\"imVR2zM(T?~zj";
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0, stringArray0);
      Class<?> class2 = javaBeanSerializer1.getType();
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class2;
      Class<?> class3 = TypeUtils.getRawClass(typeArray0[3]);
      typeArray0[6] = (Type) class3;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class2, jSONType0);
      typeArray0[7] = (Type) null;
      typeArray0[8] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[8]);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "(\"imVR2zM(T?~zj", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("\"imVR2M(T?~zj");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"imVR2M(T?~zj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.clearClassMapping();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, genericArrayType0, class0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      parserConfig0.createJavaBeanDeserializer(class1, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.addAccept("~%[0NyM_S~I@");
      classLoader0.setClassAssertionStatus("=^_4bBS,Thw", false);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@97
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      Class<MockDate> class1 = MockDate.class;
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Float> class2 = Float.TYPE;
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[0] = (Type) class1;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DecimalFormatSymbols.getInstance();
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      Class<Double> class3 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@97
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      Locale locale0 = TypeUtils.toLocale("CK3");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) locale0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : ck3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      Class<Integer> class0 = Integer.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(type0);
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils.unwrapOptional(class2);
      assertEquals(1, class1.getModifiers());
      assertNotSame(type0, class1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.toLocale("7_q8C[LY8sn{h24Q");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      ParserConfig parserConfig0 = ParserConfig.global;
      Long long0 = new Long((-1L));
      TypeUtils.fnv1a_64_lower("fastjson.parser.deny");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationException0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"@type\":\"java.lang.InstantiationException\",\"stackTrace\":[{\"className\":\"sun.reflect.GeneratedConstructorAccessor66\",\"lineNumber\":-1,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"sun.reflect.DelegatingConstructorAccessorImpl\",\"fileName\":\"DelegatingConstructorAccessorImpl.java\",\"lineNumber\":45,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"java.lang.reflect.Constructor\",\"fileName\":\"Constructor.java\",\"lineNumber\":423,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement$1\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":233,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.AbstractStatement\",\"fileName\":\"AbstractStatement.java\",\"lineNumber\":169,\"methodName\":\"exceptionHandler\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":188,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":307,\"methodName\":\"executeStatements\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":213,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":55,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.FutureTask\",\"fileName\":\"FutureTask.java\",\"lineNumber\":266,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":1142,\"methodName\":\"runWorker\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor$Worker\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":617,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.lang.Thread\",\"fileName\":\"Thread.java\",\"lineNumber\":745,\"methodName\":\"run\",\"nativeMethod\":false}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.getClassFromMapping("iterator");
      TypeUtils.decapitalize("it");
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TypeUtils.toLocale("Superclass");
      Class<Long> class0 = Long.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Class<SQLException> class3 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class3, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TypeUtils.toLocale("Superclass");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.isNumber("3KE3");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException((Throwable) null);
      Class<SQLDataException> class2 = SQLDataException.class;
      // Undeclared exception!
      try { 
        mockIllegalStateException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Time> class0 = Time.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'$.y]'U";
      stringArray0[1] = "java.awt.Font";
      stringArray0[2] = "getCause";
      stringArray0[3] = "can not cast to float, value : ";
      TypeUtils.getRawClass(class0);
      stringArray0[4] = "java.util.concurrent.ConcurrentSkipListMap";
      stringArray0[5] = "!=[$f!R\"*7?^E-l&5";
      stringArray0[6] = "`T";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(type0);
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      String string0 = null;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, weakHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Class<InstantiationError> class1 = InstantiationError.class;
      TypeUtils.isKotlin(class1);
      Class<Dimension> class2 = Dimension.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">}");
      TypeUtils.isPath(class0);
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      TypeUtils.decapitalize("ha");
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, (Map<String, String>) null);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class3, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.fnv1a_64_lower("#M7l[}.O");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.createCollection(parameterizedTypeImpl0);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "#M7l[}.O", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Rectangle> class0 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "isfloatValue");
      TypeUtils.isPath(class1);
      TypeUtils.getParserFeatures(class1);
      String string0 = TypeUtils.decapitalize("4");
      assertEquals("4", string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, (Map<String, String>) null);
      assertEquals(16, list0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "o";
      TypeUtils.castToChar("o");
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.concurrent.atomic.AtomicInteger
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("fastjson.parser.deny", "ml8teE4PH;hKnXAJ@%q");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<?> class1 = TypeUtils.getClassFromMapping("isgetTimeZone");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("fastjson.parser.deny", "ml8teE4PH;hKnXAJ@%q");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      Class<NumberFormat> class1 = NumberFormat.class;
      Class<SQLTransientException> class2 = SQLTransientException.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("[char", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("L", class1, class2, class2, (Field) null, 265, 265, 15);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class2, "L", fieldArray0);
      BreakIterator breakIterator0 = TypeUtils.cast((Object) null, (Type) fieldInfo0.declaringClass, parserConfig0);
      assertNull(breakIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.fnv1a_64_lower("#M7l[}.O");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      treeMap0.pollLastEntry();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader.getSystemClassLoader();
      Class<Insets> class0 = Insets.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<UUID> class1 = UUID.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TypeUtils.isHibernateInitialized((Object) null);
      Hashtable<OptionalCodec, NoSuchMethodException> hashtable0 = new Hashtable<OptionalCodec, NoSuchMethodException>();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      hashtable0.replace(optionalCodec0, noSuchMethodException0, noSuchMethodException0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JavaBeanInfo.getBuilderClass((JSONType) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.toLocale("fastjson.parser.deny");
      ConcurrentHashMap<EnumDeserializer, InstantiationError> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, InstantiationError>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.deny", "java.|Jtext.", intArray0);
      Class<Boolean> class0 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) batchUpdateException0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.BatchUpdateException: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
