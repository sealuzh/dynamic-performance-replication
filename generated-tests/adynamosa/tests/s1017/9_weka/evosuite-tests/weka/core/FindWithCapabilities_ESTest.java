/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 02:27:04 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.CheckOptionHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities1.setClassIndex("8034");
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.setOptions(stringArray0);
      findWithCapabilities5.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities2.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities1.setClassIndex("8034");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Sk#I");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getCapabilities();
      findWithCapabilities1.isEnabledNot((Capabilities.Capability) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#Sk#I");
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.disable((Capabilities.Capability) null);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.find();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities1.setClassIndex("8034");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Sk#I");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities1.m_Packages;
      assertTrue(vector1.equals((Object)vector0));
      
      findWithCapabilities0.m_Misses = vector1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      System.setCurrentTimeMillis((-1814L));
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      assertEquals("8034", singleIndex0.getSingleIndex());
      
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities3.handles(capabilities_Capability2);
      findWithCapabilities3.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities1.setClassIndex("8034");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Sk#I");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(7L);
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.getMisses();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities7.enable(capabilities_Capability2);
      assertNotSame(findWithCapabilities7, findWithCapabilities6);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities1.setClassIndex("8034");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Sk#I");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities1.getCapabilities();
      findWithCapabilities1.setFilename("8>cDkW<Uj~OY>/");
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities2.getMatches();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities2.setFilename("date");
      assertEquals("date", findWithCapabilities2.getFilename());
      
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("8034");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Sk#I");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis((-6L));
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis((-6L));
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("Mog?lB{6ZC");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Sk#I");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.setHandler(findWithCapabilities2);
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mog?lB{6ZC");
      Vector<String> vector0 = findWithCapabilities3.m_Packages;
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(4433L);
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(1320L);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities4);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      try { 
        findWithCapabilities5.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray0.length);
      
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      findWithCapabilities1.isEnabled((Capabilities.Capability) null);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      System.setCurrentTimeMillis((-6L));
      findWithCapabilities2.setFilename("1zSG4vd?'c ./%VO.0");
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.find();
      assertEquals("1zSG4vd?'c ./%VO.0", findWithCapabilities2.getFilename());
      
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.getMisses();
      Vector<String> vector1 = findWithCapabilities4.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.m_Matches = null;
      findWithCapabilities1.setClassIndex("8034");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Sk#I");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      findWithCapabilities0.m_Misses = vector0;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis((-6L));
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(1L);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities3.handles(capabilities_Capability2);
      Random.setNextRandom(1531);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Matches = vector0;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("Mog?lB{6ZC");
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Sk#I");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.setHandler(findWithCapabilities2);
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.isEnabled(capabilities_Capability1);
      Vector<String> vector1 = findWithCapabilities3.m_Packages;
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities1.getCapabilities();
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(4433L);
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(1320L);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities4);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      boolean boolean1 = findWithCapabilities6.handles(capabilities_Capability2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(":;:Jo9x+7QEk");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "3(";
      stringArray1[1] = ":;:Jo9x+7QEk";
      stringArray1[2] = "3(";
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities0.setClassIndex("3(");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabledNot((Capabilities.Capability) null);
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities0.setClassIndex("3(");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.listOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(709L);
      findWithCapabilities1.setFilename("3(");
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis((-6L));
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("\nSearching for the following Capabilities:");
      assertEquals("3(", findWithCapabilities1.getFilename());
      
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Vector<String> vector1 = findWithCapabilities4.getMisses();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.setClassIndex("FINE");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setFilename("O=$fwA .\"r3WFr");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributeDependencies();
      capabilities0.disableAllClassDependencies();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities3.isEnabled(capabilities_Capability2);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities2.listOptions();
      findWithCapabilities1.find();
      System.setCurrentTimeMillis(1226L);
      System.setCurrentTimeMillis((-1));
      findWithCapabilities4.setClassIndex("All values set to one: ");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = Locale.getISOCountries();
      findWithCapabilities0.setClassIndex("3(");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities2.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities2.isEnabledNot(capabilities_Capability2);
      findWithCapabilities1.getOptions();
      findWithCapabilities2.getCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability3);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.setOptions(stringArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("3(");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.getMatches();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      capabilities2.disableAllClassDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities3 = findWithCapabilities1.getCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(1171L);
      System.setCurrentTimeMillis(1171L);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      capabilities3.setOwner(findWithCapabilities0);
      findWithCapabilities2.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability2);
      try { 
        findWithCapabilities4.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.m_Superclass = "8034";
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.enableAllAttributes();
      capabilities0.enableAllAttributeDependencies();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setNotCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setFilename("8034");
      try { 
        findWithCapabilities3.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
      
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Misses = vector0;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis((-6L));
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      System.setCurrentTimeMillis((-219L));
      findWithCapabilities2.setClassIndex("xPj)UhTHY}4O");
      findWithCapabilities2.setOptions(stringArray1);
      assertEquals(5, stringArray1.length);
      
      findWithCapabilities2.listOptions();
      Vector<String> vector1 = findWithCapabilities2.getMisses();
      assertTrue(vector1.equals((Object)vector0));
      
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray2 = findWithCapabilities3.getOptions();
      assertEquals(4, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("'(yu}Eco)dBA^A^4p8S");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      capabilities0.enableAllAttributes();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      capabilities1.enableAllAttributeDependencies();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability3);
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis((-3353L));
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      System.setCurrentTimeMillis(2917L);
      findWithCapabilities1.setClassIndex("W!e<.GNug&eOe(7");
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.listOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Misses = vector0;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis((-6L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8034");
      findWithCapabilities1.getMisses();
      findWithCapabilities1.find();
      System.setCurrentTimeMillis((-6L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(734L);
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.listOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(328L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8034");
      Vector<String> vector1 = findWithCapabilities1.m_Packages;
      findWithCapabilities0.find();
      System.setCurrentTimeMillis((-131L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("3(");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributes();
      capabilities0.disableAllClassDependencies();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities1.listOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.isEnabled(capabilities_Capability2);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability3);
      FindWithCapabilities.main((String[]) null);
      System.setCurrentTimeMillis(2025L);
      findWithCapabilities0.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("3(");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributes();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      capabilities1.enableAllAttributes();
      capabilities1.enableAllAttributeDependencies();
      findWithCapabilities2.setNotCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities3.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.find();
      findWithCapabilities3.disableNot(capabilities_Capability2);
      findWithCapabilities1.setHandler(findWithCapabilities3);
      assertNotSame(findWithCapabilities3, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("8034");
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("8034");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      vector0.clear();
      Random.setNextRandom(252);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis((byte)56);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex(":Qfk");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      capabilities0.enableAllAttributes();
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability3);
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis((-1L));
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("3(");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot((Capabilities.Capability) null);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributes();
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main((String[]) null);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main((String[]) null);
      System.setCurrentTimeMillis((-1L));
      findWithCapabilities1.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.m_Superclass = "sw10wh";
      capabilities0.disableAllClassDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Misses = vector0;
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8034");
      findWithCapabilities1.getMisses();
      findWithCapabilities1.find();
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(734L);
      findWithCapabilities1.setClassIndex("sw10wh");
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]t^&48wo1\" c [y";
      stringArray0[1] = "]T'}";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      stringArray0[2] = "-t";
      findWithCapabilities0.listOptions();
      stringArray0[3] = "P3\"(k[emN-`^^5";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-t");
      System.setCurrentTimeMillis(484L);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "]t^&48wo1\" c [y");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.find();
      System.setCurrentTimeMillis(1608L);
      System.setCurrentTimeMillis(484L);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      findWithCapabilities0.setClassIndex("]t^&48wo1\" c [y");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.enableAllAttributeDependencies();
      capabilities0.disableAllClassDependencies();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(0L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2n;");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-68L));
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities3.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = Locale.getISOCountries();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("3(");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.find();
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities1.listOptions();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("3(");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      capabilities0.enableAllAttributeDependencies();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      vector0.add("weka/core/Capabilities.props");
      capabilities2.disableAllClassDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      System.setCurrentTimeMillis((-3176L));
      System.setCurrentTimeMillis((-3176L));
      findWithCapabilities0.setClassIndex("\tMust handle binary attributes.");
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("3(");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main((String[]) null);
      System.setCurrentTimeMillis(1069L);
      System.setCurrentTimeMillis(1069L);
      findWithCapabilities1.getMisses();
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      capabilities0.enableAllClasses();
      capabilities0.enableAllAttributeDependencies();
      capabilities0.disableAllClassDependencies();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.find();
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.setClassIndex("");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      capabilities0.enableAllClasses();
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.m_Superclass = "sw10wh";
      capabilities0.disableAllClassDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      findWithCapabilities1.getMisses();
      findWithCapabilities1.find();
      System.setCurrentTimeMillis((-2094L));
      System.setCurrentTimeMillis(0L);
      findWithCapabilities1.setClassIndex("");
      assertNotSame(findWithCapabilities1, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributeDependencies();
      capabilities0.disableAllClassDependencies();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-574L));
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.setClassIndex("@!");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex(" ");
      System.setCurrentTimeMillis((-49L));
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("8`");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      System.setCurrentTimeMillis(100L);
      findWithCapabilities0.find();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8`";
      stringArray0[1] = "-date-class";
      stringArray0[2] = "8`";
      stringArray0[3] = "8`";
      stringArray0[4] = "8`";
      stringArray0[5] = "8`";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributeDependencies();
      capabilities0.disableAllClassDependencies();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities3.m_Capabilities;
      findWithCapabilities1.setNotCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities3.setCapabilities(capabilities0);
      System.setCurrentTimeMillis((-1970L));
      System.setCurrentTimeMillis((-1970L));
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      assertNotSame(findWithCapabilities0, findWithCapabilities1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.m_Superclass = "sw10wh";
      capabilities0.disableAllClassDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.setCapabilities(capabilities1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-574L));
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "QoBW$Gt-w/+G !r");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      capabilities0.enableAllAttributeDependencies();
      capabilities0.disableAllClassDependencies();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "QoBW$Gt-w/+G !r";
      stringArray0[2] = "QoBW$Gt-w/+G !r";
      stringArray0[3] = "QoBW$Gt-w/+G !r";
      stringArray0[4] = "QoBW$Gt-w/+G !r";
      stringArray0[5] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities1.getNotCapabilities();
      System.setCurrentTimeMillis(0L);
      findWithCapabilities2.listOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("'(yu}Eco)dBA^A^4p8S");
      findWithCapabilities0.m_Superclass = ".arff";
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      capabilities0.m_Owner = (CapabilitiesHandler) findWithCapabilities0;
      testInstances0.setNumRelationalNumeric((-1));
      findWithCapabilities0.setClassIndex(" ");
      findWithCapabilities0.m_Superclass = "]dnF]PQI?|]uz7cb3,E";
      capabilities0.getOtherCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.setOptions(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      ClassDiscovery.m_ClassCache = null;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability3);
      boolean boolean0 = findWithCapabilities1.isEnabled(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("hT");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-not-nominal-atts";
      stringArray0[1] = "hT";
      stringArray0[2] = "hT";
      stringArray0[3] = "hT";
      stringArray0[4] = "hT";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_NotCapabilities = null;
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      assertNull(capabilities0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.capabilities();
      capabilities1.enableAllAttributes();
      findWithCapabilities0.setCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities capabilities2 = findWithCapabilities0.getCapabilities();
      assertNotSame(capabilities2, capabilities0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.capabilities();
      capabilities0.enableAllAttributes();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertNotSame(capabilities1, capabilities0);
      
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(18, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("K>");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.setMinimumNumberInstances(116);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      capabilities0.getRevision();
      capabilities0.clone();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("\"position\" is numeric");
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      findWithCapabilities1.setCapabilities(capabilities1);
      assertEquals("\"position\" is numeric", findWithCapabilities0.getFilename());
      
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities2.isEnabledNot(capabilities_Capability3);
      findWithCapabilities2.handles(capabilities_Capability3);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex(" Oq^ions:\n\n");
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("K>");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      capabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      findWithCapabilities0.setFilename("wYkfHAr+#85j6");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.isEnabled(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_CLASS;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.isEnabled(capabilities_Capability3);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.enableNot(capabilities_Capability0);
      findWithCapabilities3.setCapabilities(capabilities0);
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      Vector<String> vector0 = findWithCapabilities2.find();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("1999");
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      findWithCapabilities0.getMatches();
      capabilities0.clone();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      findWithCapabilities0.setFilename(" ");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities2.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability2);
      findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities3.isEnabledNot(capabilities_Capability3);
      findWithCapabilities3.getCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities3.enable(capabilities_Capability4);
      findWithCapabilities3.getHandler();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename(".bsi");
      findWithCapabilities3.setCapabilities(capabilities0);
      assertNotSame(findWithCapabilities3, findWithCapabilities2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "7u^)v";
      stringArray0[1] = "\nSearching for the following Capabilities:";
      stringArray0[2] = "&q[y+dlm~cy6_$B5Y";
      stringArray0[3] = "nR?ji:5$d^>\"2";
      stringArray0[4] = "-binary-atts";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[5] = "\nOK to continue [y/n]? > ";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" class that matched the criteria:\n");
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\nRandomized dataset:";
      stringArray0[1] = "-unary-class";
      String string0 = "~.`fCVFxg*d 3q";
      stringArray0[2] = "~.`fCVFxg*d 3q";
      stringArray0[3] = "ruCw3+";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-not-string-class";
      stringArray0[1] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Unknown option: ");
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Exception exception0 = capabilities0.m_FailReason;
      testInstances1.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability1);
      testInstances0.setSeed((-2));
      FindWithCapabilities.main(testInstances1.DEFAULT_WORDS);
      Random.setNextRandom((-2));
      FindWithCapabilities.main(testInstances1.DEFAULT_WORDS);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      findWithCapabilities1.setNotCapabilities(capabilities1);
      findWithCapabilities1.getMisses();
      findWithCapabilities2.setClassIndex("@!");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities3.setHandler(findWithCapabilities1);
      assertNotSame(findWithCapabilities3, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setFilename("-not-numeric-class");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMatches();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-not-numeric-class";
      stringArray0[1] = " classes that didn't match the criteria:\n";
      stringArray0[2] = "-not-numeric-class";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.find();
      System.setCurrentTimeMillis(5003L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "m";
      stringArray0[1] = "-not-date-class";
      stringArray0[2] = "-not-unary-atts";
      stringArray0[3] = " classes that matched the criteria:\n";
      stringArray0[4] = "\"[lPUCz,";
      stringArray0[5] = "p`1&jB+0t67";
      stringArray0[6] = "9@GQ)kC";
      FindWithCapabilities.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-not-unary-atts";
      stringArray0[2] = "numeric-class";
      stringArray0[3] = ".arff";
      stringArray0[4] = "numerc-class";
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities1.disable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      TestInstances.listToArray("weka/core/Capabilities.props");
      findWithCapabilities0.setFilename(" ");
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = new Capabilities((CapabilitiesHandler) null);
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      capabilities2.disable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = testInstances0.getOptions();
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      TestInstances testInstances1 = new TestInstances();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      System.setCurrentTimeMillis((-1013L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<C@|";
      stringArray0[1] = "not-unary-atts";
      stringArray0[2] = "$h";
      stringArray0[3] = "-relational-atts";
      stringArray0[4] = "RO GL[oeWcp%~";
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|;7j{o~{";
      stringArray0[1] = "-superclass";
      stringArray0[2] = "0;X";
      stringArray0[3] = "Attribute type '";
      stringArray0[4] = "PW;{ix&gyc,RCU*2q";
      stringArray0[5] = " tU9F_Vlz'?(v#<*";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[6] = "5.55555 rounded to 2 decimal places: ";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getMatches();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      capabilities1.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      capabilities0.getRevision();
      findWithCapabilities1.getMatches();
      capabilities1.clone();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities1.getRevision();
      findWithCapabilities1.setFilename("8034");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability2);
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities2 = findWithCapabilities0.getCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.getHandler();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.setFilename("9134");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setCapabilities(capabilities2);
      assertEquals("9134", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_Superclass = null;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities1.disable(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.m_NumRelationalNumeric = 321;
      testInstances0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      findWithCapabilities1.m_Misses = vector0;
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("#\"-c^!NcE");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("r2(zY-\"4");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.listOptions();
      assertEquals("#\"-c^!NcE", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W*Me<ccl4ss";
      stringArray0[1] = "nst}R+O+#?G[@Omi;";
      stringArray0[2] = ".R}Eq(O~Cu2";
      stringArray0[3] = "lF>7,Yu+9H";
      stringArray0[4] = "FuG<LIw";
      stringArray0[5] = "<%MEr\"'_#";
      stringArray0[6] = "-not-no-class";
      stringArray0[7] = "unparseable date: ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("#\"-c^!NcE");
      findWithCapabilities0.setClassIndex("-date <num>");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getFilename();
      assertEquals("#\"-c^!NcE", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Random.setNextRandom(2139);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setFilename("nO({*gAA,ZT,");
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = null;
      findWithCapabilities0.m_Superclass = null;
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setClassIndex("@sH&{?");
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = null;
      Capabilities capabilities0 = null;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      testInstances0.getOptions();
      findWithCapabilities0.setFilename("-c");
      String[] stringArray0 = new String[9];
      testInstances0.m_ClassType = 16;
      stringArray0[0] = "-c";
      stringArray0[1] = "-c";
      stringArray0[2] = "-c";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = "-unary-atts";
      stringArray0[6] = "-c";
      stringArray0[7] = " ";
      stringArray0[8] = " ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("K>");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setFilename("K>");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      assertEquals("K>", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("K>");
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("K>");
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities1);
      assertFalse(capabilities1.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("numerc-class");
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("K>");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("Jt^11\"Hwj*0&Q}~g");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.setClassIndex("numerc-class");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("K>");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
      
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      capabilities1.m_MinimumNumberInstances = 0;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.setCapabilities(capabilities1);
      Capabilities capabilities2 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertSame(capabilities0, capabilities2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("-1");
      findWithCapabilities1.setFilename("-not-date-atts");
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Capabilities = null;
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Vector<String> vector2 = new Vector<String>();
      findWithCapabilities0.getFilename();
      vector0.add((String) null);
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      System.setCurrentTimeMillis(574L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("num-instances");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Unable to create WEKA_HOME (";
      stringArray0[1] = "m~jW337";
      findWithCapabilities0.disableNot(capabilities_Capability0);
      stringArray0[2] = "-numeric-class";
      stringArray0[3] = "Kks# h";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("numerc-class");
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("K>");
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.m_MinimumNumberInstances = 0;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      LinkedList<CheckOptionHandler> linkedList0 = new LinkedList<CheckOptionHandler>();
      boolean boolean0 = vector0.containsAll(linkedList0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      hashtable0.put("J{ikl]0;", vector0);
      ClassDiscovery.m_Cache = hashtable0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      boolean boolean1 = findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add("-class-type <num>");
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.enable((Capabilities.Capability) null);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      assertNotSame(findWithCapabilities0, findWithCapabilities1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("-numeric-class");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("K>");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      capabilities1.m_MinimumNumberInstances = 0;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "NOMINAL_ATTRIBUTES";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.disableAllClassDependencies();
      capabilities0.setMinimumNumberInstances((-3367));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities0.getRevision();
      findWithCapabilities1.getMatches();
      capabilities0.clone();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      capabilities1.enable(capabilities_Capability1);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities0.getRevision();
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability3);
      Capabilities capabilities2 = findWithCapabilities1.getCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.getHandler();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.setFilename("8034");
      findWithCapabilities0.setCapabilities(capabilities2);
      findWithCapabilities1.getMisses();
      assertEquals("8034", findWithCapabilities1.getFilename());
      
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.disableAllClassDependencies();
      capabilities0.setMinimumNumberInstances(116);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.m_InstancesTest = false;
      capabilities0.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      capabilities0.getRevision();
      capabilities0.disableAllClassDependencies();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      capabilities0.clone();
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("\"position\" is numeric");
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities.main((String[]) null);
      SingleIndex singleIndex0 = new SingleIndex("weka/core/Capabilities.props");
      findWithCapabilities1.setClassIndex(")u.d?^tKlw\"Mc'g)Q>");
      assertNotSame(findWithCapabilities1, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.FindWithCapabilities";
      stringArray0[1] = "$Revision: 9172 $";
      stringArray0[2] = "";
      findWithCapabilities0.setFilename("");
      stringArray0[3] = "";
      stringArray0[4] = "U3`R$t${)GI";
      stringArray0[5] = "-S";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability3);
      findWithCapabilities0.getHandler();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertEquals(6, stringArray1.length);
      
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.setCapabilities(capabilities0);
      assertNotSame(capabilities0, capabilities1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      Vector<String> vector0 = findWithCapabilities0.find();
      vector0.add("GVEY[6.");
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      vector0.clear();
      findWithCapabilities0.m_Packages = vector0;
      vector0.listIterator();
      vector0.spliterator();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getRevision();
      findWithCapabilities0.setFilename("8034");
      findWithCapabilities2.disable(capabilities_Capability0);
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities1.getCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities1.enable(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities3.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      vector0.add("GVEY[6.");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("GVEY[6.");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = 3.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.0, doubleArray0);
      Attribute attribute0 = new Attribute("5.7000`1 > 5.7 ? ", "5.7000`1 > 5.7 ? ");
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("-numeric-class");
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("K>");
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.m_MinimumNumberInstances = 0;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray0.length);
      
      Vector<String> vector0 = findWithCapabilities0.find();
      vector0.add("GVEY[6.");
      findWithCapabilities0.m_Packages = vector0;
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertTrue(vector1.contains("GVEY[6."));
      
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Capabilities = null;
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_U~R:4C0";
      stringArray0[1] = ".}:te?3F$u0";
      stringArray0[2] = "G}u\"R";
      stringArray0[3] = "-nominal-class";
      stringArray0[4] = "z^TTIOqa";
      stringArray0[5] = "l";
      stringArray0[6] = "'tH;~p:0K.A.&)#j8F|";
      stringArray0[7] = "~1";
      stringArray0[8] = "8'";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      stringArray0[0] = "Iq$@aM{k= ";
      stringArray0[1] = "c/{4WA\"<<\"\"l?";
      FindWithCapabilities.main(stringArray0);
      stringArray0[2] = "<Q?XaKwHfe";
      stringArray0[3] = "jrqYMD[6X|fb";
      stringArray0[4] = "]%<oE-@GHxDyj8h+=";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      assertNotSame(capabilities_Capability1, capabilities_Capability0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      capabilities0.getAttributeCapabilities();
      capabilities0.enable(capabilities_Capability0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      stringArray0[0] = "-not-relational-atts";
      stringArray0[1] = "--";
      stringArray0[2] = "W')vx%)Vo:b5P";
      stringArray0[3] = "-relational-nominal";
      stringArray0[4] = "^0";
      stringArray0[5] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "att";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("-packages");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      capabilities0.disableAllClassDependencies();
      vector0.clone();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.disableAllClassDependencies();
      capabilities0.setMinimumNumberInstances(116);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.m_InstancesTest = false;
      capabilities0.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      capabilities0.getRevision();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      capabilities0.clone();
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("\"position\" is numeric");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities1.setCapabilities(capabilities1);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
      assertEquals(1, capabilities1.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("-numeric-class");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("K>");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      capabilities1.m_MinimumNumberInstances = 0;
      capabilities0.assign(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.m_Filename = "numeric-class";
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("K>");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setFilename("K>");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("V");
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_ClassIndex = null;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        TestInstances.forCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Capabilities = null;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      testInstances0.setNumRelationalNominalValues(91);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability2);
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\tThe dataset to base the capabilities on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler.\n\tEither '-t' or '-W' can be used.";
      stringArray0[1] = "a6F_YE;`JWvk`1HS";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.clone();
      capabilities0.getRevision();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      capabilities0.toString();
      capabilities0.capabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.enable(capabilities_Capability1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("$rk<");
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.getMisses();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$rk<";
      stringArray0[1] = "$rk<";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("V");
      assertEquals("V", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = Locale.getISOCountries();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("-only-multi-instance");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("-1");
      Vector<String> vector0 = new Vector<String>();
      System.setCurrentTimeMillis((-3437L));
      findWithCapabilities1.setClassIndex("H@A}");
      FindWithCapabilities.main(stringArray0);
      String string0 = findWithCapabilities0.getClassIndex();
      assertEquals("-1", string0);
      
      String string1 = findWithCapabilities2.getRevision();
      assertEquals("8034", string1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      String string0 = "";
      findWithCapabilities0.setFilename("");
      vector0.clear();
      findWithCapabilities0.m_Packages = vector0;
      vector0.listIterator();
      vector0.spliterator();
      vector0.add("jz");
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.clone();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "\nSearching for the following Capabilities:";
      capabilities0.disableAllAttributes();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getRevision();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      TestInstances.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*f'{";
      stringArray0[1] = "";
      stringArray0[2] = "Yzg";
      stringArray0[3] = "";
      stringArray0[4] = "%l";
      stringArray0[5] = "Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]t^&48wo1\" c [y";
      stringArray0[1] = "]T'}";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      stringArray0[2] = "-t";
      findWithCapabilities0.listOptions();
      stringArray0[3] = "P3\"(k[emN-`^^5";
      stringArray0[4] = "";
      stringArray0[5] = "~2q 4)ye!S'~ enaz]";
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "-t";
      stringArray0[6] = "`F09H(^pL";
      stringArray0[7] = "-not-numeric-atts";
      findWithCapabilities0.getOptions();
      stringArray0[8] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      vector0.subList(0, 0);
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      assertFalse(boolean0);
  }
}
