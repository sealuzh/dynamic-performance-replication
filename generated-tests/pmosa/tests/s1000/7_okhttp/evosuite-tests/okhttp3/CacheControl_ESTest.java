/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 15:44:10 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(32, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder2);
      CacheControl cacheControl1 = cacheControl_Builder2.build();
      cacheControl1.toString();
      cacheControl0.FORCE_CACHE.toString();
      CacheControl cacheControl2 = cacheControl_Builder1.build();
      String string0 = cacheControl2.FORCE_CACHE.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      
      cacheControl0.minFreshSeconds();
      cacheControl0.FORCE_CACHE.headerValue = "wm7+GH\"[N";
      cacheControl0.mustRevalidate();
      cacheControl0.noTransform();
      cacheControl0.maxAgeSeconds();
      cacheControl_Builder0.noCache();
      int int0 = cacheControl2.maxStaleSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1791), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1791
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(Integer.MAX_VALUE, timeUnit1);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.onlyIfCached();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noCache();
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder5.onlyIfCached();
      CacheControl.Builder cacheControl_Builder7 = new CacheControl.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.headerValue = "only-if-cached";
      cacheControl0.noCache();
      CacheControl.Builder cacheControl_Builder8 = cacheControl_Builder6.noStore();
      cacheControl_Builder8.onlyIfCached();
      cacheControl0.toString();
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder9 = cacheControl_Builder7.minFresh(Integer.MAX_VALUE, timeUnit2);
      assertFalse(cacheControl_Builder9.equals((Object)cacheControl_Builder4));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      int int0 = (-1229);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      cacheControl_Builder0.noStore();
      cacheControl_Builder1.minFresh(2, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      TimeUnit timeUnit2 = TimeUnit.SECONDS;
      cacheControl_Builder1.noTransform();
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxAge((-1229), timeUnit2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1229
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(182, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(Integer.MAX_VALUE, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxStale(Integer.MAX_VALUE, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder3);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cacheControl_Builder2.maxStale(4497, timeUnit0);
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      String string0 = cacheControl0.FORCE_NETWORK.toString();
      assertEquals("no-cache", string0);
      
      cacheControl_Builder1.maxAge(4497, timeUnit0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl_Builder2.noTransform();
      cacheControl0.FORCE_NETWORK.headerValue = "";
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.maxStaleSeconds();
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      cacheControl_Builder1.noStore();
      cacheControl_Builder1.noStore();
      cacheControl0.sMaxAgeSeconds();
      CacheControl cacheControl3 = cacheControl_Builder1.build();
      cacheControl3.FORCE_CACHE.headerValue = "no-cache";
      CacheControl.parse(headers0);
      cacheControl1.noCache();
      cacheControl1.sMaxAgeSeconds();
      cacheControl1.maxAgeSeconds();
      boolean boolean0 = cacheControl2.isPrivate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_CACHE.toString();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl0.FORCE_CACHE.headerValue = "nOh=@sh@3U>yD7bcnc";
      boolean boolean0 = cacheControl0.noStore();
      boolean boolean1 = cacheControl1.mustRevalidate();
      assertTrue(boolean1 == boolean0);
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(3046, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder2.maxStale(3046, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder1.noTransform();
      CacheControl cacheControl2 = cacheControl_Builder4.build();
      cacheControl_Builder3.noStore();
      cacheControl_Builder2.minFresh(2199, timeUnit0);
      headers0.getDate("\n");
      cacheControl_Builder3.noStore();
      cacheControl1.FORCE_CACHE.toString();
      cacheControl_Builder3.minFresh(3046, timeUnit0);
      int int0 = cacheControl1.maxStaleSeconds();
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), int0);
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noCache());
      
      CacheControl cacheControl3 = cacheControl_Builder1.build();
      assertEquals(263174400, cacheControl3.minFreshSeconds());
      
      cacheControl_Builder2.minFresh(9, timeUnit0);
      boolean boolean2 = cacheControl2.onlyIfCached();
      assertTrue(cacheControl2.noTransform());
      assertEquals(263174400, cacheControl2.maxAgeSeconds());
      assertEquals(263174400, cacheControl2.maxStaleSeconds());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.isPrivate());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      cacheControl0.FORCE_CACHE.headerValue = "";
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set(":", "Q+*i.I@BC|o-E(-T");
      Headers.Builder headers_Builder2 = headers_Builder1.add(":", "okhttp3.internal.http.HttpHeaders");
      Headers.Builder headers_Builder3 = headers_Builder2.addLenient("");
      Headers headers0 = headers_Builder3.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      cacheControl0.toString();
      cacheControl1.noTransform();
      boolean boolean0 = cacheControl_Builder0.noStore;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-1994091956), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1994091956
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set(":", "Q+*i.I@BC|o-E(-T");
      Headers.Builder headers_Builder2 = headers_Builder1.add(":", "");
      Headers.Builder headers_Builder3 = headers_Builder2.addLenient("");
      Headers headers0 = headers_Builder3.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      String string0 = cacheControl1.toString();
      assertEquals("", string0);
      
      String string1 = cacheControl0.toString();
      assertEquals("no-cache", string1);
      
      cacheControl1.noTransform();
      cacheControl1.noTransform();
      cacheControl0.isPrivate();
      cacheControl0.onlyIfCached();
      cacheControl_Builder1.onlyIfCached();
      cacheControl1.noStore();
      CacheControl cacheControl2 = cacheControl_Builder0.build();
      boolean boolean0 = cacheControl2.isPublic();
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertEquals((-1), cacheControl2.maxStaleSeconds());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.mustRevalidate());
      assertTrue(cacheControl2.noTransform());
      assertTrue(cacheControl2.onlyIfCached());
      
      CacheControl.parse(headers0);
      CacheControl cacheControl3 = CacheControl.parse(headers0);
      boolean boolean1 = cacheControl3.noStore();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Pragma", "LjcHF[?P3K_@K.]c");
      headers_Builder0.add("?T=>ePs;#yAW", "Pragma");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("?T=>ePs;#yAW");
      Headers.Builder headers_Builder3 = headers_Builder2.add("!S5!M.j<;{k[", "?T=>ePs;#yAW");
      headers_Builder3.addLenient("?T=>ePs;#yAW");
      Headers headers0 = headers_Builder1.build();
      CacheControl.parse(headers0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(boolean0);
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Q+*i.I@BC|o-E(-T", "Pragma");
      Headers.Builder headers_Builder2 = headers_Builder1.add("no-cache", "");
      headers_Builder2.add("pragma", "max-stale");
      headers_Builder1.addLenient("l1o*$5SY6");
      Headers headers0 = headers_Builder1.build();
      cacheControl0.toString();
      String string0 = cacheControl0.toString();
      assertEquals("no-cache", string0);
      
      cacheControl0.noTransform();
      CacheControl cacheControl1 = cacheControl_Builder1.build();
      boolean boolean0 = cacheControl1.noTransform();
      cacheControl0.isPrivate();
      cacheControl0.onlyIfCached();
      cacheControl_Builder0.onlyIfCached();
      cacheControl0.noStore();
      CacheControl cacheControl2 = cacheControl_Builder0.build();
      assertTrue(cacheControl2.onlyIfCached());
      
      cacheControl1.isPublic();
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      
      CacheControl.parse(headers0);
      CacheControl cacheControl3 = CacheControl.parse(headers0);
      boolean boolean1 = cacheControl3.noStore();
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl3.maxStaleSeconds());
      assertFalse(cacheControl3.noCache());
      assertFalse(cacheControl3.onlyIfCached());
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      assertFalse(cacheControl3.mustRevalidate());
      assertFalse(cacheControl3.isPrivate());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(32, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cache-control";
      cacheControl0.headerValue = "@ZWWUJ";
      stringArray0[1] = "Sf8eyOT+";
      Headers headers1 = Headers.of(stringArray0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap1);
      CacheControl.parse(headers1);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(32, timeUnit1);
      cacheControl_Builder2.noTransform();
      cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      cacheControl_Builder3.noStore();
      cacheControl_Builder3.minFresh(32, timeUnit1);
      cacheControl_Builder3.onlyIfCached();
      cacheControl0.minFreshSeconds();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      
      cacheControl_Builder1.maxStale(610, timeUnit0);
      boolean boolean0 = cacheControl1.mustRevalidate();
      assertFalse(boolean0);
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.isPrivate());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(32, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cache-control";
      cacheControl0.headerValue = "@ZWWUJ";
      stringArray0[1] = "cache-control";
      Headers headers0 = Headers.of(stringArray0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap1);
      CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(32, timeUnit1);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder2.noTransform();
      cacheControl_Builder4.noStore();
      cacheControl_Builder4.minFresh(32, timeUnit1);
      cacheControl0.minFreshSeconds();
      cacheControl0.noStore();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noCache();
      assertSame(cacheControl_Builder5, cacheControl_Builder3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Pragma", "LjcHF[?P3K_@K.]c");
      Headers.Builder headers_Builder2 = headers_Builder1.add("Pragma", "?T=>ePs;#yAW");
      headers_Builder2.add("?T=>ePs;#yAW", "Pragma");
      headers_Builder2.addLenient("?T=>ePs;#yAW");
      Headers headers0 = headers_Builder1.build();
      cacheControl0.toString();
      cacheControl0.onlyIfCached();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Pragma", "LjcHF[?P3K_@K.]c");
      Headers.Builder headers_Builder2 = headers_Builder1.add("Pragma", "?T=>ePs;#yAW");
      headers_Builder2.add("?T=>ePs;#yAW", "Pragma");
      headers_Builder2.addLenient("?T=>ePs;#yAW");
      Headers headers0 = headers_Builder1.build();
      String string0 = cacheControl0.toString();
      assertEquals("no-cache", string0);
      
      CacheControl cacheControl1 = new CacheControl(cacheControl_Builder0);
      cacheControl1.noTransform();
      cacheControl_Builder0.build();
      cacheControl1.noTransform();
      CacheControl cacheControl2 = cacheControl_Builder0.build();
      boolean boolean0 = cacheControl2.isPrivate();
      assertFalse(boolean0);
      
      cacheControl0.onlyIfCached();
      cacheControl_Builder1.onlyIfCached();
      cacheControl2.noStore();
      CacheControl cacheControl3 = cacheControl_Builder0.build();
      cacheControl2.isPublic();
      CacheControl.parse(headers0);
      CacheControl cacheControl4 = CacheControl.parse(headers0);
      assertFalse(cacheControl4.isPrivate());
      assertFalse(cacheControl4.mustRevalidate());
      assertEquals((-1), cacheControl4.sMaxAgeSeconds());
      assertFalse(cacheControl4.noCache());
      assertFalse(cacheControl4.noStore());
      assertFalse(cacheControl4.isPublic());
      assertEquals((-1), cacheControl4.minFreshSeconds());
      assertFalse(cacheControl4.noTransform());
      assertEquals((-1), cacheControl4.maxStaleSeconds());
      assertFalse(cacheControl4.onlyIfCached());
      
      cacheControl3.noStore();
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      assertTrue(cacheControl3.onlyIfCached());
      assertEquals((-1), cacheControl3.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Pragma", "no-cache");
      headers_Builder0.add("pragma", " content=");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("[hex=", "charset == null");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      String string0 = cacheControl1.toString();
      assertEquals("no-cache", string0);
      assertNotNull(string0);
      
      cacheControl1.noTransform();
      CacheControl cacheControl2 = cacheControl_Builder1.build();
      cacheControl0.noTransform();
      cacheControl0.isPrivate();
      cacheControl1.onlyIfCached();
      cacheControl_Builder1.onlyIfCached();
      boolean boolean0 = cacheControl2.isPublic();
      assertFalse(boolean0);
      
      CacheControl.parse(headers0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl3 = CacheControl.parse(headers1);
      cacheControl2.noStore();
      assertEquals((-1), cacheControl2.maxStaleSeconds());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.mustRevalidate());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertTrue(cacheControl2.noTransform());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      
      boolean boolean1 = cacheControl3.isPublic();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Pragma", "LjcHF[?P3K_@K.]c");
      Headers.Builder headers_Builder2 = headers_Builder1.add("Pragma", "?T=>ePs;#yAW");
      Headers.Builder headers_Builder3 = headers_Builder2.add("?T=>ePs;#yAW", "Pragma");
      Headers.Builder headers_Builder4 = headers_Builder3.set("Pragma", "private, ");
      headers_Builder4.add("Pragma", "no-transform");
      Headers.Builder headers_Builder5 = headers_Builder3.add("2o\"B", "KTv-?pxuVht;X");
      Headers.Builder headers_Builder6 = headers_Builder5.add("2o\"B", "?T=>ePs;#yAW");
      headers_Builder6.addLenient("data");
      Headers headers0 = headers_Builder4.build();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      CacheControl cacheControl1 = new CacheControl(cacheControl_Builder1);
      CacheControl cacheControl2 = cacheControl_Builder1.build();
      cacheControl2.noTransform();
      CacheControl cacheControl3 = cacheControl_Builder0.build();
      cacheControl2.noTransform();
      cacheControl3.isPrivate();
      cacheControl1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder2.onlyIfCached();
      cacheControl0.noStore();
      cacheControl_Builder0.build();
      CacheControl.parse(headers0);
      CacheControl cacheControl4 = CacheControl.parse(headers0);
      cacheControl4.noStore();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noCache();
      assertSame(cacheControl_Builder2, cacheControl_Builder3);
  }
}
