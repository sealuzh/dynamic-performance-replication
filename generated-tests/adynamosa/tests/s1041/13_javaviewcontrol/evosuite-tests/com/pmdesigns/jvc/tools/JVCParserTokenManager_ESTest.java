/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 20:01:27 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.SyncFailedException;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0CDIb6T]:WJy1J9ka");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      stringReader0.skip(0);
      simpleCharStream0.inputStream = (Reader) stringReader0;
      stringReader0.reset();
      jVCParserTokenManager0.jjround = 0;
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.setTabSize(12);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.getNextToken();
      stringReader0.mark(1);
      stringReader0.close();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager2.getNextToken();
      jVCParserTokenManager2.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager3 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.SwitchTo((-522));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -522. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-2);
      byteArray0[0] = (byte)2;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte) (-83);
      pipedOutputStream0.write(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2985);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-4957));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4957. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte) (-83);
      pipedOutputStream0.write(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3024);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(6, token0.kind);
      assertEquals(1, token0.beginLine);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals("\u0015", token1.toString());
      
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 29);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 29. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("[[=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 391, 62, 22);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.jjFillToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 62. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-13), 391, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      simpleCharStream0.tabSize = 1;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.SwitchTo(64);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 64. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[a==");
      StringReader stringReader1 = new StringReader("[[a==");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 764, 22, 128);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(1662);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1662. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-13), 391, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      simpleCharStream0.tabSize = 1;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(1624);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1624. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0CDIb6T]:WJy1J9ka");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      stringReader0.skip(0);
      StringReader stringReader1 = new StringReader("");
      simpleCharStream0.inputStream = (Reader) stringReader1;
      jVCParserTokenManager0.jjround = 0;
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      jVCParserTokenManager0.SwitchTo(4);
      jVCParserTokenManager0.getNextToken();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jVCParserTokenManager0;
      objectArray0[3] = (Object) stringReader1;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.BeginToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-77));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -77. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[Tu=Al");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-1), (-1), 62);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, (-1), (-1), 7);
      simpleCharStream2.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager1.getNextToken();
      simpleCharStream2.Done();
      simpleCharStream1.prevCharIsLF = true;
      SimpleCharStream simpleCharStream3 = new SimpleCharStream(stringReader0, 2051, (-1), 39);
      jVCParserTokenManager0.ReInit(simpleCharStream3);
      jVCParserTokenManager1.ReInit(simpleCharStream3);
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[Tu=Al");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-1), (-1), 62);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, (-1), (-1), 7);
      simpleCharStream2.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager1.getNextToken();
      simpleCharStream2.Done();
      simpleCharStream1.prevCharIsLF = true;
      SimpleCharStream simpleCharStream3 = new SimpleCharStream(stringReader0, 2051, (-1), 39);
      jVCParserTokenManager0.ReInit(simpleCharStream3);
      jVCParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[<u=Al");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-1), (-1), 62);
      simpleCharStream1.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.getNextToken();
      simpleCharStream0.readChar();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager2.SwitchTo(1);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager2.SwitchTo(1);
      // Undeclared exception!
      try { 
        jVCParserTokenManager2.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[<u=Al");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-1), (-1), 62);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, (-1), (-1), 7);
      simpleCharStream2.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager1.getNextToken();
      simpleCharStream2.Done();
      simpleCharStream1.prevCharIsLF = true;
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      jVCParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringReader stringReader0 = new StringReader("Q<uq_esQS+Bu|=DxHU");
      stringReader0.markSupported();
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0, 391);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.inBuf = 391;
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.readChar();
      simpleCharStream0.bufcolumn = jVCParserTokenManager0.jjnewLexState;
      jVCParserTokenManager0.SwitchTo(0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = '\u0000';
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[4] = '\u0000';
      simpleCharStream0.buffer = charArray0;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.SwitchTo(3);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo(3);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-13), 369, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      simpleCharStream0.tabSize = 1;
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals("7", token1.toString());
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token2.kind);
      
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertEquals(14, token3.endColumn);
      assertEquals(14, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringReader0.read();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 92, (-1710), 174);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals("[", token0.toString());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c<-W=^");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      stringReader0.skip(0);
      StringReader stringReader1 = new StringReader("");
      simpleCharStream0.inputStream = (Reader) stringReader1;
      jVCParserTokenManager0.jjround = 0;
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      jVCParserTokenManager0.SwitchTo(4);
      jVCParserTokenManager0.jjFillToken();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jVCParserTokenManager0;
      objectArray0[3] = (Object) stringReader1;
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 4);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.jjFillToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.SwitchTo(1026);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1026. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0CDIb6T]:WJy1J9ka");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      stringReader0.skip(0);
      StringReader stringReader1 = new StringReader("");
      simpleCharStream0.inputStream = (Reader) stringReader1;
      jVCParserTokenManager0.jjround = 0;
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      jVCParserTokenManager0.SwitchTo(4);
      jVCParserTokenManager0.getNextToken();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jVCParserTokenManager0;
      objectArray0[3] = (Object) stringReader1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[4] = (Object) "0CDIb6T]:WJy1J9ka";
      mockPrintStream0.printf(locale0, "C", objectArray0);
      jVCParserTokenManager0.defaultLexState = 262;
      jVCParserTokenManager0.SwitchTo(4);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.SwitchTo(3);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.beginColumn);
      assertEquals("I", token0.toString());
      assertEquals(4, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-34), 391, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      simpleCharStream0.tabSize = 1;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.jjFillToken();
      jVCParserTokenManager0.SwitchTo(1);
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      jVCParserTokenManager1.jjFillToken();
      jVCParserTokenManager1.jjFillToken();
      jVCParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.SwitchTo(1181);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1181. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringReader stringReader0 = new StringReader("Q<uq_esQS+Bu|=DxHU");
      stringReader0.markSupported();
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0, 391);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.inBuf = 391;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      simpleCharStream0.bufcolumn = jVCParserTokenManager0.jjnewLexState;
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.getNextToken();
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(16, token1.kind);
      assertEquals(4, token1.beginColumn);
      
      jVCParserTokenManager0.SwitchTo(2);
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals("\u0000", token2.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '>';
      charArray0[2] = '*';
      charArray0[3] = '/';
      charArray0[4] = 'q';
      stringReader0.read(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-34), (-34), 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      simpleCharStream0.tabSize = 1;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.defaultLexState = 23;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[==");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-1), (-1), 62);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, (-1), (-1), 7);
      simpleCharStream2.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager1.getNextToken();
      simpleCharStream2.Done();
      jVCParserTokenManager1.SwitchTo(3);
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      assertEquals(3, simpleCharStream1.bufpos);
      assertEquals((-1), simpleCharStream1.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-34), 391, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(16, token0.kind);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      simpleCharStream0.tabSize = 1;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(16, token1.kind);
      
      jVCParserTokenManager1.getNextToken();
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, token2.endLine);
      assertEquals(7, token2.endColumn);
      assertEquals(">", token2.toString());
      assertEquals(7, token2.beginColumn);
      assertEquals(1, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[");
      stringReader0.markSupported();
      int int0 = 62;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BP];%{0%D?j6388i6");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 92, (-1710), 174);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 92);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 92. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0CDIb6T]:WJy1J9ka");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      stringReader0.skip(0);
      StringReader stringReader1 = new StringReader("");
      simpleCharStream0.inputStream = (Reader) stringReader1;
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 1, 7);
      jVCParserTokenManager2.ReInit(simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q<uq_esQS+Bu|=DxHU");
      int int0 = 0;
      int int1 = 391;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-53), 391);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      jVCParserTokenManager0.getNextToken();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      StringReader stringReader0 = new StringReader("BP];%{0%D?j6388i6");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-34), 391, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      jVCParserTokenManager0.SwitchTo(2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo(1);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(9);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 9. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0CDIb6T]:WJy1J9ka");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      stringReader0.skip(0);
      StringReader stringReader1 = new StringReader("");
      simpleCharStream0.inputStream = (Reader) stringReader1;
      jVCParserTokenManager0.jjround = 0;
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.getNextToken();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jVCParserTokenManager0;
      objectArray0[3] = (Object) stringReader1;
      objectArray0[4] = (Object) "0CDIb6T]:WJy1J9ka";
      mockPrintStream0.printf(locale0, "C", objectArray0);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.SwitchTo(3);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-34), 391, 62);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 391);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 391. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-34), 391, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.SwitchTo(1);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 6. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-34), 391, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      jVCParserTokenManager0.SwitchTo(2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.SwitchTo(1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Aq&o0/mV+:V<C_x");
      stringReader0.skip(32768L);
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("^].%]5WN");
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      stringReader1.read(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-1108), 391, 391);
      simpleCharStream0.ReInit((Reader) stringReader1);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 391);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 391. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      jVCParserTokenManager0.ReInit((SimpleCharStream) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(13);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 13. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-34), 391, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.beginColumn);
      
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 3865);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3865. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 62;
      SimpleCharStream simpleCharStream0 = null;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit((SimpleCharStream) null, 611);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 611. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\b");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-1), (-1), 62);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, (-1), (-1), 7);
      simpleCharStream2.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager1.getNextToken();
      simpleCharStream2.Done();
      jVCParserTokenManager1.SwitchTo(0);
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q<uq_esQS+Bu|=DxHU");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-34), 391);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.inBuf = 391;
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.bufcolumn = jVCParserTokenManager0.jjnewLexState;
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.ReInit(simpleCharStream0, 3);
      assertEquals(0, simpleCharStream0.bufpos);
      
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals("\u0000", token0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q<uq_esQS+Bu|=DxHU");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-34), 391);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.inBuf = 391;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals("\u0000", token0.toString());
      
      simpleCharStream0.bufcolumn = jVCParserTokenManager0.jjnewLexState;
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.getNextToken();
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(16, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{p{|");
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1192, 0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.curLexState = 1796;
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(1192);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1192. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q<uq_esQS+Bu|=DxHU");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-34), 391);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.inBuf = 391;
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.bufcolumn = jVCParserTokenManager0.jjnewLexState;
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$p7$EC>8~MS-Y@YV");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-34), 391, 62);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo(1);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(391);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 391. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q<uq_esQS+Bu|=DxHU");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-34), 391);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.inBuf = 391;
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.bufcolumn = jVCParserTokenManager0.jjnewLexState;
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.jjround = 11;
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)26;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZgZFHMx1T?|-/j\"ygP");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 111, (byte)28);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-38), (byte) (-38), 17);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0CDIb6T]:WJy1J9ka");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      stringReader0.skip(0);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
      StringReader stringReader1 = new StringReader("");
      simpleCharStream0.inputStream = (Reader) stringReader1;
      jVCParserTokenManager0.jjround = 0;
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.getNextToken();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jVCParserTokenManager0;
      objectArray0[3] = (Object) stringReader1;
      objectArray0[4] = (Object) "0CDIb6T]:WJy1J9ka";
      mockPrintStream0.printf(locale0, "C", objectArray0);
      jVCParserTokenManager0.SwitchTo(0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q<uq_esQS+Bu|=DxHU");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-34), 391);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      int int0 = (-2617);
      sequenceInputStream0.mark((-2617));
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 130);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.tabSize = 0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      jVCParserTokenManager0.debugStream = (PrintStream) mockPrintStream0;
      jVCParserTokenManager0.setDebugStream((PrintStream) null);
      jVCParserTokenManager0.jjnewStateCnt = 8;
      mockPrintStream0.print((Object) stringReader0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (-77));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -77. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0CDIb6T]:WJy1J9ka");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      stringReader0.skip(0);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
      StringReader stringReader1 = new StringReader("");
      simpleCharStream0.inputStream = (Reader) stringReader1;
      jVCParserTokenManager0.jjround = 0;
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.getNextToken();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jVCParserTokenManager0;
      objectArray0[3] = (Object) stringReader1;
      objectArray0[4] = (Object) "0CDIb6T]:WJy1J9ka";
      mockPrintStream0.printf(locale0, "C", objectArray0);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
      jVCParserTokenManager0.SwitchTo(2);
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (String) null);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      sequenceInputStream0.mark(0);
      jVCParserTokenManager0.SwitchTo(3);
      jVCParserTokenManager0.curChar = 'F';
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjnewStateCnt = 2;
      sequenceInputStream0.available();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(4095);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4095. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{p{|");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1192, 0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      int int0 = 4933;
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 4933);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4933. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      jVCParserTokenManager0.jjmatchedKind = 8;
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      jVCParserTokenManager0.defaultLexState = 1331;
      jVCParserTokenManager0.defaultLexState = (-796);
      jVCParserTokenManager0.jjnewStateCnt = 1331;
      PrintStream printStream0 = jVCParserTokenManager0.debugStream;
      jVCParserTokenManager0.setDebugStream(printStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q<uq_esQS+Bu|=DxHU");
      int int0 = 0;
      int int1 = (-34);
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-34), 391);
      simpleCharStream0.ReInit((Reader) stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.bufcolumn = jVCParserTokenManager0.jjnewLexState;
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.jjround = 11;
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)60);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2084, 2084);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      int int0 = 1174;
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 1174);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1174. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)17, 0);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte) (-80));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -80. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }
}
