/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 23:27:49 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte) (-114);
      byteArray1[3] = (byte) (-114);
      byteArray1[4] = (byte) (-114);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("anewarray", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("anewarray", string0);
      
      String string1 = Utility.convertString("if_icmple");
      String string2 = Utility.compactClassName("if_icmple");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.searchOpcode("PMGClass(");
      Utility.compactClassName("PMGClass(", "PMGClass(", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.getSignature("b5 00 00 00 00 00 00 00");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-75);
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      Utility.encode(byteArray1, false);
      Utility.compactClassName("A=%p!!yw|!");
      try { 
        Utility.methodSignatureReturnType("(anonymous)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.accessToString((int) (byte) (-62));
      assertEquals("private volatile transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.methodSignatureArgumentTypes("SENSITIVE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SENSITIVE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.typeOfSignature("I=l:gal type:F");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.format(172, 76, true, 'w');
      assertEquals("172wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", string0);
      
      short short0 = Utility.searchOpcode("172wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("172wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
      PrintStream printStream0 = mockPrintStream0.printf("ishr", (Object[]) constantArray0);
      Utility.printArray(printStream0, (Object[]) constantArray0);
      short short1 = Utility.searchOpcode("ishr");
      assertEquals((short)122, short1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte) (-94);
      Utility.encode(byteArray0, false);
      int int0 = 52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 52, (int) (byte) (-94));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnonnull\t\t#-14393", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)66;
      Utility.encode(byteArray0, false);
      Utility.setBit(852, 1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)104;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("tWAy$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("HSk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HSk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.searchOpcode("PMGClass(");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-28);
      // Undeclared exception!
      try { 
        Utility.signatureToString("PMGClass(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("prFn(+F_a\".", true);
      Utility.accessToString((-1962));
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep1");
      int int0 = 176;
      Utility.setBit(176, 176);
      Utility.compactClassName("impdep1");
      // Undeclared exception!
      Utility.fillup("impdep1", 65712, false, 'r');
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("A5go", false);
      assertArrayEquals(new byte[] {(byte)65, (byte)53, (byte)103, (byte)111}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = Utility.setBit(1746, 44);
      assertEquals(5842, int0);
      
      int int1 = Utility.clearBit(1746, 5842);
      assertEquals(1746, int1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 48, 988);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-1390), true, '6');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("Nrm!w>uC/8EOklI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nrm!w>uC/8EOklI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.clearBit(0, 0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("fneg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("\nException handler(s) = \n");
      assertEquals("\\nException handler(s) = \\n", string0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)110, (byte)101, (byte)103}, byteArray0);
      
      String string1 = Utility.compactClassName("org.apache.bcel.classfile.StackMapType", "", true);
      assertEquals("org.apache.bcel.classfile.StackMapType", string1);
      
      String string2 = "\\u829&:~-LOE";
      String string3 = Utility.methodTypeToSignature(string2, (String[]) null);
      assertEquals("()L\\u829&:~-LOE;", string3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "S~xnOVtOY";
      Utility.typeOfSignature("S~xnOVtOY");
      // Undeclared exception!
      try { 
        Utility.decode("r$7Z(VQ", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q='O~)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q='O~)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("36Qa=6.eJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `36Qa=6.eJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)52;
      Utility.signatureToString("StackMap", false);
      String string0 = Utility.accessToString((int) (byte) (-22), false);
      assertEquals("private static synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ye7s^dQQ*|<2k";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("f2i", "MLNHzUG-tG\"um&w7X", "f2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3285), (-872), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.searchOpcode(" arg");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("fadd", false);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-36);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-36), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = "long";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      byteArray0[0] = (byte)39;
      byteArray0[2] = (byte) (-7);
      byteArray0[1] = (byte) (-67);
      byteArray0[4] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-78);
      byteArray0[0] = (byte) (-99);
      byteArray0[5] = (byte) (-83);
      byteArray0[4] = (byte)64;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W[he1TTvbA/*ZIzOHP");
      try { 
        Utility.typeOfSignature("W[he1TTvbA/*ZIzOHP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W[he1TTvbA/*ZIzOHP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.isSet((-534), (byte)10);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      Utility.toHexString(byteArray0);
      String string0 = "Y7f)";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y7f)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y7f)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      try { 
        Utility.typeOfSignature("%|bKfpM%y[py`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %|bKfpM%y[py`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8dK-/d,-s9+g&MEVO?", "+Q`xj", "8dK-/d,-s9+g&MEVO?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8dK-/d,-s9+g&MEVO?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexit");
      try { 
        Utility.typeOfMethodSignature("compiled from\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: compiled from\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-92);
      byte[] byteArray1 = Utility.decode("J$^::WE,v8", false);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)58, (byte)58, (byte)87, (byte)69, (byte)44, (byte)118, (byte)56}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "I=l:gal type:F";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{I=l:gal type:F}", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("A^>Cu~H_p;@QHq", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-16), 161, true);
      assertEquals("0:    lstore_2\n1:    dup2_x2\n2:    istore_3\n3:    fstore_0\n4:    lneg\n5:    iand\n6:    dstore_1\n7:    swap\n8:    irem\n9:    istore_0\n10:   lstore_1\n11:   fastore\n12:   dstore_1\n13:   lrem\n", string0);
      
      String string1 = Utility.classOrInterface((-16));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 13878. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.format(1, 239, true, 'W');
      assertEquals("1WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Utility.classOrInterface(49);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Utility.getSignature("I.{loK6TI\"`Wh>G?s`");
      assertEquals("LI/{loK6TI\"`Wh>G?s`;", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "(w4e:u}m\"-";
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte) (-74);
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)122;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("(w4e:u}m\"-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (w4e:u}m\"-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 176, (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("fstore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.setBit((byte)56, (byte)56);
      Utility.classOrInterface((byte)56);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, 16777272);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)80;
      Utility.encode(byteArray0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = "putstatic";
      try { 
        Utility.typeOfSignature("1-$`&|!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1-$`&|!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('A');
      String string0 = "B";
      try { 
        Utility.decode("B", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "fpLwqN Q1<n}tx CK5";
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-3418), (byte)45, localVariableArray0, constantPool0);
      try { 
        Utility.methodSignatureToString("fpLwqN Q1<n}tx CK5", "fpLwqN Q1<n}tx CK5", "fpLwqN Q1<n}tx CK5", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fpLwqN Q1<n}tx CK5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("(@", "(@", "(@");
      Utility.isSet(48, 40);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (int) (byte)37, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)113;
      byteArray0[2] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 467, (int) (byte) (-127), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-72);
      byteArray0[8] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.accessToString(0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(519);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodType1;
      constantArray0[1] = (Constant) constantMethodType2;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1412, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.getSignature("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-33), (byte) (-33));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("iconst_1", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("+k$?0V^-6*Qvp)MH+2$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(17, byteArray0.length);
      assertEquals("dmul", string0);
      
      short short0 = Utility.searchOpcode("+k$?0V^-6*Qvp)MH+2$");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "A5go";
      try { 
        Utility.typeOfSignature("A5go");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A5go
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-61);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("W");
      assertEquals((short) (-1), short0);
      
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      boolean boolean1 = Utility.isSet((-1926), (byte)1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.classOrInterface((byte) (-127));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence1.close();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("lload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnonnull\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)10;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-120);
      byteArray1[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.setBit((-1375), 0);
      Utility.accessToString(6, true);
      try { 
        Utility.methodSignatureReturnType("private protected");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private protected'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      // Undeclared exception!
      try { 
        Utility.signatureToString("O#jJ.BOvhAUVI+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O#jJ.BOvhAUVI+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[2];
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, 197);
      assertEquals("0:    nop\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("B6Y:`x#8$|y?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B6Y:`x#8$|y?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.decode("rxI9c5Yh$XE`W", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) constantPool0;
      objectArray0[1] = (Object) "rxI9c5Yh$XE`W";
      objectArray0[2] = (Object) constantPool0;
      objectArray0[3] = (Object) constantPool0;
      objectArray0[4] = (Object) "rxI9c5Yh$XE`W";
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-83);
      byteArray0[4] = (byte)64;
      byteArray0[7] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lreturn
         // 1:    goto\t\t#24499
         // 4:    lstore_1
         // 5:    lreturn
         // 6:    nop
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("GboSd8KD<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GboSd8KD<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.isJavaIdentifierPart('\'');
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("Expected class `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Expected class `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YL!s}DxesrZ#bV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YL!s}DxesrZ#bV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.methodSignatureReturnType("S$YNSQeEt,p9E+", true);
      Utility.isJavaIdentifierPart('&');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$7DH!&]vv55HT. ", "short", "S$YNSQeEt,p9E+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $7DH!&]vv55HT. 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "\\'";
      String string1 = "%fyCO8)uq!fa`&)";
      Code code0 = null;
      try {
        code0 = new Code(0, 103, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null, null, null}", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.searchOpcode("M0las(");
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("M0las(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M0las(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.setBit(1749, 44);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-116);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("H$5c$NP$8c", string0);
      
      byte byte0 = Utility.typeOfSignature("Ff@q!2xO=_[");
      assertEquals((byte)6, byte0);
      
      int int0 = Utility.setBit(3, (byte) (-116));
      assertEquals(4099, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-72);
      byteArray0[8] = (byte) (-85);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#-25411", string0);
      
      short short0 = Utility.searchOpcode("\t<");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.accessToString(13);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-114);
      String string0 = "&UF;[n\"0OVS";
      try { 
        Utility.typeOfSignature("&UF;[n\"0OVS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &UF;[n\"0OVS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = Utility.isSet(168, (-6814));
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("fneg", false);
      String string0 = Utility.replace("F(B,F!P", "impdep1", "new");
      assertEquals("F(B,F!P", string0);
      
      String string1 = Utility.getSignature("<init>");
      assertEquals("L<init>;", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("fneg", string2);
      
      String string3 = Utility.signatureToString("F(B,F!P");
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte) (-98);
      byteArray1[4] = (byte) (-103);
      byteArray1[5] = (byte) (-103);
      byteArray1[6] = (byte) (-103);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.mark((byte)66);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ifle\t\t#16962", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.accessToString(13);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[2] = (byte)64;
      byteArray0[2] = (byte)52;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-58), 3344);
      Utility.convertString("public protected static");
      try { 
        Utility.typeOfSignature("2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("\t<", (String[]) null);
      Utility.methodSignatureArgumentTypes("()L<;", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("* ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `* '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("ldiv");
      assertEquals((short)109, short0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.accessToString(13);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-114);
      String string0 = "&UF;[n\"0OVS";
      try { 
        Utility.typeOfSignature("&UF;[n\"0OVS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &UF;[n\"0OVS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.accessToString(0);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.setBit(1749, 44);
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("monitorenter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorenter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      Utility.getSignature("}-Fg%.59!uM8Rb4");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)45;
      Utility.equals(byteArray0, byteArray0);
      Utility.signatureToString("L}-Fg%/59!uM8Rb4;", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2331, 1545, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.decode("ContantValue", false);
      try { 
        Utility.typeOfSignature("1c`GyAq1]+03wrMf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1c`GyAq1]+03wrMf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "fneg";
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ifnull", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$af$A$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.getSignature(")\t");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[6];
      String string0 = "w:J0\"";
      try { 
        Utility.typeOfSignature("w:J0\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w:J0\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (-4198));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        Utility.typeOfSignature("RuntimeInvisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("LtE8JZQ5v(H/R<s", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LtE8JZQ5v(H/R<s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("rxI9c5Yh$EE`W", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = byteSequence0.available();
      assertEquals(12, int0);
      
      byteSequence0.readChar();
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7*D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7*D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      assertEquals("L);", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)41;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$G$5c$87$5bl$v", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte) (-121));
      assertEquals("0:    iconst_3\n1:    dup2\n2:    i2d\n3:    dup_x2\n4:    idiv\n5:    dload_3\n", string3);
      
      Utility.replace("putstatic", "GvP%m-L%N`", "putstatic");
      Utility.isJavaIdentifierPart('\'');
      try { 
        Utility.methodSignatureArgumentTypes(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ret\t\t%157", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("PV`}R06b", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, 71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Utility.signatureToString("Ff@q!2xO=_[");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.classOrInterface(68);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("class");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      objectArray0[1] = (Object) "class";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "Vw[\\)\">y7sA$8TuJ";
      // Undeclared exception!
      try { 
        Utility.decode("Vw[)\">y7sA$8TuJ", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("athrow", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-644), 86, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFully(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("MLNHzUG-tG\"um&w7X", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MLNHzUG-tG\"um&w7X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.signatureToString("L@1iH?@%>x`uw;V", true);
      Utility.isJavaIdentifierPart('I');
      try { 
        Utility.methodSignatureArgumentTypes("L@1iH?@%>x`uw;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L@1iH?@%>x`uw;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, 209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = Utility.setBit(1749, 44);
      assertEquals(5845, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-40);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("JLcZ:|pP=e.=A=(2V", true);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = Utility.isSet(183, 1287);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.accessToString((-4118));
      assertEquals("private static synchronized volatile transient native interface abstract strictfp annotation enum", string0);
      
      String string1 = Utility.accessToString(32);
      assertEquals("synchronized", string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.compactClassName("(w4e:u}m\"-", false);
      Utility.accessToString(10, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid signature: ", "Y&Mj9T:^!1lr", "V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.replace("U^&imXDWEV!;P", ":n/x{t%6S'PT/9BdkB;", "U^&imXDWEV!;P");
      try { 
        Utility.methodSignatureReturnType("U^&imXDWEV!;P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U^&imXDWEV!;P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      String string0 = Utility.format(1459, (-432856147), false, '>');
      assertEquals("1459", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)18;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$5dx$b66B$S", string1);
      
      Utility.setBit(18, (-1670));
      try { 
        Utility.methodSignatureToString("byte", "impdep2", "]|Unu:", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.setBit(1749, (-369));
      byte[] byteArray0 = new byte[2];
      byte byte0 = Utility.typeOfSignature("DJeg`~q[#mxvi");
      assertEquals((byte)7, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(40, 201);
      assertEquals(552, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CCchw{]zd^#rge%t'}7");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short short0 = Utility.searchOpcode("%hg");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit(1749, (-369));
      assertEquals(34517, int0);
      
      String string0 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byte byte0 = Utility.typeOfSignature("DJeg`~q[#mxvi");
      assertEquals((byte)7, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
      
      String string1 = Utility.fillup("%hg", (short) (-1), true, 'E');
      assertEquals("%hg", string1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "Illegal type: ";
      Utility.getSignature("Illegal type: ");
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-71);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), 29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifle\t\t#-24051
         // 3:    istore_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Utility.fillup("n:$ee*0RR ", 2334, true, 'X');
      try { 
        Utility.decode("n:$ee*0RR ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      short short0 = Utility.searchOpcode("iload_3");
      assertEquals((short)29, short0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)29;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.searchOpcode("@1iH?@%>x`uw");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "@1iH?@%>x`uw";
      stringArray0[1] = "@1iH?@%>x`uw";
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      String string0 = "You_sno{a]~";
      try { 
        Utility.typeOfSignature("You_sno{a]~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: You_sno{a]~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1742), (-1742), false);
      assertEquals("0:    saload\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("+k$?0V^-6*Qvp)MH+2$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(17, byteArray0.length);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "T]K g%aq^";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.close();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.searchOpcode("getfield");
      Utility.setBit((short)180, 1749);
      Utility.accessToString((-1069), true);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("public private final volatile transient native strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private final volatile transient native strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.setBit((-56), (-56));
      Utility.searchOpcode("[]");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[]", "", "[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.isJavaIdentifierPart('e');
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 7, 7, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.typeOfSignature("LocalVariableTypeTable");
      // Undeclared exception!
      try { 
        Utility.signatureToString("UHn+vl1n/&1h+rt]|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UHn+vl1n/&1h+rt]|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte byte0 = (byte) (-64);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = (-2514);
      Utility.accessToString((-2514));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("private protected static synchronized interface abstract synthetic annotation enum");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "private protected static synchronized interface abstract synthetic annotation enum";
      objectArray0[3] = (Object) "private protected static synchronized interface abstract synthetic annotation enum";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("private protected static synchronized interface abstract synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private protected static synchronized interface abstract synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)4;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)10, false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    l2i\n1:    lconst_1\n2:    istore_0\n3:    sastore\n4:    iconst_1\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    l2i
         // 1:    lconst_1
         // 2:    istore_0
         // 3:    sastore
         // 4:    iconst_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.searchOpcode("@1iH?@%>x`uw");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("swap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: swap
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\'');
      assertFalse(boolean0);
      
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 217, false);
      assertEquals("0:    lcmp\n1:    lcmp\n2:    isub\n3:    lcmp\n", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(172, 76, true, 'w');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString(413, true);
      try { 
        Utility.typeOfSignature("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      Utility.format((byte) (-96), (byte) (-96), false, '-');
      try { 
        Utility.typeOfSignature("-96");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -96
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.searchOpcode("dreturn");
      // Undeclared exception!
      try { 
        Utility.signatureToString("XPV:~HLVp;8 }3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XPV:~HLVp;8 }3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      boolean boolean0 = false;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dstore_0", "(w4e:u}m\"-", "P]2b6OvYD#Av");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.getSignature(")\t");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-1);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4575), (int) (byte) (-8), false);
      assertEquals("0:    iconst_2\n1:    <illegal opcode>\n2:    nop\n3:    l2f\n4:    freturn\n5:    fstore_0\n6:    impdep2\n", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("CP]n&l??wCdlLI_!", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("fstore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fstore_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.isSet((-1059), 41);
      Utility.fillup("jsr_w", 41, true, 'H');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lneg", "<illegal opcode>", "putfield", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lneg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-60);
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte) (-87);
      byteArray1[3] = (byte) (-87);
      byteArray1[4] = (byte) (-87);
      byteArray1[5] = (byte) (-87);
      int int0 = 789;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-87), 789);
      Utility.compactClassName("6");
      try { 
        Utility.typeOfSignature("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("invokespecial", false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("69 6e 76 6f 6b 65 73 70 65 63 69 61 6c", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = (-1321);
      Utility.isSet((-1321), 147);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.setBit((-1051), 1399);
      Utility.accessToString(1399, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-95);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte) (-95);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)33;
      byteArray1[6] = (byte)33;
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.typeOfSignature("public private protected final volatile native abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected final volatile native abstract
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = Utility.clearBit(0, 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)92;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.encode(byteArray0, true);
      Utility.compactClassName("Nrm!w>uC/8EOklI");
      try { 
        Utility.methodSignatureReturnType("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `freturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")_^-RsvuzDy", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1606), (-1404));
      assertEquals("0:    dload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.searchOpcode("GClss(");
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("GClss(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GClss(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.format(81, 81, false, ',');
      try { 
        Utility.typeOfSignature(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,81");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,81
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("s|T1b6|7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s|T1b6|7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      try { 
        Utility.typeOfSignature("8fsn/M 0[2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8fsn/M 0[2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, 969);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.getSignature("Warning: Padding byte != 0 in ");
      assertEquals("LWarning:;", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("rxI9c5Yh$XE`W", false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("Khtk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Khtk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)124;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 57, (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("99 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".hGEs[E_*t.Hy<Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .hGEs[E_*t.Hy<Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short short0 = Utility.searchOpcode("ZMGClass(");
      assertEquals((short) (-1), short0);
      
      Object object0 = new Object();
      Utility.typeOfSignature("ZMGClass(");
      byte byte0 = Utility.typeOfSignature("ZMGClass(");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.signatureToString("CP]n&l??wCdlLI_!", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.convertString("float");
      try { 
        Utility.methodSignatureArgumentTypes("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)25;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      byteArray0[0] = (byte)59;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-67);
      byte byte0 = (byte)9;
      byteArray0[4] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteSequence0, (byte) (-67));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte)116;
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte) (-64);
      byteArray1[5] = (byte)116;
      byteArray1[6] = (byte) (-64);
      byteArray1[7] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence1.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "R";
      try { 
        Utility.methodSignatureArgumentTypes("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RXQN#<93");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RXQN#<93
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("\t<", (String[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.decode("\t<", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, 142);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Utility.compactClassName("(", "(", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("F$f7$c7$c5", string0);
      
      String string1 = Utility.convertString("impdep1");
      assertEquals("impdep1", string1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.typeOfSignature("LocalVariableTyWeTable");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariableTyWeTable", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTyWeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("aload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.isJavaIdentifierPart('.');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Byte code error: ");
      try { 
        Utility.typeOfSignature("U6@t[kEx;Wm`6h]6I=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U6@t[kEx;Wm`6h]6I=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = Utility.isSet(90, 43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('^');
      Utility.format(1145, 2464, false, '5');
      try { 
        Utility.methodSignatureReturnType("[l )");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.compactClassName("ya\"(O<");
      Utility.compactClassName("jsr");
      Utility.methodSignatureReturnType("V/W[F#2P1$CB");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ya\"(O<";
      stringArray0[1] = "void";
      stringArray0[2] = "jsr";
      stringArray0[3] = "F";
      stringArray0[4] = "void";
      stringArray0[5] = "V/W[F#2P1$CB";
      try { 
        Utility.methodTypeToSignature("jsr", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (-861), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      short short0 = Utility.searchOpcode("%hg");
      assertEquals((short) (-1), short0);
      
      Object object0 = new Object();
      byte byte0 = Utility.typeOfSignature("S~xnOVtOY");
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)126;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("goto\t\t#-18039", string0);
      
      String string1 = Utility.fillup("interface", 255, false, '1');
      assertEquals("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111interface", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.format((-177), (-177), false, 'a');
      assertEquals("-177", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-64);
      Utility.equals(byteArray0, byteArray0);
      short short0 = Utility.searchOpcode("S00");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.accessToString((int) (byte)1);
      assertEquals("public", string1);
      
      Utility.format((byte)40, 2069, true, '3');
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.getSignature(")\t");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)92;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)41;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("invokespecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokespecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "(";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", "(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.format(2619, (-49), false, '[');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.clearBit(0, 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "KOn[Mat_g<*^jHY5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" of class ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-21);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      Utility.toHexString(byteArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "b5 00", "b5 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ye7s^dQQ*|<2k";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dload_0", "MLNHzUG-tG\"um&w7X", "dload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 255, 1520, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Utility.getSignature("\n\t\tthrows ");
      assertEquals("Lthrows;", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "l2i";
      try { 
        Utility.typeOfSignature("l2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)92;
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-34), (int) (byte)91);
      assertEquals("0:    monitorexit\n1:    nop\n", string0);
      
      String string1 = Utility.classOrInterface(1337);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.accessToString((-1492));
      Utility.searchOpcode("jVMP#w[^'(6");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), 2033);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    istore\t\t%230
         // 3:    iload\t\t%184
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.isJavaIdentifierPart('e');
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      String string0 = "Nrm!w>uC/8EOklI";
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("Nrm!w>uC/8EOklI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nrm!w>uC/8EOklI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("'aDuT8NA@,", false);
      Utility.encode(byteArray0, false);
      int int0 = 72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) "saload";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) (byte) (-96);
      objectArray0[4] = (Object) "saload";
      Object object0 = new Object();
      objectArray0[5] = object0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      char char0 = ' ';
      Utility.isJavaIdentifierPart(' ');
      ConstantPool constantPool0 = null;
      int int0 = 0;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)4, (int) (byte)4, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)10;
      Utility.isSet((byte)10, (byte) (-117));
      Utility.codeToString(byteArray0, (ConstantPool) null, (-25), 2866);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    f2i\n1:    lconst_1\n2:    nop\n3:    nop\n4:    nop\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    f2i
         // 1:    lconst_1
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 658, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dreturn", string0);
      
      short short0 = Utility.searchOpcode("dreturn");
      assertEquals((short)175, short0);
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-81), (byte) (-81), byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("if_acmpne", "dreturn", "dreturn", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.classOrInterface((-2884));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte)86, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)76);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.printArray((Object[]) null);
      Utility.isSet(541, 108);
      Utility.convertString("astore_1");
      Utility.printArray((Object[]) null, false, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte)76, (byte)76);
      try { 
        Utility.typeOfSignature("astore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)44;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "l";
      Utility.compactClassName("l");
      try { 
        Utility.methodSignatureReturnType("\t\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = Utility.fillup("FYhBoTFgAYmgXv|", 2635, false, 'b');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 573);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("rxI9c5Yh$XE`W", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.compactClassName("Nrm!w>uC/8EOklI");
      try { 
        Utility.methodSignatureReturnType("Nrm!w>uC/8EOklI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nrm!w>uC/8EOklI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-64);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("long");
      constantUtf8_0.clone();
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.decode("`rA^,ES#R", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.compactClassName(":+V)L", true);
      int int0 = 57;
      boolean boolean0 = false;
      Utility.accessToString(57, false);
      Utility.compactClassName("public static final synchronized", ":+V)L", false);
      String string0 = "native";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("native", "zCcLs]T7W_YE6,(n", "public static final synchronized", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      String string0 = Utility.methodTypeToSignature("fdiv", (String[]) null);
      assertEquals("()Lfdiv;", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.accessToString(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.format(0, 0, true, 'F');
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.typeOfSignature("LocalVariableTypeTable");
      byte byte0 = Utility.typeOfSignature("LocalVariableTypeTable");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte)77;
      byteArray1[4] = (byte)41;
      byteArray1[5] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      // Undeclared exception!
      try { 
        Utility.getSignature("V*[)\">ymsA$8?[J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[)\">ymsA$8?[J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte)42;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-58), 138, true);
      Utility.convertString("0:    sastore\n1:    astore_2\n2:    <illegal opcode>\n3:    ifnull\t\t#12601\n6:    dup\n7:    dcmpl\n8:    aload_0\n");
      Utility.format((-3440), 1029, false, ';');
      MockPrintStream mockPrintStream0 = new MockPrintStream("V");
      mockPrintStream0.print(true);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "0:    sastore\n1:    astore_2\n2:    <illegal opcode>\n3:    ifnull\t\t#12601\n6:    dup\n7:    dcmpl\n8:    aload_0\n", (-458), 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readBoolean();
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lneg", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)54;
      byteArray0[2] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.format((byte) (-58), 125, true, 'N');
      assertEquals("-58NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string0);
      
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.getSignature("org.apache.bcel.classfile.Unknown");
      assertEquals("Lorg/apache/bcel/classfile/Unknown;", string1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.getSignature("Illegal type: ");
      Utility.compactClassName("Illegal type: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Illegal type: ";
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.clearBit(480, 480);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte) (-27));
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("fload\t\t%235", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.searchOpcode("f2i");
      Object object1 = new Object();
      try { 
        Utility.typeOfSignature("9Z+w\"BAUlB[PLyj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9Z+w\"BAUlB[PLyj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals("astore\t\t%117", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(7, byteSequence0.getIndex());
      assertEquals("lushr", string1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("impdep2", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 146, 12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("boolean", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2063), 2327);
      assertEquals("0:    fadd\n1:    ddiv\n2:    ddiv\n3:    idiv\n4:    lsub\n5:    ladd\n6:    fdiv\n", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-90);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), 40);
      Utility.compactClassName("A;=9c?'UW<7E8m4B");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("A;=9c?'UW<7E8m4B", "+IF", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-29);
      Constant[] constantArray0 = new Constant[1];
      String string0 = "instanceof";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("instanceof");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantUtf8_0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (-588), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-125);
      String string0 = "6h\\u*_kV";
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6h\\u*_kV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      short short0 = Utility.searchOpcode("%hg");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)92;
      String string0 = Utility.compactClassName("' at index ", ";\"&72b4|u1z", false);
      assertEquals("' at index ", string0);
      
      String string1 = Utility.fillup("#Ge", 711, false, '%');
      assertEqualse", string1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "(w4e:u}m\"-";
      Utility.searchOpcode("(w4e:u}m\"-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "(w4e:u}m\"-";
      objectArray0[1] = (Object) "(w4e:u}m\"-";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      objectArray0[2] = (Object) "(w4e:u}m\"-";
      objectArray0[3] = (Object) "(w4e:u}m\"-";
      Utility.printArray(objectArray0);
      String string1 = "(";
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.getSignature(", ");
      // Undeclared exception!
      try { 
        Utility.signatureToString(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "Q='O~)";
      byte byte0 = (byte)59;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2723), (int) (byte)59, true);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("anewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("Exceptions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exceptions
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-35);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("wide\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide\t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.read();
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
      
      String string1 = Utility.accessToString(10, false);
      assertEquals("private static", string1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@1iH?@%>x`uw");
      Utility.searchOpcode("@1iH?@%>x`uw");
      Utility.isJavaIdentifierPart('@');
      Utility.convertString("@1iH?@%>x`uw");
      int int0 = 51;
      Utility.classOrInterface(51);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "@1iH?@%>x`uw";
      objectArray0[3] = (Object) "@1iH?@%>x`uw";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)70;
      byteArray0[1] = (byte)70;
      Utility.fillup("", (byte)70, false, ';');
      Constant[] constantArray0 = new Constant[2];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", "class");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"class\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)115;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-79);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.typeOfSignature("*jd7Ew..P0d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jd7Ew..P0d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      short short0 = Utility.searchOpcode("@1iH?@%>x`uw");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@1iH?@%>x`uw";
      stringArray0[1] = "@1iH?@%>x`uw";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)88;
      String string0 = Utility.compactClassName("FH(}");
      assertEquals("FH(}", string0);
      
      String string1 = Utility.methodSignatureReturnType("Deprecated attribute with length > 0");
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.searchOpcode("(w4e:u}m\"-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), 94, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmple\t\t#-23388
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = Utility.replace("Nrm!w>uC/8EOklI", "Nrm!w>uC/8EOklI", "Nrm!w>uC/8EOklI");
      assertEquals("Nrm!w>uC/8EOklI", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.searchOpcode("%hg");
      Utility.setBit(1749, (-369));
      Utility.accessToString((int) (short) (-1), true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      Utility.compactClassName("T]K g%aq^", "\n     ", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("T]K g%aq^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T]K g%aq^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ifnull", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte) (-40);
      byteArray1[2] = (byte) (-104);
      byteArray1[3] = (byte) (-26);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)13;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte) (-123);
      byteArray1[8] = (byte) (-116);
      Utility.encode(byteArray1, true);
      Utility.convertString("if_icmple");
      Utility.compactClassName("lmul", "ifnull", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 73, 164, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (-16), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ret\t\t%10
         // 2:    wide\t(wide)
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)4;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)10, false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    l2i\n1:    lconst_1\n2:    istore_0\n3:    sastore\n4:    iconst_1\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    l2i
         // 1:    lconst_1
         // 2:    istore_0
         // 3:    sastore
         // 4:    iconst_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.typeOfSignature("LocalVariableTypeTable");
      try { 
        Utility.methodSignatureReturnType("LocalVariableTypeTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Utility.signatureToString("L@1iH?@%>x`uw;V", true);
      Utility.isJavaIdentifierPart('0');
      try { 
        Utility.methodSignatureArgumentTypes("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "[{.5";
      try { 
        Utility.methodSignatureArgumentTypes("!'C,J", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !'C,J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("jsr\t\t#-22075", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = "T]K g%aq^";
      // Undeclared exception!
      try { 
        Utility.signatureToString("T]K g%aq^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T]K g%aq^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "[{.5";
      // Undeclared exception!
      try { 
        Utility.getSignature("[{.5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [{.5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-3047.2F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(693, 175);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 175, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int int0 = Utility.setBit(0, (-1375));
      assertEquals(2, int0);
      
      String string0 = Utility.accessToString(0, false);
      assertEquals("", string0);
      
      String string1 = Utility.methodSignatureReturnType("B&pKp6ZJq");
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      byte byte1 = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.decode("fstore\t\t%133", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = Utility.signatureToString("Illegal type: ", true);
      assertEquals("int", string0);
      
      String string1 = Utility.getSignature("int");
      assertEquals("I", string1);
      
      boolean boolean0 = Utility.isSet((-16519105), (-16519105));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "Null";
      try { 
        Utility.typeOfMethodSignature("Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = Utility.convertString("\n\t\tthrows ");
      assertEquals("\\n\t\tthrows ", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload\t\t%160", string1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)91;
      Utility.convertString(")\t");
      Utility.isSet((byte) (-121), 82);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(3560, 82, (LocalVariable[]) null, (ConstantPool) null);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("Ia_R:", "Ia_R:", "vdy@$6KO<=", true, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ia_R:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.read();
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload\t\t%70", string0);
      
      String string1 = Utility.accessToString((-2521), false);
      assertEquals("public private protected synchronized interface abstract synthetic annotation enum", string1);
      
      String string2 = Utility.methodSignatureReturnType("Z~u");
      assertEquals("boolean", string2);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "{->/c5:@.wb'7";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("{->/c5:@.wb'7", "{->/c5:@.wb'7", "{->/c5:@.wb'7", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {->/c5:@.wb'7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Utility.searchOpcode("dreturn");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)98;
      byteArray0[0] = (byte)98;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byte byte2 = (byte)104;
      byteArray0[3] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("fadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fadd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("castore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: castore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.setBit(0, (-1375));
      Utility.accessToString(0, false);
      String string0 = "B&pKp6ZJq";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-36));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("fneg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.setBit((-6814), 201);
      assertEquals((-6302), int0);
      
      String string0 = Utility.accessToString(168, false);
      assertEquals("static synchronized transient", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)110, (byte)101, (byte)103}, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "static synchronized transient";
      objectArray0[1] = (Object) "fneg";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"static synchronized transient\", \"fneg\"", string1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)45;
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (int) (byte)45);
      try { 
        Utility.typeOfSignature(".GlR*F~]FAAD?a/<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .GlR*F~]FAAD?a/<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "[]";
      try { 
        Utility.methodSignatureToString("[]", "[]", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.isJavaIdentifierPart('e');
      Utility.format((byte) (-120), 232, true, 'v');
      try { 
        Utility.typeOfSignature("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('p');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = Utility.replace("", "YJHT)sk~Lx~", "");
      assertEquals("", string0);
      
      String string1 = Utility.accessToString(171, true);
      assertEquals("public private static transient", string1);
      
      int int0 = Utility.clearBit(171, 379);
      assertEquals(171, int0);
      
      short short0 = Utility.searchOpcode("YJHT)sk~Lx~");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)67;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("goto\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Utility.searchOpcode("PMGClass(");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-28);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" of class ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = Utility.getSignature("org.apache.bcel.classfile.Utility");
      assertEquals("Lorg/apache/bcel/classfile/Utility;", string0);
      
      String string1 = Utility.fillup("Vw[f)\">y7sA$8?uJ", (byte) (-51), true, 's');
      assertEquals("Vw[f)\">y7sA$8?uJ", string1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.isJavaIdentifierPart('e');
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      byte byte0 = (byte)45;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)88;
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = "0";
      try { 
        Utility.typeOfSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "checkcast";
      stringArray0[1] = "checkcast";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "checkcast";
      stringArray0[3] = "checkcast";
      stringArray0[4] = "* ";
      stringArray0[5] = "checkcast";
      stringArray0[6] = "checkcast";
      stringArray0[7] = "checkcast";
      Utility.methodTypeToSignature("checkcast", stringArray0);
      Utility.methodSignatureArgumentTypes("(Lcheckcast;Lcheckcast;Lcheckcast;Lcheckcast;L*;Lcheckcast;Lcheckcast;Lcheckcast;)Lcheckcast;", true);
      try { 
        Utility.decode("T;n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[9];
      ConstantDouble constantDouble0 = new ConstantDouble((-4631.420843));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-528), (-528));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-528), (-528));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble1 = new ConstantDouble(1287.192885);
      constantArray0[4] = (Constant) constantDouble1;
      ConstantString constantString0 = new ConstantString((-528));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[5] = (Constant) constantString1;
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = (-1321);
      Utility.isSet((-1321), 147);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      int int0 = Utility.clearBit((byte) (-73), 31);
      assertEquals(2147483575, int0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Utility.getSignature(" ");
      Utility.isSet(10001, 226);
      Utility.setBit(10001, (-3));
      // Undeclared exception!
      try { 
        Utility.signatureToString("float", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      int int0 = (-3113);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Utility.format(2619, (-49), false, '[');
      byte[] byteArray0 = Utility.decode("2619", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("aaload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aaload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte) (-87), (int) (byte)68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)88;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-20);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$ecXXX$ec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $ecXXX$ec
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Object object0 = new Object();
      Utility.typeOfSignature("S~xnOVtOY");
      String string0 = Utility.signatureToString("S~xnOVtOY");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("/hi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /hi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Utility.convertString("Q='O~)");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      try { 
        Utility.decode("Invalid method signatue: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "checkcast";
      stringArray0[1] = "checkcast";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "checkcast";
      stringArray0[3] = "checkcast";
      stringArray0[4] = "* ";
      stringArray0[5] = "checkcast";
      stringArray0[6] = "checkcast";
      stringArray0[7] = "checkcast";
      Utility.methodTypeToSignature("checkcast", stringArray0);
      Utility.methodSignatureArgumentTypes("(Lcheckcast;Lcheckcast;Lcheckcast;Lcheckcast;L*;Lcheckcast;Lcheckcast;Lcheckcast;)Lcheckcast;", true);
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = Utility.replace(")\t", ")\t", ")\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = Utility.isSet((byte)10, (byte)10);
      assertFalse(boolean0);
      
      String string0 = Utility.format((byte)10, (byte)10, false, '\\');
      assertEquals("\\\\\\\\\\\\\\\\10", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "r:a=Mv$(YmPrrL0><", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      try { 
        Utility.typeOfMethodSignature("%|bKfpM%y[py`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %|bKfpM%y[py`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)44, 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.compactClassName("\t\t", "\t\t", true);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("3=l F7de");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3=l F7de
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = "(w4e:u}m\"-";
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("(w4e:u}m\"-", false);
      Utility.accessToString(10, false);
      String string1 = "V";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid signature: ", "Y&Mj9T:^!1lr", "V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Utility.accessToString(13);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public protected static", "`,t5}K8N&z", "public protected static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readFloat();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(w4e:u}m\"-", "(w4e:u}m\"-", "(w4e:u}m\"-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `w4e:u}m\"-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[2] = (byte)10;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)86;
      byteArray0[2] = (byte)4;
      boolean boolean0 = false;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.signatureToString("Byte code error: ", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "\r", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-3512), 3878, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Utility.decode("new", false);
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.typeOfMethodSignature("new");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, 2130, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Object object1 = new Object();
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.accessToString((-371), true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "public protected static transient abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "public protected static transient abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "public protected static transient abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "class";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "public protected static transient abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, true, false);
      Utility.clearBit((-371), (-1467));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-31);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-88);
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = Utility.accessToString(0);
      assertEquals("", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;L;L;L;L;L;)L;", string1);
      
      int int0 = Utility.setBit(2038, 2038);
      assertEquals(4196342, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O0peG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O0peG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Utility.accessToString(0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      Object object1 = new Object();
      objectArray0[7] = object1;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = Utility.convertString("+L;KqQo<cu\"Og");
      assertEquals("+L;KqQo<cu\\\"Og", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("fstore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(172, 76, true, 'w');
      Utility.searchOpcode("172wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)122;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.isSet(156, (byte)0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 886, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.isSet((byte)120, (byte) (-124));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.searchOpcode("{B@%aIIbUHKf");
      Utility.setBit((short) (-1), 1749);
      Utility.accessToString((int) (short) (-1), true);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-1), true);
      assertEquals("0:    return\n1:    impdep2\n", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("rxI9c5Yh$EE`W", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("frem", string0);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("zR?X7}yf{\".}a19FU:", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GNVG.:Fi(L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GNVG.:Fi(L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("athrow", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-644), (-16), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFully(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ladd", "MLNHzUG-tG\"um&w7X", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ladd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("HFt>v`]6AW$", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HFt>v`]6AW$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Utility.getSignature(")\t");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)41;
      Utility.encode(byteArray0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte) (-121));
      Utility.replace("putstatic", "L);", "putstatic");
      Utility.isJavaIdentifierPart('\'');
      Utility.typeOfSignature("[]");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Utility.getSignature("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      Utility.replace("L;", "", "");
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sipush\t\t-15935", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, 3288);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("HICOp$6!J6.X", "Invalid signature: ", true);
      Utility.setBit((-767), (byte) (-120));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("if_icmpgt", "Dont call getValueByte() on a non BYTE ElementValue");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Dont call getValueByte() on a non BYTE ElementValue
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = Utility.typeOfSignature("S~xnOVtOY");
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpne\t\t#2313", string0);
      
      String string1 = Utility.getSignature("/~qncC=qP$<t");
      assertEquals("L/~qncC=qP$<t;", string1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.isJavaIdentifierPart('M');
      String string0 = "[{.5";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[{.5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{.5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int int0 = Utility.clearBit((byte)81, (byte)81);
      assertEquals(81, int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)4;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)54, (int) (byte)64, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = Utility.replace("Ns", "SAME_LOCALS_1_STACK", (String) null);
      assertEquals("Ns", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("}*a|.}}Rb@f", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 82
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.searchOpcode(";T/^>]xO_1+8tvQiZx");
      Utility.encode(byteArray0, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Utility.accessToString(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 171, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-90);
      byte byte0 = (byte) (-87);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-87));
      Utility.compactClassName("0:    ret\t\t%68\n2:    wide\t(wide)\n3:    dup_x1\n4:    if_acmpne\t\t#4\n7:    nop\n");
      try { 
        Utility.typeOfSignature("0:    ret\t\t%68\n2:    wide\t(wide)\n3:    dup_x1\n4:    if_acmpne\t\t#4\n7:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ret\t\t%68
         // 2:    wide\t(wide)
         // 3:    dup_x1
         // 4:    if_acmpne\t\t#4
         // 7:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Utility.convertString("Vw[)\">y7sA$8TuJ");
      String string0 = Utility.signatureToString("Vw[)\">y7sA$8TuJ");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("Illegal type: ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)18;
      byteArray0[4] = (byte)32;
      Utility.toHexString(byteArray0);
      Utility.getSignature("invokevirtual");
      Utility.isSet(198, (-646));
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, (int) (byte)18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        Utility.getSignature("[!'n,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [!'n,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-63);
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) (byte) (-63);
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)54;
      byteArray0[7] = (byte) (-105);
      String string0 = Utility.accessToString((int) (byte)49, true);
      assertEquals("public final", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("public final", stringArray0);
      assertEquals("()Lpublic;", string1);
      
      String string2 = Utility.methodSignatureToString("()Lpublic;", "", "public final", false);
      assertEquals("public final public ()", string2);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("'7d 83;U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '7d 83;U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Utility.convertString(":+l/x{t%6S'PT/9BdkB;");
      try { 
        Utility.methodSignatureReturnType(":+l/x{t%6S'PT/9BdkB;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:+l/x{t%6S'PT/9BdkB;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)54;
      byteArray0[2] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.format((byte) (-58), 125, true, 'N');
      assertEquals("-58NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_2", string1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      short short0 = Utility.searchOpcode("%hg");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.fillup("V", 125, true, 'l');
      assertEquals("Vllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R\"Wn\"PD@!O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R\"Wn\"PD@!O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      Utility.searchOpcode("ZW8>i@uTZ}:&C>kVBH");
      Utility.signatureToString("ZW8>i@uTZ}:&C>kVBH", true);
      try { 
        Utility.methodSignatureReturnType("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("fneg", false);
      assertArrayEquals(new byte[] {(byte)102, (byte)110, (byte)101, (byte)103}, byteArray0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("F(B,F!P", "F(B,F!P", "fneg");
      assertEquals("fneg", string0);
      
      String string1 = Utility.compactClassName("astore");
      assertEquals("astore", string1);
      
      String string2 = Utility.methodSignatureReturnType("F(B,F!P");
      assertEquals("float", string2);
      
      String string3 = Utility.replace("F(B,F!P", "fneg", "astore");
      assertEquals("F(B,F!P", string3);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      Utility.signatureToString("Illegal type: ", true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "int";
      Utility.printArray(objectArray0, false, true);
      Utility.isSet(120, 244);
      byte[] byteArray0 = Utility.decode("The offset cannot be negative", false);
      assertEquals(29, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = "n:$ee*_R ";
      boolean boolean0 = false;
      Utility.decode("n:$ee*_R ", false);
      try { 
        Utility.typeOfSignature("n:$ee*_R ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n:$ee*_R 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("fneg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-16), 4575, true);
      assertEquals("0:    fsub\n1:    fdiv\n2:    lsub\n3:    dsub\n", string0);
      
      String string1 = Utility.fillup("EyF}R4", (-1470), false, '1');
      assertEquals("EyF}R4", string1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("fneg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("F(B,F!P", "F(B,F!P", "fneg");
      Utility.compactClassName("astore");
      String string0 = Utility.methodSignatureReturnType("F(B,F!P");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "F(B,F!P";
      stringArray0[1] = "fneg";
      stringArray0[2] = "F(B,F!P";
      stringArray0[3] = "astore";
      stringArray0[4] = "fneg";
      stringArray0[5] = "fneg";
      stringArray0[6] = "F(B,F!P";
      stringArray0[7] = "float";
      stringArray0[8] = "fneg";
      Utility.methodTypeToSignature("F(B,F!P", stringArray0);
      Utility.getSignature("F(B,F!P");
      String string1 = Utility.signatureToString("VQ^", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature(" F69mZ8P]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  F69mZ8P]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.methodTypeToSignature("\t", (String[]) null);
      assertEquals("()L;", string0);
      
      String string1 = Utility.getSignature("Type of ConstValue invalid: ");
      assertEquals("LType;", string1);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.signatureToString("CP]n&l??wCdlLI_!", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[0] = (byte)79;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1764), (int) (byte)79);
      try { 
        Utility.methodSignatureReturnType("ireturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ireturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Utility.convertString(")\t");
      Utility.decode("", false);
      Utility.searchOpcode(")\t");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "3o#X/*9", "BZ)sn !");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("(class_index = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(class_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2l", string1);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      Utility.convertString("");
      try { 
        Utility.methodSignatureReturnType("85&tdJgPR:iBMk", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `85&tdJgPR:iBMk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", "(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("fneg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("fneg", string0);
      
      String string1 = Utility.compactClassName("astore");
      assertEquals("astore", string1);
      
      String string2 = Utility.methodSignatureReturnType("F(B,F!P");
      assertEquals("float", string2);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\")vx,p=ZeqIbf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \")vx,p=ZeqIbf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)92;
      byte byte0 = Utility.typeOfSignature("Ff@q!2xO=_[");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.accessToString(0);
      boolean boolean0 = true;
      Utility.compactClassName("", "", true);
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Utility.convertString("\n\t\tthrows ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("\n\t\tthrows ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         // \t\tthrows '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte) (-54);
      try { 
        Utility.typeOfMethodSignature("(w4e:u}m\"-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (w4e:u}m\"-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("fload", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W.J:ym(_EA+zN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W.J:ym(_EA+zN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Utility.setBit((-56), (-56));
      String string0 = "[]";
      Utility.searchOpcode("[]");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[]", "", "[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte) (-20);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("3=l F7de");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3=l F7de
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-16);
      byteArray0[6] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, 572, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.format(2, 2, false, '_');
      try { 
        Utility.typeOfSignature("_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I=legal type: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      // Undeclared exception!
      Utility.replace("long", "", "GvP%m-L%N`");
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.getSignature(")\t");
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)108;
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      try { 
        Utility.typeOfSignature("%|bKfpM%y[py`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %|bKfpM%y[py`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T]K g%aq^");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 173, (int) (byte)113, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.replace("$l$8b$I$A$A$A$A$A$A$A", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "fneg";
      Utility.decode("fneg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("dup_x2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup_x2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte)70, false);
      assertEquals("0:    l2i\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.accessToString((-349), true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "public private transient abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "public private transient abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "class";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "public private transient abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, true, false);
      Utility.clearBit((-349), (-1467));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), (int) (byte) (-74), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("putfield", stringArray0);
      assertEquals("()Lputfield;", string1);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-99);
      byteArray0[1] = (byte) (-83);
      byteArray0[4] = (byte)64;
      byteArray0[7] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte)64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.accessToString(0);
      boolean boolean0 = true;
      Utility.compactClassName("S", "", true);
      Utility.compactClassName("S", true);
      int int0 = 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 64
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@CS^P'@Tryd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @CS^P'@Tryd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = "otoif^Y ^T4y";
      try { 
        Utility.methodSignatureReturnType("otoif^Y ^T4y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `otoif^Y ^T4y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.fillup("if_icmplt\t\t#0", 94, false, '!');
      LocalVariableTable localVariableTable0 = new LocalVariableTable(1409, (-1517), (LocalVariable[]) null, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("6'/", "Y)+NcJ4Lc3;wZI6r", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!if_icmplt\t\t#0", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6'/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("CP]n&l??wCdlLI_!");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.fillup("CP]n&l??wCdlLI_!", (byte)5, true, 'L');
      assertEquals("CP]n&l??wCdlLI_!", string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)79;
      byteArray0[6] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)27;
      byteSequence0.read(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ejaP19P&A-&*_Xfqm20", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore\t\t%80", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "daload";
      objectArray0[1] = (Object) "daload";
      objectArray0[2] = (Object) "ejaP19P&A-&*_Xfqm20";
      objectArray0[3] = (Object) "ejaP19P&A-&*_Xfqm20";
      objectArray0[4] = (Object) "dstore\t\t%80";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "daload";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"daload\", \"daload\", \"ejaP19P&A-&*_Xfqm20\", \"ejaP19P&A-&*_Xfqm20\", \"dstore\t\t%80\", null, \"daload\"", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("q<@x0[!t@M.~`gLMVK", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, 1239, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.format(172, 76, true, 'w');
      assertEquals("172wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", string0);
      
      short short0 = Utility.searchOpcode("172wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("172wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
      PrintStream printStream0 = mockPrintStream0.printf("nop", (Object[]) constantArray0);
      Utility.printArray(printStream0, (Object[]) constantArray0);
      short short1 = Utility.searchOpcode("nop");
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("tU$)dAz", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.getSignature(")\t");
      Utility.isSet(9968, 9969);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)55;
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, (int) (byte)118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ueP2U6rQ6rk{", "ueP2U6rQ6rk{", "ueP2U6rQ6rk{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ueP2U6rQ6rk{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.close();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("a%e(25vd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a%e(25vd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 827, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("nxwayr>y", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-16), 147, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFully(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Utility.searchOpcode("t!Aib");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      try { 
        Utility.methodSignatureReturnType("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-3047.2F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(693, 175);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 112, 693, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I=l:gal type:F");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)90;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 219, 690);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)11;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-113));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4ff?]%f?}M2f tA6&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4ff?]%f?}M2f tA6&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-99);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.methodSignatureReturnType("Nrm!w>uC/8EOklI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nrm!w>uC/8EOklI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)81;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte) (-58);
      byteArray1[5] = (byte)81;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("fastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      // Undeclared exception!
      try { 
        Utility.signatureToString("O#jJ.BOvhAUVI+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O#jJ.BOvhAUVI+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      assertEquals("L);", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)41;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$G$5c$87$5bl$v", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte) (-121));
      assertEquals("0:    iconst_3\n1:    dup2\n2:    i2d\n3:    dup_x2\n4:    idiv\n5:    dload_3\n", string3);
      
      Utility.replace("putstatic", "GvP%m-L%N`", "putstatic");
      Utility.isJavaIdentifierPart('\'');
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte byte0 = (byte)10;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("rxI9c5Yh$XE`W", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2063), (-2063));
      assertEquals("0:    frem\n1:    ishl\n2:    dstore_2\n3:    dstore\t\t%99\n5:    saload\n6:    dup\n7:    imul\n8:    fload\t\t%69\n10:   iadd\n11:   pop\n", string0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Utility.getSignature(")\t");
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(634);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("fneg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("F(B,F!P", "F(B,F!P", "fneg");
      Utility.compactClassName("astore");
      Utility.methodSignatureReturnType("F(B,F!P");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "F(B,F!P";
      stringArray0[1] = "float";
      stringArray0[2] = "F(B,F!P";
      stringArray0[3] = "astore";
      stringArray0[4] = "fneg";
      stringArray0[5] = "fneg";
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("7Cu<4>?rC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Cu<4>?rC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-114);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), 209);
      assertEquals("0:    nop\n1:    nop\n2:    d2i\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.searchOpcode("%hg");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)1;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("/&qFbf_yx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /&qFbf_yx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-3047.2F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(693, 175);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ldc2_w\t\t-3047.2", string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.getSignature("long");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)92;
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ifnull", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.decode("z+|jxbmv+(h@>FDb", false);
      String string0 = Utility.fillup("^5x", 3, false, 'j');
      assertEquals("^5x", string0);
      
      String string1 = Utility.classOrInterface(1662);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte) (-74);
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte) (-97);
      byteArray1[6] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-74), (int) (byte)82, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)71;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)71, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("fneg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "lhoEDo'7KLH,:ow";
      Utility.replace("F(B,F!P", "lhoEDo'7KLH,:ow", "lhoEDo'7KLH,:ow");
      String string1 = "astore";
      Utility.compactClassName("LSd+|GEz");
      try { 
        Utility.methodSignatureReturnType("LSd+|GEz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LSd+|GEz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.clearBit((byte) (-75), 228);
      Utility.isSet((-91), 3595);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Utility.isSet(168, (-6814));
      byte[] byteArray0 = Utility.decode("fneg", false);
      String string0 = Utility.replace("F(B,F!P", "impdep1", "new");
      Utility.getSignature("<init>");
      Utility.convertString("new");
      Utility.toHexString(byteArray0);
      String string1 = Utility.replace("<init>", "F(B,F!P", "su/");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "f+:#]^k=S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = Utility.compactClassName("TAA");
      assertEquals("TAA", string0);
      
      byte byte0 = Utility.typeOfSignature("StackMapTable");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      Utility.getSignature("u=b@aM(,n+<g");
      Utility.isSet(16384, (-1416));
      Utility.setBit(9969, 16384);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lu=b@aM(,n+<g;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lu=b@aM(,n+<g;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      try { 
        Utility.decode("J$^::WE,v8", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)54;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)54);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("P(3S|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P(3S|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("fneg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fneg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("anewarray", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 988, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Utility.setBit(1749, 44);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.close();
      Utility.fillup("0", 53, true, 'W');
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Utility.searchOpcode("%hg");
      Utility.isJavaIdentifierPart('a');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, 929, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)94;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-47);
      String string1 = Utility.fillup("L);", (byte)0, true, 'y');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(5K{Z#4Lr(6", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2332), (int) (byte)35, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Attribute", "if_icmplt\t\t#13347", "org.apache.bcel.classfile.Attribute");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Attribute
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, 988);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      short short0 = Utility.searchOpcode("PMGClass(");
      assertEquals((short) (-1), short0);
      
      Object object0 = new Object();
      String string0 = Utility.format(125, (-49), true, 'N');
      assertEquals("125", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lrem", string1);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Utility.accessToString(13);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[2] = (byte) (-113);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (-992), true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Utility.clearBit((-3113), (-3113));
      Utility.isSet((-8391721), (-3384));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)2;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = Utility.accessToString(829, true);
      assertEquals("public protected static final native", string0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("invokeinterface", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("drem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: drem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 1935);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, (-1557));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("Illegal type: ");
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)36;
      Utility.equals(byteArray0, byteArray0);
      Utility.signatureToString("CUbe~{Zh63", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (-3697), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dcmpl", string0);
      
      short short0 = Utility.searchOpcode("Invalid signature: `");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("Vw[)\">y7sA$8TuJ", "Vw[)\">y7sA$8TuJ", "Vw[)\">y7sA$8TuJ");
      Utility.clearBit((byte)81, (byte)81);
      Utility.classOrInterface(192);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)55;
      Utility.toHexString(byteArray0);
      Utility.getSignature("if_icmplt");
      Utility.isSet(200, 198);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, 198, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmplt\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Utility.clearBit((-3113), (-3113));
      Utility.isSet((-8391721), (-3384));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)0;
      byteArray0[2] = (byte) (-87);
      byteArray0[7] = (byte)2;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\"S51-b6*", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1279, 179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.format(81, 12, false, '8');
      try { 
        Utility.typeOfSignature("888888888881");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 888888888881
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      int int0 = Utility.clearBit((byte) (-114), (byte) (-114));
      assertEquals((-16498), int0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      byteArray0[0] = (byte)39;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.fillup("dload_1", (byte) (-67), true, 'm');
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = Utility.isJavaIdentifierPart('T');
      assertTrue(boolean0);
      
      String string2 = Utility.fillup("{", 172, true, 'g');
      assertEquals("{ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg", string2);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@723bfa03, java.lang.Object@7a42e26, java.lang.Object@15705dba, java.lang.Object@1d8fc8fd, java.lang.Object@3049d2ad, java.lang.Object@16ba0f9c, java.lang.Object@1b00d7c, null");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$d,.", "java.lang.Object@723bfa03, java.lang.Object@7a42e26, java.lang.Object@15705dba, java.lang.Object@1d8fc8fd, java.lang.Object@3049d2ad, java.lang.Object@16ba0f9c, java.lang.Object@1b00d7c, null", "gHw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $d,.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Utility.isJavaIdentifierPart('Z');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)4;
      Utility.equals(byteArray0, byteArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)95;
      objectArray0[1] = (Object) (byte)95;
      objectArray0[2] = object0;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-87);
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte) (-87);
      byteArray1[3] = (byte) (-87);
      byteArray1[4] = (byte) (-87);
      byteArray1[5] = (byte) (-87);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-87), 789);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    ret\t\t%169\n2:    ret\t\t%169\n4:    ret\t\t%169\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    ret\t\t%169
         // 2:    ret\t\t%169
         // 4:    ret\t\t%169
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Utility.searchOpcode("PMGClass(");
      Object object0 = new Object();
      Utility.typeOfSignature("S~xnOVtOY");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, (int) (short) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)61;
      byteArray0[4] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, 24, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Utility.isJavaIdentifierPart('.');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)4;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        Utility.typeOfSignature("9CR:`eEE7JmO-)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9CR:`eEE7JmO-)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte byte0 = Utility.typeOfMethodSignature("(-g2JA)Gwsb=@Z7)Z(J");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("d2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d2i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*ynZ:fKoW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ynZ:fKoW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      short short0 = Utility.searchOpcode("dreturn");
      assertEquals((short)175, short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)104;
      byteArray0[0] = (byte)101;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("&l", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Utility.signatureToString("Vw[)\">y7sA$8TuJ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-52);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byte byte0 = (byte)18;
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte)53;
      byteArray1[3] = (byte)87;
      Constant[] constantArray0 = new Constant[6];
      MockFile mockFile0 = new MockFile("void");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "void");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"void\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Utility.convertString("\n\t\tthrows ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("RS&=xH6#2BD&l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RS&=xH6#2BD&l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2f", string1);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-127);
      try { 
        Utility.typeOfSignature("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String string0 = Utility.compactClassName("", "fload_0", false);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "fload_0";
      objectArray0[1] = (Object) "fload_0";
      objectArray0[2] = (Object) "fload_0";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Utility.printArray(objectArray0);
      String string1 = Utility.format(1667, 96, false, 'x');
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1667", string1);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      short short0 = Utility.searchOpcode("@1iH?@%>x`uw");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@1iH?@%>x`uw";
      stringArray0[1] = "@1iH?@%>x`uw";
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Utility.getSignature("Illegal type: ");
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)36;
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      Utility.typeOfSignature("LIllegal;");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("fneg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("F(B,F!P", "F(B,F!P", "fneg");
      Utility.compactClassName("astore");
      Utility.methodSignatureReturnType("F(B,F!P");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "F(B,F!P";
      stringArray0[1] = "float";
      stringArray0[2] = "F(B,F!P";
      stringArray0[3] = "astore";
      stringArray0[4] = "fneg";
      stringArray0[5] = "fneg";
      stringArray0[6] = "F(B,F!P";
      stringArray0[7] = "float";
      stringArray0[8] = "fneg";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      int int0 = 2;
      Utility.format(2, 2, false, 'M');
      try { 
        Utility.typeOfSignature("M2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)91;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$5c$87$5b$A$A", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte) (-121));
      assertEquals("0:    nop\n1:    dup2\n2:    i2d\n3:    dup_x2\n4:    nop\n5:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q='O~)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q='O~)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      short short0 = Utility.searchOpcode("h\"g");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("h\"g");
      assertEquals("h\\\"g", string0);
      
      int int0 = Utility.clearBit(93, 93);
      assertEquals(93, int0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.signatureToString("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "U,q! ;M_oL&.-ScND(z";
      // Undeclared exception!
      try { 
        byteSequence0.readFully(byteArray0, 1024, (int) (byte) (-108));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      String string0 = Utility.accessToString((-3429));
      assertEquals("public private static final transient interface synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Utility.searchOpcode("@1iH?@%>x`uw");
      String string0 = "b_H/";
      byte[] byteArray0 = Utility.decode("b_H/", false);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = "Vw[\\)\">y7sA$8TuJ";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-123);
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)82;
      byteArray1[4] = (byte)109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 141, (-147), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      String string0 = "52\\a$rZPB~xne.SZKN";
      try { 
        Utility.decode("52a$rZPB~xne.SZKN", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      int int0 = Utility.clearBit(0, 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-38);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1333), 40);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-79);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("+8I?&Rf>v<%Z,;exe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8I?&Rf>v<%Z,;exe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      int int0 = Utility.clearBit(0, 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)92;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.classOrInterface((byte) (-34));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Utility.searchOpcode("@1iH?@%>x`uw");
      Utility.decode("b_H/", false);
      Utility.replace("", "b_H/", "instanceof");
      try { 
        Utility.methodSignatureArgumentTypes(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      assertEquals("L);", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = Utility.replace("L);", "L);", "ifnull");
      assertEquals("ifnull", string2);
      
      String string3 = Utility.compactClassName("{}");
      assertTrue(string3.equals((Object)string1));
      
      Utility.methodSignatureReturnType("J'W`2v80UAby#9$k'");
      String string4 = Utility.replace("g", ";Q.I.?7)=}", ")\t");
      assertEquals("g", string4);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iinc\t\t%0\t0", string0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Utility.searchOpcode("@1iH?@%>x`uw");
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Utility.isJavaIdentifierPart('.');
      String string0 = "[{.5";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[{.5", "org.apache.commons.io.filefilter.NameFileFilter", "[{.5", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [{.5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), 3878, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    wide\t(wide)
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Utility.fillup("breakpoint", (-1326), false, 'A');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("breakpoint");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "breakpoint", 51, 51);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      short short0 = Utility.searchOpcode("LocalVariableTypeTable");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)76);
      Utility.printArray((Object[]) null);
      Utility.isSet(541, 108);
      Utility.printArray((Object[]) null, false, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte)76, (byte)76);
      Utility.clearBit(456, (-1912302115));
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1254, false, 'l');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = "*ynZ:fKoW";
      Utility.isSet(3913, 3913);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 756, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore\t\t%54", string0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      String string0 = "rxI9c5Yh$XE`W";
      byte[] byteArray0 = Utility.decode("rxI9c5Yh$XE`W", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readChar();
      byteSequence2.close();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-120);
      Utility.isJavaIdentifierPart('e');
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[{.5", "org.apache.commons.io.filefilter.NameFileFilter", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [{.5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ff@q!2xO=_[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Ff@q!2xO=_[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Utility.searchOpcode("\n");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2379, (int) (byte)77, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      int int0 = Utility.setBit(1749, 44);
      assertEquals(5845, int0);
      
      String string0 = Utility.signatureToString("Ff@q!2xO=_[", false);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$A$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      assertEquals("L);", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-121);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)46;
      byteArray1[4] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2", string1);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Utility.setBit(0, 234);
      Utility.searchOpcode("[{.5");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((short) (-1));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodType1;
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CP]n&l??wCdlLI_!", "CP]n&l??wCdlLI_!", "CP]n&l??wCdlLI_!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CP]n&l??wCdlLI_!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = (byte) (-60);
      byte byte1 = (byte) (-87);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[0];
      int int0 = 56;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-309), 56);
      Utility.compactClassName("ineg");
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, 185, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ifnul%", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2806, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("monitorenter", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readByte();
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "{eW~DE./.SadZ9N?dZ";
      try { 
        Utility.typeOfSignature("{eW~DE./.SadZ9N?dZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {eW~DE./.SadZ9N?dZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-74);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-98));
      assertEquals("0:    ifle\t\t#438\n", string0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Utility.isSet(228, 168);
      String string0 = "fneg";
      try { 
        Utility.decode("fneg", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      Utility.accessToString((-373), false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte) (-92);
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-92);
      byteArray1[4] = (byte)78;
      byteArray1[2] = (byte) (-58);
      byteArray1[6] = (byte)45;
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.typeOfSignature("new");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-53);
      byte byte0 = (byte) (-27);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("rxI9c5Yh$EE`W", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1530, 1530, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("Vw[)\">y7sA$8TuJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[)\">y7sA$8TuJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Utility.getSignature(")\t");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)91;
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!ykgWz9[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ykgWz9[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)61;
      byteArray0[4] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, 24, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-118);
      byteArray0[2] = (byte)67;
      byteArray0[10] = (byte) (-68);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-31);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 257, false);
      assertEquals("0:    l2d\n1:    nop\n2:    fstore_0\n3:    nop\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   newarray\t\t<<illegal type>>\n12:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iconst_5", string0);
      
      Utility.fillup("NX*", (-626), true, 'T');
      boolean boolean0 = Utility.isJavaIdentifierPart('m');
      assertTrue(boolean0);
      
      String string1 = Utility.fillup("cj~C", (byte) (-67), true, 'g');
      assertEquals("cj~C", string1);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 163, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ye7s^dQQ*|<2k";
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, 57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Utility.classOrInterface((-3809));
      try { 
        Utility.typeOfSignature("5a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (int) (byte) (-125), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)68, (int) (byte)68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String string0 = "H>_m:m{SD.q8.862I";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H>_m:m{SD.q8.862I", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H>_m:m{SD.q8.862I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      Utility.typeOfSignature("LocalVariableTypeTable");
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("5-kDh?G9(w,zAf^:Yw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5-kDh?G9(w,zAf^:Yw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      assertArrayEquals(new byte[] {(byte)40, (byte)119, (byte)52, (byte)101, (byte)58, (byte)117, (byte)125, (byte)109, (byte)34, (byte)45}, byteArray0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.clearBit((-1081), 323);
      assertEquals((-1081), int0);
      
      String string0 = Utility.convertString("(w4e:u}m\"-");
      assertEquals("(w4e:u}m\\\"-", string0);
      
      byte byte0 = Utility.typeOfSignature("Jf+");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Utility.isSet(168, (-6814));
      byte[] byteArray0 = Utility.decode("ng", false);
      Utility.replace("F(B,F!P", "impdep1", "new");
      Utility.getSignature("<init>");
      Utility.encode(byteArray0, false);
      Utility.accessToString(85);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "<init>";
      objectArray0[2] = (Object) "new";
      objectArray0[3] = (Object) "ng";
      objectArray0[4] = (Object) "L<init>;";
      objectArray0[5] = (Object) "L<init>;";
      objectArray0[6] = (Object) "impdep1";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(107, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-76);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("l2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      assertEquals("L);", string0);
      
      Object[] objectArray0 = new Object[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "char");
      String string1 = Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = Utility.replace("L);", "L);", "ifnull");
      assertEquals("ifnull", string2);
      
      String string3 = Utility.compactClassName("{}");
      assertTrue(string3.equals((Object)string1));
      
      String string4 = Utility.methodSignatureReturnType("J'W`2v80UAby#9$k'");
      assertEquals("long", string4);
      
      String string5 = Utility.replace("g", ";Q.I.?7)=}", ")\t");
      assertEquals("g", string5);
      
      String string6 = "7ERr-]^*t Zy\\u";
      String string7 = Utility.convertString(string6);
      assertEquals("7ERr-]^*t Zy\\\\u", string7);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Utility.accessToString(29);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)18;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3023, (int) (byte) (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[3];
      constantDouble0.toString();
      objectArray0[0] = (Object) constantDouble0;
      objectArray0[1] = (Object) constantDouble0;
      objectArray0[2] = (Object) "$A$A$A$A$A$A$A$A";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Utility.searchOpcode("%hg");
      Utility.setBit(1749, 44);
      Utility.accessToString((int) (short) (-1), true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)33;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("(b zddqG5_6les");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (b zddqG5_6les
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-97);
      byteArray0[1] = (byte) (-67);
      byteArray0[4] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      Utility.decode("$A$bd$9f$A$7f", false);
      try { 
        Utility.typeOfMethodSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)89;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)89, 220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Utility.searchOpcode("@1iH?@%>x`uw");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@1iH?@%>x`uw";
      stringArray0[1] = "@1iH?@%>x`uw";
      stringArray0[2] = "@1iH?@%>x`uw";
      stringArray0[3] = "@1iH?@%>x`uw";
      stringArray0[4] = "@1iH?@%>x`uw";
      Utility.methodTypeToSignature("@1iH?@%>x`uw", stringArray0);
      String string0 = "";
      String string1 = "new";
      boolean boolean0 = true;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpl", string0);
      
      short short0 = Utility.searchOpcode("dcmpl");
      assertEquals((short)151, short0);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)89;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup", string0);
      
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("59 59 59 10 10 59", string1);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(w4e:u}m\"-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (w4e:u}m\"-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.encode(byteArray0, true);
      MockFile mockFile0 = new MockFile("anewarray", "ifnonnull\t\t#-14393");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte)76, true);
      assertEquals("0:    if_icmpgt\t\t#-1716\n", string0);
      
      String string1 = Utility.convertString("Vw[)\">y7sA$8TuJ");
      assertEquals("Vw[)\\\">y7sA$8TuJ", string1);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(w4e:u}m\"-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `w4e:u}m\"-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet(476, 476);
      Utility.replace(" l~)d+Z<@sz", " l~)d+Z<@sz", (String) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Utility.methodTypeToSignature("\t<", (String[]) null);
      try { 
        Utility.typeOfSignature("java.lang.S~xnOVtOY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.S~xnOVtOY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("A&2Hm)Q_7Z|`Z", "A&2Hm)Q_7Z|`Z", "A&2Hm)Q_7Z|`Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A&2Hm)Q_7Z|`Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-67);
      byteArray0[0] = (byte)28;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(180);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      Utility.searchOpcode("@1iH?@%>x`uw");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@1iH?@%>x`uw";
      stringArray0[1] = "@1iH?@%>x`uw";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("'hyo_Uhl@sz{Z:N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'hyo_Uhl@sz{Z:N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("+k$?R0V^-6*Qvp)MH+2$", false);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-84);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), (-584), true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-124);
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte)120;
      byteArray1[5] = (byte) (-124);
      byteArray1[6] = (byte) (-84);
      byteArray1[7] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readFully(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      String string0 = Utility.convertString("VU6$Yr");
      assertEquals("VU6$Yr", string0);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 1520;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1520, 1520, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      int int0 = 95;
      Utility.setBit(95, 95);
      // Undeclared exception!
      try { 
        Utility.signatureToString("+N3^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+N3^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)10, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      Utility.searchOpcode("PMGClass(");
      Object object0 = new Object();
      try { 
        Utility.methodSignatureReturnType("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'%KUWG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '%KUWG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      byte byte0 = (byte) (-64);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-8s(vZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -8s(vZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 761, 761);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String string0 = "5$XZd|tI";
      try { 
        Utility.decode("5$XZd|tI", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String string0 = Utility.fillup("char", 204, true, 'G');
      assertEquals("charGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", string0);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('C');
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("NvlkUbU{IjN0", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_3", string0);
      
      short short0 = Utility.searchOpcode("astore_3");
      assertEquals((short)78, short0);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("CUbe~{Zh63");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      short short0 = Utility.searchOpcode("newarray");
      assertEquals((short)188, short0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String string0 = Utility.compactClassName("i2b");
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-103);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)101;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-457), (int) (byte) (-80), false);
      assertEquals("0:    areturn\n1:    lreturn\n2:    lsub\n", string0);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-889275714), 4, true);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      Utility.searchOpcode("2MGClassG");
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("2MGClassG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2MGClassG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)108;
      byteArray1[2] = (byte) (-57);
      byteArray1[3] = (byte)41;
      byteArray1[4] = (byte) (-87);
      byteArray1[5] = (byte)81;
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x1", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("", string1);
      
      String string2 = Utility.convertString("istore_3");
      assertEquals("istore_3", string2);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)19;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("native");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ifnul%", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("ifnul$r", string0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      Utility.isJavaIdentifierPart('I');
      try { 
        Utility.methodSignatureArgumentTypes("L@1iH?@%>x`uw;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L@1iH?@%>x`uw;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Utility.searchOpcode("PMGClass(");
      try { 
        Utility.typeOfSignature("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      String string0 = Utility.compactClassName(",&%ZonMe=_0S_R", ",&%ZonMe=_0S_R", false);
      assertEquals(",&%ZonMe=_0S_R", string0);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("CP]n&l??wCdlLI_!", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence1.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte) (-79);
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("04 77 b1", string1);
      
      String string2 = Utility.classOrInterface((byte)119);
      assertEquals("class", string2);
      
      String string3 = Utility.encode(byteArray1, false);
      assertEquals("$Ew$b1", string3);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("Illegal type: ");
      Utility.printArray((Object[]) null, true);
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, false);
      Utility.compactClassName("Illegal type: ");
      try { 
        Utility.methodSignatureReturnType("i2c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("(@", "(@", "(@");
      int int0 = 48;
      int int1 = 40;
      Utility.isSet(48, 40);
      try { 
        Utility.methodSignatureArgumentTypes("(@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("${KiqJ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.signatureToString("G?im:5@IbMXA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G?im:5@IbMXA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-53);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-166), 197);
      assertEquals("0:    dneg\n1:    if_acmpeq\t\t#12748\n", string0);
      
      String string1 = Utility.methodSignatureReturnType("CUgP^d8H");
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-29);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[7] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature(" fields:\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  fields:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("UjjKmw5\"ihYeYI6z%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UjjKmw5\"ihYeYI6z%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "?>...", "t.l,=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      Utility.searchOpcode("PMGClass(");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "PMGClass(";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)74;
      objectArray0[4] = (Object) "PMGClass(";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nrm!w>uC/8EOklI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nrm!w>uC/8EOklI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      Utility.getSignature(")\t");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("L);", "L);", "ifnull");
      Utility.compactClassName("{}");
      Utility.methodSignatureReturnType("J'W`2v80UAby#9$k'");
      Utility.typeOfSignature("L);");
      try { 
        Utility.typeOfMethodSignature("areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) "class";
      objectArray0[4] = (Object) "class";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray(objectArray0, true, false);
      Utility.clearBit((-371), (-1467));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]");
      try { 
        Utility.typeOfSignature("4}]o8Q@m;yd8YCT!0&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4}]o8Q@m;yd8YCT!0&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      byte byte0 = Utility.typeOfSignature("CUbe~{Zh63");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Invalid signature: ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Invalid$msignature$3a$m", string0);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)81;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1422), (int) (byte)81);
      try { 
        Utility.typeOfSignature("_x9_!j/kgegr8&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _x9_!j/kgegr8&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      int int0 = 0;
      Utility.clearBit(0, 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-38);
      String string0 = "NdI{Ot&xt^7l|(";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" ", "NdI{Ot&xt^7l|(", "1)vX|ebldhT4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (-1087073952), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      String string0 = Utility.convertString("(w4e:u}m\"-");
      assertEquals("(w4e:u}m\\\"-", string0);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('{');
      try { 
        Utility.methodSignatureArgumentTypes("if_icmple");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmple
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      Utility.searchOpcode("@1iH?@%>x`u");
      byte[] byteArray0 = Utility.decode("@1iH?@%>x`u", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, (int) (short) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-2332), (int) (byte) (-14), false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("freturn", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      Utility.searchOpcode("@1iH?@%>x`uw");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@1iH?@%>x`uw";
      stringArray0[1] = "@1iH?@%>x`uw";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-20);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("@1iH?@%>x`uw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @1iH?@%>x`uw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("*ynZ:cfKo:oW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *ynZ:cfKo:oW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.compactClassName("{java.lang.Object@43cb2fdc, java.lang.Object@3bc8e32c, java.lang.Object@360e1432, java.lang.Object@10f082fd}", "{java.lang.Object@43cb2fdc, java.lang.Object@3bc8e32c, java.lang.Object@360e1432, java.lang.Object@10f082fd}", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.util.ByteSequence", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.util.ByteSequence'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+k$?R0V^-6*Qvp)MH+2$";
      Utility.methodTypeToSignature("+k$?R0V^-6*Qvp)MH+2$", stringArray0);
      try { 
        Utility.methodSignatureReturnType("(L+k$?R0V^-6*Qvp)MH+2$;)L+k$?R0V^-6*Qvp)MH+2$;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MH+2$;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\"S51-b6*", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exceptions", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      String string0 = Utility.compactClassName("TAA");
      assertEquals("TAA", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)112;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      byte byte0 = Utility.typeOfSignature("TAA");
      assertEquals((byte)14, byte0);
      
      int int0 = Utility.clearBit(1946, (byte)81);
      assertEquals(1946, int0);
      
      boolean boolean1 = Utility.isSet((byte)81, 1946);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      short short0 = Utility.searchOpcode("PMGClass(");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dmul", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("6b 6b 06 06 da", string1);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, 988);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      Utility.accessToString(23, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%&";
      stringArray0[1] = "public private protected final";
      stringArray0[2] = "public private protected final";
      stringArray0[3] = "public private protected final";
      stringArray0[4] = "public private protected final";
      stringArray0[5] = "public private protected final";
      Utility.methodTypeToSignature("public private protected final", stringArray0);
      Utility.methodSignatureToString("(L%&;Lpublic;Lpublic;Lpublic;Lpublic;Lpublic;)Lpublic;", (String) null, "%&", true);
      Utility.isSet(194, (-2758));
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      Utility.compactClassName("", true);
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3064), 0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-119), (byte) (-81));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("org.apache.commons.io.filefilter.NameFileFilter", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      int int0 = Utility.setBit((-56), (-56));
      assertEquals((-56), int0);
      
      short short0 = Utility.searchOpcode("[]");
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(w4e:u}m\"-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      
      Utility.encode(byteArray0, false);
      String string0 = Utility.convertString("impdep1");
      assertEquals("impdep1", string0);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      Utility.replace(")N", ")N", ")N");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ZKV>", true);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      Utility.accessToString(0);
      Utility.compactClassName("", "", true);
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("Q='O~)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q='O~)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      Utility.clearBit((-171), 76);
      Utility.isSet(40, (-4267));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 221);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)68;
      Utility.compactClassName("pZH~f/q");
      // Undeclared exception!
      try { 
        Utility.signatureToString("O#jJ.BOvhAUVI+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O#jJ.BOvhAUVI+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("byte", "byte", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("D*`Mu0*Ym0kA/m", false);
      int int0 = (-344);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-344));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -344
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      String string0 = Utility.replace("6L,:^E@n4R", "Ml!wa9L%dfV", "Ml!wa9L%dfV");
      assertEquals("6L,:^E@n4R", string0);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      Utility.isJavaIdentifierPart('\'');
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-96), 107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = " of class ";
      MockPrintStream mockPrintStream0 = new MockPrintStream(" of class ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-85);
      byte byte0 = (byte) (-51);
      byteArray0[4] = (byte) (-51);
      Utility.toHexString(byteArray0);
      String string1 = "Vw[f)\">y7sA$8?uJ";
      // Undeclared exception!
      try { 
        Utility.getSignature("Vw[f)\">y7sA$8?uJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[f)\">y7sA$8?uJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      String string0 = Utility.signatureToString("Byte code error: ", false);
      assertEquals("byte", string0);
  }
}
