/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 06:04:17 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      classWriter0.index = (-2540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "", "IyG}=$PtKE", "", "IyG}=$PtKE");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      classWriter0.index = (-2540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "", "IyG}=$PtKE", "", "IyG}=$PtKE");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "The FilenameFilter must not be null", "", "I<x!v9H/+^x3eokU", (Object) null);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(498);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The FilenameFilter must not be null", "z&OG\"$-", "I<x!v9H/]^x3eokU", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-277), "`|.BY#dr", "", "#5Lh~h+=XOXQ%1[", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(548);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 548, "", "IyG}=$PtKE", "", "IyG}=$PtKE");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "The FilenameFilter must not be null", "", "", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@445486c
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "", "IyG}=$PtKE", "", "IyG}=$PtKE");
      Attribute attribute0 = new Attribute(":Ng~`yR}BC}*b!!;`'");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "", "IyG}=$PtKE", "", "IyG}=$PtKE");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation(":Ng~`yR}BC}*b!!;`'", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      ByteVector byteVector0 = new ByteVector();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4828, "I<x!v9H/+^x3eokU", "I<x!v9H/+^x3eokU", "x06,>", "The FilenameFilter must not be null");
      fieldWriter0.visitAnnotation("The FilenameFilter must not be null", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "h2*PpS3c7", "ConstantValue", (String) null, "h2*PpS3c7");
      ByteVector byteVector0 = new ByteVector(519);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      classWriter0.version = 519;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-7), "", "T<o4", "", "T<o4");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(521);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The FilenameFilter must not be null", "z&OG$-", "&[$I4", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(521);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The FilenameFilter must not be null", "z&OG$-", "&[$I4", (Object) null);
      Attribute attribute0 = new Attribute("z&OG$-");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      classWriter0.version = 519;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-7), "", "T<o4", "", "T<o4");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4828, "I<x!v9H/+^x3eokU", "I<x!v9H/+^x3eokU", "x06,>", "The FilenameFilter must not be null");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4828, "I<x!v9H/+^x3eokU", "I<x!v9H/+^x3eokU", "x06,>", "The FilenameFilter must not be null");
      fieldWriter0.visitAnnotation("The FilenameFilter must not be null", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4828, "I<x!v9H/+^x3eokU", "I<x!v9H/+^x3eokU", "x06,>", "The FilenameFilter must not be null");
      fieldWriter0.visitAnnotation("D6lq9Ec", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "h2*PpS3c7", "ConstantValue", (String) null, "h2*PpS3c7");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-252), "RuntimeInvisibleAnnotations", "", "#5Lh~h+=XOXQ%1[", "");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-252), "wheel.asm.ClassReader", "RuntimeInvisibleAnnotations", "The prefix must not be null", "");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(519);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "", "IyG}=$PtKE", "", "IyG}=$PtKE");
      fieldWriter0.visitEnd();
  }
}
