/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 09:45:26 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Integer>, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Object, HashMap<Integer, Object>>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Object>, HashMap<Object, String>>> hashMap0 = new HashMap<String, Map<HashMap<String, Object>, HashMap<Object, String>>>();
      DoubleKeyMap<String, HashMap<String, Object>, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, HashMap<Object, String>>(hashMap0);
      HashMap<HashMap<String, Object>, HashMap<Object, String>> hashMap1 = new HashMap<HashMap<String, Object>, HashMap<Object, String>>();
      hashMap0.put("", hashMap1);
      Map<HashMap<String, Object>, HashMap<Object, String>> map0 = doubleKeyMap0.get("");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<Integer, HashMap<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, String>, Integer>();
      Integer integer0 = doubleKeyMap0.remove((Integer) null, hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(hashMap0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Object, HashMap<Object, String>>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Object, HashMap<Object, String>>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, HashMap<Object, String>>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put(hashMap0, hashMap0);
      Integer integer0 = new Integer(924);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(hashMap1, (Object) integer0, hashMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, String, Map<Integer, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Map<Integer, String>>((Map<HashMap<String, Object>, Map<String, Map<Integer, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<Integer, String>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<Integer, String>>();
      DoubleKeyMap<HashMap<Integer, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Integer, String>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.put(hashMap1, hashMap1);
      Integer integer0 = new Integer((-1735));
      doubleKeyMap0.remove(hashMap1, integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Map<Integer, Map<Object, HashMap<Object, String>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<Object, String>>(map0);
      Integer integer0 = new Integer((-1));
      HashMap<Object, String> hashMap0 = doubleKeyMap1.remove(integer0, (Object) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Map<Integer, String>) hashMap0, integer0, "#an~^V3a");
      String string0 = doubleKeyMap0.put((Map<Integer, String>) hashMap0, integer0, "");
      assertEquals("#an~^V3a", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.get("G.4?#A7%za,Rx7r!l[", "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Map<Map<Integer, String>, Map<String, HashMap<Object, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Integer, String>, String, HashMap<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, String>, String, HashMap<Object, Integer>>(map0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      doubleKeyMap1.put((Map<Integer, String>) hashMap0, "", hashMap1);
      HashMap<Object, Integer> hashMap2 = doubleKeyMap1.get((Map<Integer, String>) hashMap0, "^i>LD");
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Map<String, Integer> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Map<Integer, Map<Object, HashMap<Object, String>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<Object, String>>(map0);
      Integer integer0 = new Integer((-1));
      doubleKeyMap1.put(integer0, (Object) null, (HashMap<Object, String>) null);
      Object object0 = new Object();
      doubleKeyMap1.remove(integer0, object0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }
}
