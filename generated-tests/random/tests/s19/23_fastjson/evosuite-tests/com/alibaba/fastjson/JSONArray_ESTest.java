/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 03:06:54 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(983);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) sequenceInputStream0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONArray0);
      jSONArray2.getIntValue(989);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 681;
      JSONArray jSONArray1 = jSONArray0.fluentSet(681, "+ <R!pL:$~=");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getLongValue(34);
      int int1 = 25;
      // Undeclared exception!
      try { 
        JSON.parse("@type", 25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4916);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONArray jSONArray3 = jSONArray2.getJSONArray(3089);
      JSONArray jSONArray4 = new JSONArray(jSONArray3);
      assertEquals(3090, jSONArray1.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray3.forEach(consumer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 989);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "@type";
      stringArray0[3] = "@type";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      Class<InputStream> class0 = InputStream.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      String[] stringArray1 = new String[2];
      stringArray1[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray1[1] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray1);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray1);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter4;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONBytes((Object) pushbackInputStream0, serializeFilterArray0, serializerFeatureArray0);
      jSONArray0.getJSONObject(989);
      Object object0 = JSON.toJSON((Object) jSONArray1);
      jSONArray4.clear();
      boolean boolean0 = jSONArray4.contains(jSONArray1);
      boolean boolean1 = jSONArray3.remove(object0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, jSONArray1);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.toJSON((Object) null, parserConfig0);
      JSONArray jSONArray4 = jSONArray3.fluentSet((-1), (Object) null);
      JSONArray jSONArray5 = jSONArray4.fluentClear();
      Iterator<Object> iterator0 = jSONArray5.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 2044;
      JSONArray jSONArray0 = new JSONArray(2044);
      jSONArray0.isEmpty();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(2044, (Collection<?>) set0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2044, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(343);
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.setComponentType(class0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 449;
      JSONArray jSONArray0 = new JSONArray(449);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(449);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3074, integer0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.retainAll(jSONArray0);
      jSONArray2.getShortValue(3064);
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray1 = JSON.toJavaObject((JSON) jSONArray0, class0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)127;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.fluentAdd(0, (Object) class0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2232);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("p]j0H,A6", concurrentHashMap0);
      jSONArray0.add((Object) null);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 618;
      JSONArray jSONArray0 = new JSONArray(618);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      linkedList0.add((Integer) 989);
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.retainAll(jSONArray0);
      jSONArray0.containsAll(linkedList0);
      int int1 = (-275);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-275), (-275));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -275
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 26, (byte)90);
      // Undeclared exception!
      try { 
        jSONArray0.add((-2195), (Object) byteArrayInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2195, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 81;
      JSONArray jSONArray0 = new JSONArray(81);
      jSONArray0.getComponentType();
      Class<Field> class0 = Field.class;
      Map<String, Field> map0 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("1.2.46", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/ul}O");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONArray jSONArray0 = new JSONArray(3043);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray4 = jSONArray3.fluentSet(2659, jSONArray2);
      JSON.parse("", 989);
      SerializeConfig serializeConfig0 = new SerializeConfig(3079);
      JSON.toJSON((Object) null, serializeConfig0);
      JSONArray jSONArray5 = jSONArray4.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray5.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getInteger("@type");
      unaryOperator0.apply((Object) null);
      jSONArray0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-2555));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(127);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONObject jSONObject0 = new JSONObject(3089);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONObject0);
      Class<Object> class0 = Object.class;
      Class<Field> class1 = Field.class;
      Class<Integer> class2 = Integer.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("@type", class1, class2, class1, (Field) null, (-1), 989, 1831);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      boolean boolean0 = jSONArray2.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray(1830);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSON.setDefaultTypeKey("7%79yEmIv~|%jE");
      linkedList0.containsAll(jSONArray0);
      linkedList0.add("7%79yEmIv~|%jE");
      jSONArray0.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1004);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1004, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but float, pos 3, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 73;
      Integer integer0 = new Integer(3089);
      jSONArray0.indexOf(integer0);
      Collection<Field> collection0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ParserConfig parserConfig0 = ParserConfig.global;
      String string0 = "[U89kc)_\\!J>wTxouJ";
      Class<Object> class0 = Object.class;
      String string1 = "";
      TypeReference<String> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<String>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(989, 989);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      linkedHashSet0.add((Integer) 3089);
      int int0 = (-2833);
      jSONArray1.stream();
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp((-2833));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray0 = new JSONArray(23);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(162);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 162, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1828;
      JSONArray jSONArray0 = new JSONArray(1828);
      // Undeclared exception!
      try { 
        jSONArray0.getString(1828);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1828, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 3089;
      jSONArray0.toArray(integerArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 159, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONObject jSONObject0 = new JSONObject(false);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(jSONObject0);
      JSONArray jSONArray0 = new JSONArray(list0);
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@type";
      stringArray0[1] = "";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[5] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[6] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter1;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter2;
      PascalNameFilter pascalNameFilter3 = new PascalNameFilter();
      serializeFilterArray0[6] = (SerializeFilter) pascalNameFilter3;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, serializeFilterArray0, 122, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "P|} rc42wwh~\\'P*Sj";
      JSON.toJSONString((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P|} rc42wwh~'P*Sj");
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd HH:mm:ss", (-2201));
      jSONScanner0.scanUUID('/');
      jSONScanner0.scanLong('/');
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.newCollectionByType(class0);
      jSONArray0.fluentAddAll(collection0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-2201));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2146);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 290;
      JSONArray jSONArray0 = new JSONArray(290);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "@type";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "1.2.46";
      stringArray0[7] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[8] = "com.alibaba.fastjson.JSONArray";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getIncludes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      // Undeclared exception!
      try { 
        jSONArray1.getShort(290);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 290, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<Integer, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) concurrentHashMap_KeySetView0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 626;
      JSONArray jSONArray0 = new JSONArray(626);
      int int1 = 54;
      Class<Integer> class0 = Integer.class;
      jSONArray0.lastIndexOf("@type");
      // Undeclared exception!
      try { 
        JSON.parseArray("BGqZF<`K*s@S;", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : BGqZF<`K*s@S;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(593);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1076);
      List<Object> list0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(list0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) list0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSONArray0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) jSONArray0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) jSONArray2;
      jSONArray2.toArray(objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray2);
      JSONArray jSONArray5 = jSONArray4.fluentAdd((Object) list0);
      // Undeclared exception!
      try { 
        jSONArray5.fluentRemove(523);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 523, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(91, "");
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 92
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9");
      int int0 = 2048;
      JSONArray jSONArray0 = new JSONArray(2048);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(2048);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2048, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(100, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentClear();
      String string0 = "checkListResolve";
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(105, (Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 105, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      JSONArray jSONArray0 = new JSONArray(1);
      jSONArray0.fluentClear();
      jSONArray0.toArray();
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      int int1 = 0;
      int int2 = (-1952);
      // Undeclared exception!
      try { 
        Charset.forName("@type");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // @type
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(17);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "&[";
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-2574), (Object) "&[");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2574, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3089);
      charArrayWriter0.append('8');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "yyyy-MM-dd HH:mm:ss");
      int int0 = 0;
      // Undeclared exception!
      try { 
        charBuffer0.append((CharSequence) "1.2.46");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) linkedList0);
      JSONArray jSONArray3 = jSONArray2.fluentSet(0, linkedList0);
      jSONArray3.fluentClear();
      int int1 = (-451);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSON.parseObject((String) null);
      linkedHashSet0.add((JSONObject) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(1868, (Object) null);
      jSONArray2.getJSONObject(1868);
      jSONArray1.getBoolean(1102);
      assertEquals(1869, jSONArray1.size());
      
      jSONArray2.fluentRemoveAll(jSONArray1);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray1.toJavaList(class0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "parseBoolean error, field : ";
      stringArray0[1] = "";
      stringArray0[2] = "kIh";
      String string0 = "";
      stringArray0[3] = "";
      stringArray0[4] = "illegal enum. ";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues("");
      JSONArray jSONArray0 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(69);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("{_EQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual {, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1076);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1213), (-1213));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1213
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) class0);
      jSONArray2.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue(898);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 898, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4037);
      LinkedHashSet<ByteArrayInputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayInputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      Integer integer0 = new Integer(3089);
      jSONArray1.fluentRemove((Object) integer0);
      jSONArray1.listIterator();
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = (-9);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue((-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("c#pXN+%5=", concurrentSkipListMap0);
      jSONArray1.setRelatedArray((Object) null);
      jSONArray0.listIterator();
      jSONArray1.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
