/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:19:37 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      int int0 = 1435;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[6][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int int1 = (-1241);
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-1241));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedRange(1655, (-2912));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertEquals("[0x677-0xfffff4a0]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotNull(string0);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, (-2912));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendFoldedRange(1655, 1655);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass3.appendLiteral(699, (-2912));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass4.negateClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertNotNull(charClass7);
      
      CharClass charClass8 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass5));
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass8.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass4);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass5);
      assertSame(charClass8, charClass9);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass1);
      assertSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass7);
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass7));
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass1.appendLiteral(1114112, (-110));
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass10);
      assertSame(charClass10, charClass4);
      assertNotSame(charClass10, charClass9);
      assertSame(charClass10, charClass7);
      assertNotSame(charClass10, charClass8);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass10.equals((Object)charClass9));
      assertFalse(charClass10.equals((Object)charClass8));
      assertNotNull(charClass10);
      
      CharClass charClass11 = charClass7.appendClassWithSign(intArray0, (-2912));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass10);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass9);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass8);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass9);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass11);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass8);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass9);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass10);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass0);
      assertNotSame(charClass11, charClass9);
      assertSame(charClass11, charClass7);
      assertNotSame(charClass11, charClass8);
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass3.equals((Object)charClass9));
      assertFalse(charClass3.equals((Object)charClass8));
      assertFalse(charClass4.equals((Object)charClass8));
      assertFalse(charClass4.equals((Object)charClass9));
      assertFalse(charClass7.equals((Object)charClass8));
      assertFalse(charClass7.equals((Object)charClass9));
      assertFalse(charClass11.equals((Object)charClass9));
      assertFalse(charClass11.equals((Object)charClass8));
      assertNotNull(charClass11);
      
      CharClass charClass12 = charClass5.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass9);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass12);
      assertNotSame(charClass5, charClass8);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass9);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass11);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass4);
      assertNotSame(charClass12, charClass9);
      assertSame(charClass12, charClass7);
      assertNotSame(charClass12, charClass8);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass1);
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass2.equals((Object)charClass8));
      assertFalse(charClass2.equals((Object)charClass9));
      assertFalse(charClass5.equals((Object)charClass8));
      assertFalse(charClass5.equals((Object)charClass9));
      assertFalse(charClass12.equals((Object)charClass9));
      assertFalse(charClass12.equals((Object)charClass8));
      assertNotNull(charClass12);
      
      CharClass charClass13 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass7);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass12);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass4);
      assertNotSame(charClass13, charClass8);
      assertNotSame(charClass13, charClass9);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass5);
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass13.equals((Object)charClass9));
      assertFalse(charClass13.equals((Object)charClass8));
      assertNotNull(charClass13);
      
      CharClass charClass14 = charClass13.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass4);
      assertNotSame(charClass14, charClass9);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass12);
      assertNotSame(charClass14, charClass8);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass14);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass14);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass12);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass4);
      assertNotSame(charClass13, charClass8);
      assertNotSame(charClass13, charClass9);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass14);
      assertFalse(charClass14.equals((Object)charClass9));
      assertFalse(charClass14.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass13.equals((Object)charClass9));
      assertFalse(charClass13.equals((Object)charClass8));
      assertNotNull(charClass14);
      
      int[] intArray1 = charClass4.toArray();
      assertArrayEquals(new int[] {(-2911), 1114112}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass14);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass14);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass12);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass9);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass8);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass14);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass8);
      assertNotSame(charClass4, charClass9);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass13);
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass3.equals((Object)charClass9));
      assertFalse(charClass3.equals((Object)charClass8));
      assertFalse(charClass4.equals((Object)charClass8));
      assertFalse(charClass4.equals((Object)charClass9));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      String string0 = CharClass.charClassToString(intArray0, (-2992));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      
      CharGroup charGroup0 = null;
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3129;
      intArray0[1] = (-1765);
      intArray0[2] = (-111);
      intArray0[3] = 1435;
      intArray0[4] = (-2624);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3129, (-1765), (-111), 1435, (-2624)}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3129, (-1765), (-111), 1435, (-2624)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(28, (-1765));
      assertArrayEquals(new int[] {3129, (-1765), (-111), 1435, (-2624)}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, 1114111);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, 4451);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendFoldedRange(2521, 65);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass1.appendLiteral((-2932), 8656);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass3.appendFoldedRange(0, (-1));
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertNotNull(charClass7);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 4792;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 4792);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(8656, 65);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = 2527;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 2527);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[0][8];
      CharClass charClass3 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendTable(intArray1);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass0.appendLiteral(1020, 2527);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass4.appendFoldedRange(1114111, 2753);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass3.appendClassWithSign(intArray0, 3);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass5.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass2);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass0.appendLiteral(91, 3);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass1);
      assertNotNull(charClass10);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 91);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-370);
      intArray0[1] = 3129;
      intArray0[2] = (-785);
      intArray0[3] = (-3355);
      intArray0[4] = (-1025);
      intArray0[5] = (-232);
      intArray0[6] = 8497;
      intArray0[7] = 65;
      int int0 = (-1266);
      intArray0[8] = (-1266);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-370), 3129, (-785), (-3355), (-1025), (-232), 8497, 65, (-1266)}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(3129, (-232));
      assertArrayEquals(new int[] {(-370), 3129, (-785), (-3355), (-1025), (-232), 8497, 65, (-1266)}, intArray0);
      assertEquals(9, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange((-1025), 8497);
      assertArrayEquals(new int[] {(-370), 3129, (-785), (-3355), (-1025), (-1025), 8497, 65, (-1266)}, intArray0);
      assertEquals(9, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral((-440), 3129);
      assertArrayEquals(new int[] {(-370), 3129, (-785), (-3355), (-1025), (-1025), 8497, 65, (-1266)}, intArray0);
      assertEquals(9, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      charClass3.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 180;
      intArray0[1] = (-3876);
      intArray0[2] = 2430;
      intArray0[3] = (-2587);
      intArray0[4] = 1162;
      intArray0[5] = 69814;
      intArray0[6] = 0;
      intArray0[7] = 10716;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {180, (-3876), 2430, (-2587), 1162, 69814, 0, 10716}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertArrayEquals(new int[] {180, (-3876), 2430, (-2587), 1162, 69814, 0, 10716}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 180;
      intArray2[1] = 0;
      intArray2[2] = 2592;
      intArray2[3] = 10716;
      intArray2[4] = 2430;
      intArray2[5] = (-968);
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray2[8] = 3974;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {180, (-3876), 2430, (-2587), 1162, 69814, 0, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, 8656);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.appendFoldedRange(64, 65);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass4.appendLiteral(8656, (-1257));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass0));
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass4.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass0));
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass4.appendFoldedRange(65, 53);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertNotNull(charClass8);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedRange(1655, (-2912));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 91);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      
      int[] intArray1 = charClass2.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral(0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.negateClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      // Undeclared exception!
      try { 
        charClass5.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[0][4];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendFoldedRange(66640, 10429);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      CharClass charClass2 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3129;
      intArray0[1] = (-1755);
      intArray0[2] = (-111);
      intArray0[3] = 1435;
      intArray0[4] = (-2624);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3129, (-1755), (-111), 1435, (-2624)}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[5][3];
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-111);
      intArray2[1] = (-2624);
      intArray2[2] = (-2624);
      intArray2[3] = 1435;
      intArray2[4] = (-1755);
      intArray2[5] = 3129;
      intArray2[6] = (-111);
      intArray2[7] = (-111);
      intArray1[0] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-2624);
      intArray3[1] = 1435;
      intArray3[2] = 3129;
      intArray1[1] = intArray3;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {3129, (-1755), (-111), 1435, (-2624)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {3129, (-1755), (-111), 1435, (-2624)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange((-2624), (-2624));
      assertArrayEquals(new int[] {3129, (-1755), (-111), 1435, (-2624)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass3.appendClassWithSign(intArray3, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2593);
      intArray0[1] = (-2593);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-2593), (-2593)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, 8656);
      assertArrayEquals(new int[] {(-2593), (-2593)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-2593));
      assertArrayEquals(new int[] {(-2593), (-2593)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.appendFoldedRange(64, 65);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertNotNull(charClass5);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 91);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendFoldedRange(0, 0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2593);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-2593), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-2593), 2117);
      assertArrayEquals(new int[] {(-2593), 65}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendLiteral((-2593), 2117);
      assertArrayEquals(new int[] {(-2593), 65}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendLiteral((-2593), 7001);
      assertArrayEquals(new int[] {(-2593), 65}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass0.negateClass();
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendLiteral(4, (-3201));
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass1));
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass3.cleanClass();
      assertArrayEquals(new int[] {(-2593), 65}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass1.equals((Object)charClass5));
      assertFalse(charClass3.equals((Object)charClass6));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass5));
      assertFalse(charClass7.equals((Object)charClass5));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass0));
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass1.appendRange((-2593), 7001);
      assertArrayEquals(new int[] {(-2593), 65}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertNotSame(charClass8, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass1.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass0));
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-2593), 65}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass6);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass1.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass5));
      assertNotNull(charClass9);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[0][4];
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[4][4];
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2082;
      intArray0[1] = 5906;
      intArray0[2] = (-1863);
      intArray0[3] = 2736;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 819;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2082, 5906, (-1863), 2736, 0, 0, 819}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-259);
      intArray0[1] = (-1034);
      intArray0[2] = 0;
      intArray0[3] = 723;
      intArray0[4] = 552;
      intArray0[5] = 2760;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-1034));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2593);
      intArray0[1] = (-3175);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-2593), (-3175)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {(-3174), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertEquals("[0xfffff39a-0x10ffff]", string0);
      assertArrayEquals(new int[] {(-3174), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 7544;
      intArray0[2] = (-974);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 7544, (-974)}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 7544);
      assertArrayEquals(new int[] {0, 7544, (-974)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = CharClass.charClassToString(intArray0, (-974));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 7544, (-974)}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass2 = charClass0.appendLiteral(0, 7544);
      assertArrayEquals(new int[] {0, 7544, (-974)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendFoldedRange(0, 0);
      assertArrayEquals(new int[] {0, 7544, (-974)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass3.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1374;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 1374);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 7544;
      intArray0[2] = (-974);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 7544, (-974)}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-1659), 7544);
      assertArrayEquals(new int[] {0, 7544, (-974)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[4][3];
      CharClass charClass2 = charClass1.appendLiteral(568, 65793);
      assertArrayEquals(new int[] {0, 7544, (-974)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertEquals("[0x0-0x1d78 0xfffffc32-0xfffff985 0xfffff985-0x238 0x238-0x0]", string0);
      assertArrayEquals(new int[] {0, 7544, (-974)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
      
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[][] intArray0 = new int[3][1];
      int[] intArray1 = new int[5];
      intArray1[0] = 879;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-2552);
      intArray1[4] = 91;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 1114111;
      intArray2[2] = (-2552);
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 8087;
      intArray3[1] = (-2552);
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = 91;
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2443);
      intArray0[2] = 0;
      intArray0[3] = (-2694);
      intArray0[4] = (-3607);
      intArray0[5] = 219;
      intArray0[6] = 3148;
      intArray0[7] = (-475);
      intArray0[8] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-2443), 0, (-2694), (-3607), 219, 3148, (-475), 32}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-3531), 32);
      assertArrayEquals(new int[] {0, (-2443), 0, (-2694), (-3607), 219, 3148, (-3531), 32}, intArray0);
      assertEquals(9, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[0][2];
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 66640);
      assertArrayEquals(new int[] {0, (-2443), 0, (-2694), (-3607), 219, 3148, (-3531), 32}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass1.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[1][4];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendRange(0, 91);
      assertArrayEquals(new int[] {0, 91}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass1));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 91}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.cleanClass();
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass3);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass3));
      assertNotNull(charClass5);
      
      int[] intArray1 = charClass2.toArray();
      assertArrayEquals(new int[] {0, 91}, intArray0);
      assertArrayEquals(new int[] {0, 0, 92, 1114111}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray1, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[6];
      intArray1[0] = (-4174);
      intArray1[1] = 2786;
      intArray1[2] = 604;
      intArray1[3] = 0;
      intArray1[4] = 143;
      intArray1[5] = 64;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 64;
      intArray2[1] = 64;
      intArray2[2] = 143;
      intArray2[3] = 2786;
      intArray2[4] = (-1674);
      intArray2[5] = 64;
      intArray2[6] = (-4174);
      intArray2[7] = 2786;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(0, (-2854));
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 64;
      intArray3[1] = 2786;
      intArray3[2] = 604;
      intArray3[3] = (-2854);
      intArray3[4] = (-2854);
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 65520;
      int int1 = (-984);
      CharClass charClass1 = charClass0.appendRange(65520, (-984));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 65520;
      intArray0[1] = (-984);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {65520, (-984)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {65520, (-984)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendFoldedRange(2534, 2232);
      assertArrayEquals(new int[] {65520, (-984)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      int int2 = 0;
      CharClass charClass5 = charClass4.appendRange((-984), 0);
      assertArrayEquals(new int[] {65520, (-984)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {65520, (-984)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      
      int[][] intArray1 = new int[8][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass6.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(1655, (-2912));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      String string0 = charClass0.toString();
      assertEquals("[0x677-0xfffff4a0]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotNull(string0);
      
      CharClass charClass4 = charClass2.appendClassWithSign(intArray0, (-2912));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendFoldedRange(1655, 1655);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass4.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass1.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertNotNull(charClass8);
      
      String string1 = charClass8.toString();
      assertEquals("[0x0-0x10ffff]", string1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = CharClass.charClassToString(intArray0, (-902));
      assertEquals("[]", string2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharClass charClass9 = charClass4.appendLiteral(2635, 2137);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass7);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass7.appendClassWithSign(intArray0, 878);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass4);
      assertNotNull(charClass10);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2137;
      intArray1[1] = (-2912);
      intArray1[2] = 637;
      intArray1[3] = 1655;
      intArray1[4] = 2137;
      intArray1[5] = 2635;
      intArray1[6] = (-902);
      intArray1[7] = (-2912);
      intArray1[8] = 2137;
      // Undeclared exception!
      try { 
        charClass5.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharGroup charGroup0 = null;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(968, 968);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 968;
      intArray0[1] = 968;
      intArray0[2] = 968;
      intArray0[3] = 968;
      intArray0[4] = 2;
      intArray0[5] = 968;
      intArray0[6] = 968;
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 91);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      
      int[] intArray1 = charClass2.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 922);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-146);
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-672);
      intArray0[3] = (-1930);
      intArray0[4] = 1114111;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-146), 0, (-672), (-1930), 1114111}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-3678), (-672));
      assertArrayEquals(new int[] {(-146), 0, (-672), (-3678), 1114111}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3081);
      intArray0[1] = 66640;
      intArray0[2] = 44004;
      intArray0[3] = 2821;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-3081), 66640, 44004, 2821}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[0xfffff3f7-0x10450 0xabe4-0xb05]", string0);
      assertArrayEquals(new int[] {(-3081), 66640, 44004, 2821}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      String string1 = CharClass.charClassToString(intArray0, 1);
      assertEquals("[0x0]", string1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[6][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      CharClass charClass2 = charClass1.appendRange(2, 2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass2);
      
      intArray3[0] = 0;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      CharClass charClass2 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendLiteral(91, 91);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.appendRange(91, 91);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass2));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass3);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass3));
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass4.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass1, charClass7);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass2);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass6);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass0);
      assertNotSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass6));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass6));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass6));
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass3.cleanClass();
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertNotSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass0);
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass6));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass0));
      assertNotNull(charClass8);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {1, 1114111}, intArray1);
      assertEquals(2, intArray1.length);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass7);
      assertNotSame(intArray1, intArray0);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2422);
      intArray0[2] = 0;
      intArray0[3] = (-2694);
      intArray0[4] = (-3604);
      intArray0[5] = 219;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 6;
      CharClass charClass1 = charClass0.appendRange(6, 1673);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, 6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass3.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      int int0 = 2646;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 2646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      int int0 = (-1659);
      CharClass charClass1 = charClass0.appendLiteral((-1659), (-2363));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral((-2363), (-1659));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertEquals("[0x0 0xfffff985 0xfffff6c5]", string0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotNull(string0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      
      String string1 = charClass1.toString();
      assertEquals("[0x0 0xfffff985 0xfffff6c5 0x0-0x10ffff]", string1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[][] intArray1 = new int[5][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      String string2 = CharClass.charClassToString(intArray0, (-2363));
      assertEquals("[]", string2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        charClass4.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral(0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendClassWithSign(intArray0, 10782);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass5.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertNotNull(charClass7);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(91, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      int[] intArray1 = charClass5.toArray();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendLiteral(65, 0);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass2);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertNotSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass0));
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = 2527;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 2527);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[0][8];
      CharClass charClass4 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendLiteral(0, (-2));
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass5.appendRange(2, 2527);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass1.appendClassWithSign(intArray0, 2527);
      assertArrayEquals(new int[] {(-2), 2527}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass8.appendTableWithSign(intArray1, (-2));
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass4);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass8.appendRange(43613, (-2));
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass6);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertNotNull(charClass10);
      
      int[] intArray2 = charClass10.toArray();
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass6);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      CharClass charClass11 = charClass9.appendTableWithSign(intArray1, (-2));
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass8);
      assertSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass11);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass10);
      assertNotNull(charClass11);
      
      CharClass charClass12 = charClass0.appendTableWithSign(intArray1, (-2));
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(intArray0, intArray2);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertNotNull(charClass12);
      
      CharClass charClass13 = charClass12.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(intArray0, intArray2);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass13);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass0);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass5);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertNotNull(charClass13);
      
      CharClass charClass14 = charClass10.appendClassWithSign(intArray2, (-1592));
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertSame(intArray0, intArray2);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass4);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass14);
      assertSame(charClass8, charClass13);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass12);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass6);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass13);
      assertSame(intArray2, intArray0);
      assertNotNull(charClass14);
      
      CharClass charClass15 = charClass0.negateClass();
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(intArray0, intArray2);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass10);
      assertSame(charClass15, charClass7);
      assertNotNull(charClass15);
      
      CharClass charClass16 = charClass9.appendNegatedClass(intArray2);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray2.length);
      assertSame(intArray0, intArray2);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass16);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass15);
      assertSame(charClass16, charClass11);
      assertSame(charClass16, charClass0);
      assertSame(charClass16, charClass9);
      assertSame(charClass16, charClass10);
      assertSame(charClass16, charClass3);
      assertSame(charClass16, charClass2);
      assertSame(charClass16, charClass5);
      assertSame(charClass16, charClass7);
      assertSame(charClass16, charClass12);
      assertSame(charClass16, charClass8);
      assertSame(charClass16, charClass4);
      assertSame(charClass16, charClass15);
      assertSame(charClass16, charClass1);
      assertSame(charClass16, charClass6);
      assertSame(charClass16, charClass14);
      assertSame(charClass16, charClass13);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass16);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass15);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass14);
      assertSame(charClass8, charClass13);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass12);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass6);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass12);
      assertSame(charClass9, charClass16);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass14);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass13);
      assertSame(charClass9, charClass15);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass15);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass16);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass13);
      assertSame(intArray2, intArray0);
      assertNotNull(charClass16);
      
      CharClass charClass17 = charClass16.negateClass();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray2.length);
      assertSame(intArray0, intArray2);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass17);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass16);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass17);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass15);
      assertSame(charClass16, charClass11);
      assertSame(charClass16, charClass0);
      assertSame(charClass16, charClass9);
      assertSame(charClass16, charClass10);
      assertSame(charClass16, charClass3);
      assertSame(charClass16, charClass2);
      assertSame(charClass16, charClass17);
      assertSame(charClass16, charClass5);
      assertSame(charClass16, charClass7);
      assertSame(charClass16, charClass12);
      assertSame(charClass16, charClass8);
      assertSame(charClass16, charClass4);
      assertSame(charClass16, charClass15);
      assertSame(charClass16, charClass1);
      assertSame(charClass16, charClass6);
      assertSame(charClass16, charClass14);
      assertSame(charClass16, charClass13);
      assertSame(charClass17, charClass14);
      assertSame(charClass17, charClass4);
      assertSame(charClass17, charClass15);
      assertSame(charClass17, charClass16);
      assertSame(charClass17, charClass12);
      assertSame(charClass17, charClass6);
      assertSame(charClass17, charClass8);
      assertSame(charClass17, charClass7);
      assertSame(charClass17, charClass10);
      assertSame(charClass17, charClass5);
      assertSame(charClass17, charClass11);
      assertSame(charClass17, charClass0);
      assertSame(charClass17, charClass9);
      assertSame(charClass17, charClass2);
      assertSame(charClass17, charClass3);
      assertSame(charClass17, charClass1);
      assertSame(charClass17, charClass13);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass16);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass15);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass14);
      assertSame(charClass8, charClass13);
      assertSame(charClass8, charClass17);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass12);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass6);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass12);
      assertSame(charClass9, charClass16);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass17);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass14);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass13);
      assertSame(charClass9, charClass15);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass15);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass16);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass17);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass13);
      assertSame(intArray2, intArray0);
      assertNotNull(charClass17);
      
      CharClass charClass18 = charClass1.appendLiteral((-1931), 0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(intArray0, intArray2);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass18);
      assertSame(charClass0, charClass17);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass16);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass17);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass18);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass15);
      assertSame(charClass18, charClass5);
      assertSame(charClass18, charClass15);
      assertSame(charClass18, charClass4);
      assertSame(charClass18, charClass13);
      assertSame(charClass18, charClass7);
      assertSame(charClass18, charClass12);
      assertSame(charClass18, charClass8);
      assertSame(charClass18, charClass16);
      assertSame(charClass18, charClass9);
      assertSame(charClass18, charClass2);
      assertSame(charClass18, charClass14);
      assertSame(charClass18, charClass1);
      assertSame(charClass18, charClass17);
      assertSame(charClass18, charClass10);
      assertSame(charClass18, charClass0);
      assertSame(charClass18, charClass3);
      assertSame(charClass18, charClass11);
      assertSame(charClass18, charClass6);
      assertNotNull(charClass18);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-2092);
      intArray0[2] = (-1);
      intArray0[3] = 928;
      intArray0[4] = 0;
      intArray0[5] = 7620;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-2092), (-1), 928, 0, 7620, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1), 0);
      assertArrayEquals(new int[] {0, (-2092), (-1), 928, 0, 7620, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3129;
      intArray0[1] = (-1755);
      intArray0[2] = (-111);
      intArray0[3] = 1435;
      intArray0[4] = (-2624);
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = (-111);
      CharClass charClass1 = charClass0.appendLiteral((-2064), 3880);
      CharClass charClass2 = charClass1.negateClass();
      charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = new CharClass();
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      charClass2.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass1.appendFoldedRange(91, 922);
      assertNotSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = new CharClass(intArray0);
      CharClass charClass2 = charClass0.appendLiteral(2117, (-186));
      CharClass charClass3 = charClass0.appendLiteral(3, (-3201));
      charClass3.cleanClass();
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass4, charClass3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3129;
      int int0 = (-1755);
      intArray0[1] = (-1755);
      intArray0[2] = (-111);
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = 2527;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.appendClassWithSign(intArray0, 2527);
      int[][] intArray1 = new int[0][8];
      CharClass charClass2 = new CharClass();
      charClass1.cleanClass();
      charClass0.appendTable(intArray1);
      CharClass charClass3 = new CharClass(intArray0);
      charClass3.appendNegatedTable(intArray1);
      String string0 = CharClass.charClassToString(intArray0, 1);
      assertArrayEquals(new int[] {(-2), 1114111}, intArray0);
      assertEquals("[0xfffffffe-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[3][1];
      int[][] intArrayArray0 = null;
      int int0 = (-3505);
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, (-3505));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[3];
      int int0 = 1376;
      intArray0[0] = 1376;
      int int1 = 3286;
      intArray0[1] = 3286;
      int int2 = 66639;
      intArray0[2] = 66639;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 66639);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = CharClass.charClassToString(intArray0, (-2118));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      CharClass charClass1 = new CharClass();
      int[] intArray0 = new int[2];
      charClass1.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      // Undeclared exception!
      charClass2.appendFoldedRange((-837), 10429);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = 2527;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass0.appendClass(intArray0);
      charClass2.appendClassWithSign(intArray0, 2527);
      int[][] intArray1 = new int[0][8];
      charClass0.cleanClass();
      CharClass charClass3 = charClass0.appendTable(intArray1);
      charClass3.appendLiteral(0, (-2));
      charClass3.appendRange(2, 2527);
      CharClass charClass4 = charClass1.appendClassWithSign(intArray0, 2527);
      CharClass charClass5 = charClass4.appendTableWithSign(intArray1, (-2));
      CharClass charClass6 = charClass4.appendRange(43613, (-2));
      int[] intArray2 = charClass6.toArray();
      charClass5.appendTableWithSign(intArray1, (-2));
      charClass0.appendTableWithSign(intArray1, (-2));
      charClass6.appendClassWithSign(intArray2, (-1592));
      charClass0.negateClass();
      CharClass charClass7 = charClass5.appendNegatedClass(intArray2);
      charClass7.negateClass();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertSame(intArray0, intArray2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1755);
      intArray0[1] = (-2593);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendClassWithSign(intArray0, (-2204));
      charClass1.appendLiteral(7830, (-2593));
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 601;
      int[] intArray0 = new int[8];
      intArray0[0] = 1375;
      intArray0[1] = 2254;
      intArray0[2] = 601;
      intArray0[3] = 2254;
      intArray0[4] = 2254;
      intArray0[5] = 601;
      intArray0[6] = 601;
      intArray0[7] = 2254;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 2254);
      charClass1.appendClass(intArray0);
      CharClass charClass2 = charClass0.appendFoldedRange(601, 2254);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass2.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray0 = new int[1][0];
      int[] intArray1 = new int[4];
      intArray1[0] = (-3093);
      intArray1[1] = 97;
      intArray1[2] = 435;
      intArray0[0] = intArray1;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange((-2), (-2));
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass2.appendLiteral((-2), (-2));
      CharClass charClass4 = charClass3.negateClass();
      charClass4.appendLiteral((-3201), (-2));
      charClass0.cleanClass();
      charClass0.appendNegatedClass(intArray0);
      CharClass charClass5 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass5, charClass0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2082;
      intArray0[1] = 5906;
      intArray0[2] = 2082;
      intArray0[2] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2082;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = (-1755);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-3124), (-2473));
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3129;
      intArray0[3] = (-1755);
      intArray0[2] = (-111);
      intArray0[3] = 1435;
      intArray0[4] = (-2624);
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[9][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      charClass1.appendNegatedTable(intArray1);
      charClass0.appendFoldedRange(3129, 1435);
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
