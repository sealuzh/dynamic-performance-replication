/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:32:58 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber.factoryMethod(1, (-137L));
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      String string0 = rationalNumber2.toString();
      assertEquals("-2,147,483,647", string0);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1, (-1778L));
      rationalNumber2.toDisplayString();
      RationalNumber rationalNumber4 = rationalNumber1.negate();
      rationalNumber0.toDisplayString();
      rationalNumber0.intValue();
      RationalNumber rationalNumber5 = RationalNumber.valueOf(0.0);
      assertEquals(0, rationalNumber5.numerator);
      
      rationalNumber0.toDisplayString();
      rationalNumber1.toString();
      String string1 = rationalNumber4.toDisplayString();
      assertEquals("-2147483647", string1);
      
      RationalNumber rationalNumber6 = RationalNumber.valueOf(1.0);
      int int0 = rationalNumber6.intValue();
      assertEquals(1, int0);
      
      RationalNumber rationalNumber7 = rationalNumber3.negate();
      assertEquals(5.624296962879641E-4, rationalNumber7.doubleValue(), 0.01);
      assertEquals((-1778), rationalNumber3.divisor);
      assertEquals(0, rationalNumber3.intValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), 100);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-0.01", string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals("-1/100 (-0.01)", string1);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-0.01), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.7493186805950245E-4);
      assertEquals(2, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1971.862592));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-137L), (-3692L));
      rationalNumber0.toString();
      String string0 = rationalNumber0.toString();
      assertEquals("-21970493/11142 (-1,971.863)", string0);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      rationalNumber0.floatValue();
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber3 = RationalNumber.valueOf(3244.034275407);
      assertEquals(3244.0342F, rationalNumber3.floatValue(), 0.01F);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(21970493);
      RationalNumber rationalNumber5 = RationalNumber.valueOf((-1364.233941100716));
      rationalNumber4.toDisplayString();
      RationalNumber rationalNumber6 = RationalNumber.valueOf(1663);
      RationalNumber.factoryMethod(11142, 2147483647L);
      String string1 = rationalNumber4.toDisplayString();
      assertEquals("21970493", string1);
      
      RationalNumber.factoryMethod((-21970493), 1L);
      String string2 = rationalNumber6.toString();
      assertEquals("1,663", string2);
      
      rationalNumber6.intValue();
      rationalNumber1.negate();
      rationalNumber4.negate();
      RationalNumber rationalNumber7 = rationalNumber2.negate();
      RationalNumber rationalNumber8 = rationalNumber7.negate();
      int int0 = rationalNumber4.intValue();
      assertEquals(21970493, int0);
      
      rationalNumber2.toString();
      rationalNumber1.negate();
      RationalNumber.factoryMethod(1457L, (-2147483648L));
      rationalNumber1.doubleValue();
      String string3 = rationalNumber5.toDisplayString();
      assertEquals("-1,364.234", string3);
      
      rationalNumber4.negate();
      float float0 = rationalNumber8.floatValue();
      assertEquals((byte) (-77), rationalNumber2.byteValue());
      assertEquals(1971.8625F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, (-1660L));
      String string0 = rationalNumber0.toString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-1660L), 3562L);
      rationalNumber1.toDisplayString();
      rationalNumber0.toDisplayString();
      rationalNumber0.negate();
      rationalNumber0.intValue();
      rationalNumber1.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.0E-8);
      assertEquals(1.0E-8, rationalNumber2.doubleValue(), 0.01);
      
      String string1 = rationalNumber0.toDisplayString();
      assertTrue(string1.equals((Object)string0));
      
      String string2 = rationalNumber1.toDisplayString();
      assertEquals("-0.466", string2);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1.0);
      String string3 = rationalNumber3.toDisplayString();
      assertEquals("1", string3);
      assertEquals((short)1, rationalNumber3.shortValue());
      
      int int0 = rationalNumber1.intValue();
      assertEquals((-830), rationalNumber1.numerator);
      assertEquals((-0.46603032004491857), rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, int0);
      
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5.024004440201679E-5);
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(19904, rationalNumber0.divisor);
      assertEquals(5.0241157556270096E-5, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 1139L);
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.toString();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(Integer.MIN_VALUE);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1212.5037452386166));
      rationalNumber3.toString();
      String string0 = rationalNumber3.toDisplayString();
      assertEquals("-1,212.504", string0);
      
      String string1 = rationalNumber1.toString();
      assertEquals("-2147483648/1139 (-1,885,411.456)", string1);
      
      rationalNumber0.longValue();
      long long0 = rationalNumber1.longValue();
      assertEquals((-1885411L), long0);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(0.0);
      rationalNumber0.toDisplayString();
      RationalNumber.valueOf(0.0);
      String string2 = rationalNumber4.toString();
      assertEquals("0", string2);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals((-1885411.5F), float0, 0.01F);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(433.4638606);
      RationalNumber.factoryMethod((-2147483648L), (-1885411L));
      rationalNumber4.longValue();
      rationalNumber5.doubleValue();
      RationalNumber rationalNumber6 = RationalNumber.valueOf(1139L);
      assertEquals((short)1139, rationalNumber6.shortValue());
      
      RationalNumber.factoryMethod(1139, (-128L));
      rationalNumber1.longValue();
      rationalNumber5.intValue();
      rationalNumber5.longValue();
      rationalNumber1.negate();
      RationalNumber rationalNumber7 = rationalNumber1.negate();
      assertEquals((-1885411), rationalNumber7.intValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483676L, (-922L));
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("-2,329,158", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 1139L;
      long long1 = 2147483656L;
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483656L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483656, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483656L, 1139L);
      String string0 = rationalNumber0.toString();
      assertEquals("1073741828/569 (1,887,068.239)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2396L), 2147483674L);
      rationalNumber0.longValue();
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-1.1157244308810518E-6), double0, 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-1.1157244308810518E-6));
      RationalNumber.factoryMethod(1139L, (-2396L));
      rationalNumber0.longValue();
      RationalNumber.factoryMethod((-56L), (-1179L));
      String string0 = rationalNumber1.toString();
      assertEquals("-1/896279 (-0)", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1198, (-217L));
      rationalNumber2.negate();
      long long0 = rationalNumber2.longValue();
      assertEquals((-5L), long0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("-0", string1);
      assertEquals((-1073741837), rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1L), 2147483676L);
      RationalNumber.factoryMethod(1, 0L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(2147483620, rationalNumber1.divisor);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(4.656612933792715E-10, rationalNumber0.doubleValue(), 0.01);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483656L, 1139L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(57L, 569);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-2147483692L), 569);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1,887,068.239", string0);
      
      rationalNumber2.floatValue();
      assertEquals((-3780781.0F), rationalNumber2.floatValue(), 0.01F);
      
      float float0 = rationalNumber1.floatValue();
      assertEquals(0.100175746F, float0, 0.01F);
  }
}
