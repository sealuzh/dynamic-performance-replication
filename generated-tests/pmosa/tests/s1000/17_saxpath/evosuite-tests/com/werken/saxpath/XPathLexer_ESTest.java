/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:36:38 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token5);
      
      xPathLexer0.colon();
      xPathLexer0.consume(0);
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L(T$XAEdF_I'");
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.number();
      Token token0 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("L(T$XAEdF_I'");
      assertEquals("L(T$XAEdF_I'", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.getXPath();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.getXPath();
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(4, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.at();
      xPathLexer0.consume();
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("");
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.and();
      xPathLexer0.div();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.endPosition();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierChar('*');
      xPathLexer0.endPosition();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('*');
      assertFalse(boolean0);
      
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.setXPath("");
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer0.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      xPathLexer0.consume(0);
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QoY?~^$ox)wuMNk%");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.literal();
      assertEquals(27, token0.getTokenType());
      assertEquals("Y?~^$", token0.getTokenText());
      assertNotNull(token0);
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(")", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("w", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.identifier();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("%", token5.getTokenText());
      
      token4.toString();
      token4.toString();
      token4.toString();
      char char0 = xPathLexer0.LA(1046);
      assertEquals('\uFFFF', char0);
      
      token4.toString();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token4);
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.consume(0);
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.and();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.div();
      int int0 = xPathLexer0.endPosition();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.whitespace();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(']');
      assertFalse(boolean0);
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer0.isIdentifierChar(']');
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("V", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals("e", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("3L", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("A\"ivxfqxh|?^)", token8.getTokenText());
      assertNotSame(token8, token0);
      
      xPathLexer0.literal();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.div();
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      xPathLexer0.setXPath("");
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.dollar();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(1458);
      xPathLexer0.setXPath("t:ZS2H}||:7~");
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(":", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftParen();
      assertEquals("2", token12.getTokenText());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertTrue(boolean1 == boolean0);
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("H", token13.getTokenText());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&;x$%");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.hasMoreChars();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierStartChar('<');
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.getPreviousToken();
      xPathLexer0.number();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.setXPath(",ZXe2\"J@&^52|9bGcU");
      xPathLexer0.dollar();
      xPathLexer0.and();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Xe2", token3.getTokenText());
      
      xPathLexer1.consume(1458);
      xPathLexer1.setXPath("");
      xPathLexer1.consume();
      xPathLexer0.relationalOperator();
      xPathLexer1.number();
      xPathLexer1.currentPosition();
      xPathLexer1.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.isIdentifierChar('-');
      Token token4 = xPathLexer1.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("\"", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(",ZXe2\"J@&^52|9bGcU");
      Token token6 = xPathLexer2.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals(",", token6.getTokenText());
      
      Token token7 = xPathLexer2.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      assertEquals("J", token8.getTokenText());
      
      xPathLexer1.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer(",ZXe2\"J@&^52|9bGcU");
      Token token9 = xPathLexer3.nextToken();
      assertEquals(32, token9.getTokenType());
      assertEquals(",", token9.getTokenText());
      
      xPathLexer3.hasMoreChars();
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals("Z", token10.getTokenText());
      
      Token token11 = xPathLexer2.slashes();
      assertEquals("Z", token11.getTokenText());
      assertEquals(11, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("t2H}||:7");
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('-');
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.hasMoreChars();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.whitespace();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Z');
      assertTrue(boolean0);
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      xPathLexer0.setXPath("P)>yR+|>{d");
      xPathLexer0.isIdentifierChar('X');
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals(")", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals(">", token6.getTokenText());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals("yR", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token11 = xPathLexer1.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer0.div();
      Token token13 = xPathLexer1.literal();
      assertNull(token13);
      
      xPathLexer1.setXPath("P)>yR+|>{d");
      Token token14 = xPathLexer1.rightParen();
      assertEquals(2, token14.getTokenType());
      assertEquals("P", token14.getTokenText());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.leftParen();
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-%wY");
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftParen();
      assertEquals("%", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("3.VzckRX_-i:kC");
      Token token6 = xPathLexer1.nextToken();
      assertEquals("wY", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer2.hasMoreChars();
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("3", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&;x$%");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      xPathLexer0.star();
      xPathLexer0.isIdentifierStartChar('<');
      xPathLexer0.div();
      xPathLexer0.not();
      xPathLexer0.getPreviousToken();
      xPathLexer0.number();
      xPathLexer0.and();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ekdf\"C1@)1|Y");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("e", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (15) (kdf)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.minus();
      assertEquals("\"", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("C1", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ekdf\"C1@)1|Y");
      xPathLexer0.not();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("ekdf\"C1@)1|Y");
      xPathLexer1.mod();
      xPathLexer0.hasMoreChars();
      xPathLexer0.star();
      xPathLexer1.isIdentifierStartChar('C');
      xPathLexer1.div();
      xPathLexer0.not();
      xPathLexer0.getPreviousToken();
      xPathLexer1.number();
      xPathLexer0.and();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&;x$%");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals("n", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (1) (h)", string0);
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token2 = xPathLexer0.minus();
      assertEquals("&", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(";x", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer1.comma();
      xPathLexer0.colon();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer("=8/g;6i2x");
      xPathLexer2.div();
      xPathLexer2.nextToken();
      xPathLexer1.consume();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.consume();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("F+ND)ym+AD");
      xPathLexer0.rightParen();
      xPathLexer1.doubleColon();
      xPathLexer1.mod();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      xPathLexer2.nextToken();
      xPathLexer1.consume();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('&');
      assertTrue(boolean1 == boolean0);
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) ([)", string0);
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) ([)");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("[", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&;x$%");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("hn", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.not();
      Token token1 = xPathLexer0.comma();
      assertEquals(";", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      assertEquals("", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&;x$%");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.slashes();
      assertEquals("h", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.not();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(";", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("x", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("$", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&;x$%");
      xPathLexer0.mod();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      assertEquals("hn&;x$%", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.doubleColon();
      xPathLexer0.isIdentifierStartChar('_');
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.isIdentifierChar('.');
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.getXPath();
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&;x$%");
      xPathLexer0.mod();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("d");
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      xPathLexer1.nextToken();
      xPathLexer0.consume();
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d62q`Ul!,o1-n");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("=8/g;6i2x");
      xPathLexer0.div();
      xPathLexer1.mod();
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer1.consume(267);
      assertNotSame(xPathLexer1, xPathLexer0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&\"x$%");
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("hn&\"x$%");
      xPathLexer0.div();
      xPathLexer1.nextToken();
      xPathLexer1.setXPath("");
      assertNotSame(xPathLexer1, xPathLexer0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n&;x$%");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("n&", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(5, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("(", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer("3.VzckRX_-i:kC");
      Token token3 = xPathLexer3.nextToken();
      assertEquals(31, token3.getTokenType());
      assertEquals("3.", token3.getTokenText());
      
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
      
      Token token4 = xPathLexer3.plus();
      assertEquals("V", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'?P&");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (23) (')", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("hn&;x$%");
      xPathLexer1.setPreviousToken(token1);
      assertEquals("?P&", token1.getTokenText());
      
      Token token2 = xPathLexer1.minus();
      assertEquals("h", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("?P", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("&", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("P", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.setXPath("P");
      xPathLexer0.isIdentifierChar('X');
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("P", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.notEquals();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer1.div();
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      xPathLexer0.setXPath("hn&;x$%");
      Token token10 = xPathLexer0.rightParen();
      assertEquals("h", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.leftParen();
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-%wY");
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      Token token3 = xPathLexer1.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftParen();
      assertEquals("%", token5.getTokenText());
      
      Token token6 = xPathLexer1.minus();
      assertEquals("w", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      xPathLexer1.div();
      Token token7 = xPathLexer1.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("Y", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&\"x$%");
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals("n", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (3) (h)", string0);
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("&", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ekdf\"C1@)1|Y");
      Token token0 = xPathLexer0.not();
      assertEquals("e", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals(15, token1.getTokenType());
      assertEquals("[ (15) (kdf)", string0);
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("\"C", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("1", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer1.literal();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer2.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer2.div();
      Token token8 = xPathLexer3.literal();
      assertNull(token8);
      
      xPathLexer2.setXPath("/P9LA[");
      Token token9 = xPathLexer3.rightParen();
      assertEquals(2, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(")", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("(");
      xPathLexer1.doubleColon();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
      
      xPathLexer1.identifier();
      Token token1 = xPathLexer0.dots();
      assertEquals(" ", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("b;C0y@RZIkr");
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("b;", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token7 = xPathLexer2.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("C0y", token7.getTokenText());
      
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer1.slashes();
      assertEquals(11, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&;x$%");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("$", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("96w!&I^1J");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(30, token4.getTokenType());
      assertEquals("96", token4.getTokenText());
      
      Token token5 = xPathLexer1.plus();
      assertEquals("w", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("!", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.leftParen();
      xPathLexer0.LA(0);
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('-');
      xPathLexer0.identifier();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("-%wY");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer3.pipe();
      xPathLexer1.nextToken();
      xPathLexer3.consume();
      xPathLexer1.consume();
      assertEquals("-%wY", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(")", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("(");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      boolean boolean0 = xPathLexer2.isIdentifierChar('-');
      assertTrue(boolean0);
      
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(" ", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer2.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer2.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer("3.VzckRX_-i:kC");
      Token token8 = xPathLexer3.nextToken();
      assertEquals(")", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("(", token9.getTokenText());
      
      Token token10 = xPathLexer4.slashes();
      assertEquals("3", token10.getTokenText());
      assertEquals(11, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("=8/g;6i2x");
      xPathLexer0.div();
      xPathLexer1.mod();
      Token token0 = xPathLexer1.nextToken();
      assertEquals(21, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("8", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("te$y86@i\"b<i5OWlb");
      xPathLexer2.div();
      Token token2 = xPathLexer2.nextToken();
      assertEquals("te", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer1.isIdentifierChar('q');
      Token token3 = xPathLexer1.colon();
      assertEquals("/", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("=8/g;6i2x");
      xPathLexer0.div();
      xPathLexer1.mod();
      Token token0 = xPathLexer1.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("te$y86@i\"b<i5OWlb");
      Token token2 = xPathLexer2.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      xPathLexer2.div();
      Token token3 = xPathLexer2.nextToken();
      assertEquals("e", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.isIdentifierChar('q');
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("j8`#<5h'K+$;H:O\"*");
      xPathLexer0.div();
      xPathLexer1.mod();
      xPathLexer1.nextToken();
      xPathLexer1.consume(267);
      assertEquals("j8`#<5h'K+$;H:O\"*", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(26, token0.getTokenType());
      assertEquals("P", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("uPG:%u}KU");
      Token token0 = xPathLexer2.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("uPG", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer2.nextToken();
      assertEquals(":", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer2.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      xPathLexer1.identifier();
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      Token token2 = xPathLexer2.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("og", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer3.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("o", token4.getTokenText());
      
      Token token5 = xPathLexer3.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("g", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("=8/g;6i2x");
      xPathLexer0.div();
      xPathLexer1.mod();
      Token token0 = xPathLexer1.nextToken();
      assertEquals(21, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("8", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertNull(token2);
      
      xPathLexer1.number();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierChar('');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("XGKHd@cm!KPsZ");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("Glp<Xp");
      Token token0 = xPathLexer2.dollar();
      assertEquals("G", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer1.dots();
      assertEquals("@", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer2.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer2.at();
      assertEquals("<", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("XGKHd@cm!KPsZ");
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer3.star();
      assertEquals("X", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer3.rightBracket();
      assertEquals(4, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ekdf\"C1@)1|Y");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (15) (kdf)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("e", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("\"", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("&.d\"u<5I;Kj");
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("C1", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("@", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("&", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("yaEgUw)m]o");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("yaEgUw", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("`Ve3LA\"ivxfqxh|?^)");
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("V", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("e3", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer0.literal();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      xPathLexer0.setXPath("");
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("n}bg+Y<V");
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer1.dots();
      assertEquals("n", token3.getTokenText());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.slashes();
      Token token5 = xPathLexer1.nextToken();
      assertEquals("bg", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.at();
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("ekdf\"C1@)1|Y");
      Token token7 = xPathLexer3.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("e", token7.getTokenText());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("uPG:%u}KU");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("uP", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("1sHZT}^WLKR");
      Token token1 = xPathLexer0.leftParen();
      assertEquals("G", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("1sHZT}^WLKR");
      Token token2 = xPathLexer2.nextToken();
      assertEquals("1", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer2.plus();
      assertEquals("s", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("e!");
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      xPathLexer1.whitespace();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      xPathLexer0.setXPath("'UlW");
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("'", token4.getTokenText());
      
      xPathLexer1.notEquals();
      xPathLexer0.number();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("UlW", token5.getTokenText());
      
      xPathLexer0.literal();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer1.notEquals();
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("9'LlfIt&HbY^QR!<Yq");
      Token token8 = xPathLexer2.literal();
      assertNull(token8);
      
      xPathLexer0.setXPath("");
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("yaEgUw)m]o");
      Token token3 = xPathLexer1.equals();
      assertEquals("y", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("aEgUw", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("=8/g;6i2x");
      Token token0 = xPathLexer1.rightParen();
      assertEquals("=", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Sme<tZ5zt4m");
      Token token2 = xPathLexer2.at();
      assertEquals("S", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer2.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("me", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer(")");
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.dollar();
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals(7, token8.getTokenType());
      assertEquals("<", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<qu7D");
      Token token0 = xPathLexer0.relationalOperator();
      assertNotNull(token0);
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&.d\"u<5I;Kj");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("&", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("d\"u<5I;Kj", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      String string0 = token1.toString();
      assertEquals("[ (1) (()", string0);
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("WwWR");
      Token token3 = xPathLexer2.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("Ww", token3.getTokenText());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals("WR", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("WuFVr>~gOwI");
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("=8/g;6i2x");
      xPathLexer0.div();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("Z0a$1j7cz");
      Token token1 = xPathLexer1.nextToken();
      token1.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("sJ*YFC#%P L09");
      xPathLexer1.doubleColon();
      xPathLexer2.nextToken();
      xPathLexer1.slashes();
      xPathLexer2.getXPath();
      xPathLexer1.consume();
      assertNotSame(xPathLexer1, xPathLexer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      xPathLexer3.operatorName();
      xPathLexer1.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.setXPath("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer1.nextToken();
      xPathLexer1.at();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      Token token3 = xPathLexer0.number();
      assertEquals("3", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("\"i", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("vxfqxh|?^)", token8.getTokenText());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals("v", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ G(");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("G", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      xPathLexer0.consume(3253);
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer0.rightBracket();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("4");
      xPathLexer2.nextToken();
      xPathLexer1.consume();
      assertNotSame(xPathLexer1, xPathLexer0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("?a2xUVnQ");
      Token token0 = xPathLexer2.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      xPathLexer2.whitespace();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("1b+");
      xPathLexer3.setXPath("uG:h0T!6)B(~f3LF");
      xPathLexer1.whitespace();
      xPathLexer2.notEquals();
      xPathLexer3.number();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("rLO", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer2.notEquals();
      assertEquals("UV", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("u", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("XWF!BPJ");
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("XWF!BPJ");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("X", token0.getTokenText());
      
      xPathLexer1.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.setXPath("XWF!BPJ");
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("BP", token1.getTokenText());
      
      xPathLexer0.number();
      xPathLexer1.nextToken();
      Token token2 = xPathLexer1.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals("B", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer1.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("J", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K2xuvlqM}gyf");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("2", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.plus();
      assertEquals("x", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("u", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token5 = xPathLexer0.dollar();
      assertEquals("}", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals("g", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("=8/g;6i2x");
      Token token0 = xPathLexer1.star();
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("/", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("g", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer1.setPreviousToken(token0);
      assertEquals("=", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      Token token5 = xPathLexer1.leftParen();
      assertEquals(";", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("?a2xUVnQ");
      Token token0 = xPathLexer1.star();
      assertEquals("o", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.whitespace();
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals("g", token1.getTokenText());
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("5RHQj V5");
      xPathLexer1.setXPath("&$$@F");
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer1.number();
      Token token2 = xPathLexer4.nextToken();
      assertEquals("5", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer3.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer3.notEquals();
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("&$$@F");
      Token token6 = xPathLexer6.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals("?", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("&", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.leftParen();
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.leftParen();
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("g", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("#rLO)Eo.T~eK6/$\"j", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ekdf=C1@)1|Y");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("e", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("ekdf=C1@)1|Y");
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("=", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("C1", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("ekdf=C1@)1|Y");
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals("@", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("?a2xUVnQ");
      Token token0 = xPathLexer2.dots();
      assertEquals("?", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.whitespace();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("5RHQj V5");
      xPathLexer4.rightParen();
      xPathLexer1.setXPath("&$$@F");
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer4.nextToken();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.consume(8);
      XPathLexer xPathLexer5 = new XPathLexer("5RHQj V5");
      Token token6 = xPathLexer5.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("5", token6.getTokenText());
      
      Token token7 = xPathLexer5.identifier();
      assertEquals("RHQj", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ekdf\"C1@)1|Y");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("&.d\"u<5I;Kj");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("-c:h7zU");
      xPathLexer2.star();
      xPathLexer2.nextToken();
      xPathLexer2.at();
      Token token2 = xPathLexer2.identifierOrOperatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("og", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("#", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("rL", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.slashes();
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals("O)Eo.T~eK6/$\"j", token5.getTokenText());
      
      xPathLexer1.setPreviousToken(token4);
      assertEquals(11, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("Q-iso");
      Token token1 = xPathLexer1.dots();
      assertEquals("Q", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer1.leftParen();
      assertEquals("-", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Q-iso");
      Token token5 = xPathLexer3.nextToken();
      assertEquals("Q-iso", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer3.slashes();
      assertEquals(11, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("XWF!BPJ");
      Token token0 = xPathLexer0.doubleColon();
      String string0 = token0.toString();
      assertEquals("[ (19) (XW)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.rightParen();
      assertEquals("F", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6");
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("6");
      Token token2 = xPathLexer3.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer2.slashes();
      assertEquals(11, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("XWF!BPJ");
      Token token0 = xPathLexer0.slashes();
      assertEquals("X", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("W", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(23, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("PJ", token6.getTokenText());
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<j1_P^PKFc4W, Z!x");
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bKAq{");
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.LA(17);
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.LA(17);
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      token0.toString();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("XWF!BPJ");
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.whitespace();
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer1.slashes();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer1.literal();
      assertEquals(27, token0.getTokenType());
      assertEquals("g#rLO)E", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      xPathLexer2.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.setXPath("C:IQ?&");
      Token token1 = xPathLexer2.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer2.rightBracket();
      assertEquals(":", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer1.notEquals();
      assertEquals("T~", token4.getTokenText());
      
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer2.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("IQ", token6.getTokenText());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("e", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yaEgUw)m]o");
      xPathLexer0.plus();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aqu0`");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n&;x$%");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(23, token0.getTokenType());
      assertEquals("n", token0.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("S@gDfaHr6FH");
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals(";x", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("S", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("$", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("%", token6.getTokenText());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer1.div();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('8');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      XPathLexer xPathLexer1 = new XPathLexer("e!");
      xPathLexer1.whitespace();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      xPathLexer0.setXPath("'UlW");
      Token token3 = xPathLexer1.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer1.slashes();
      assertEquals(11, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("7-}z7btX+");
      xPathLexer0.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer2.slashes();
      xPathLexer1.number();
      Token token0 = xPathLexer2.nextToken();
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("#GY3|");
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer1.consume();
      xPathLexer0.whitespace();
      Token token3 = xPathLexer1.literal();
      assertNull(token3);
      
      XPathLexer xPathLexer2 = new XPathLexer("7-}z7btX+");
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer3.number();
      Token token6 = xPathLexer2.nextToken();
      assertEquals(30, token6.getTokenType());
      assertEquals("7", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ei].A%<TD");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<j1_P^PKFc4W, Z!x");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      Token token0 = xPathLexer0.literal();
      assertEquals(27, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("eK6/$\"j", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V5g@");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("V5g", token0.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.whitespace();
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.nextToken();
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Z');
      assertTrue(boolean0);
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yaEgUw)m]o");
      xPathLexer0.whitespace();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      int int0 = xPathLexer2.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ekdf\"C1@)1|Y");
      Token token0 = xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("og#rLO)Eo.T~eK6/$\"j");
      XPathLexer xPathLexer2 = new XPathLexer("w0JsQR~8$li|qZnay]");
      Token token1 = xPathLexer2.identifierOrOperatorName();
      assertEquals("w0JsQR", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("ek", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Bz'i-A,`M\"ZeGV");
      Token token3 = xPathLexer3.rightParen();
      assertEquals("B", token3.getTokenText());
      
      xPathLexer1.identifier();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token4 = xPathLexer0.rightParen();
      assertEquals("\"", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("LHo>T]T0hX_fwMK8/");
      XPathLexer xPathLexer2 = new XPathLexer("LHo>T]T0hX_fwMK8/");
      Token token0 = xPathLexer2.dollar();
      String string0 = token0.toString();
      assertEquals("[ (26) (L)", string0);
      
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer2.nextToken();
      assertEquals("Ho", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer2.setXPath("");
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('k');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("WuFVr>~gOwI");
      xPathLexer0.div();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("uFVr", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(">", token2.getTokenText());
      assertEquals(9, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<j1_P^PKFc4W, Z!x");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("j", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("_P^PKFc4W, Z!x", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V2");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.at();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q-iso");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("Q", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("-", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("i", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.number();
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("so", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ei].A%<TD");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q-iso");
      Token token0 = xPathLexer0.dots();
      assertEquals("Q", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("-", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("iso", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ekdf\"C1@)1|Y");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("zd]1}~g");
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("ek", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer2.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("zd", token2.getTokenText());
      
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("0`n8@73,\"/ ;!,");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("0", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("g/:L`Q;");
      Token token2 = xPathLexer2.slashes();
      assertEquals("g/", token2.getTokenText());
      assertEquals(12, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">n6;$");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("n6", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m?_g1R-='-~a5M%,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("?", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m@:CT-=w");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("m@", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("umQ6\u0001i! D7wP");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.identifier();
      assertEquals("mQ6\u0001i", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N`{Ggz28:nD3!");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("N", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("{", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N`{Ggz28:nD3!");
      XPathLexer xPathLexer1 = new XPathLexer("zQ+");
      xPathLexer0.nextToken();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yaEgUw)m]o");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("y", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
      
      XPathLexer xPathLexer1 = new XPathLexer("yaEgUw)m]o");
      Token token2 = xPathLexer1.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("y", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yaEgUw)m]o");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("yaEgUw", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m]o", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("]", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<:qCtfR");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("qCtfR", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      XPathLexer xPathLexer1 = new XPathLexer("&.d\"u<5I;Kj");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer1.dots();
      assertEquals(14, token1.getTokenType());
      assertEquals("&.", token1.getTokenText());
      
      Token token2 = xPathLexer1.star();
      assertEquals("d", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("(", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token4);
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3.VzckRX_-i:kC");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals("3.", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p=$ua*'p$5i0");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("p", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.whitespace();
      assertEquals((-2), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*WJSJm");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("*", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v'rD=cm~e\"xhEv");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-19));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ocJrLO)Eo.T~eK6/$\"j");
      Token token0 = xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g0V7#MbFj#xwU>_=H");
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&.d\"u<5I;Kj");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = new Token(10, ":", 10, 945);
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IXd-WfXtj|V;#t 5");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("IX", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("|", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8/`");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("8/", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("['mo&iarXUr");
      xPathLexer0.not();
      xPathLexer0.at();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setXPath("['mo&iarXUr");
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LsyJorA >o=Rw;H");
      xPathLexer0.consume(3);
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }
}
