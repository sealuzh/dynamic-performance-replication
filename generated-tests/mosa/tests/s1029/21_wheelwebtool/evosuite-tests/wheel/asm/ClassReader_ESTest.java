/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 20:11:53 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.SequenceInputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("Synthetic");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(12);
      classReader0.accept((ClassVisitor) classWriter0, 808);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 7316);
      classReader0.copyPool(classWriter0);
      Attribute attribute0 = new Attribute("wheel.asm.ClassWriter");
      classReader0.accept((ClassVisitor) classWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(12);
      int int0 = classReader0.getAccess();
      assertEquals(33, int0);
      
      classReader0.getInterfaces();
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.accept((ClassVisitor) classWriter0, 4807);
      assertEquals(2, ClassReader.SKIP_DEBUG);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 8, 7316);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 7316, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17273
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
          ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
          ClassReader classReader1 = null;
          try {
            classReader1 = new ClassReader(classReader0.b, 2, 8);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 22728
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      ClassReader classReader1 = new ClassReader(bufferedInputStream0);
      ClassReader classReader2 = new ClassReader(classReader0.b);
      classReader2.readByte(8);
      // Undeclared exception!
      try { 
        classReader2.readLabel(2, (Label[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 2);
      char[] charArray0 = new char[5];
      classReader0.readConst(260, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      File file0 = MockFile.createTempFile("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      // Undeclared exception!
      try { 
        classReader0.readConst(223, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(12);
      classReader0.getAccess();
      classReader0.getItem(33);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "wheel.asm.ClassWriter";
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      File file0 = MockFile.createTempFile("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '1';
      // Undeclared exception!
      try { 
        classReader0.readConst(45, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      File file0 = MockFile.createTempFile("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '1';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      // Undeclared exception!
      try { 
        classReader0.readConst(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(12);
      classReader0.accept((ClassVisitor) classWriter0, 808);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.accept((ClassVisitor) classWriter0, 1918);
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = '<';
      charArray0[2] = '@';
      charArray0[3] = 'B';
      classReader0.readConst(625, charArray0);
      classReader0.copyPool(classWriter0);
  }
}
