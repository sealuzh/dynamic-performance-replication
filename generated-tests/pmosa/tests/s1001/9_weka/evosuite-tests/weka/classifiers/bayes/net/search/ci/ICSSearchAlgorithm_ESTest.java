/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:22:03 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.core.Attribute;
import weka.core.Environment;
import weka.core.Instances;
import weka.core.ProtectedProperties;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.maxCardinalityTipText();
      boolean[][] booleanArray0 = new boolean[4][5];
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[0];
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[6];
      booleanArray4[0] = true;
      booleanArray4[1] = false;
      booleanArray4[2] = true;
      booleanArray4[3] = false;
      booleanArray4[4] = false;
      booleanArray4[5] = false;
      booleanArray0[3] = booleanArray4;
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[9][3];
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[4];
      int int0 = 2;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(2, 88, 109, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = new String[0];
      iCSSearchAlgorithm0.setOptions(stringArray0);
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.globalInfo();
      boolean[][] booleanArray0 = new boolean[5][2];
      boolean[] booleanArray1 = new boolean[7];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[7];
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      booleanArray2[4] = false;
      booleanArray2[5] = true;
      booleanArray2[6] = false;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[3];
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[4];
      booleanArray4[0] = false;
      booleanArray4[1] = false;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[8];
      booleanArray5[0] = false;
      booleanArray5[1] = false;
      booleanArray5[2] = false;
      booleanArray5[3] = false;
      booleanArray5[4] = false;
      booleanArray5[5] = false;
      booleanArray5[6] = true;
      booleanArray5[7] = true;
      booleanArray0[4] = booleanArray5;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.next(0, 1737, 1242, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm_SeparationSet0.getRevision();
      boolean[][] booleanArray0 = new boolean[1][6];
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray0[0] = booleanArray1;
      boolean[][] booleanArray2 = new boolean[2][0];
      booleanArray2[0] = booleanArray1;
      booleanArray2[1] = booleanArray1;
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[8][0];
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[7];
      iCSSearchAlgorithm_SeparationSetArray1[0] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[2] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[3] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[4] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[5] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[6] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSetArray1;
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray2 = new ICSSearchAlgorithm.SeparationSet[0];
      iCSSearchAlgorithm_SeparationSetArray0[1] = iCSSearchAlgorithm_SeparationSetArray2;
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray3 = new ICSSearchAlgorithm.SeparationSet[2];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet1 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm_SeparationSetArray3[0] = iCSSearchAlgorithm_SeparationSet1;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(0, 0, 0, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.listOptions();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.getOptions();
      int int0 = 1920;
      BayesNet bayesNet0 = new BayesNet();
      iCSSearchAlgorithm0.getRevision();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(0);
      assertTrue(boolean0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      boolean[][] booleanArray0 = new boolean[0][4];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm0.getOptions();
      iCSSearchAlgorithm_SeparationSet0.contains(1920);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("</BIF>\n", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = new Instances(instances0);
      iCSSearchAlgorithm0.buildStructure(bayesNet0, instances1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      ICSSearchAlgorithm.main(stringArray0);
      boolean[][] booleanArray0 = new boolean[1][0];
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray0[0] = booleanArray1;
      iCSSearchAlgorithm0.existsSepSet(16, 3040, 1, booleanArray0);
      String string0 = iCSSearchAlgorithm0.getRevision();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.setMaxCardinality((-21));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("yk77pc95.6G9{B^k", arrayList0, 12);
      BayesNet bayesNet0 = new BayesNet();
      Attribute attribute0 = new Attribute(".arff");
      bayesNet0.graph();
      FileSystemHandling.shouldAllThrowIOExceptions();
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      int int0 = iCSSearchAlgorithm0.next(4, 10, 0, (boolean[][]) null);
      assertEquals((-21), iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Fs]:j]H+!jWx)", arrayList0, 3);
      BayesNet bayesNet0 = new BayesNet();
      Attribute attribute0 = new Attribute("@relation", instances0, 3);
      arrayList0.add(attribute0);
      iCSSearchAlgorithm0.getOptions();
      instances0.setRelationName("");
      iCSSearchAlgorithm0.setMaxCardinality(0);
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Fs]:j]H+!jWx)", arrayList0, 3);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      Attribute attribute0 = new Attribute("@relation", instances0, 3);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = new Instances(instances0);
      iCSSearchAlgorithm0.buildStructure(bayesNet0, instances1);
      String[] stringArray0 = new String[1];
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute0);
      stringArray0[0] = "@relation";
      boolean[][] booleanArray0 = new boolean[5][2];
      boolean[] booleanArray1 = new boolean[17];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[3] = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[9];
      booleanArray1[12] = true;
      booleanArray2[1] = true;
      booleanArray1[4] = true;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      String string0 = iCSSearchAlgorithm0.getRevision();
      assertEquals("8034", string0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureExtraArcs();
      Instances instances1 = new Instances(instances0);
      iCSSearchAlgorithm0.buildStructure(bayesNet0, instances1);
      String[] stringArray0 = new String[1];
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute0);
      stringArray0[0] = "@relation";
      ICSSearchAlgorithm.main(stringArray0);
      boolean[][] booleanArray0 = new boolean[5][2];
      boolean[] booleanArray1 = new boolean[17];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      arrayList0.add(attribute0);
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[9];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      booleanArray2[8] = true;
      booleanArray0[3] = booleanArray2;
      boolean[] booleanArray3 = new boolean[4];
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray3[3] = true;
      booleanArray0[4] = booleanArray3;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = new Instances(instances0);
      iCSSearchAlgorithm0.buildStructure(bayesNet0, instances1);
      String[] stringArray0 = new String[1];
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute0);
      stringArray0[0] = "@relation";
      boolean[][] booleanArray0 = new boolean[5][2];
      arrayList0.add(attribute0);
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      String string0 = iCSSearchAlgorithm0.getRevision();
      assertEquals("8034", string0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = new Instances(instances0);
      iCSSearchAlgorithm0.buildStructure(bayesNet0, instances1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = Environment.getSystemWide();
      environment0.getVariableNames();
      ArrayList<String> arrayList2 = new ArrayList<String>(0);
      Attribute attribute0 = new Attribute(";:#.n]v9", arrayList2, 1534);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute1);
      boolean[][] booleanArray0 = new boolean[5][2];
      boolean[] booleanArray1 = new boolean[17];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      arrayList0.add(attribute1);
      booleanArray0[0] = booleanArray1;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureExtraArcs();
      Instances instances1 = new Instances(instances0);
      iCSSearchAlgorithm0.buildStructure(bayesNet0, instances1);
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[7][0];
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[3] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[3];
      booleanArray3[0] = true;
      booleanArray3[2] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[5];
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray4[4] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[8];
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray5[5] = true;
      booleanArray5[6] = true;
      booleanArray5[7] = true;
      boolean[] booleanArray6 = new boolean[5];
      booleanArray0[5] = booleanArray6;
      boolean[] booleanArray7 = new boolean[4];
      booleanArray7[0] = true;
      booleanArray7[1] = false;
      booleanArray7[2] = true;
      booleanArray1[3] = true;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(1, 2, 1, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureExtraArcs();
      Instances instances1 = new Instances(instances0);
      iCSSearchAlgorithm0.buildStructure(bayesNet0, instances1);
      String[] stringArray0 = new String[1];
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[7][0];
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[3];
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[5];
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray4[4] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[8];
      booleanArray5[0] = true;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray5[4] = true;
      booleanArray5[5] = true;
      booleanArray5[6] = true;
      booleanArray5[7] = true;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[0];
      booleanArray0[5] = booleanArray6;
      boolean[] booleanArray7 = new boolean[4];
      booleanArray7[0] = true;
      booleanArray7[1] = false;
      booleanArray7[2] = true;
      booleanArray7[3] = true;
      booleanArray0[6] = booleanArray7;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(1, 2, 1, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureExtraArcs();
      Instances instances1 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      iCSSearchAlgorithm0.buildStructure(bayesNet0, instances1);
      String[] stringArray0 = new String[1];
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute0);
      stringArray0[0] = "@relation";
      boolean[][] booleanArray0 = new boolean[5][2];
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      booleanArray1[0] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray0[0] = booleanArray1;
      Properties properties0 = new Properties();
      iCSSearchAlgorithm0.existsSepSet(2, 350, 2, booleanArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureExtraArcs();
      Instances instances1 = new Instances(instances0);
      iCSSearchAlgorithm0.buildStructure(bayesNet0, instances1);
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[7][0];
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[3] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[3];
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[5];
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray4[4] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[8];
      booleanArray5[0] = true;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray5[5] = true;
      booleanArray5[6] = true;
      booleanArray5[7] = true;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[0];
      booleanArray0[5] = booleanArray6;
      boolean[] booleanArray7 = new boolean[4];
      booleanArray7[0] = true;
      booleanArray7[1] = false;
      booleanArray7[2] = true;
      booleanArray1[3] = true;
      booleanArray0[6] = booleanArray7;
      iCSSearchAlgorithm0.existsSepSet(1, 2, 1, booleanArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      arrayList0.clone();
      Instances instances1 = new Instances(instances0);
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      attribute0.setStringValue("@relation");
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      BayesNet bayesNet1 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet1, instances1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      Attribute attribute0 = new Attribute("@relation", (-1));
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      int[] intArray0 = new int[8];
      intArray0[0] = 2591;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-28);
      intArray0[4] = 1413;
      intArray0[5] = (-1533);
      intArray0[6] = (-600);
      intArray0[7] = (-2169);
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      iCSSearchAlgorithm_SeparationSet0.contains(2791);
      boolean[][] booleanArray0 = new boolean[6][9];
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[8];
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      booleanArray2[6] = false;
      booleanArray2[7] = false;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[3];
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      booleanArray3[2] = false;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[5];
      booleanArray4[0] = false;
      booleanArray4[1] = false;
      booleanArray4[2] = false;
      booleanArray4[3] = false;
      booleanArray4[4] = false;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[7];
      booleanArray5[0] = false;
      booleanArray5[1] = false;
      booleanArray5[2] = false;
      booleanArray5[3] = false;
      booleanArray5[4] = false;
      booleanArray5[5] = false;
      booleanArray5[6] = false;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[1];
      booleanArray6[0] = false;
      booleanArray0[5] = booleanArray6;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.setMaxCardinality((-21));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 129);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      Attribute attribute0 = new Attribute(".arff");
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.setMaxCardinality((-21));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predics the mean (for a numeric class) or the ode (for a nominal class).", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      arrayList0.clone();
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      BayesNet bayesNet1 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet1, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.setMaxCardinality((-2));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = new Instances("Class for building and using a 0-R classifier. Predics the mean (for a numeric class) or the ode (for a nominal class).", arrayList0, 0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Class for building and using a 0-R classifier. Predics the mean (for a numeric class) or the ode (for a nominal class).", list0, 0);
      arrayList0.add(attribute0);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      arrayList0.clone();
      Attribute attribute1 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute1);
      arrayList0.add(attribute1);
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = iCSSearchAlgorithm0.m_BayesNet;
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }
}
