/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:47:35 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LocalVariableTable";
      stringArray0[1] = "LocalVariableTable";
      classWriter0.visit(49, 65535, "LocalVariableTable", "", "LocalVariableTable", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "LocalVariableTable", "Y>}(", "", "LocalVariableTable");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(125, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(584);
      classWriter0.index = (-1579);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "\"9Z9Hn/!|$hgF:|DD(", "\"9Z9Hn/!|$hgF:|DD(", "\"9Z9Hn/!|$hgF:|DD(", "\"9Z9Hn/!|$hgF:|DD(");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(100, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "\"9Z\"9Hn/|$hFF|DDA", "\"9Z\"9Hn/|$hFF|DDA", "\"9Z\"9Hn/|$hFF|DDA", "\"9Z\"9Hn/|$hFF|DDA");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "t", "t", "}:l#WXH$j", "t");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-615));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "g3'<Y8@Opj-Qey", "g3'<Y8@Opj-Qey", "", "g3'<Y8@Opj-Qey");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "RuntimeInvisibleAnnotations", "'", "Synthetic", "'");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-615));
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "org.apache.commons.io.filefilter.FileFileFilter", (String) null, "g3'<Y8@Opj-Qey", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 292552704, "wheel.asm.Edge", "LocalVariableTypeTable", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@3cd4c9ec
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-7), "Jb)O0zvj|r$<a", "org.apache.commons.io.filefilter.TrueFileFilter", "uh1-lRMg/2k-s", "Signature");
      ByteVector byteVector0 = classWriter0.pool;
      Attribute attribute0 = new Attribute("Synthetic");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "\"9Z\"9Hn/|$hFF|DDA", "\"9Z\"9Hn/|$hFF|DDA", "tkdVdS8?:GE?$BgVD>", "\"9Z\"9Hn/|$hFF|DDA");
      fieldWriter0.visitAnnotation("oM#y*B+h#*&1g(h<", false);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "org.apache.commons.io.filefilter.SizeFileFilter", "_Rn[)p53xm13mt4%L\"", (String) null, "org.apache.commons.io.filefilter.SizeFileFilter");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(130, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1478), "t", "t", "Mq-&8BvM,z&7]@Ui&", "t");
      Attribute attribute0 = new Attribute("Mq-&8BvM,z&7]@Ui&");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "\"9Z\"9Hn/|$hFF|DDA", "\"9Z\"9Hn/|$hFF|DDA", "tkdVdS8?:GE?$BgVD>", "\"9Z\"9Hn/|$hFF|DDA");
      fieldWriter0.visitAnnotation("oM#y*B+h#*&1g(h<", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LocalVariableTable";
      stringArray0[1] = "LocalVariableTable";
      classWriter0.visit(50, 50, "LocalVariableTable", "LocalVariableTable", "LocalVariableTable", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "LocalVariableTable", "Y>}(", "", "LocalVariableTable");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(125, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(34);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1331), "CMj7+\u00078Dc@0'*3]*!=", "CMj7+\u00078Dc@0'*3]*!=", "\"9Z\"9Hn/|$hFF|DD(", (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(131, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-615));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "g3'<Y8@Opj-Qey", "g3'<Y8@Opj-Qey", "org.apache.commons.io.filefilter.FileFileFilter", "g3'<Y8@Opj-Qey");
      fieldWriter0.visitAnnotation("Label offset position has not been resolved yet", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(236, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-615));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "g3'<Y8@Opj-Qey", "g3'<Y8@Opj-Qey", "org.apache.commons.io.filefilter.FileFileFilter", "g3'<Y8@Opj-Qey");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 811, "g3'<Y8@Opj-Qey", "g3'<Y8@Opj-Qey", "org.apache.commons.io.filefilter.FileFileFilter", (Object) null);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-615));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "g3'<Y8@Opj-Qey", "g3'<Y8@Opj-Qey", "", "g3'<Y8@Opj-Qey");
      fieldWriter0.visitEnd();
  }
}
