/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:38:52 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2445, 32);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(11, 11);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(48, mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(17);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 43;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(43);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      rowMajorSparseMatrix0.hadamardProduct(matrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(20, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.shuffle();
      matrix0.shuffle();
      Matrix matrix2 = matrix1.shuffle();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix2);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(31, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.shuffle();
      Matrix matrix2 = matrix1.shuffle();
      mockRandom0.nextLong();
      ColumnMajorSparseMatrix.zero(31, 3796);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix2);
      mockRandom0.nextGaussian();
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(10, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.shuffle();
      matrix0.shuffle();
      Matrix matrix2 = matrix1.shuffle();
      matrix2.iterator();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix2);
      eigenDecompositor0.decompose();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        mockRandom0.longs((-2311L), 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(39, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.shuffle();
      Matrix matrix1 = matrix0.shuffle();
      Matrix matrix2 = matrix1.shuffle();
      matrix2.iterator();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix2);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(17);
      DenseVector denseVector0 = DenseVector.random(17, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.shuffle();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix1);
      SparseVector sparseVector0 = SparseVector.zero(17);
      Matrix matrix2 = sparseVector0.toRowMatrix();
      eigenDecompositor0.matrix = matrix2;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 25;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(25, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.shuffle();
      matrix0.shuffle();
      Matrix matrix2 = matrix1.shuffle();
      mockRandom0.ints();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix2);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Random.setNextRandom(25);
      eigenDecompositor0.applicableTo(matrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.shuffle();
      Matrix matrix2 = matrix1.shuffle();
      Matrix matrix3 = matrix2.shuffle();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix3);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Random.setNextRandom(10);
      eigenDecompositor0.applicableTo(matrix2);
      Random.setNextRandom(10);
      eigenDecompositor0.decompose();
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(matrix1);
      EigenDecompositor eigenDecompositor2 = new EigenDecompositor(matrix2);
      eigenDecompositor2.decompose();
      MockRandom mockRandom1 = new MockRandom(1072L);
      mockRandom1.nextGaussian();
      Random.setNextRandom(3008);
      matrix3.shuffle();
      EigenDecompositor eigenDecompositor3 = new EigenDecompositor(matrix3);
      EigenDecompositor eigenDecompositor4 = new EigenDecompositor(matrix3);
      eigenDecompositor4.decompose();
      EigenDecompositor eigenDecompositor5 = new EigenDecompositor(matrix2);
      eigenDecompositor4.decompose();
      // Undeclared exception!
      try { 
        eigenDecompositor4.fail("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.shuffle();
      mockRandom0.ints((long) 9);
      Matrix matrix2 = matrix0.shuffle();
      Matrix matrix3 = matrix1.shuffle();
      mockRandom0.ints();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix3);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Random.setNextRandom(9);
      eigenDecompositor0.applicableTo(matrix0);
      eigenDecompositor0.decompose();
      Random.setNextRandom(9);
      Random.setNextRandom(95410);
      eigenDecompositor0.decompose();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      Random.setNextRandom(954437177);
      Matrix matrix4 = matrix3.shuffle();
      mockRandom0.doubles();
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(matrix4);
      eigenDecompositor0.decompose();
      mockRandom0.nextGaussian();
      mockRandom0.nextGaussian();
      Random.setNextRandom(95410);
      Matrix matrix5 = matrix0.shuffle();
      eigenDecompositor1.applicableTo(matrix0);
      eigenDecompositor0.decompose();
      eigenDecompositor0.matrix = matrix5;
      Random.setNextRandom(1);
      eigenDecompositor0.applicableTo(matrix2);
      eigenDecompositor0.decompose();
      eigenDecompositor1.decompose();
  }
}
