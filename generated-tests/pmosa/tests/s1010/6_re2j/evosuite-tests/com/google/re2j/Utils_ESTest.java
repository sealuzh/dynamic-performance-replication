/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 17:01:38 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Utils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = Utils.unhex(207);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = Utils.emptyOpContext(0, (-4840));
      assertEquals(42, int0);
      
      int int1 = Utils.unhex(2033);
      boolean boolean0 = Utils.isWordRune(42);
      assertFalse(boolean0);
      
      Utils.stringToRunes("");
      String string0 = Utils.runeToString((-1));
      assertEquals("\uFFFF", string0);
      
      int int2 = Utils.unhex((-1));
      assertTrue(int2 == int1);
      
      int[] intArray0 = Utils.stringToRunes("\f");
      assertArrayEquals(new int[] {12}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utils.isalnum((-4580));
      Utils.runeToString((-1944));
      Utils.emptyOpContext((-1944), (-4843));
      // Undeclared exception!
      try { 
        Utils.indexOf((byte[]) null, (byte[]) null, (-4843));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(768);
      String string0 = Utils.runeToString(420);
      assertEquals("\u01A4", string0);
      
      boolean boolean1 = Utils.isWordRune(122);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(563);
      String string0 = Utils.runeToString(563);
      assertEquals("\u0233", string0);
      
      boolean boolean1 = Utils.isWordRune(563);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = Utils.subarray((byte[]) null, 3261, 3261);
      Utils.unhex(3261);
      Utils.isalnum(3261);
      String string0 = "";
      Utils.stringToRunes("");
      Utils.unhex(207);
      int int0 = 43225;
      // Undeclared exception!
      try { 
        Utils.indexOf((byte[]) null, byteArray0, 43225);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = Utils.EMPTY_BEGIN_TEXT;
      byte[] byteArray0 = new byte[1];
      int int1 = Utils.indexOf(byteArray0, byteArray0, (-4580));
      assertEquals(0, int1);
      
      boolean boolean0 = Utils.isWordRune((-1944));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)95;
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-1694));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = Utils.runeToString((-1949));
      assertEquals("\uF863", string0);
      
      int int0 = Utils.EMPTY_ALL;
      byte[] byteArray0 = new byte[2];
      int int1 = Utils.indexOf(byteArray0, byteArray0, (-1949));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-2678);
      Utils.isWordRune((-2678));
      int int1 = 0;
      Utils.runeToString(0);
      int int2 = (-843);
      Utils.isalnum((-843));
      int int3 = (-654);
      Utils.runeToString((-654));
      int int4 = (-3655);
      Utils.runeToString((-3655));
      Utils.isWordRune((-654));
      int int5 = 563;
      Utils.isalnum(563);
      Utils.isalnum((-843));
      int int6 = (-1356);
      Utils.runeToString((-1356));
      String string0 = null;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = Utils.runeToString(65);
      assertEquals("A", string0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, 65);
      assertEquals(0, int0);
      
      int int1 = Utils.unhex((-2793));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-48);
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)20;
      Utils.indexOf(byteArray0, byteArray0, 2066);
      Utils.unhex((-1));
      Utils.isalnum((byte)0);
      Utils.indexOf(byteArray0, byteArray0, (-1));
      Utils.stringToRunes("4uR];?WYvy)UU8m4");
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, 1427, (byte)0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2202);
      int[] intArray1 = Utils.subarray(intArray0, (-2202), (-2202));
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Ya[VoAf?");
      Utils.escapeRune(stringBuilder0, 11);
      assertEquals("Ya[VoAf?\\x0b", stringBuilder0.toString());
      
      Object object0 = new Object();
      boolean boolean0 = Utils.isalnum(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Ya[VoAf?");
      stringBuilder0.append((-2164L));
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '{';
      charArray0[2] = '/';
      charArray0[3] = 'T';
      charArray0[4] = '@';
      charArray0[5] = 'B';
      charArray0[6] = 'v';
      charArray0[7] = ';';
      stringBuilder0.insert(0, charArray0);
      Utils.escapeRune(stringBuilder0, (-135));
      Utils.escapeRune(stringBuilder0, 2185);
      assertEquals("k{/T@Bv;Ya[VoAf?-2164\\xffffff79\\x{889}", stringBuilder0.toString());
      
      boolean boolean0 = Utils.isalnum(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utils.runeToString(2419);
      Utils.emptyOpContext(57, 57);
      int int0 = (-175);
      Utils.runeToString((-175));
      StringBuffer stringBuffer0 = new StringBuffer(57);
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = '3';
      charArray0[2] = ')';
      charArray0[3] = 'v';
      charArray0[4] = 'q';
      charArray0[5] = '`';
      charArray0[6] = 'M';
      charArray0[7] = '{';
      // Undeclared exception!
      try { 
        stringBuffer0.append(charArray0, 3621, (-175));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utils.isalnum((-4580));
      String string0 = Utils.runeToString((-1944));
      assertEquals("\uF868", string0);
      
      int int0 = Utils.emptyOpContext((-1944), 1);
      assertEquals(37, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      int int1 = Utils.indexOf(byteArray0, byteArray0, 0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utils.unhex((-2728));
      Utils.isWordRune((-1));
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = '0';
      charArray0[2] = 'C';
      charArray0[3] = 'u';
      charArray0[4] = 'v';
      charArray0[5] = '';
      charArray0[6] = 'y';
      charArray0[7] = '9';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, (CharSequence) stringBuilder2);
      StringBuilder stringBuilder5 = stringBuilder4.append(0.0);
      Utils.escapeRune(stringBuilder5, 1110);
      assertEquals("trueB0Cuvy9trueB0Cuvy90.0\u0456", stringBuilder3.toString());
      assertEquals("trueB0Cuvy9trueB0Cuvy90.0\u0456", stringBuilder4.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(768);
      int int0 = Utils.unhex(1);
      boolean boolean1 = Utils.isalnum(0);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = Utils.stringToRunes("7n-WyvXR");
      assertArrayEquals(new int[] {55, 110, 45, 87, 121, 118, 88, 82}, intArray0);
      
      Utils.unhex((-1));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)81;
      int int1 = Utils.indexOf(byteArray0, byteArray0, (-1));
      assertEquals(0, int1);
      
      int int2 = Utils.indexOf(byteArray0, byteArray0, 57);
      assertEquals((-1), int2);
      
      int int3 = Utils.indexOf(byteArray0, byteArray0, (byte)2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Ya[VoAf?");
      stringBuilder0.append((-2164L));
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '{';
      charArray0[2] = '/';
      charArray0[3] = 'T';
      charArray0[4] = '@';
      char[] charArray1 = new char[9];
      charArray1[0] = '/';
      int int0 = Utils.emptyOpContext(90, (-2615));
      assertEquals(26, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)102;
      int int1 = Utils.indexOf(byteArray0, byteArray0, 64);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune(563);
      int int0 = Utils.emptyOpContext(65, (-1729));
      assertEquals(26, int0);
      
      boolean boolean1 = Utils.isalnum(65);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utils.isalnum(48);
      Utils.runeToString(3369);
      int int0 = Utils.emptyOpContext((-1736), 6400);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-112);
      int int1 = Utils.indexOf(byteArray0, byteArray0, (byte)52);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Ya[VoAf?");
      StringBuilder stringBuilder1 = stringBuilder0.append((-2164L));
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'z';
      charArray0[2] = '?';
      charArray0[3] = 'T';
      charArray0[4] = '@';
      char[] charArray1 = new char[9];
      charArray1[0] = '?';
      charArray1[1] = 'B';
      charArray1[2] = 'v';
      charArray1[3] = 'k';
      charArray1[4] = 'T';
      charArray1[6] = 'k';
      charArray1[7] = ';';
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, charArray1);
      Utils.escapeRune(stringBuilder2, 41);
      Utils.escapeRune(stringBuilder0, 13);
      assertEquals("?BvkT\u0000k;\u0000Ya[VoAf?-2164\\)\\r", stringBuilder0.toString());
      
      boolean boolean0 = Utils.isalnum((-2127));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Ya[VoAf?");
      stringBuilder0.append((-2164L));
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'z';
      charArray0[2] = '?';
      charArray0[3] = 'T';
      charArray0[4] = '@';
      stringBuilder0.insert(0, charArray0);
      Utils.escapeRune(stringBuilder0, 10);
      Utils.escapeRune(stringBuilder0, (-135));
      assertEquals("kz?T@\u0000\u0000\u0000Ya[VoAf?-2164\\n\\xffffff79", stringBuilder0.toString());
      
      Utils.isalnum(2873);
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-135));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Ya[VoAf?");
      StringBuilder stringBuilder1 = stringBuilder0.append((-2164L));
      char[] charArray0 = new char[8];
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, charArray0);
      Utils.escapeRune(stringBuilder2, (-135));
      Utils.escapeRune(stringBuilder1, 8);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ya[VoAf?-2164\\xffffff79\\b", stringBuilder1.toString());
      
      boolean boolean0 = Utils.isalnum((-135));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Ya[VoAf?");
      StringBuilder stringBuilder1 = stringBuilder0.append((-2164L));
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0082';
      charArray0[1] = '{';
      charArray0[2] = '{';
      StringBuilder stringBuilder2 = stringBuilder0.insert(9, charArray0);
      Utils.escapeRune(stringBuilder2, 9);
      Utils.escapeRune(stringBuilder1, 32);
      assertEquals("Ya[VoAf?-\u0082{{2164\\t ", stringBuilder1.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      int int0 = Utils.indexOf(byteArray0, byteArray0, 1159);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)98;
      byteArray0[4] = (byte) (-1);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)46;
      byte[] byteArray1 = new byte[7];
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)46;
      byteArray1[6] = (byte)2;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (-1073));
      assertEquals((-1), int0);
      
      boolean boolean0 = Utils.isalnum((byte) (-1));
      assertFalse(boolean0);
      
      int int1 = Utils.unhex((byte)98);
      assertEquals(11, int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = Utils.emptyOpContext((-1944), (-4580));
      assertEquals(47, int0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte) (-26);
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte)116;
      byteArray1[4] = (byte) (-117);
      byteArray1[5] = (byte) (-123);
      int int1 = Utils.indexOf(byteArray0, byteArray1, 0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = Utils.EMPTY_ALL;
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[6];
      byteArray1[1] = (byte)0;
      byteArray1[3] = (byte)116;
      byteArray1[2] = (byte) (-117);
      byteArray1[5] = (byte) (-123);
      Utils.indexOf(byteArray0, byteArray1, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)116;
      intArray0[1] = (-4580);
      intArray0[2] = (int) (byte)116;
      intArray0[3] = (-3994);
      intArray0[4] = 10;
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, (byte)116, 95);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = Utils.emptyOpContext((-1944), (-4582));
      assertEquals(47, int0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte) (-26);
      byteArray1[3] = (byte) (-26);
      byteArray1[4] = (byte) (-117);
      byteArray1[5] = (byte) (-123);
      Utils.indexOf(byteArray0, byteArray1, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-117);
      intArray0[1] = (int) (byte) (-123);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-26);
      Utils.indexOf(byteArray2, byteArray0, (-2281));
      int int1 = Utils.unhex((byte) (-123));
      assertEquals((-1), int1);
      
      int int2 = Utils.indexOf(byteArray1, byteArray2, (byte) (-26));
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utils.emptyOpContext(116, (-4580));
      Utils.isWordRune(116);
      StringBuilder stringBuilder0 = new StringBuilder(26);
      stringBuilder0.append((-189L));
      Utils.escapeRune(stringBuilder0, 26);
      Object object0 = new Object();
      Utils.escapeRune(stringBuilder0, 12);
      assertEquals("-189\\x1a\\f", stringBuilder0.toString());
      
      int int0 = Utils.unhex((-4580));
      assertEquals((-1), int0);
  }
}
