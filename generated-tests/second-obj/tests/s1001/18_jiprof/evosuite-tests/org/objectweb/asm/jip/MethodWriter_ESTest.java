/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:54:40 GMT 2018
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ByteVector;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Edge;
import org.objectweb.asm.jip.FieldWriter;
import org.objectweb.asm.jip.Frame;
import org.objectweb.asm.jip.Item;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodVisitor;
import org.objectweb.asm.jip.MethodWriter;
import org.objectweb.asm.jip.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-43);
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort(byteArray0, (-1463));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1463
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(83);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 1, ">", ">", ">", stringArray0, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      classWriter0.threshold = 251;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", (String[]) null, true, false);
      classWriter0.newFloat(251);
      methodWriter0.visitVarInsn(91, 1);
      methodWriter0.visitIntInsn(251, 251);
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(559);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%./<D>t'`^`+&N,";
      stringArray0[1] = "%./<D>t'`^`+&N,";
      stringArray0[2] = "java/lang/Class";
      stringArray0[3] = "%./<D>t'`^`+&N,";
      classWriter0.newFieldItem("%./<D>t'`^`+&N,", "java/lang/Class", "java/lang/Class");
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "^wkCXZ<ow@u)", "^wkCXZ<ow@u)", "%./<D>t'`^`+&N,", stringArray0, false, false);
      methodWriter0.visitVarInsn(41, 1);
      methodWriter0.visitTypeInsn(2, "RuntimeInvisibleParameterAnnotations");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      classWriter0.threshold = 251;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", (String[]) null, true, true);
      classWriter0.newFloat(251);
      methodWriter0.visitVarInsn(91, 1);
      // Undeclared exception!
      try { 
        methodWriter0.visitIntInsn(251, 251);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      classWriter0.threshold = 251;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", (String[]) null, true, true);
      classWriter0.newFloat(251);
      methodWriter0.visitVarInsn(13, 1);
      // Undeclared exception!
      try { 
        methodWriter0.visitIntInsn(251, 251);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(187);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 187, "|R`~", "|R`~", "|R`~", (String[]) null, false, false);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitTypeInsn(2, "|R`~");
      methodWriter0.visitLdcInsn("|R`~");
      Attribute attribute0 = new Attribute("|R`~");
      methodWriter0.visitIincInsn(187, 187);
      Attribute attribute1 = new Attribute("|R`~");
      classWriter0.visitAttribute(attribute1);
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(187, "|R`~", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(224);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "99fR~";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 388, "99fR~", "99fR~", "99fR~", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1621;
      intArray0[2] = 648;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 1621, 0);
      assertEquals((-3890), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-982);
      intArray0[1] = (-1695);
      intArray0[1] = 648;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, (-982), 648);
      assertEquals(2278, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(527);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%./<D>t'`^`+&N,";
      stringArray0[1] = "%./<D>t'`^`+&N,";
      stringArray0[2] = "java/lang/Class";
      stringArray0[3] = "%./<D>t'`^`+&N,";
      classWriter0.newFieldItem("%./<D>t'`^`+&N,", "", "");
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "^wkCXZ<ow@u[", "^wkCXZ<ow@u[", "%./<D>t'`^`+&N,", stringArray0, false, false);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitVarInsn(46, 1);
      methodWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      short short0 = MethodWriter.readShort(byteArray0, (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(527);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%./<D>t'`^`+&N,";
      stringArray0[1] = "%./<D>t'`^`+&N,";
      stringArray0[2] = "java/lang/Class";
      stringArray0[3] = "%./<D>t'`^`+&N,";
      classWriter0.thisName = "9R~";
      classWriter0.newFieldItem("%./<D>t'`^`+&N,", "%./<D>t'`^`+&N,", "%./<D>t'`^`+&N,");
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1887), "%./<D>t'`^`+&N,", "%./<D>t'`^`+&N,", "RuntimeVisibleParameterAnnotations", stringArray0, false, false);
      Edge edge0 = new Edge();
      Edge edge1 = edge0.next;
      Label label0 = edge0.successor;
      methodWriter0.visitVarInsn((-1887), 1000);
      methodWriter0.visitTypeInsn(20, "%./<D>t'`^`+&N,");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      String string0 = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, (-812), "FxPN6Sx?)92'", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "jCva/lang/Throwable", stringArray0, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9R~";
      stringArray0[1] = "Ysj`)=v,!|";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "9R~", "Ysj`)=v,!|", "9R~", stringArray0, true, true);
      Label label0 = new Label();
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "9R~");
      methodWriter0.visitAnnotation("9R~", false);
      methodWriter0.exceptionCount = 1;
      byte[] byteArray0 = new byte[6];
      label0.resolve(methodWriter0, 251, byteArray0);
      classWriter0.newFieldItem("Ysj`)=v,!|", "9R~", "9R~");
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(5, (byte)97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      classWriter0.threshold = 251;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", (String[]) null, false, true);
      classWriter0.newFloat(251);
      classWriter0.newMethod("$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", true);
      methodWriter0.visitVarInsn(91, 1);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putLong(91);
      methodWriter0.put(byteVector1);
      // Undeclared exception!
      try { 
        methodWriter0.visitIntInsn(251, 251);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      boolean boolean0 = true;
      String[] stringArray0 = new String[0];
      int int0 = (-284);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-284), ">-{h)Z:P\u0001,T5Nm", ">-{h)Z:P\u0001,T5Nm", ">-{h)Z:P\u0001,T5Nm", stringArray0, true, true);
      ByteVector byteVector0 = classWriter0.pool;
      int int1 = 1762;
      methodWriter0.put(byteVector0);
      int int2 = (-1393);
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-1393), ">-{h)Z:P\u0001,T5Nm", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(527);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^wkCXZ<ow@u[";
      stringArray0[1] = "^wkCXZ<ow@u[";
      stringArray0[2] = "^wkCXZ<ow@u[";
      stringArray0[3] = "^wkCXZ<ow@u[";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "^wkCXZ<ow@u[", "^wkCXZ<ow@u[", "^wkCXZ<ow@u[", stringArray0, false, false);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.signature = "^wkCXZ<ow@u[";
      classWriter0.newMethodItem("^wkCXZ<ow@u[", "^wkCXZ<ow@u[", "^wkCXZ<ow@u[", false);
      methodWriter0.visitLdcInsn("dy");
      classWriter0.newMethod("^wkCXZ<ow@u[", "^wkCXZ<ow@u[", "dy", false);
      methodWriter0.visitFrame(685, 251, stringArray0, 2, stringArray0);
      Attribute attribute0 = new Attribute("rP#q2}Fdv`8_");
      methodWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(22);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "t<-;=,C|S)<(bze";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "t<-;=,C|S)<(bze", "t<-;=,C|S)<(bze", "t<-;=,C|S)<(bze", stringArray0, false, false);
      methodWriter0.visitMultiANewArrayInsn("1z3j)0-TO2(9Soz#", 2174);
      methodWriter0.visitFieldInsn(167, "1z3j)0-TO2(9Soz#", "t<-;=,C|S)<(bze", "e&>/|2MB>;}V6-w+");
      // Undeclared exception!
      try { 
        methodWriter0.visitLineNumber(70, (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEE@EEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEENEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIII:IIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", ">-{h)Z:P\u0001,T5Nm", ">-{h)Z:P\u0001,T5Nm", stringArray0, false, false);
      methodWriter0.getSize();
      classWriter0.invalidFrames = false;
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(1, ">-{h)Z:P\u0001,T5Nm", "AnnotationDefault", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEE@EEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEENEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIII:IIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(720);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 89, "double", ";zkj%O]ZdLs:>", "Mx?cJ`D#$!4?0S", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(290);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$5MkX8\"R56b)HeDV";
      stringArray0[1] = "$5MkX8\"R56b)HeDV";
      stringArray0[2] = ",|{oKvrf[3:";
      stringArray0[3] = "$5MkX8\"R56b)HeDV";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 290, "LocalVariableTable", "(ThEl^0", ",|{oKvrf[3:", stringArray0, false, false);
      methodWriter0.visitFieldInsn(290, "(ThEl^0", ",|{oKvrf[3:", "Sx~c/V");
      methodWriter0.visitAnnotation("(ThEl^0", true);
      methodWriter0.visitFrame(1, 1, stringArray0, 290, stringArray0);
      methodWriter0.getSize();
      byte[] byteArray0 = new byte[1];
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2721);
      String string0 = "l-BQ TQm`xya4";
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",D.0LuZp!QNCk%N7RD";
      stringArray0[1] = "StackMap";
      stringArray0[2] = "l-BQ TQm`xya4";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "x)<:[/4aavgmZxQ";
      stringArray0[4] = "<init>";
      stringArray0[5] = "<init>";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 2721, "<init>", "StackMap", "l-BQ TQm`xya4", stringArray0, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9R~";
      stringArray0[1] = "";
      stringArray0[2] = "FxPN6Sx?)92'";
      stringArray0[3] = "#pg~y\"*\"m#M";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "$EUMkX8t\"R56b)HeDa", "FxPN6Sx?)92'", "#pg~y\"*\"m#M", stringArray0, false, false);
      methodWriter0.visitIntInsn(738, 202);
      methodWriter0.visitIincInsn(738, 738);
      methodWriter0.visitInsn(3556);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6303));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`h>)9";
      stringArray0[1] = "`h>)9";
      stringArray0[2] = "`h>)9";
      stringArray0[3] = "`h>)9";
      stringArray0[4] = "`h>)9";
      stringArray0[5] = "`h>)9";
      stringArray0[6] = "kF@I ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-6303), "`h>)9", "`h>)9", "kF@I ", stringArray0, true, true);
      methodWriter0.visitIntInsn(1, 2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = ClassReader.SIGNATURES;
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"56b)HeDa";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}09z0}RW`J!w<bxkm");
      stringArray0[1] = "$EUMkX8t\"56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"56b)HeDa";
      stringArray0[3] = "$EUMkX8t\"56b)HeDa";
      ClassWriter classWriter1 = new ClassWriter(1);
      MethodWriter methodWriter0 = new MethodWriter(classWriter1, 1048575, "$EUMkX8t\"56b)HeDa", "", "D", stringArray0, false, false);
      methodWriter0.visitInsn((-1247));
      Edge edge0 = new Edge();
      Label label0 = new Label();
      methodWriter0.visitLabel(label0);
      methodWriter0.visitJumpInsn(17, label0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      String[] stringArray0 = new String[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      stringArray0[0] = ">]^HJ)F-I";
      stringArray0[1] = ">]^HJ)F-I";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, ">]^HJ)F-I", ">]^HJ)F-I", ">]^HJ)F-I", stringArray0, true, true);
      methodWriter0.visitLdcInsn(">]^HJ)F-I");
      FieldWriter fieldWriter0 = classWriter0.lastField;
      Label label0 = new Label();
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter1.visitLineNumber(74, label0);
      methodWriter0.visitInsn(132);
      label0.toString();
      String string0 = label0.toString();
      assertEquals("L14", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9R~";
      stringArray0[1] = "Ysj`)=v,!|";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "9R~", "Ysj`)=v,!|", "9R~", stringArray0, true, true);
      methodWriter0.visitAnnotation("9R~", false);
      methodWriter0.exceptionCount = 1;
      methodWriter0.visitFieldInsn(2, "RuntimeInvisibleAnnotations", "RuntimeVisibleAnnotations", "$EUMkXt\"R56z)HeDa");
      methodWriter0.visitLdcInsn("Ysj`)=v,!|");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9f";
      boolean boolean0 = classWriter0.invalidFrames;
      stringArray0[1] = "9f";
      stringArray0[2] = "9f";
      stringArray0[3] = "9f";
      classWriter0.newClass("9f");
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9f", "$EUMkXt,R56z)HeDa", "9f", stringArray0, false, false);
      Item item0 = new Item(251);
      Label label0 = new Label();
      methodWriter0.visitVarInsn(2, 1);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter1.visitInsn(188);
      Label label1 = label0.next;
      // Undeclared exception!
      try { 
        methodWriter1.visitJumpInsn((-1619), (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(268);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"RP6b)jeDa";
      stringArray0[1] = "$EUMkX8t\"RP6b)jeDa";
      boolean boolean0 = ClassReader.WRITER;
      stringArray0[2] = "$EUMkX8t\"RP6b)jeDa";
      stringArray0[3] = "$EUMkX8t\"RP6b)jeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 268, "LocalVariableTypeTable", "$EUMkX8t\"RP6b)jeDa", "LocalVariableTypeTable", stringArray0, true, false);
      Label label0 = new Label();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Edge edge0 = new Edge();
      label0.addToSubroutine(2, 268);
      methodWriter0.visitJumpInsn(1, label0);
      Object object0 = label0.info;
      methodWriter0.visitFieldInsn(1288, "$EUMkX8t\"RP6b)jeDa", "$EUMkX8t\"RP6b)jeDa", "SourceDebugExtension");
      methodWriter0.visitMaxs((-3703), 1288);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2054);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"RN";
      stringArray0[1] = "\"RN";
      stringArray0[2] = "\"RN";
      stringArray0[3] = "\"RN";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2054, "\"RN", "$t!EUMkX8\"R56b)HeD-", "\"RN", stringArray0, false, true);
      methodWriter0.visitLdcInsn("\"RN");
      ByteVector byteVector0 = classWriter0.pool;
      boolean boolean0 = ClassReader.ANNOTATIONS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      methodWriter0.visitTypeInsn(2, "\"RN");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[9];
      Label label0 = new Label();
      Label label1 = new Label();
      MethodWriter.getNewOffset(intArray0, intArray0, label1);
      Edge edge0 = new Edge();
      label1.getFirst();
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "LocalVariableTable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 34, "c{.*%S[B^Nc6,\u0004)] ", "c{.*%S[B^Nc6,\u0004)] ", "LocalVariableTable", stringArray0, true, true);
      methodWriter0.visitLabel(label1);
      methodWriter0.visitFrame((-1688), 2, stringArray0, 2150, stringArray0);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter(251);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, ">-{h)Z:P\u0001,T5Nm", ">-{h)Z:P\u0001,T5Nm", "", (String[]) null, false, false);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitVarInsn(2, 2);
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      methodWriter1.getSize();
      Label label0 = new Label();
      label0.status = 2;
      methodWriter0.visitJumpInsn(251, label0);
      methodWriter0.visitFrame(825, 251, (Object[]) null, (-2061), (Object[]) null);
      methodWriter0.visitAnnotation("void", true);
      methodWriter0.visitLocalVariable("w", ">-{h)Z:P\u0001,T5Nm", ">-{h)Z:P\u0001,T5Nm", label0, label0, 2);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2066);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"RN";
      stringArray0[1] = "\"RN";
      stringArray0[2] = "\"RN";
      stringArray0[3] = "\"RN";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2066, "\"RN", "\"RN", "\"RN", stringArray0, false, false);
      methodWriter0.visitLdcInsn("\"RN");
      ByteVector byteVector0 = new ByteVector(2);
      Label label0 = new Label();
      Item item0 = classWriter0.key2;
      boolean boolean0 = ClassReader.FRAMES;
      boolean boolean1 = ClassReader.FRAMES;
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitJumpInsn(162, label0);
      methodWriter0.visitEnd();
      // Undeclared exception!
      try { 
        label0.getOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Label offset position has not been resolved yet
         //
         verifyException("org.objectweb.asm.jip.Label", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = ClassReader.WRITER;
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$EUMkX8t\"R56b)HeDa");
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)HeDa", "9R~", stringArray0, true, false);
      methodWriter0.visitAnnotation("ava/lang/Throwable", false);
      methodWriter0.visitVarInsn(1, 12);
      methodWriter0.visitFieldInsn(251, "~ly^#~agt-a~", "$EUMkX8t\"R56b)HeDa", "~ly^#~agt-a~");
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(251, "WSn8xacP1T6d8Vu|}F;", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FxPN6Sx?)92'");
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)HeDa", (String) null, stringArray0, true, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      Edge edge0 = new Edge();
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.putLong(1261L);
      methodWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = ClassReader.FRAMES;
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "E-zF4[9";
      stringArray0[1] = "E-zF4[9";
      int int0 = Frame.ELEMENT_OF;
      stringArray0[2] = "E-zF4[9";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "E-zF4[9", "$EUMkX8t\"R56b)HeDa", (String) null, stringArray0, true, false);
      Attribute attribute0 = new Attribute("$EUMkX8t\"R56b)HeDa");
      methodWriter0.visitIincInsn((-268435456), (-268435456));
      methodWriter0.getSize();
      methodWriter0.visitLdcInsn("E-zF4[9");
      methodWriter0.visitTypeInsn(2, "E-zF4[9");
      Edge edge0 = new Edge();
      Label label0 = edge0.successor;
      assertNull(label0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = ClassReader.SIGNATURES;
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)H3Ua";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}09z0RW`J!w<bx~Ikm");
      stringArray0[1] = "$EUMkX8t\"R56b)H3Ua";
      stringArray0[2] = "Signature";
      stringArray0[3] = "Signature";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)H3Ua", (String) null, stringArray0, false, false);
      methodWriter0.visitIincInsn(1, 2);
      methodWriter0.visitLdcInsn("$EUMkX8t\"R56b)H3Ua");
      methodWriter0.visitFieldInsn(251, "~ly^#~agt-a~", "$EUMkX8t\"R56b)H3Ua", "~ly^#~agt-a~");
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(251, "WSn8xacP1T6d8Vu|}F;", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      classWriter0.newClass("$EUMkX8t\"R56b)HeDa");
      classWriter0.visitAnnotation("$EUMkX8t\"R56b)HeDa", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FxPN6Sx?)92'");
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)HeDa", (String) null, stringArray0, true, false);
      byte[] byteArray0 = new byte[8];
      methodWriter0.visitInsn(172);
      byteArray0[0] = (byte)89;
      Edge edge0 = new Edge();
      methodWriter0.visitIntInsn((-4534), 738);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)Hea";
      stringArray0[1] = "$EUMkX8t\"R56b)Hea";
      stringArray0[2] = "$EUMkX8t\"R56b)Hea";
      stringArray0[3] = "9R~";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "$EUMkX8t\"R56b)Hea", "O~", "O~", stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector();
      methodWriter0.visitFrame(2, 1, stringArray0, 2, stringArray0);
      int int0 = methodWriter0.getSize();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xPN6Sx?)9h2'");
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "S`";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)HeDa", (String) null, stringArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      Edge edge0 = new Edge();
      Frame frame0 = new Frame();
      Label label0 = frame0.owner;
      methodWriter0.visitAnnotation("~\"", true);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putShort((-1201));
      methodWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      classWriter0.visitInnerClass("99fR~", "99fR~", "RuntimeVisibleParameterAnnotations", 251);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56z)HeDa";
      boolean boolean0 = ClassReader.ANNOTATIONS;
      stringArray0[1] = "$EUMkX8t\"R56z)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56z)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56z)HeDa";
      classWriter0.newClassItem("$EUMkX8t\"R56z)HeDa");
      classWriter0.newClass("$EUMkX8t\"R56z)HeDa");
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "99fR~", "$EUMkX8t\"R56z)HeDa", (String) null, stringArray0, true, false);
      Label label0 = new Label();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      methodWriter0.visitJumpInsn(169, label0);
      Label[] labelArray0 = new Label[2];
      labelArray0[0] = label0;
      // Undeclared exception!
      try { 
        methodWriter0.visitLookupSwitchInsn(label0, (int[]) null, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9R~";
      stringArray0[1] = "Ysj`)=v,!|";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "9R~", "Ysj`)=v,!|", "9R~", stringArray0, false, false);
      Label label0 = new Label();
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "9R~");
      methodWriter0.visitAnnotation("9R~", false);
      methodWriter0.exceptionCount = 1;
      byte[] byteArray0 = new byte[6];
      label0.resolve(methodWriter0, 251, byteArray0);
      classWriter0.newFieldItem("Ysj`)=v,!|", "9R~", "9R~");
      methodWriter0.visitMaxs(5, (byte)97);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(253);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56Qqb)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56Qqb)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56Qqb)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56Qqb)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 253, "9R~", "$EUMkX8t\"R56Qqb)HeDa", (String) null, stringArray0, true, false);
      methodWriter0.visitTypeInsn(253, "$EUMkX8t\"R56Qqb)HeDa");
      MethodWriter methodWriter1 = methodWriter0.next;
      classWriter0.visit(253, (-354), "InnerClasses", (String) null, "9R~", stringArray0);
      MethodWriter methodWriter2 = classWriter0.firstMethod;
      methodWriter2.visitFieldInsn(253, "$EUMkX8t\"R56Qqb)HeDa", "$EUMkX8t\"R56Qqb)HeDa", "ET4Ik9yQ6fV2f{r%a");
      Integer integer0 = new Integer((-3278));
      Label label0 = new Label();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-3278);
      intArray0[2] = (-354);
      intArray0[3] = 253;
      intArray0[4] = 251;
      intArray0[5] = 2;
      intArray0[6] = (-3278);
      intArray0[7] = 1;
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {1, (-3278), (-354), 253, 251, 2, (-3278), 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/String");
      classWriter0.newClass("$EUMkX8t\"R56b)HeDa");
      classWriter0.visitAnnotation("$EUMkX8t\"R56b)HeDa", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "^`$-iN4Vf";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "java/lang/String", "$EUMkX8t\"R56b)HeDa", "java/lang/String", stringArray0, true, false);
      Label label0 = new Label();
      label0.info = (Object) "java/lang/String";
      label0.resolve(methodWriter0, 20, (byte[]) null);
      Label label1 = label0.getFirst();
      Label label2 = label1.successor;
      methodWriter0.visitTryCatchBlock((Label) null, label1, label1, ",$gK");
      methodWriter0.visitIntInsn(197, 197);
      classWriter0.newClass(">");
      Attribute attribute0 = new Attribute("Ljava/lang/Synthetic;");
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter0.visitTableSwitchInsn((-1399), 2, label0, labelArray0);
      assertSame(label0, label1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(527);
      classWriter0.visitInnerClass((String) null, (String) null, "k40~~,G?)", 527);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^wkCXZ2<ow@u[";
      stringArray0[1] = "^wkCXZ2<ow@u[";
      stringArray0[2] = "HS6/M3\u0003_<=C$";
      stringArray0[3] = "^wkCXZ2<ow@u[";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "^wkCXZ2<ow@u[", "^wkCXZ2<ow@u[", "^wkCXZ2<ow@u[", stringArray0, false, false);
      methodWriter0.signature = "^wkCXZ2<ow@u[";
      Label label0 = new Label();
      int[] intArray0 = new int[1];
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      methodWriter0.visitVarInsn(164, 1);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      // Undeclared exception!
      try { 
        methodWriter1.visitLocalVariable((String) null, (String) null, " ", label0, label0, 3739);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      ClassWriter classWriter0 = new ClassWriter(21);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 249, "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", "R1\"[D/|AYN", (String[]) null, false, true);
      Frame frame0 = new Frame();
      boolean boolean1 = ClassReader.SIGNATURES;
      ByteVector byteVector0 = new ByteVector(2);
      byteVector0.putUTF8("E-zF4C%9");
      boolean boolean2 = ClassReader.WRITER;
      methodWriter0.visitFieldInsn(2, "$EUMkX8t\"R56b)HeDa", "LocalVariableTable", "@.AsE;;");
      Edge edge0 = new Edge();
      Edge edge1 = edge0.next;
      methodWriter0.visitMethodInsn(68, "@.AsE;;", "double", "double");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(241);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 21, "StackMapTable", "L?[K9]=ck!", "StackMapTable", (String[]) null, false, false);
      methodWriter0.visitMultiANewArrayInsn("StackMapTable", 241);
      FieldWriter fieldWriter0 = classWriter0.firstField;
      ClassWriter classWriter1 = new ClassWriter(5);
      classWriter0.newMethodItem("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "$EUMkX8t\"R56b)HeDa", false);
      methodWriter0.visitMethodInsn(2, ".", "StackMapTable", "$EUMkX8t\"R56b)HeDa");
      // Undeclared exception!
      try { 
        classWriter1.getCommonSuperClass(">iGes@w", "Az");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '>iGes@w.class' should be in target project, but could not be found!
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte byte0 = (byte) (-110);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Label label0 = new Label();
      Edge edge0 = new Edge();
      Label label1 = new Label();
      ClassWriter classWriter0 = new ClassWriter(248);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte) (-110), "FxPN6Sx?)92'", "FxPN6Sx?)92'", "FxPN6Sx?)92'", (String[]) null, true, false);
      methodWriter0.visitLabel(label0);
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.visitFrame((-1152), 251, (Object[]) null, 248, (Object[]) null);
      classWriter0.newMethodItem("", "FxPN6Sx?)92'", "", false);
      String string0 = "aIT9$O+t??|D";
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn((byte) (-127), "", "", "aIT9$O+t??|D");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(231);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "5RboInKx<*V";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "5RboInKx<*V";
      stringArray0[2] = "5RboInKx<*V";
      stringArray0[3] = "5RboInKx<*V";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 231, "9R~", "9R~", "5RboInKx<*V", stringArray0, false, false);
      methodWriter0.visitMultiANewArrayInsn("5RboInKx<*V", 1);
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-607), "double", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = ">-{h)Z:P\\1,T5Nm";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, ">-{h)Z:P\u0001,T5Nm", ">-{h)Z:P\u0001,T5Nm", "", (String[]) null, true, true);
      methodWriter0.visitVarInsn(2, 2);
      boolean boolean0 = classWriter0.invalidFrames;
      int int0 = 185;
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      methodWriter0.visitIincInsn(76, (-4433));
      int int1 = (-2061);
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-2061), (-2061));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(268);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lag/String");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "java/lag/String";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 268, "java/lag/String", "$EUMkX8t\"R56b)HeDa", "java/lag/String", stringArray0, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ClassReader.WRITER;
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitInsn(1);
      boolean boolean1 = ClassReader.WRITER;
      methodWriter0.visitMaxs(268, 1);
      Attribute attribute0 = new Attribute("$EUMkX8t\"R56b)HeDa");
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(268, "LocalVariablATypeTale", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BNuU=P<qp#");
      ClassWriter classWriter0 = new ClassWriter(251);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Ysj`)=v,!|";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "StackMap";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "StackMap");
      classWriter0.visitField((-1406), "Ysj`)=v,!|", "StackMap", "Ysj`)=v,!|", "Ysj`)=v,!|");
      stringArray0[1] = "Ysj`)=v,!|";
      boolean boolean0 = ClassReader.FRAMES;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "StackMap", "Ysj`)=v,!|", "StackMap", stringArray0, true, true);
      Label label0 = new Label();
      Frame frame0 = new Frame();
      label0.frame = frame0;
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "BNuU=P<qp#");
      methodWriter0.exceptionCount = 1;
      methodWriter0.visitTypeInsn(251, "Ysj`)=v,!|");
      methodWriter0.getSize();
      methodWriter0.visitLabel(label0);
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(91, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<init>";
      stringArray0[1] = "Ysj`)=v,!|";
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 251, "Ysj`)=v,!|", "Ysj`)=v,!|", "lJ", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitLocalVariable("kJ<{ItJ1. t", "<init>", "[zo!Bgm6]Ij;z!oT", label0, label0, (-3467));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9R~";
      stringArray0[1] = "Ysj`)=v,!|";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "9R~", "Ysj`)=v,!|", "9R~", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "9R~");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("9R~", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.exceptionCount = 1;
      int int0 = Frame.LONG;
      assertEquals(16777220, int0);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertNotNull(annotationVisitor1);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitMultiANewArrayInsn("X=7||%", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(253);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56Qqb)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56Qqb)HeDa";
      classWriter0.visitSource("", ".jar");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      stringArray0[2] = "$EUMkX8t\"R56Qqb)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56Qqb)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 253, "9R~", "$EUMkX8t\"R56Qqb)HeDa", (String) null, stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(253, "$EUMkX8t\"R56Qqb)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn(253, "$EUMkX8t\"R56Qqb)HeDa", "$EUMkX8t\"R56Qqb)HeDa", "ET4Ik9yQ6fV2f{r%a");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = Integer.valueOf(250);
      assertEquals(250, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitMultiANewArrayInsn("}L57'=<MppEP+K:@ Ek", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[16];
      intArray0[4] = 2;
      // Undeclared exception!
      try { 
        methodWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1777);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$fUMk8\"56b)HeDa";
      boolean boolean0 = classWriter0.invalidFrames;
      assertFalse(boolean0);
      
      stringArray0[1] = "c[.*%S[B/Nc6,\u0004)] ";
      stringArray0[2] = "xm4T#k+i";
      stringArray0[3] = "c[.*%S[B/Nc6,\u0004)] ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1777, "xm4T#k+i", "$fUMk8\"56b)HeDa", "$fUMk8\"56b)HeDa", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      methodWriter0.visitFrame(1777, (-3245), stringArray0, (-3245), stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.DOUBLE;
      assertEquals(8, int0);
      
      methodWriter0.visitMethodInsn(184, "$fUMk8\"56b)HeDa", "c[.*%S[B/Nc6,\u0004)] ", "$fUMk8\"56b)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Frame frame1 = new Frame();
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 251;
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = null;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, ">-{h)Z:P\u0001,T5Nm", ">-{h)Z:P\u0001,T5Nm", "", (String[]) null, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitVarInsn(2, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      int int1 = methodWriter1.getSize();
      assertEquals(41, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      assertSame(methodWriter1, methodWriter0);
      
      int int2 = (-2061);
      String string0 = "void";
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.status = 2;
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(251, label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-83);
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      MethodWriter.getNewOffset(intArray0, intArray0, label1);
      assertArrayEquals(new int[] {(-83), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      Label label2 = new Label();
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotNull(label2);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1684);
      label0.inputStackTop = 30;
      intArray1[1] = 232;
      intArray1[2] = (-83);
      MethodWriter.getNewOffset(intArray1, intArray1, label1);
      assertArrayEquals(new int[] {(-1684), 232, (-83)}, intArray1);
      assertFalse(label1.equals((Object)label0));
      assertFalse(label1.equals((Object)label2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(label1, label0);
      assertNotSame(label1, label2);
      assertNotSame(intArray1, intArray0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label3 = label0.next;
      assertNull(label3);
      
      ClassWriter classWriter0 = new ClassWriter((-83));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LocalVariableTable";
      stringArray0[1] = ")";
      stringArray0[2] = "LocalVariableTable";
      stringArray0[3] = "zY5|(w+Dr:o/S:ZJ%";
      stringArray0[4] = "LocalVariableTable";
      stringArray0[5] = "LocalVariableTable";
      stringArray0[6] = ")";
      stringArray0[7] = ")";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, (-1684), ")", "LocalVariableTable", "LocalVariableTable", stringArray0, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1648);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1648, "9R~", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(2, 1648, stringArray0, 1648, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(183, "$EUMkX8t\"R56b)HeDa", "#3nk&B&E", "$EUMkX8t\"R56b)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTypeInsn((-1831), "$EUMkX8t\"R56b)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(67, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("$EUMkX8t\"R56b)HeDa", (-812));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("RuntimeVisibleAnnotations", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9R~";
      stringArray0[1] = "9R~";
      int int0 = Frame.ELEMENT_OF;
      assertEquals((-268435456), int0);
      
      stringArray0[2] = "";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)HeDa", (String) null, stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitVarInsn((byte)125, (-268435456));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("8WLR*ii|N^BC.cE<Vo&");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      stringArray0[0] = ">]^HJ)F-I";
      stringArray0[1] = ">]^HJ)F-I";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, ">]^HJ)F-I", ">]^HJ)F-I", ">]^HJ)F-I", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn(">]^HJ)F-I");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitLineNumber(74, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      methodWriter0.visitInsn(132);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      String string0 = label0.toString();
      assertEquals("L11", string0);
      assertNotNull(string0);
      
      String string1 = label0.toString();
      assertEquals("L11", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLdcInsn(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@d4e96d0
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(196);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[#$EUMkX=R6b)HeDa";
      stringArray0[1] = "[#$EUMkX=R6b)HeDa";
      stringArray0[2] = "[#$EUMkX=R6b)HeDa";
      stringArray0[3] = "[#$EUMkX=R6b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 80, "nC+d", "[#$EUMkX=R6b)HeDa", "[#$EUMkX=R6b)HeDa", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitTableSwitchInsn(133, 2, label0, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(144, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(133, (-2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(1, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 133;
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {133}, intArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jaRva/lang/String");
      assertFalse(boolean0);
      
      String string0 = "$EUMkX8t\"R56b)HeDa";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      Item item0 = classWriter0.newDouble(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "jaRva/lang/String", "$EUMkX8t\"R56b)HeDa", "jaRva/lang/String", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMultiANewArrayInsn("$EUMkX8t\"R56b)HeDa", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(54, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = 1590;
      methodWriter0.visitMaxs((-487), 1590);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      Label[] labelArray0 = new Label[8];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      // Undeclared exception!
      try { 
        methodWriter0.visitTableSwitchInsn((-487), 2, label0, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(268);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int0 = Frame.ELEMENT_OF;
      assertEquals((-268435456), int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "C_&~<m:K0d,F{/", "C_&~<m:K0d,F{/", ".s.IFJDCS", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute(".s.IFJDCS");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      Attribute attribute1 = new Attribute("ZZEAD<z5E*8Ha/");
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      
      methodWriter0.visitAttribute(attribute1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attribute1, attribute0);
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      
      methodWriter0.visitIincInsn(86, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame((-39), 16777225, (Object[]) null, 16777225, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(127, (-5357), (Object[]) null, (-3457), (Object[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1648);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1648, "9R~", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(2, 1648, stringArray0, 1648, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(183, "$EUMkX8t\"R56b)HeDa", "#3nkzB&E", "$EUMkX8t\"R56b)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn((-1831), "$EUMkX8t\"R56b)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(67, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(183, 1648, stringArray0, 2, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(67, 16777216);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/String");
      assertFalse(boolean0);
      
      String string0 = "9R~";
      int int0 = classWriter0.newClass("$EUMkX8t\"R56b)HeDa");
      assertEquals(2, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("$EUMkX8t\"R56b)HeDa", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "^`$-iN4Vf";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)HeDa", "java/lang/String", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      Label label2 = label1.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock((Label) null, label1, label1, "T1>Sgt");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitIntInsn(2, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.newClass(">");
      assertEquals(9, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      
      Attribute attribute0 = new Attribute("Ljava/lang/Synthetic;");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      methodWriter0.visitAttribute(attribute0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "9R~";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "$EUMkX8t\"R56b)HeDa", "O~", "O~", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("$EUMkX8t\"R56b)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      int int0 = Type.BYTE;
      assertEquals(3, int0);
      
      methodWriter0.visitFrame(3, 1, stringArray0, 3, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = methodWriter0.getSize();
      assertEquals(61, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$5MkX8\"R56b)HeDV";
      stringArray0[1] = "$5MkX8\"R56b)HeDV";
      stringArray0[2] = "";
      stringArray0[3] = "$5MkX8\"R56b)HeDV";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-3085), "ET4Ik9yQ6fV2f{r%a", "(ThEl^0", "", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFieldInsn(251, "(ThEl^0", "", "Sx~c/V");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("(ThEl^0", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Attribute attribute0 = new Attribute("CodO");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      methodWriter0.visitAttribute(attribute0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      methodWriter0.visitIincInsn(1, 89);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(1, 1, stringArray0, (-3085), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Type.CHAR;
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      String string0 = "+";
      stringArray0[2] = "+";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      classWriter0.visitInnerClass("+", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", 251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)HeDa", (String) null, stringArray0, false, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      int[] intArray0 = new int[7];
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter0.visitLookupSwitchInsn(label1, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      intArray0[2] = 1;
      Label label2 = label0.successor;
      assertNull(label2);
      
      // Undeclared exception!
      try { 
        label1.getOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Label offset position has not been resolved yet
         //
         verifyException("org.objectweb.asm.jip.Label", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/String");
      assertFalse(boolean0);
      
      String string0 = "9R~";
      int int0 = classWriter0.newClass("$EUMkX8t\"R56b)HeDa");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("$EUMkX8t\"R56b)HeDa", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "^`$-iN4Vf";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)HeDa", "java/lang/String", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean1 = label0.resolve(methodWriter0, 20, (byte[]) null);
      assertFalse(boolean1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertTrue(boolean1 == boolean0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label1, "T1>Sgt");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitIntInsn(197, 197);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = classWriter0.newClass(">");
      assertEquals(9, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      
      Attribute attribute0 = new Attribute("$EUMkX8t\"R56b)HeDa");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      methodWriter0.visitAttribute(attribute0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2067);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"RN";
      stringArray0[1] = "\"RN";
      stringArray0[2] = "\"RN";
      stringArray0[3] = "\"RN";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2067, "\"RN", "$t!EUMkX8\"R5b)Heb-", "\"RN", stringArray0, false, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("\"RN");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      String string0 = label0.toString();
      assertEquals("L15", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      boolean boolean1 = ClassReader.FRAMES;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitJumpInsn(162, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.threshold = 856;
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.OBJECT;
      assertEquals(24117248, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/String");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      Item item0 = classWriter0.newDouble(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "java/lang/String", "$EUMkX8t\"R56b)HeDa", "java/lang/String", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      boolean boolean1 = ClassReader.ANNOTATIONS;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = label0.toString();
      assertEquals("L13", string0);
      assertNotNull(string0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitTryCatchBlock(label1, label1, label1, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      methodWriter0.visitIntInsn(1, 49);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.INTEGER;
      assertEquals(16777217, int0);
      
      methodWriter0.visitMaxs(49, 251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(268);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LochlVDriableTyeJable");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"RP6b)jeDa";
      stringArray0[1] = "$EUMkX8t\"RP6b)jeDa";
      stringArray0[2] = "$EUMkX8t\"RP6b)jeDa";
      stringArray0[3] = "$EUMkX8t\"RP6b)jeDa";
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 268, "LochlVDriableTyeJable", "$EUMkX8t\"RP6b)jeDa", "LochlVDriableTyeJable", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      label1.info = (Object) "$EUMkX8t\"RP6b)jeDa";
      methodWriter0.visitLocalVariable("Dc!)5QTY)", "O\"bIm/#Os3", (String) null, label1, label0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("}AN]:J*{_ |Np.", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(1, "$EUMkX8t\"RP6b)jeDa", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(196);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      stringArray0[0] = "[#$EUMkX=Rb)HeDa";
      stringArray0[1] = "[#$EUMkX=Rb)HeDa";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      stringArray0[2] = "[#$EUMkX=Rb)HeDa";
      stringArray0[3] = "xm4T+i";
      Item item1 = classWriter0.newLong(196);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 196, "xm4T+i", "[#$EUMkX=Rb)HeDa", "[#$EUMkX=Rb)HeDa", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter0.exceptionCount = 196;
      methodWriter1.visitInsn(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitVarInsn(1, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      MethodWriter methodWriter2 = classWriter0.lastMethod;
      assertSame(methodWriter2, methodWriter0);
      assertSame(methodWriter2, methodWriter1);
      assertNotNull(methodWriter2);
      
      methodWriter1.visitFrame(1, (-980), stringArray0, (-901), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      assertSame(methodWriter1, methodWriter2);
      
      methodWriter1.visitVarInsn(169, 251658240);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      assertSame(methodWriter1, methodWriter2);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(267386917);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">]^HJ)F-I";
      stringArray0[1] = ">]^HJ)F-I";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251658240, ">]^HJ)F-I", ">]^HJ)F-I", ">]^HJ)F-I", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, ">]^HJ)F-I");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = edge0.next;
      assertNull(edge1);
      
      Label label2 = label0.getFirst();
      assertFalse(label0.equals((Object)label1));
      assertFalse(label2.equals((Object)label1));
      assertSame(label0, label2);
      assertNotSame(label0, label1);
      assertSame(label2, label0);
      assertNotSame(label2, label1);
      assertNotNull(label2);
      
      methodWriter0.visitTryCatchBlock(label1, label2, label1, ">]^HJ)F-I");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label2.equals((Object)label1));
      assertSame(label0, label2);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNotSame(label1, label2);
      assertSame(label2, label0);
      assertNotSame(label2, label1);
      
      methodWriter0.visitIntInsn(251658240, 251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitFieldInsn(267386917, "LineNumberTable", "XE:8", ">]^HJ)F-I");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitMaxs(251658240, 251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(262);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<init>";
      stringArray0[1] = "<e)=v,!|";
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 262, "<e)=v,!|", "<e)=v,!|", "<e)=v,!|", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLineNumber(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("9R~", (-2545));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLocalVariable("kJ<%E{ItJ1. t", "<init>", "p+>>RjJ0x?=V3u,?2", label0, label0, 262);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTypeInsn(528, "RuntimeVisibleAnnotations");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-2545), (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/String");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/String");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      Item item0 = classWriter0.newDouble(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "Az", "$EUMkX8t\"R56b)HeDa", "java/lang/String", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$EUMkX8t\"R56b)HeDa");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitInsn(128);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean3 = label0.resolve(methodWriter0, 20, (byte[]) null);
      assertFalse(boolean3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Label label1 = label0.successor;
      assertNull(label1);
      
      methodWriter0.visitTryCatchBlock((Label) null, label0, label0, "$EUMkX8t\"R56b)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(2, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.INTEGER;
      assertEquals(16777217, int0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(251, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(226);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[13];
      stringArray0[0] = "|R`~";
      stringArray0[3] = "|R`~";
      stringArray0[3] = "|R`~";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 226, "|R`~", "|R`~", "|R`~", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitTypeInsn(363, "|R`~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("|R`~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute(stringArray0[2]);
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      methodWriter0.visitIincInsn(226, 226);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute1 = new Attribute("|R`~");
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      
      classWriter0.visitAttribute(attribute1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attribute1, attribute0);
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      
      methodWriter0.visitFrame(4, 226, stringArray0, 363, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn((-1007), "|R`~", "|R`~", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(290);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newClassItem("$5MkX8\"R56b)HeDV");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$5MkX8\"R56b)HeDV";
      stringArray0[1] = "$5MkX8\"R56b)HeDV";
      stringArray0[2] = "$5MkX8\"R56b)HeDV";
      stringArray0[3] = "$5MkX8\"R56b)HeDV";
      classWriter0.version = 1444;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-3085), "LocalVariableTable", "(ThEl^0", "$5MkX8\"R56b)HeDV", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Item item1 = classWriter0.newInteger((-3085));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      methodWriter0.visitLdcInsn("$5MkX8\"R56b)HeDV");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.INT;
      assertEquals(5, int0);
      
      methodWriter0.visitMethodInsn(5086, "$5MkX8\"R56b)HeDV", "+fm]^B6:btTj@", "$5MkX8\"R56b)HeDV");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.addUninitializedType("", 182);
      assertEquals(1, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      
      methodWriter0.visitFrame(182, 171, stringArray0, 5, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("LocalVariableTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute((String) null);
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = new ByteVector(685);
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = classWriter0.pool;
      assertFalse(byteVector2.equals((Object)byteVector1));
      assertNotSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertNotNull(byteVector2);
      
      methodWriter0.put(byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertFalse(byteVector1.equals((Object)byteVector2));
      assertNotSame(byteVector1, byteVector0);
      assertNotSame(byteVector1, byteVector2);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTypeInsn(5086, "$5MkX8\"R56b)HeDV");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(258);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkXn\"R56b)HDa";
      stringArray0[1] = "$EUMkXn\"R56b)HDa";
      stringArray0[2] = "xm4T#k+i";
      stringArray0[3] = "$EUMkXn\"R56b)HDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 258, "xm4T#k+i", "$EUMkXn\"R56b)HDa", "$EUMkXn\"R56b)HDa", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      classWriter0.lastField = null;
      methodWriter0.visitFrame(258, (-3266), stringArray0, (-3266), stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.DOUBLE;
      assertEquals(8, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitMethodInsn(188, "$EUMkXn\"R56b)HDa", "$EUMkXn\"R56b)HDa", "$EUMkXn\"R56b)HDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn(188, "xm4T#k+i", "c{.*%S[B^Nc6,\u0004)] ", "$EUMkXn\"R56b)HDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label0.info = (Object) (-3266);
      int int1 = Frame.LONG;
      assertEquals(16777220, int1);
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[0];
      methodWriter0.visitFrame(184, 169, objectArray0, 16777217, objectArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(16777220);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putShort(169);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector1.putShort(8);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertNotNull(byteVector2);
      
      ByteVector byteVector3 = byteVector1.put12(188, 16777217);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector2);
      assertNotNull(byteVector3);
      
      methodWriter0.visitIntInsn(17, 169);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn(2807, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2807
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(236);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<ibdit>";
      stringArray0[1] = ">]}^HJ)F-I";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1422, ">]}^HJ)F-I", "RuntimeVisibleParameterAnnotations", "<ibdit>", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodVisitor0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, ">]}^HJ)F-I", "Ysj`)=v,!|", "<ibdit>", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodVisitor0));
      assertNotNull(methodWriter0);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean0 = label0.resolve(methodWriter0, 1103, (byte[]) null);
      assertFalse(boolean0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodVisitor0));
      assertNotSame(methodWriter0, methodVisitor0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertFalse(methodWriter1.equals((Object)methodVisitor0));
      assertNotSame(methodWriter1, methodVisitor0);
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitLineNumber(236, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter1.equals((Object)methodVisitor0));
      assertSame(label0, label1);
      assertNotSame(methodWriter1, methodVisitor0);
      assertSame(methodWriter1, methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotation("Ysj`)=v,!|", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter1.equals((Object)methodVisitor0));
      assertNotSame(methodWriter1, methodVisitor0);
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitInsn(132);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodVisitor0));
      assertSame(methodWriter0, methodWriter1);
      assertNotSame(methodWriter0, methodVisitor0);
      
      String string0 = label0.toString();
      assertEquals("L19", string0);
      assertSame(label0, label1);
      assertNotNull(string0);
      
      FieldWriter fieldWriter1 = classWriter0.firstField;
      assertNull(fieldWriter1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Label label2 = label0.getFirst();
      assertSame(label2, label1);
      assertSame(label2, label0);
      assertSame(label0, label1);
      assertSame(label0, label2);
      assertNotNull(label2);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodVisitor0));
      assertSame(methodWriter0, methodWriter1);
      assertNotSame(methodWriter0, methodVisitor0);
      assertSame(label0, label1);
      assertSame(label0, label2);
      
      int int0 = Frame.UNINITIALIZED;
      assertEquals(25165824, int0);
      
      Attribute attribute0 = new Attribute("<ibdit>");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(185);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ByteVector byteVector0 = new ByteVector(185);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putLong((-1L));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      methodWriter1.put(byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter1.equals((Object)methodVisitor0));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotSame(methodWriter1, methodVisitor0);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@HN,8``2y{HNPFwHA");
      assertFalse(boolean0);
      
      stringArray0[0] = "9R~";
      stringArray0[1] = "Ysj`)=v,!|";
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      classWriter0.firstMethod = null;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 2, "9R~", "Ysj`)=v,!|", "9R~", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      boolean boolean2 = label0.resolve(methodWriter1, 24, (byte[]) null);
      assertFalse(boolean2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      methodWriter1.visitVarInsn((byte)22, (-1673));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitTryCatchBlock(label0, label0, label0, "9R~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      methodWriter1.visitIntInsn(54, 24);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.INTEGER;
      assertEquals(16777217, int0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs(54, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "9R~";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "$EUMkX8t\"R56b)HeDa", "O~", "O~", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(2, "iICqbB_ochN");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("$EUMkX8t\"R56b)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      int int0 = Type.BYTE;
      assertEquals(3, int0);
      
      methodWriter0.visitFrame(0, 1, stringArray0, 3, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(3, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(268);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/String");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      Item item0 = classWriter0.newDouble(268);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      stringArray0[3] = "java/lang/String";
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 268, "java/lang/String", "$EUMkX8t\"R56b)HeDa", "java/lang/String", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$EUMkX8t\"R56b)HeDa");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      methodWriter0.visitInsn(197);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean5 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      
      Label label1 = label0.successor;
      assertNull(label1);
      
      int int0 = Frame.SHORT;
      assertEquals(16777228, int0);
      
      methodWriter0.visitMaxs(268, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(16777228, 197);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("$EUMkX8t\"R56b)HeDa");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      methodWriter0.visitMaxs(16777228, 185);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9f";
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      stringArray0[1] = "9f";
      stringArray0[2] = "$EUMkXt\"R56z)HeDa";
      stringArray0[3] = "9f";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9f", "$EUMkXt\"R56z)HeDa", "9f", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "9f");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label0.next = label1;
      label1.addToSubroutine(32L, 2);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      methodWriter0.visitTypeInsn(188, "IG#|Q'ayh");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.addToSubroutine(0L, 251);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label1, "$EUMkXt\"R56z)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      methodWriter0.visitIntInsn((-1567), 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.next = methodWriter0;
      int[] intArray0 = new int[9];
      intArray0[0] = 2439;
      methodWriter0.visitLocalVariable("9f", ".class", ".class", label0, label0.next, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertSame(methodWriter0, methodWriter1);
      assertNotSame(label0, label1);
      
      int int0 = methodWriter1.next.getSize();
      assertEquals(107, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      assertSame(methodWriter1.next, methodWriter1);
      assertSame(methodWriter1.next, methodWriter0);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.next.visitFrame((-482), 2, stringArray0, 255, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      assertSame(methodWriter1.next, methodWriter1);
      assertSame(methodWriter1.next, methodWriter0);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      classWriter0.version = (-5357);
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[3] = (byte) (-14);
      byteArray0[3] = (byte)10;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "E-zF4C%9";
      int int0 = Frame.ELEMENT_OF;
      assertEquals((-268435456), int0);
      
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2), "E-zF4C%9", "$EUMkX8t\"R56b)HeDa", "E-zF4C%9", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("$EUMkX8t\"R56b)HeDa");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      methodWriter0.visitIincInsn((-268435456), (-268435456));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArray0;
      methodWriter0.visitFrame(182, (byte)10, objectArray0, 2192, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = methodWriter0.getSize();
      assertEquals(70, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jaRva/lang/String");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      Item item0 = classWriter0.newDouble(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "jaRva/lang/String", "$EUMkX8t\"R56b)HeDa", "jaRva/lang/String", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      methodWriter0.visitInsn(197);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(24, 1203);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("$EUMkX8t\"R56b)HeDa", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      methodWriter0.visitLdcInsn("$EUMkX8t\"R56b)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "9R~";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      classWriter0.index = 251;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "$EUMkX8t\"R56b)HeDa", "O~", "O~", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(2, "iICqbB_ochN");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn((-161), "6N9I,]I4", "O~", "LocalVariableTypeTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("$EUMkX8t\"R56b)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      int int0 = Type.BYTE;
      assertEquals(3, int0);
      
      int int1 = classWriter0.newNameType("QhzCrZcLiRdt3xv$", "|wLA%6+");
      assertEquals(266, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      
      methodWriter0.visitFrame(3538, 1, stringArray0, 3, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(3, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9R~";
      stringArray0[1] = "9R~";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[2] = "9R~";
      stringArray0[3] = "9R~";
      classWriter0.visitInnerClass("9R~", "9R~", "9R~", 251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8\"R56b)HeD-", "9R~", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      ByteVector byteVector0 = new ByteVector(251);
      assertNotNull(byteVector0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Item item0 = classWriter0.newMethodItem("Uu3nu@cQ>8'=A2MBIR", "StackMapTable", "9R~", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      label0.addToSubroutine(0L, 66);
      boolean boolean1 = ClassReader.SIGNATURES;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      methodWriter0.visitMethodInsn(66, "StackMapTable", "Uu3nu@cQ>8'=A2MBIR", "9R~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitTryCatchBlock(label0, (Label) null, label0, "9R~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertNotNull(annotationVisitor1);
      
      methodWriter0.visitVarInsn(162, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor2 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(annotationVisitor2.equals((Object)annotationVisitor1));
      assertFalse(annotationVisitor2.equals((Object)annotationVisitor0));
      assertNotSame(annotationVisitor2, annotationVisitor1);
      assertNotSame(annotationVisitor2, annotationVisitor0);
      assertNotNull(annotationVisitor2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-30);
      // Undeclared exception!
      try { 
        MethodWriter.readInt(byteArray0, 168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 168
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9R~";
      stringArray0[1] = "9R~";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[2] = "9R~";
      stringArray0[3] = "9R~";
      classWriter0.visitInnerClass("9R~", "9R~", "9R~", 251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8\"R56b)HeD-", "9R~", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      ByteVector byteVector0 = new ByteVector(251);
      assertNotNull(byteVector0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      classWriter0.lastMethod = methodWriter0;
      String string0 = label0.toString();
      assertEquals("L15", string0);
      assertNotNull(string0);
      
      methodWriter0.classReaderOffset = (-578);
      classWriter0.lastMethod.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.lastMethod.getSize();
      assertEquals(6, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = (-1713);
      // Undeclared exception!
      try { 
        classWriter0.lastMethod.visitJumpInsn(1194, label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(221);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[13];
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      stringArray0[8] = stringArray0[0];
      stringArray0[3] = "R`~";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 221, "g{O4", "R`~", "R`~", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(363, "R`~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putShort(221);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector0.putInt(2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Item item0 = classWriter0.newMethodItem("R`~", "g{O4", "R`~", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      
      methodWriter0.visitJumpInsn((-1371), label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      methodWriter0.visitIincInsn(2, 363);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      methodWriter0.visitJumpInsn(363, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      methodWriter0.visitTypeInsn(24, "\f=j8Z-myMZ!)");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitParameterAnnotation((-98), "Ljava/lang/Synthetic;", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jaRva/lang/String");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "jaRva/lang/String", "$EUMkX8t\"R56b)HeDa", "jaRva/lang/String", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitInsn(197);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      String string0 = label1.toString();
      assertEquals("L13", string0);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      assertNotNull(string0);
      
      Label label2 = label0.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label0, "jaRva/lang/String");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      methodWriter0.visitIntInsn(197, (-1321));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter0.visitFieldInsn((-1321), "$EUMkX8t\"R56b)HeDa", "~Uh|-", "*!4(jjxImY4$&HPiQ&X");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(197, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(243);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DEUMk,8t\"R56c)HeDa";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k");
      assertFalse(boolean0);
      
      stringArray0[1] = "DEUMk,8t\"R56c)HeDa";
      stringArray0[3] = "DEUMk,8t\"R56c)HeDa";
      stringArray0[2] = "DEUMk,8t\"R56c)HeDa";
      stringArray0[3] = "DEUMk,8t\"R56c)HeDa";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 182, "DEUMk,8t\"R56c)HeDa", "DEUMk,8t\"R56c)HeDa", "DEUMk,8t\"R56c)HeDa", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(32, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("DEUMk,8t\"R56c)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newConstItem("DEUMk,8t\"R56c)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newMethodItem("k", "d-Ov_(X|", "DEUMk,8t\"R56c)HeDa", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      Item item2 = new Item();
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertNotNull(item2);
      
      ByteVector byteVector0 = new ByteVector(68);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putInt((-427));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      methodWriter0.put(byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("DEUMk,8t\"R56c)HeDa", "DEUMk,8t\"R56c)HeDa", "k", label0, label0, 85);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "O\"bIm/#Os3");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(221);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      Integer integer0 = new Integer(221);
      assertEquals(221, (int)integer0);
      assertNotNull(integer0);
      
      Item item0 = classWriter0.newConstItem(integer0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      int int0 = classWriter0.newUTF8("$EUMkX8t\"R56b)HeDa");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 221, "WSn8xacPqT6d8Vu|}F;", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 221, "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotNull(methodWriter1);
      
      methodWriter1.visitVarInsn(221, 12);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotSame(methodWriter1, methodWriter0);
      
      methodWriter1.classReaderLength = 2;
      methodWriter1.signature = "$EUMkX8t\"R56b)HeDa";
      methodWriter0.visitIincInsn(2, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertNotSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitInsn(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertNotSame(methodWriter0, methodWriter1);
      
      methodWriter1.classReaderLength = (-1);
      int int1 = Frame.BOOLEAN;
      assertEquals(16777225, int1);
      assertFalse(int1 == int0);
      
      int int2 = Frame.BYTE;
      assertEquals(16777226, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-1), 2, stringArray0, (-1), stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9R~", "$EUMkX8t\"R56b)HeDa", (String) null, stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      byteVector0.length = 1;
      MethodWriter methodWriter1 = methodWriter0.next;
      assertNull(methodWriter1);
      
      MethodWriter methodWriter2 = classWriter0.lastMethod;
      assertSame(methodWriter2, methodWriter0);
      assertNotNull(methodWriter2);
      
      classWriter0.visit((-4644), 2048, "&~i1T|V.@V", "$EUMkX8t\"R56b)HeDa", (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter2.visitFieldInsn(68, "DVeP9Ly'#)5E5PiK<", "jhFo2Os.aN_#IS4Vn", "DVeP9Ly'#)5E5PiK<");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter2, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jaRva/lang/String");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[1] = "$EUMkX8t\"R56b)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56b)HeDa";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "jaRva/lang/String", "$EUMkX8t\"R56b)HeDa", "jaRva/lang/String", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("$EUMkX8t\"R56b)HeDa", "J&eD;|wCq", "$EUMkX8t\"R56b)HeDa", label0, label0, 2345);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(187);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitLdcInsn("$EUMkX8t\"R56b)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label1.successor = label0;
      methodWriter0.visitIntInsn(1, 187);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.position = (int) (byte)0;
      Label label2 = label0.successor;
      assertNull(label2);
      
      boolean boolean3 = ClassReader.SIGNATURES;
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label0, "jaRva/lang/String");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      methodWriter0.visitIntInsn(187, (byte)40);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter0.visitFieldInsn(187, "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", "*!4(jjxImY4$&HPiQ&X");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(187, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9f";
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      stringArray0[1] = "9f";
      stringArray0[2] = "$EUMkXt\"R56z)HeDa";
      stringArray0[3] = "9f";
      int int0 = classWriter0.newClass("$EUMkXt\"R56z)HeDa");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9f", "$EUMkXt\"R56z)HeDa", "9f", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "9f");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(188, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label0.next = label1;
      methodWriter0.visitTypeInsn(188, "S%");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLineNumber(2044, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      int int1 = Frame.CHAR;
      assertEquals(16777227, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Label label2 = new Label();
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotNull(label2);
      
      methodWriter0.visitIntInsn(188, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(68);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9f";
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      stringArray0[1] = "9f";
      stringArray0[2] = "$EUMkXt\"R56z)HeDa";
      stringArray0[3] = "9f";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9f", "$EUMkXt\"R56z)HeDa", "9f", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "9f");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(188, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label0.next = label1;
      methodWriter0.visitTypeInsn(188, "IG#|Q'ayh");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label2 = label0.next.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock(label0, (Label) null, label1, "$EUMkXt\"R56z)HeDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      methodWriter0.visitIntInsn((-1572), 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      methodWriter0.visitFieldInsn(1, "9f", "byte", "XE:8");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitMaxs(1, 2435);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(188, "org.objectweb.asm.jip.MethodWriter", "IG#|Q'ayh", "?^@6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9f";
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      stringArray0[1] = "9f";
      stringArray0[2] = "$EUMkXt\"R56z)HeDa";
      stringArray0[3] = "9f";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9f", "$EUMkXt\"R56z)HeDa", "9f", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitVarInsn(1, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(51, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.classReaderOffset = 2;
      methodWriter1.visitInsn(188);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      int int1 = Type.FLOAT;
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      
      methodWriter1.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 251;
      intArray0[1] = 1;
      methodWriter0.exceptions = intArray0;
      methodWriter0.visitLdcInsn("$EUMkXt\"R56z)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitFieldInsn(83, "", "DRlMOquf5kMC2I((*L", "$EUMkXt\"R56z)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      Frame frame0 = label0.frame;
      assertNotNull(frame0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11(15, (-5765));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = "99fR~";
      classWriter0.visitInnerClass("99fR~", "99fR~", "RuntimeVisibleParameterAnnotations", 251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"R56z)HeDa";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[1] = "$EUMkX8t\"R56z)HeDa";
      stringArray0[2] = "$EUMkX8t\"R56z)HeDa";
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      stringArray0[3] = "$EUMkX8t\"R56z)HeDa";
      Item item0 = classWriter0.newLong(2036L);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "99fR~", "$EUMkX8t\"R56z)HeDa", (String) null, stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.status = (-1791);
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$EUMkX8t\"R56z)HeDa");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(1131, (-1789), stringArray0, 191, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn(1049, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1049
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(284);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"RP6b)jeDa";
      stringArray0[1] = "$EUMkX8t\"RP6b)jeDa";
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      stringArray0[2] = "$EUMkX8t\"RP6b)jeDa";
      stringArray0[3] = "$EUMkX8t\"RP6b)jeDa";
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 284, "LocalVariableTypeTable", "$EUMkX8t\"RP6b)jeDa", "LocalVariableTypeTable", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      methodWriter0.visitLineNumber(1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Edge edge0 = label0.successors;
      assertNull(edge0);
      
      label0.addToSubroutine(2, 284);
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Object object0 = label0.info;
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      methodWriter0.visitMethodInsn(2, "$EUMkX8t\"RP6b)jeDa", "$EUMkX8t\"RP6b)jeDa", "$EUMkX8t\"RP6b)jeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(180, "$EUMkX8t\"RP6b)jeDa", "U8KN", "U8KN");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$EUMkX8t\"RP6b)jeDa");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      Attribute attribute0 = new Attribute("$EUMkX8t\"RP6b)jeDa");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      methodWriter0.visitAttribute(attribute0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(268);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUMkX8t\"RP6b)jeDa";
      stringArray0[1] = "$EUMkX8t\"RP6b)jeDa";
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      stringArray0[2] = "$EUMkX8t\"RP6b)jeDa";
      stringArray0[3] = "$EUMkX8t\"RP6b)jeDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 268, "LocalVariableTypeTable", "$EUMkX8t\"RP6b)jeDa", "LocalVariableTypeTable", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      methodWriter0.visitLineNumber(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Edge edge0 = label0.successors;
      assertNull(edge0);
      
      label0.addToSubroutine(745L, 268);
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Object object0 = label0.info;
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      label0.info = object1;
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter0.visitFieldInsn(268, "RMD", "LocalVariableTypeTable", "4\"8.orb7j{");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      methodWriter1.visitVarInsn(2, 268);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitLineNumber(268, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitJumpInsn(268, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(221);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WSn8xacPqT6d8Vu|}F;";
      stringArray0[1] = "WSn8xacPqT6d8Vu|}F;";
      stringArray0[2] = "WSn8xacPqT6d8Vu|}F;";
      stringArray0[3] = "$EUMkX8t\"R56b)HeDa";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 221, "WSn8xacPqT6d8Vu|}F;", "$EUMkX8t\"R56b)HeDa", "$EUMkX8t\"R56b)HeDa", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 221, "WSn8xacPqT6d8Vu|}F;", "$EUMkX8t\"R56b)HeDa", "WSn8xacPqT6d8Vu|}F;", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotNull(methodWriter1);
      
      methodWriter1.visitVarInsn(221, 12);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotSame(methodWriter1, methodWriter0);
      
      methodWriter1.classReaderLength = 2;
      methodWriter1.signature = "$EUMkX8t\"R56b)HeDa";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = classWriter0.addType(":V }wv W;i8/%y31");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(8388608, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertNotSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitInsn(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertNotSame(methodWriter0, methodWriter1);
      
      methodWriter1.classReaderLength = (-1);
      MethodWriter methodWriter2 = methodWriter0.next;
      assertFalse(methodWriter2.equals((Object)methodWriter0));
      assertNotSame(methodWriter2, methodWriter0);
      assertSame(methodWriter2, methodWriter1);
      assertNotNull(methodWriter2);
      
      int int1 = methodWriter2.getSize();
      assertEquals(52, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter2.equals((Object)methodWriter0));
      assertFalse(int1 == int0);
      assertFalse(methodWriter0.equals((Object)methodWriter2));
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertNotSame(methodWriter2, methodWriter0);
      assertSame(methodWriter2, methodWriter1);
      assertNotSame(methodWriter0, methodWriter2);
      assertNotSame(methodWriter0, methodWriter1);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertSame(methodWriter1, methodWriter2);
      assertNotSame(methodWriter1, methodWriter0);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitVarInsn(55, (-2183));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodWriter2));
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertNotSame(methodWriter0, methodWriter2);
      assertNotSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation(185, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9f";
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      stringArray0[1] = "9f";
      stringArray0[2] = "$EUMkXt\"R56z)HeDa";
      stringArray0[3] = "9f";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 251, "9f", "$EUMkXt\"R56z)HeDa", "9f", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "9f");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = edge0.next;
      assertNull(edge1);
      
      label1.successors = null;
      label0.next = label1;
      methodWriter0.visitTryCatchBlock(label0, label1, label1, "$EUMkXt\"R56z)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      methodWriter0.visitIntInsn(1, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.next = methodWriter0;
      int[] intArray0 = new int[11];
      intArray0[0] = 2;
      intArray0[1] = 251;
      methodWriter1.classReaderLength = 2047;
      intArray0[4] = 2;
      intArray0[1] = 251;
      intArray0[6] = 251;
      intArray0[7] = 251;
      intArray0[8] = 251;
      Item item0 = classWriter0.newConstItem("$EUMkXt\"R56z)HeDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      methodWriter1.next.exceptions = intArray0;
      methodWriter0.visitFieldInsn(1, "9f", "byte", "d9:8");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(258);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.RESIZE;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUkXn\"R56b)HDa";
      stringArray0[1] = "$EUkXn\"R56b)HDa";
      stringArray0[2] = "#I(l928Y2VJ[7;[.2";
      stringArray0[3] = "$EUkXn\"R56b)HDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 258, "xm4T#k+i", "$EUkXn\"R56b)HDa", "$EUkXn\"R56b)HDa", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(258, (-3266), stringArray0, (-3266), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = edge0.next;
      assertNull(edge1);
      
      edge0.info = 251;
      label0.successors = null;
      methodWriter0.visitFieldInsn(188, "xm4T#k+i", "#I(l928Y2VJ[7;[.2", "$EUkXn\"R56b)HDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(2, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("$EUkXn\"R56b)HDa");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      methodWriter0.visitAttribute(attribute0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(186, "<RDQnl4KdN", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(206);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[13];
      stringArray0[0] = "|R`~";
      stringArray0[3] = "|R`~";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 206, "|R`~", "|R`~", "|R`~", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(2, "|R`~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.SHORT;
      assertEquals(16777228, int0);
      
      methodWriter0.visitIntInsn(206, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(2, "|R`~", "|R`~", "|R`~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      methodWriter0.visitLdcInsn("|R`~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = (-968);
      methodWriter0.exceptionCount = (-601);
      methodWriter0.visitLdcInsn("|R`~");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer((-601));
      assertEquals((-601), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      classWriter0.cr = null;
      methodWriter0.visitInsn((-2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(206, 206);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 206, stringArray0, 2, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((byte)95);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.RESIZE;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUkXn\"R56b)HDa";
      stringArray0[1] = "$EUkXn\"R56b)HDa";
      stringArray0[2] = "xm4T#k+i";
      stringArray0[3] = "$EUkXn\"R56b)HDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 258, "xm4T#k+i", "$EUkXn\"R56b)HDa", "$EUkXn\"R56b)HDa", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(258, (-3266), stringArray0, (-3266), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = edge0.next;
      assertNull(edge1);
      
      edge0.info = 251;
      label0.successors = null;
      methodWriter0.visitFieldInsn(188, "xm4T#k+i", "#I(l928Y2VJ[7;[.2", "$EUkXn\"R56b)HDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(2, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("$EUkXn\"R56b)HDa");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      methodWriter0.visitAttribute(attribute0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      methodWriter0.visitMethodInsn(185, "<RDQnl4KdN", "RuntimeInvisibleAnnotations", "$EUkXn\"R56b)HDa");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)95;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((byte)95);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = classWriter0.invalidFrames;
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$EUkXn\"R56b)HDa";
      stringArray0[1] = "$EUkXn\"R56b)HDa";
      stringArray0[2] = "xm4T#k+i";
      stringArray0[3] = "$EUkXn\"R56b)HDa";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 258, "xm4T#k+i", "$EUkXn\"R56b)HDa", "$EUkXn\"R56b)HDa", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(258, (-3266), stringArray0, (-3266), stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = edge0.next;
      assertNull(edge1);
      
      edge0.info = 251;
      label0.successors = null;
      methodWriter0.visitFieldInsn(188, "xm4T#k+i", "#I(l928Y2VJ[7;[.2", "$EUkXn\"R56b)HDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(2, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("#I(l928Y2VJ[7;[.2");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      methodWriter0.visitFieldInsn((byte)95, "$EUkXn\"R56b)HDa", "$EUkXn\"R56b)HDa", "$EUkXn\"R56b)HDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(185, "<RDQnl4KdN", "RuntImeInvisibleAn*otations", "$EUkXn\"R56b)HDa");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs((byte)95, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        MethodWriter.writeShort(byteArray0, 26, 251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "v-{6=4?LOx#yve$G6(:";
      ClassWriter classWriter0 = new ClassWriter(251);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string1 = "9R~";
      int int0 = classWriter0.newField("9R~", "kl;", "v-{6=4?LOx#yve$G6(:");
      assertEquals(6, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@HN,``2HNPFH");
      assertFalse(boolean0);
      
      stringArray0[0] = "v-{6=4?LOx#yve$G6(:";
      stringArray0[1] = "9R~";
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      classWriter0.firstMethod = null;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 2, "9R~", "sj`)=,g|", "9R~", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      boolean boolean2 = label0.resolve((MethodWriter) null, 251, (byte[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      classWriter0.firstMethod.visitTryCatchBlock(label0, label0, label0, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(classWriter0.firstMethod, methodWriter1);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      methodWriter1.visitIntInsn(1, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = Frame.INTEGER;
      assertEquals(16777217, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs(16777217, 16777217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }
}
