/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:35:17 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.isIdentifierChar('e');
      xPathLexer0.consume();
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.setXPath("y#d+;Q");
      xPathLexer0.setXPath("y#d+;Q");
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("#", token4.getTokenText());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = new Token(14, "", 14, 1);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.div();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.consume(0);
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      xPathLexer0.div();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.consume(1);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.setXPath("b>%");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.consume(2);
      xPathLexer0.hasMoreChars();
      String string0 = xPathLexer0.getXPath();
      assertEquals("b>%", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("<");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.number();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      token0.toString();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.dollar();
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      xPathLexer0.setXPath(")");
      xPathLexer0.setPreviousToken(token0);
      int int0 = xPathLexer0.endPosition();
      assertEquals(1, int0);
      
      Token token5 = xPathLexer0.dollar();
      token5.toString();
      String string1 = token5.toString();
      assertEquals("[ (26) ())", string1);
      
      xPathLexer0.setPreviousToken(token5);
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.getXPath();
      xPathLexer0.pipe();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.setXPath("u{oZij=");
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.hasMoreChars();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bmlg|94");
      xPathLexer0.comma();
      xPathLexer0.plus();
      xPathLexer0.getXPath();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("=[%qAT&Qz_3ENP");
      xPathLexer0.whitespace();
      xPathLexer0.equals();
      xPathLexer0.setXPath("");
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.isIdentifierStartChar('m');
      xPathLexer0.consume(6);
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i?}issj");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.isIdentifierStartChar('2');
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.consume(1472);
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.slashes();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.consume(1472);
      xPathLexer0.mod();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.setXPath("u{oZij=");
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("u{oZij=");
      xPathLexer2.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer2.leftBracket();
      xPathLexer2.dollar();
      Token token0 = xPathLexer2.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(">", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.setXPath("b>%");
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.consume();
      String string0 = xPathLexer0.getXPath();
      assertEquals("b>%", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(1, int0);
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("|iL+s-?w*Q[");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("|", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer1.at();
      assertEquals("i", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")si0X=3");
      Token token0 = xPathLexer0.dots();
      assertEquals(")", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("s", token1.getTokenText());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("0", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      String string0 = token4.toString();
      assertEquals("[ (26) (X)", string0);
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer0.number();
      assertEquals("3", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("En0Zu}N4'egaI");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("En0Zu", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("}", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("En0Zu}N4'egaI");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("N4'egaI", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("N", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      Token token0 = xPathLexer0.equals();
      assertEquals("b", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.setXPath("b>%");
      Token token1 = xPathLexer0.comma();
      assertEquals("b", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(9, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("%", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer0.getPreviousToken();
      xPathLexer0.setXPath("c?qM:jyG!ZJi0P5[qZ");
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.comma();
      assertEquals(">", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("%", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer(";;.\"I*K~t@B");
      xPathLexer1.operatorName();
      xPathLexer1.nextToken();
      xPathLexer0.at();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U.':6& F.PNe");
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.isIdentifierStartChar('b');
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.consume((-1174));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ozVOq,Bc9Sx|yb\"~%+");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("o+|<0`W7D)xJI");
      xPathLexer1.operatorName();
      xPathLexer1.nextToken();
      xPathLexer0.consume(105);
      xPathLexer0.at();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bq");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(15, token0.getTokenType());
      assertEquals("Bq", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!)");
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("|iL+s-?w*Q[");
      xPathLexer0.nextToken();
      xPathLexer1.at();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=*O=Zq'Eh;ZY2Io*");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(16, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer("b>%");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(20, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("O", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8T Apd^9>!Y_qa");
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(14, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer("8T Apd^9>!Y_qa");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("T", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\".#G c?|fD^&0+0V");
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("\".#G c?|fD^&0+0V");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("\".#G c?|fD^&0+0V");
      XPathLexer xPathLexer2 = new XPathLexer("\".#G c?|fD^&0+0V");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.number();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(1, int0);
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("3<2D1;ZyRniH");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("3<2D1;ZyRniH");
      Token token3 = xPathLexer2.whitespace();
      assertEquals((-2), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8T Apd^9>!Y_qa");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("8", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("8T Apd^9>!Y_qa");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("T Apd^9>!Y_qa", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("t");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("t", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("En0Zu}N4'egaI");
      xPathLexer0.div();
      Token token0 = xPathLexer0.comma();
      assertEquals("E", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("n0Zu", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("}", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer1.equals();
      assertEquals(21, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8T Apd^9>!Y_qa");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("8", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("T", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Apd^9>!Y_qa", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=*O=ZqEh;ZY2Io*");
      Token token0 = xPathLexer0.minus();
      assertEquals("=", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("b>%");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("O", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H-");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("-", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w|8zh9t3_FcIvffl}");
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(17, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer("1O~O;w");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H-");
      XPathLexer xPathLexer1 = new XPathLexer("H-");
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer1.nextToken();
      assertEquals("H-", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.dots();
      assertEquals("q", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("U", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("S", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("K", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      Token token7 = xPathLexer0.nextToken();
      assertEquals("J2H5C$S!}WA", token7.getTokenText());
      
      Token token8 = xPathLexer1.at();
      assertEquals("q", token8.getTokenText());
      assertEquals(16, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7hG|(q[.1FeSxF");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("7", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("}_nO&?,)HA+f9}[Y");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("}_", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("|iL+s-?w*Q[");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("(", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("wt");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("wt", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h>%");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer1.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("h", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".");
      Token token0 = xPathLexer0.number();
      assertEquals(".", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("wt");
      xPathLexer1.setPreviousToken(token0);
      assertEquals("b", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("wt", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("gl#<}Q~';");
      int int0 = xPathLexer1.endPosition();
      assertEquals(9, int0);
      
      Token token0 = xPathLexer1.nextToken();
      assertEquals("gl", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8T Apd^9>!Y_qa");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>");
      xPathLexer0.and();
      int int0 = xPathLexer0.endPosition();
      assertEquals(2, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer(";]2U9*&");
      Token token0 = xPathLexer1.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("]", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer1.at();
      assertEquals("2", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}7Yr`m2zQeO");
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("qBT2&/&P,fc~T");
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('o');
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer0.LA(0);
      xPathLexer0.consume(0);
      assertEquals("qBT2&/&P,fc~T", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}7Yr`m2zQeO");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("Y", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.setXPath("qBT2&/&P,fc~T");
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('o');
      Token token4 = xPathLexer0.nextToken();
      assertEquals("qBT2", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.minus();
      assertEquals("", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("/", token6.getTokenText());
      
      xPathLexer0.LA(0);
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}7Yr`m2zQeO");
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("qBT2&/&P,fc~T");
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('o');
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.dollar();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token0 = xPathLexer1.colon();
      assertEquals("[", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(" ", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0-?V{gc8");
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer1.mod();
      xPathLexer0.notEquals();
      xPathLexer0.consume(0);
      xPathLexer1.dots();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("0-?V{gc8");
      XPathLexer xPathLexer3 = new XPathLexer("Ul|M%[z`!x5KT}W");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer3.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".");
      Token token0 = xPathLexer0.number();
      assertEquals(31, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer(".");
      xPathLexer0.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer1.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer1.getPreviousToken();
      assertEquals(13, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer1.doubleColon();
      assertEquals(19, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=*O=Zq'Eh;ZY2Io*");
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("O", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("gl#<}Q~';");
      xPathLexer1.whitespace();
      xPathLexer1.star();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer("bJ");
      xPathLexer0.dollar();
      xPathLexer0.mod();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("59]{e]^]o{U5r=eI.Y,");
      XPathLexer xPathLexer1 = new XPathLexer("59]{e]^]o{U5r=eI.Y,");
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("*bm");
      xPathLexer2.identifier();
      xPathLexer0.dollar();
      xPathLexer2.mod();
      xPathLexer1.nextToken();
      xPathLexer2.div();
      String string0 = xPathLexer1.getXPath();
      assertEquals("59]{e]^]o{U5r=eI.Y,", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i?}issj");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (22) (?})");
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('\"');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>");
      XPathLexer xPathLexer1 = new XPathLexer("gl#<}Q~';");
      Token token0 = xPathLexer1.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(9, int0);
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      Token token2 = xPathLexer1.equals();
      assertEquals("#", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("U", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("S", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("J2", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("H5C", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer1.equals();
      assertEquals("q", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("{", token10.getTokenText());
      
      char char0 = xPathLexer1.LA(82);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("/UC");
      xPathLexer1.number();
      xPathLexer1.dots();
      xPathLexer1.colon();
      xPathLexer1.comma();
      XPathLexer xPathLexer2 = new XPathLexer("/UC");
      xPathLexer0.nextToken();
      xPathLexer1.at();
      int int0 = xPathLexer2.endPosition();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!6czf#_ PRb");
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.plus();
      xPathLexer0.hasMoreChars();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierStartChar('}');
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("{", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("UtSKJ2H5C", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("$", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("q", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("t", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("S", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      Token token6 = xPathLexer0.nextToken();
      assertEquals("KJ2H5C", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("q", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b");
      Token token0 = xPathLexer0.comma();
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Lk~h`M^5EN6t");
      XPathLexer xPathLexer2 = new XPathLexer("L");
      xPathLexer2.operatorName();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("Lk", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("L");
      xPathLexer3.relationalOperator();
      Token token3 = xPathLexer1.literal();
      assertNull(token3);
      
      XPathLexer xPathLexer4 = new XPathLexer("b");
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x5H-");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("5", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("H", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0-?V{gc8");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.slashes();
      assertEquals("0", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.mod();
      xPathLexer0.setXPath("0-?V{gc8");
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar(' ');
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("b,-rEC0O-Ns[TR\"odv");
      xPathLexer1.consume();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("-", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      assertEquals(",", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("V{gc8", token6.getTokenText());
      
      xPathLexer1.and();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('C');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w|8zh9t3_FcIvffO}");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("|8", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("zh9t3_FcIvffO", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!6czf#_ PRb");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("6c", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("z", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("f#_ PRb", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token4 = xPathLexer2.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals(") ", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x5H-");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("x5H-", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("t");
      Token token1 = xPathLexer1.leftBracket();
      assertEquals("t", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":lugt0]");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I:");
      Token token0 = xPathLexer0.comma();
      assertEquals("I", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(18, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("I:");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.nextToken();
      assertEquals((-1), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(".=#`0#nO}ZOyx/2v=)");
      xPathLexer1.setXPath("d,:V~JS+$S.7wSV,t");
      xPathLexer1.nextToken();
      xPathLexer1.hasMoreChars();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}7Yr`m2zQeO");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.colon();
      assertEquals("Y", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("r", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.setXPath("qBT2&/&P,fc~T");
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('o');
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("qBT2", token5.getTokenText());
      
      Token token6 = xPathLexer0.literal();
      assertEquals("/", token6.getTokenText());
      assertNotNull(token6);
      assertEquals(27, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("P", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      Token token0 = xPathLexer0.at();
      assertEquals("q", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.colon();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("{", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer1.setXPath("y9*2U[&*Mh?kUY5,");
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('o');
      Token token5 = xPathLexer0.nextToken();
      assertEquals("tSKJ2H5C", token5.getTokenText());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.minus();
      assertEquals("S", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("!", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals("}", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("y9", token9.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('J');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.colon();
      xPathLexer1.setPreviousToken(token1);
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer("!6czf#_ PRb");
      Token token3 = xPathLexer2.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("6");
      xPathLexer3.setXPath("1))w4m70>D8DX`1");
      xPathLexer1.div();
      xPathLexer1.isIdentifierChar('o');
      Token token4 = xPathLexer2.nextToken();
      assertEquals(30, token4.getTokenType());
      assertEquals("6", token4.getTokenText());
      
      xPathLexer1.consume();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer2.star();
      assertEquals("c", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token7 = xPathLexer2.nextToken();
      assertEquals("zf#_ PRb", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("!6czf#_ PRb");
      xPathLexer4.setXPath("6");
      boolean boolean0 = xPathLexer4.isIdentifierStartChar('\"');
      assertFalse(boolean0);
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("q", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("{", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("U", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("t", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      Token token5 = xPathLexer1.pipe();
      assertEquals("q", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("{UtSKJ2H5C$S!}WA", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("SKJ2H5C", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H-");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("-", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("XA7?");
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.leftBracket();
      xPathLexer1.plus();
      xPathLexer0.number();
      xPathLexer1.dots();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n*|UD!>");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("n", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("*|", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("U", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("D!>", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("RQ$_5");
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("R", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("n*|UD!>");
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("D!", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}7Yr`m2zQeO");
      Token token0 = xPathLexer0.at();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
      
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("r", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.dots();
      assertEquals("q", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("{", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("U", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(26, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("S", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=*O=Zq'Eh;ZY2Io*");
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(16, int0);
      
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("*", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("=", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Zq", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.setXPath("?Zyf=cUoXI(Z");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      boolean boolean0 = xPathLexer1.isIdentifierChar('[');
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token3 = xPathLexer2.nextToken();
      assertEquals("[", token3.getTokenText());
      
      xPathLexer2.consume();
      Token token4 = xPathLexer1.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
      
      Token token6 = xPathLexer2.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("Zyf", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      boolean boolean1 = xPathLexer2.isIdentifierStartChar('[');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Mfl}k3ICR(\"mXYiVP");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("M", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("Mfl}k3ICR(\"mXYiVP");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("Mfl", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q{UtSKJ2H5C$S!}WA");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("q", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("kJ;bv");
      Token token3 = xPathLexer3.nextToken();
      assertEquals("kJ", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!)");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("o+|<0`W7D)xJI");
      xPathLexer1.at();
      xPathLexer1.operatorName();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}7Yr`m2zQeO");
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("}", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("7", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.setXPath("}7Yr`m2zQeO");
      xPathLexer0.div();
      boolean boolean0 = xPathLexer0.isIdentifierChar('o');
      assertTrue(boolean0);
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("}7Yr`m2zQeO", token4.getTokenText());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("7", token5.getTokenText());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("Yr`m2zQeO", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8T Apd^9>!Y_qa");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.dots();
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("T", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(" ", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("A", token5.getTokenText());
      
      Token token6 = xPathLexer1.comma();
      assertEquals(32, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("8T Apd^9>!Y_qa");
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("pd", token7.getTokenText());
      
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!6czf#_ PRb");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("6c", token1.getTokenText());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.dollar();
      assertEquals("f", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("_ PRb", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("_", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+,OWp");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("14Z I/+x Q0QQ)/");
      xPathLexer1.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.hasMoreChars();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("?X[|(");
      xPathLexer1.setPreviousToken(token0);
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.number();
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("?X[|(");
      Token token3 = xPathLexer3.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer2.setXPath("");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      boolean boolean0 = xPathLexer4.isIdentifierChar('9');
      assertTrue(boolean0);
      
      xPathLexer2.nextToken();
      xPathLexer1.consume();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer5.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer1.star();
      assertEquals("X", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer5.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals("X", token7.getTokenText());
      
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mr<Jsd{R");
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('7');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}7Yr`m2zQeO");
      xPathLexer0.at();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      assertEquals("}7Yr`m2zQeO", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!)");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("!)");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("laJ^Oj(wCk]DKI");
      xPathLexer1.isIdentifierChar('\"');
      Token token1 = xPathLexer0.nextToken();
      assertEquals(23, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      Token token3 = xPathLexer1.star();
      assertEquals("a", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("J", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EUQ)AP8@");
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("EU", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Q", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(2, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("A", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8T 5pd:9>!0_qa");
      xPathLexer0.at();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      assertEquals("8T 5pd:9>!0_qa", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^<Ecu/n|W4?v$0RG");
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.consume(114);
      assertEquals("^<Ecu/n|W4?v$0RG", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      assertEquals("[ (", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=*O=Zq'Eh;ZY2Io*");
      XPathLexer xPathLexer1 = new XPathLexer("v>JYsb%s_y-=CN).");
      XPathLexer xPathLexer2 = new XPathLexer("v>JYsb%s_y-=CN).");
      Token token0 = xPathLexer2.nextToken();
      assertEquals("v", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("En0Zu}N4'egaI");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("En0Zu", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("}", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.pipe();
      assertEquals("N", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("4", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('.');
      assertTrue(boolean0);
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("", token4.getTokenText());
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".");
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.number();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("b", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(9, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!6czf#_ PRb");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("czf#_ PRb", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("gl#<}Q~';");
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("SG^.'*i-;");
      xPathLexer1.operatorName();
      xPathLexer2.dollar();
      xPathLexer2.nextToken();
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=*O=Zq'Eh;ZY2Io*");
      XPathLexer xPathLexer1 = new XPathLexer("4");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.at();
      assertEquals("=", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer1.number();
      assertEquals("4", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~<80:a2Cr");
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("80", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("<", token0.getTokenText());
      assertEquals(7, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K%J/dmzGlGZ-");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("J/dmzGlGZ-", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EUQ)AP8@");
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("EUQ)AP8@");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      Token token0 = xPathLexer1.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rt /T+$6YIRm");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Rt", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      Token token1 = xPathLexer1.nextToken();
      xPathLexer1.setPreviousToken(token1);
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("XA7?");
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer1.leftBracket();
      xPathLexer1.plus();
      xPathLexer0.number();
      xPathLexer1.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer1.literal();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@eaqLN=`Y$+KH");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("aSSCTLo");
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^M+at'xsTmAw%a)d>");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("^", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("M", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4");
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("4", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mr<Jsd{R");
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(20, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("Ir&");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Ir", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@eaqLN=`Y$+KH");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("eaqLN", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rt /T+$6YIRm");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("R", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      XPathLexer xPathLexer1 = new XPathLexer("Rt /T+$6YIRm");
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals("Rt", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      String string0 = token3.toString();
      assertEquals("[ (11) (/)", string0);
      
      xPathLexer1.setPreviousToken(token3);
      assertEquals("/", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?XjM:(");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setXPath("?XjM:(");
      xPathLexer0.setPreviousToken(token0);
      assertEquals("?X", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("?", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("XjM", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.dots();
      assertEquals(":", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CTk%");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("CTk", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("%", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("u", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".");
      Token token0 = xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dlujgt0]");
      Token token0 = new Token(14, "dlujgt0]", 14, 1);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dlujgt0]");
      Token token0 = new Token(10, "dlujgt0]", 10, 1);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("dlujgt0", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(".67'VaHnuGs|':k4tls");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(".67", token1.getTokenText());
      assertEquals(31, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3E.,<hfD`");
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.dots();
      assertEquals(14, token1.getTokenType());
      assertEquals("E.", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("3", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Wb_JK");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("Wb_JK");
      Token token0 = xPathLexer2.nextToken();
      assertEquals("Wb_JK", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".67'VaHnuGs|':k4tls");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(".9bi+.@/)");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(".9", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("..?tw");
      Token token0 = xPathLexer0.number();
      assertEquals(".", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(".", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("?", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
  }
}
