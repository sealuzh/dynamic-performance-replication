/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:13:52 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addInteger(54);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(23L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantString constantString0 = new ConstantString((-3310));
      constantArray0[1] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(4618441417868443648L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantArray0[1] = (Constant) constantLong2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Long.BYTES;
      long long0 = 1L;
      constantPoolGen0.addLong(1L);
      Method method0 = new Method();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3036);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("]");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addDouble(3036);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2), (-2));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(198);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1973), 3903);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(198, 198);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addNameAndType("", "");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupUtf8("");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.lookupLong((-2525L));
      assertEquals((-1), int0);
      
      int int1 = constantPoolGen0.getSize();
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addInteger(54);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.size = (-1196);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("h3", "h3", "h3");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
      
      int int1 = constantPoolGen0.lookupMethodref("23", "23", "23");
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInteger(228);
      int int0 = constantPoolGen0.addFloat((-1.0F));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(2);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, "PW6", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Long.BYTES;
      long long0 = 1L;
      constantPoolGen0.addLong(1L);
      Method method0 = new Method();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(3076L);
      constantPoolGen0.addLong(3076L);
      int int0 = constantPoolGen0.lookupInteger(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(3076L);
      constantPoolGen0.addLong(1L);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(791, 791);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType0.clone();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 791
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      int int0 = Character.MIN_CODE_POINT;
      int int1 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      constantPoolGen0.lookupDouble(1);
      int int3 = constantPoolGen0.lookupFieldref("@Sto\"(BR 9% J~", "@Sto\"(BR 9% J~", "@Sto\"(BR 9% J~");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(219, 219);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(219);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupClass("*O8#.c )");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("]");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-1.0F));
      int int0 = constantPoolGen0.addFloat((-1.0F));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(2610);
      constantArray0[0] = (Constant) constantString0;
      ConstantClass constantClass0 = new ConstantClass(2610);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2610
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-729), 112);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-729), constantMethodref0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -729
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.lookupLong(1L);
      constantPoolGen0.addClass("\n");
      constantPoolGen0.addString("\n");
      constantPoolGen0.lookupLong(1443L);
      int int0 = constantPoolGen0.lookupClass("\n");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("");
      int int0 = constantPoolGen0.size;
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addMethodref("", "", "");
      constantPoolGen0.addLong(4);
      int int1 = constantPoolGen0.addFloat((-1.0F));
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("", "", ":");
      constantPoolGen0.addString("}]hNd*IWK5T");
      constantPoolGen0.lookupClass("}]hNd*IWK5T");
      constantPoolGen0.lookupString("}]hNd*IWK5T");
      constantPoolGen0.lookupMethodref("D(f5bq<Xss-AW;HC", "6u`ElG8[@a=I$", (String) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, "(class_index = ", "6u`ElG8[@a=I$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(1201);
      ConstantDouble constantDouble0 = new ConstantDouble((-57.2425));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("yL");
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantDouble0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addDouble(1201);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addInteger(3);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = constantPoolGen0.lookupInteger(58);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.size;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1), 3036);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3036);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("getStatic");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(2, int0);
      assertEquals(10, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-1.0F));
      constantPoolGen0.addDouble((-1.0F));
      int int0 = constantPoolGen0.addFloat((-1.0F));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat(0.0F);
      constantPoolGen0.addFloat(0.75F);
      int int0 = constantPoolGen0.addFloat(0.0F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(15);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      int int0 = 144;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1306, 144);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1306
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("@Sto\"(BR 9% D~");
      constantPoolGen0.toString();
      ObjectType.getInstance("L8p~#zeKp)4Lbi\"1`/;%@8to\"(BRd9% D~");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = Long.BYTES;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1)CONSTANT_Utf8[1](\"@Sto\"(BR 9% D~\")\n2)CONSTANT_String[8](string_index = 1)\n");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, 8);
      constantPoolGen0.addInteger(2);
      constantPoolGen0.addInteger(2);
      int int1 = Pattern.DOTALL;
      constantPoolGen0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int2 = Character.MAX_RADIX;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int3 = 2088;
      try { 
        constantPool0.constantToString(2088, (byte)121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2088. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NI$+ag/Vjh");
      int int0 = constantPoolGen0.index;
      constantPoolGen0.addClass("@Sto\"(BR9% D~");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ObjectType objectType0 = Type.THROWABLE;
      ObjectType objectType1 = Type.THROWABLE;
      constantPoolGen0.adjustSize();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1821, 3);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(2, 1821);
      constantNameAndType1.clone();
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int1 = constantPoolGen1.addDouble(3);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(256, int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(800, 800);
      constantPoolGen0.addInterfaceMethodref("@Sto\"R 9% D~", "@Sto\"R 9% D~", "@Sto\"R 9% D~");
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addFloat(4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1994091957), (-1812));
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Double.MAX_EXPONENT;
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addUtf8("1)null\n2)null\n3)null\n");
      constantPoolGen1.addInteger(3);
      constantPoolGen0.addLong(2);
      constantPoolGen1.lookupInteger(58);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(58, 4);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInvokeDynamic0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = 58, name_and_type_index = 4)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1627, 3);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantFloat constantFloat0 = new ConstantFloat(1627);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "/";
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((Method) null, "/", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "@Sto\"(BR 9% D~";
      constantPoolGen0.addString("@Sto\"(BR 9% D~");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ARETURN aRETURN0 = new ARETURN();
      ObjectType.getInstance("@Sto\"(BR 9% D~");
      ObjectType objectType0 = Type.THROWABLE;
      int int0 = Character.SIZE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((ConstantUtf8) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Float.MIN_EXPONENT;
      constantPoolGen0.addString("@Sto\"(BR 9% D~");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, (-126));
      constantFieldref0.toString();
      constantPoolGen0.toString();
      int int1 = Long.SIZE;
      constantPoolGen0.adjustSize();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantString cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "graF`w2i");
      int int0 = Float.MAX_EXPONENT;
      String string0 = Constants.CONSTRUCTOR_NAME;
      int int1 = ObjectStreamConstants.baseWireHandle;
      constantPoolGen0.lookupUtf8(":eQKUcDE");
      ConstantDouble constantDouble0 = new ConstantDouble((-1));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      constantPoolGen0.toString();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Float.SIZE;
      constantPoolGen0.toString();
      constantPoolGen0.getFinalConstantPool();
      ObjectType.getInstance("@Sto\"(BR 9% J~");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addMethodref("", "", "");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4, 4);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int1 = Character.MIN_CODE_POINT;
      int int2 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      int int3 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int4 = constantPoolGen1.addConstant(constantUtf8_0, constantPoolGen0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, int4);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(740);
      ConstantString constantString1 = new ConstantString(constantString0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 740
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObjectType.getInstance("8p~#zeKp)4Lbi\"1`/");
      ObjectType objectType0 = Type.THROWABLE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger0 = new ConstantInteger(2670);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8p~#zeKp)4Lbi\"1`/");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      constantPoolGen0.addFieldref("8p~#zeKp)4Lbi\"1`/", "SyntheticRepository could not load ", "");
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      ObjectType objectType1 = Type.THROWABLE;
      constantPoolGen0.addFieldref("8p~#zeKp)4Lbi\"1`/", "SyntheticRepository could not load ", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Code(max_stack = ");
      int int1 = Long.BYTES;
      constantPoolGen0.lookupFloat((-3029.514F));
      int int2 = constantPoolGen0.addInterfaceMethodref("", "8p~#zeKp)4Lbi\"1`/", "58P");
      assertEquals(12, constantPoolGen0.getSize());
      assertEquals(11, int2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "\\8P";
      ObjectType objectType0 = Type.THROWABLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(2670);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2670, 3025);
      constantNameAndType0.toString();
      constantInteger0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected constant type: ");
      constantNameAndType0.clone();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.adjustSize();
      int int0 = Long.BYTES;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("@Sto\"(BR 9% D~");
      constantPoolGen0.toString();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ARETURN aRETURN0 = new ARETURN();
      constantPoolGen0.addClass("");
      constantPool0.copy();
      ConstantLong constantLong0 = new ConstantLong(2);
      constantPoolGen0.toString();
      constantPoolGen0.addString("@Sto\"(BR 9% D~");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addConstant(constantLong0, constantPoolGen0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen1.addInteger(2);
      int int0 = constantPoolGen0.addDouble(1.0);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "Unexpected constant type: ";
      constantPoolGen0.lookupNameAndType("Unexpected constant type: ", "Unexpected constant type: ");
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantFloat0.toString();
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1000, 79);
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat0;
      constantArray0[7] = (Constant) constantFloat0;
      constantArray0[8] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantArray0[1], constantPoolGen1);
      assertEquals(1, int0);
      
      int int1 = constantPoolGen0.lookupString("r");
      int int2 = constantPoolGen0.lookupLong(79);
      assertTrue(int2 == int1);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("@Sto\"(BR 9% D~");
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, (-633));
      constantPoolGen0.addFieldref("@Sto\"(BR 9% D~", "@Sto\"(BR 9% D~", "Unknown constant type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Character.MAX_CODE_POINT;
      ConstantString constantString0 = new ConstantString(246);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.lookupUtf8("L8p~#zeKp)4Lbi\"1`/;%@8to\"(BRd9% D~");
      constantPoolGen1.lookupFloat(0.0F);
      int int1 = constantPoolGen1.getSize();
      assertEquals(256, int1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-1.0F));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFieldref("", "", "");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, 1);
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("8p~#zKbq4L\"i\"1`/", "8p~#zKbq4L\"i\"1`/", "8p~#zKbq4L\"i\"1`/");
      ObjectType.getInstance("8p~#zKbq4L\"i\"1`/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ObjectType objectType0 = Type.THROWABLE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger0 = new ConstantInteger(4);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(4, 4);
      constantNameAndType0.clone();
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant constant0 = constantPoolGen0.getConstant(4);
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addInteger(248);
      constantPoolGen0.lookupMethodref("|W*['4", "8p~#zKbq4L\"i\"1`/", "|W*['4");
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "%";
      constantPoolGen0.addInterfaceMethodref("%", "58P", "58P");
      ObjectType objectType0 = new ObjectType("%");
      ObjectType objectType1 = Type.THROWABLE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 2657;
      ConstantInteger constantInteger0 = new ConstantInteger(2657);
      Constant constant0 = constantPoolGen0.getConstant(5);
      constant0.toString();
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPool constantPool0 = null;
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      int int0 = Pattern.COMMENTS;
      constantPoolGen0.getConstantPool();
      int int1 = Float.MAX_EXPONENT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantClass constantClass0 = new ConstantClass((-128));
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -128
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[2] = (byte)11;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      ObjectType objectType0 = Type.THROWABLE;
      constantPoolGen0.getConstantPool();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger0 = new ConstantInteger((byte)20);
      Character.getName((byte)11);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addFieldref("8p~#zeKp)4Lbi\"1`b", "Synthetcepository coud not lod ", "-r &# Ai=A6e.:qX/=");
      int int0 = Pattern.UNIX_LINES;
      constantPoolGen1.addMethodref("LINE TABULATION", "5%%", "LINE TABULATION");
      constantPoolGen1.addString("+xjYn8APWVg");
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen((byte)20, objectType0, objectType0.NO_ARGS, stringArray0, "", "5%%", instructionList0, constantPoolGen1);
      ObjectType objectType1 = Type.STRINGBUFFER;
      methodGen0.getLineNumbers();
      methodGen0.copy("Synthetcepository coud not lod ", constantPoolGen0);
      constantPoolGen1.getFinalConstantPool();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      constantPoolGen0.adjustSize();
      System.setCurrentTimeMillis(13);
      constantPoolGen1.getConstant((byte)20);
      constantPoolGen1.lookupDouble((-2728.405));
      constantPoolGen1.getConstant(58);
      assertEquals(20, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)20;
      byteArray0[2] = (byte)11;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ObjectType objectType1 = Type.THROWABLE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger0 = new ConstantInteger((byte)20);
      String string0 = Constants.ILLEGAL_TYPE;
      int int0 = Member.PUBLIC;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addFieldref("8p~#zeKp)4Lbi\"1`/", "SyntheticRepository could not load ", "");
      constantPoolGen1.size = 145;
      constantPoolGen0.addMethodref("<illegal type>", "58P", "<illegal type>");
      constantPoolGen0.lookupClass("8p~#zeKp)4Lbi\"1`/");
      constantPoolGen1.addMethodref("", "", "<illegal type>");
      int int1 = Pattern.UNICODE_CASE;
      int int2 = Member.DECLARED;
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen((byte)20, objectType1, objectType0.NO_ARGS, stringArray0, "32]MW", "58P", instructionList0, constantPoolGen0);
      methodGen0.copy("U~W,-N1/@+`%R\"|", constantPoolGen1);
      methodGen0.copy("", constantPoolGen1);
      constantPoolGen0.lookupString("qpT.cv%?U3V6,o_W");
      constantPoolGen1.getConstantPool();
      assertEquals(18, constantPoolGen0.getSize());
      assertEquals(265, constantPoolGen1.getSize());
  }
}
