/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 14:41:42 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 2);
      cRSMatrix0.nonZeroAt(2, 4);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((-3333));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3332
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-1002);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1002), (-1002), (double) (-1002), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      cRSMatrix0.mkString("", "");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(1, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3379.6555302406396);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1935.9960693;
      doubleArray1[8] = (-955.07525644);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.mkString((NumberFormat) null, "Sides of blocks are incompatible!", "Sides of blocks are incompatible!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(372, 372);
      double double0 = cRSMatrix0.getOrElse(317, 302, 302);
      assertEquals(302.0, double0, 0.01);
      
      Vector vector0 = cRSMatrix0.getColumn(3279);
      assertEquals(372, vector0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 2;
      int int1 = 1773;
      cRSMatrix0.iteratorOfColumn(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1773;
      doubleArray0[1] = (double) (-1199);
      doubleArray0[2] = (double) 1773;
      doubleArray0[3] = (double) 2;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(2, (-1199), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2x-1199
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      assertEquals(1, sparseMatrix0.rows());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, sparseMatrix0, sparseMatrix0, cRSMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6388, 0, 0);
      cRSMatrix0.minInRow(2581);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(1896, vectorFunction0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, (-3333));
      cRSMatrix0.getColumn(665);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(4, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 3678;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3678, 3678);
      cRSMatrix0.nonZeroIterator();
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.swapColumns((-1894), 3678);
      int int1 = 13;
      double double0 = 1245.253947545;
      RowMajorSparseMatrix.diagonal(int1, double0);
      cRSMatrix0.maxInRow(int0);
      double double1 = 0.0;
      RowMajorSparseMatrix.diagonal(int0, double1);
      int int2 = (-1);
      double double2 = 0.0;
      String string0 = "|=y:d75[6?;`P@~}~";
      cRSMatrix0.mkString(string0, string0);
      cRSMatrix0.set(int0, int2, double2);
      cRSMatrix0.getOrElse(int0, int2, int0);
      int int3 = 0;
      cRSMatrix0.transpose();
      int int4 = 1561;
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.randomSymmetric(int4, double0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.updateAt(int2, int3, matrixFunction0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      assertEquals(2, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastColumn();
      assertEquals(2.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.5, cRSMatrix1.density(), 0.01);
      
      double double0 = cRSMatrix0.max();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(0);
      RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.iteratorOfRow(0);
      cRSMatrix0.nonZeroIteratorOfRow(0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.setAll(2761.556338);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 558;
      MockRandom mockRandom0 = new MockRandom(558);
      mockRandom0.nextLong();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(558, 0.0, (Random) mockRandom0);
      mockRandom0.longs();
      cRSMatrix0.max();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      CRSMatrix.fromCSV("");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      SparseMatrix.from1DArray(0, 0, doubleArray0);
      cRSMatrix0.blankOfShape(558, 558);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(558, vectorProcedure0);
      cRSMatrix0.getColumn(int0);
      cRSMatrix1.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.min();
      CRSMatrix.zero(0, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 0);
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3198, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(0, vectorProcedure0);
      Matrix matrix0 = cRSMatrix0.blank();
      // Undeclared exception!
      try { 
        matrix0.swapRows(915, 3198);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3199
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.sum();
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow((-3368), (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3368
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      Matrix matrix0 = cRSMatrix0.shuffle();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        matrix0.minInRow(1493);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1493
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(558);
      mockRandom0.nextLong();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(558, 0.0, (Random) mockRandom0);
      mockRandom0.longs();
      cRSMatrix0.max();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      cRSMatrix0.determinant();
      cRSMatrix1.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      cRSMatrix0.rowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.setAll((-333.7493));
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.toBinary();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.min();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix1.nonZeroRowMajorIterator();
      cRSMatrix1.toBinary();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1514;
      intArray0[3] = 0;
      intArray0[4] = 13;
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(557);
      cRSMatrix0.max();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      int int0 = (-2270);
      SparseMatrix.from1DArray(0, (-2270), (double[]) null);
      int int1 = 547;
      cRSMatrix1.blankOfShape(int0, int1);
      int int2 = 2;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInRow(int2, vectorProcedure0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix1.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toRowMajorSparseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(1, 1, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(518);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(848, 518);
      DenseMatrix denseMatrix1 = cRSMatrix0.toDenseMatrix();
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix1);
      int int0 = (-1303);
      int int1 = 540;
      DenseMatrix denseMatrix2 = DenseMatrix.zero(int0, int1);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, cRSMatrix0, denseMatrix1, denseMatrix2);
      cRSMatrix1.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      cRSMatrix0.subtract((double) 0);
      cRSMatrix0.setAll(0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.mkString("hU&TDXIo", "0.5.5");
      cRSMatrix0.min();
      CRSMatrix.zero(0, 0, 0);
      cRSMatrix0.iteratorOfNonZeroRows();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow((-1505), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1505
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      cRSMatrix0.euclideanNorm();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1005, 0, 0);
      Matrix matrix0 = cRSMatrix1.insert((Matrix) cRSMatrix0);
      assertEquals(1005, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInRow(32, vectorAccumulator0);
      assertTrue(cRSMatrix1.equals((Object)matrix0));
      
      cRSMatrix0.rowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6388, 0, 0);
      cRSMatrix0.minInRow(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3198, 0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.iteratorOfRow(0);
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (double) 3198;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (double) 3198;
      doubleArray2[2] = 3429.25946202;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = (double) 3198;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = (double) 3198;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = (double) 3198;
      doubleArray3[2] = 3429.25946202;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = 3429.25946202;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      Matrix.identity(3198);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.each(matrixProcedure1);
      cRSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-3310);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, (-3310));
      cRSMatrix0.infinityNorm();
      int int1 = 2;
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(4, 1490.2717);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      cRSMatrix0.setAll(1);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3198, 7, 3198);
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      cRSMatrix0.setAll(1549.2753663);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6388, 0, 0);
      double double0 = cRSMatrix0.minInRow(0);
      double double1 = cRSMatrix0.maxInRow(0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3198, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(0, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(0, vectorProcedure0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(3583, 3583, 3198);
      cRSMatrix0.rowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      double double0 = cRSMatrix1.maxInRow(3198);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      cRSMatrix0.determinant();
      Integer integer0 = new Integer((-2881));
      cRSMatrix0.setAll(0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.updateAt(Integer.MAX_VALUE, 0, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3198, 0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.getColumn(1511);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3198;
      intArray0[2] = 1511;
      intArray0[3] = 3198;
      intArray0[4] = 1725;
      intArray0[5] = 1511;
      intArray0[6] = 3198;
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6388);
      Integer integer0 = new Integer(2968);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3278.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(459, 2968, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 6389;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6389, Double.NEGATIVE_INFINITY);
      int int1 = 6382;
      cRSMatrix0.setColumn(6382, (double) 6382);
      cRSMatrix0.blankOfShape(int0, int1);
      cRSMatrix0.diagonalProduct();
      int int2 = 917;
      int int3 = 6381;
      cRSMatrix0.nonZeroAt(int2, int3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(4, 0, (double[]) null);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(4, cRSMatrix1.rows());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.setAll(2.0);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(3, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6352, 6357, 839);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 839;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3734, 3734);
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[11];
      intArray1[0] = 3;
      intArray1[8] = 3;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray1);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 964, 0);
      Matrix matrix0 = cRSMatrix0.removeColumn(0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      cRSMatrix0.determinant();
      CRSMatrix cRSMatrix1 = new CRSMatrix(6388, 0, 0);
      cRSMatrix1.setAll(6388);
      cRSMatrix1.minInRow(2581);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(2581, 1, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2581
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 3011;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3011, 3011, 3011);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(3011, vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(3011, 9, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3012
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3;
      int int1 = 3734;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3734, 3734, 3734);
      cRSMatrix0.rowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) int1;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int1;
      doubleArray2[3] = (double) int1;
      double double0 = (-1897.830848);
      doubleArray2[4] = double0;
      doubleArray2[5] = (double) int1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = double0;
      doubleArray3[1] = (double) int0;
      doubleArray3[2] = double0;
      doubleArray3[3] = (double) int1;
      doubleArray3[4] = (double) int1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) int1;
      doubleArray4[1] = (double) int1;
      doubleArray4[2] = (double) int1;
      doubleArray4[3] = double0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) int0;
      doubleArray5[1] = (double) int0;
      doubleArray5[2] = (double) int1;
      doubleArray5[3] = (double) int0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = double0;
      doubleArray6[1] = double0;
      doubleArray6[2] = (double) int0;
      doubleArray6[3] = (double) int0;
      doubleArray6[4] = (double) int1;
      double double1 = 3530.05;
      doubleArray6[5] = double1;
      doubleArray6[6] = (double) int1;
      doubleArray6[7] = (double) int1;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (double) int1;
      double double2 = 1497.21;
      doubleArray7[1] = double2;
      doubleArray7[2] = (double) int1;
      doubleArray7[3] = (double) int0;
      doubleArray7[4] = (double) int0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      double double3 = 2793.617;
      doubleArray8[0] = double3;
      doubleArray8[1] = double0;
      doubleArray8[2] = double0;
      doubleArray8[3] = (double) int1;
      doubleArray8[4] = double2;
      doubleArray0[7] = doubleArray8;
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[2] = (byte) (-6);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-6);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3590, 966, 370);
      cRSMatrix0.blank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(4, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(0, vectorFunction0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      cRSMatrix0.determinant();
      cRSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix.random(8, 966, (double) 0, (Random) mockRandom0);
      cRSMatrix0.setAll(1.0);
      cRSMatrix0.minInRow(0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(12, 400);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, (SparseMatrix) cRSMatrix0);
      Matrix matrix1 = cRSMatrix0.subtract((double) 0);
      Matrix matrix2 = cRSMatrix0.hadamardProduct(matrix1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, matrix0, denseMatrix0, matrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(952, 4);
      cRSMatrix0.copyOfShape(951, 2271);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      cRSMatrix0.rotate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow((-1386), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1386
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("org.la4j.LinearAlgebra$DecompositorFactory$7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rotate();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toColumnVector();
      int int0 = 2519;
      cRSMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(9, 9, mockRandom0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2519, 0.0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1348, 1.0);
      cRSMatrix0.copyOfShape(1, 1348);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(2, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(9, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1740.3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(1740.3, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3198, 0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.iteratorOfRow(0);
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (double) 3198;
      doubleArray1[2] = 3445.2761;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (double) 3198;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 3198;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (double) 3198;
      doubleArray2[2] = 3445.2761;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 3445.2761;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray2;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      Matrix.identity(3198);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.each(matrixProcedure1);
      cRSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(4, 1.0, (Random) mockRandom0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 6388;
      int int1 = 2968;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6388);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(15);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(15, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
      int int2 = 9;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int2, int0, int1);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(int2, int0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.updateRow(int0, vectorFunction0);
      cRSMatrix2.min();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(4, vectorProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(2095, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3198, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(0, vectorFunction0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(3198, 675.0);
      cRSMatrix1.copyOfShape(736, 3);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3, 3);
      int[] intArray0 = new int[11];
      intArray0[0] = 3;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 6365;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 6365;
      doubleArray0[4] = (double) 3;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(3, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3, 3);
      int[] intArray0 = new int[11];
      intArray0[0] = 3;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 6365;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 6365;
      doubleArray0[4] = (double) 3;
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, matrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[3] = (byte)6;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal((byte)32, (byte)32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow((byte)6, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 2848.81411439596);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(2, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9995, (-3300));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-3300), (double)(-3300)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(2, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      int int1 = 1852;
      int int2 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[8];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 1852;
      intArray0[3] = 3;
      matrix0.toColumnVector();
      intArray0[4] = 3;
      intArray0[5] = 3;
      // Undeclared exception!
      try { 
        ooPlaceMatrixByItsTransposeMultiplication0.apply((DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[3] = (byte)6;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal((byte)32, (byte)32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)6, 0.0, Double.NEGATIVE_INFINITY, (-65.0856833602), (double)(byte)32).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow((byte)6, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3);
      cRSMatrix0.maxInRow(2);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      cRSMatrix0.getColumn(4);
      // Undeclared exception!
      try { 
        cRSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3);
      cRSMatrix0.iterator();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.non(matrixPredicate0);
      cRSMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(51);
      cRSMatrix0.minInRow(2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal((byte)32, (byte)32);
      cRSMatrix0.copyOfShape((byte)32, 23);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[3] = (byte)28;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal((byte)32, (byte)32);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn((byte)28, vectorAccumulator0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '33' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rank();
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-1923), 6, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1923' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 30;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(30);
      int int1 = 17;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(17, vectorProcedure0);
      double double0 = cRSMatrix0.determinant();
      int int2 = (-1130);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = double0;
      doubleArray1[1] = (double) int1;
      double double1 = (-2519.2154578521);
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = double1;
      double double2 = (-829.21500781912);
      doubleArray2[1] = double2;
      doubleArray2[2] = (double) int1;
      doubleArray2[3] = double0;
      doubleArray2[4] = (double) int1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = double0;
      doubleArray3[1] = (double) int1;
      doubleArray3[2] = (double) int0;
      double double3 = 432.9716712792892;
      doubleArray3[3] = double3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) int0;
      doubleArray5[1] = (double) int0;
      doubleArray5[2] = double2;
      doubleArray5[3] = double0;
      doubleArray5[4] = double1;
      doubleArray5[5] = double1;
      doubleArray5[6] = double3;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
      int int3 = 291;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(int1, int3, (double) int3, (Random) mockRandom0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int2, vectorProcedure1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CRSMatrix.identity(6388);
      int int0 = 9;
      CRSMatrix cRSMatrix0 = new CRSMatrix(9, 6388, 2968);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(9, 6388);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-721.0), (-1.0), (double)2968, (-721.0), (double)6388).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateRow(2, vectorFunction0);
      cRSMatrix1.minInRow(2);
      cRSMatrix1.min();
      int int1 = (-939);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-721.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-721.0);
      doubleArray0[3] = (-721.0);
      doubleArray0[4] = (-1.0);
      cRSMatrix1.setAll((-6397.6553207));
      doubleArray0[5] = (double) (-939);
      doubleArray0[6] = (double) 2968;
      CRSMatrix.from1DArray((-939), 2375, doubleArray0);
      CRSMatrix.from1DArray(int1, int0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, (byte)6);
      cRSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-4409.205255505), (-1341.74197107238), (double)13, (-4409.205255505), 691.230142).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow((byte)6, vectorFunction0);
      cRSMatrix0.minInRow((byte)6);
      cRSMatrix0.maxInRow((byte)6);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((byte)6, (-3447), 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-3447' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int int0 = 3192;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3192);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int1 = 1145;
      int int2 = 3183;
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      double double0 = (-1.0);
      doubleArray1[2] = double0;
      doubleArray1[3] = (double) int1;
      doubleArray1[4] = (double) int2;
      doubleArray1[5] = (double) int0;
      doubleArray1[6] = (double) int1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) int2;
      doubleArray2[1] = (double) int1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      double double1 = (-1.0);
      doubleArray3[0] = double1;
      doubleArray3[1] = (double) int1;
      doubleArray3[2] = (double) int1;
      doubleArray3[3] = double0;
      doubleArray3[4] = double0;
      doubleArray3[5] = double0;
      doubleArray3[6] = (double) int2;
      doubleArray3[7] = (double) int0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) int0;
      doubleArray4[1] = double0;
      doubleArray4[2] = double0;
      doubleArray4[3] = double1;
      doubleArray4[4] = (double) int0;
      doubleArray4[5] = (double) int2;
      doubleArray4[6] = (double) int1;
      doubleArray4[7] = double0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = double1;
      doubleArray5[1] = double0;
      doubleArray5[2] = (double) int1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      double double2 = 1896.2493171297176;
      doubleArray6[0] = double2;
      doubleArray6[1] = double1;
      doubleArray6[2] = (double) int0;
      doubleArray6[3] = double0;
      doubleArray6[4] = (double) int0;
      double double3 = (-4487.7012832040145);
      doubleArray6[5] = double3;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = double0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = double3;
      doubleArray8[1] = double3;
      doubleArray8[2] = double3;
      doubleArray8[3] = (double) int0;
      doubleArray0[7] = doubleArray8;
      CRSMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(int2, vectorFunction0);
      cRSMatrix0.sliceBottomRight(int0, int1);
      int int3 = (-154);
      cRSMatrix0.copyOfShape(int1, int3);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CRSMatrix.fromCSV("6");
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(17, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '18' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      int int0 = 3192;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3192);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3192, (double)3192, (double)3192, 2096.8648704074, 1.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int1 = 1145;
      int int2 = 3183;
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      double double0 = (-1.0);
      doubleArray1[2] = double0;
      doubleArray1[3] = (double) int1;
      doubleArray1[4] = (double) int2;
      doubleArray1[5] = (double) int0;
      doubleArray1[6] = (double) int1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) int2;
      doubleArray2[1] = (double) int1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      double double1 = (-1.0);
      doubleArray3[0] = double1;
      doubleArray3[1] = (double) int1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.transformRow(int1, vectorFunction0);
      int int3 = 17;
      cRSMatrix1.sliceBottomRight(int3, int1);
      int int4 = 813;
      cRSMatrix1.copyOfShape(int3, int4);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(int3, vectorProcedure0);
      int int5 = (-1023);
      cRSMatrix1.nonZeroIteratorOfRow(int5);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3379.6555302406396);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cRSMatrix0.spliterator();
      int int0 = 13;
      cRSMatrix0.swapColumns(13, 13);
      // Undeclared exception!
      try { 
        cRSMatrix0.mkString((NumberFormat) null, "Sides of blocks are incompatible!", "'y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.add(0.5);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)32;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 440
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      double[][] doubleArray0 = new double[2][0];
      cRSMatrix0.toCSV();
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 4;
      cRSMatrix0.shuffle();
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = (double) 4;
      int int1 = 2513;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(32, 223, (double) 223, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
