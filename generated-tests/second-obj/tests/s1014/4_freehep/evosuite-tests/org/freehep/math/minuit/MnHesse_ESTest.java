/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:19:30 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnHesse;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnHesse_ESTest extends MnHesse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 31.88438561592781;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-989));
      assertEquals(16, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(834);
      double double0 = mnHesse0.tolerstp();
      assertEquals(0.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(1902);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1902, (double)1902).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, 1902);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-1054));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3653);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (double[]) null, (MnUserCovariance) null, 3653);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(2146455950);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2146455950;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, (MnUserCovariance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(593.29, 593.29, 593.29, 593.29, 593.29).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-989));
      assertEquals(18, mnUserParameterState0.nfcn());
      assertEquals(593.29, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setGradientStepTolerance((-752));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-752), (double)(-752), 8.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-752));
      MinimumState minimumState0 = new MinimumState(16);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), (-3138.3), (-1.0), 2188.00923256).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 31.88438561592781;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-989));
      assertEquals(18, mnUserParameterState0.nfcn());
      assertEquals((-1.0), mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("N~/6%#}Ci<w=", 388.5, 995.9329974880212, 388.5, (double) (-1952));
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2033.111986598304), 0.0, 362.623705854, (-478.889172037), (-1830.03721142214)).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray1 = new double[4];
      mnHesse0.calculate(fCNBase1, mnUserParameters1);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setGradientStepTolerance((-752));
      mnStrategy0.setGradientStepTolerance(1658.12680109);
      mnStrategy0.setHessianNCycles((-752));
      MinimumState minimumState0 = new MinimumState(1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation();
      MnHesse mnHesse1 = new MnHesse();
      double double0 = mnHesse1.tolerg2();
      assertEquals(0.05, double0, 0.01);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2136913114;
      doubleArray0[1] = 290.917602944047;
      doubleArray0[2] = (double) (-752);
      doubleArray0[3] = 1658.12680109;
      doubleArray0[4] = (double) 2136913114;
      doubleArray0[5] = (double) (-752);
      doubleArray0[6] = 1658.12680109;
      doubleArray0[7] = (double) 2136913114;
      doubleArray0[8] = 0.05;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 1);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(467);
      mnStrategy0.setGradientStepTolerance(467);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)467, 2.0, (double)467, 2.0, 2.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 467;
      doubleArray0[1] = (double) 467;
      doubleArray0[2] = (double) 467;
      doubleArray0[3] = (double) 467;
      doubleArray0[4] = 1993.92610471;
      doubleArray0[5] = (double) 467;
      doubleArray0[6] = (double) 467;
      doubleArray0[7] = (double) 467;
      doubleArray0[8] = (double) 467;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
      double double0 = mnHesse0.tolerstp();
      assertEquals(0.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setGradientStepTolerance((-752));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-752), (double)(-752), 8.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-752));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(1691);
      mnFcn0.valueOf(mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(16);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.add("", 8.0, (-752), 16, 8.0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setGradientStepTolerance(1658.12680109);
      MinimumState minimumState0 = new MinimumState(1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1855.69413256), 290.917602944047, 1466.452580937).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-2021.58503);
      doubleArray0[1] = 0.05;
      doubleArray0[2] = (-2021.58503);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2200.9267;
      doubleArray1[1] = (-1855.69413256);
      doubleArray1[2] = 66.99831015743011;
      doubleArray1[3] = 2200.9267;
      doubleArray1[4] = 2200.9267;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      MnUserTransformation mnUserTransformation1 = mnUserParameters0.trafo();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1281.2);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, 91363);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setGradientStepTolerance((-725));
      mnStrategy0.setHessianNCycles((-725));
      mnStrategy0.setGradientStepTolerance(1658.12680109);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1855.69413256), 290.917602944047, (-3161.95377), (double)1, 1658.12680109).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-2021.58503);
      doubleArray0[2] = (-2021.58503);
      doubleArray0[3] = 2200.9267;
      int int0 = 5;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 5);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.clone();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.1, (-2021.58503), (-2021.58503), 1658.12680109).when(fCNBase1).valueOf(any(double[].class));
      mnUserParameters0.add("l-)!.9", 0.8136031255916273, 2200.9267);
      // Undeclared exception!
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setGradientStepTolerance((-752));
      mnStrategy0.setGradientStepTolerance(1658.12680109);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1855.69413256));
      MinimumState minimumState0 = new MinimumState(1);
      mnStrategy0.setHessianNCycles((-3491));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1855.69413256), 290.917602944047, (-3161.95377), (double)1, 1658.12680109).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2021.58503);
      doubleArray0[1] = 0.05;
      doubleArray0[2] = (-2021.58503);
      doubleArray0[3] = 2200.9267;
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 5);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.1, 0.05, 0.05, 1658.12680109).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0);
      assertEquals(8, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.8266302639481165, (-2555.485052948625), 0.0, 0.0, 0.0).when(fCNBase3).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase3, doubleArray0, doubleArray0, 364);
      assertEquals(2.8266302639481165, mnUserParameterState1.fval(), 0.01);
      assertEquals(8, mnUserParameterState1.nfcn());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setGradientStepTolerance((-738));
      mnStrategy0.setGradientStepTolerance(1658.12680109);
      MinimumState minimumState0 = new MinimumState(1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1855.69413256), 290.917602944047, (-3161.95377), (double)1, 1658.12680109).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[17];
      doubleArray0[1] = (-2021.58503);
      doubleArray0[1] = 0.05;
      doubleArray0[2] = (-2021.58503);
      doubleArray0[3] = 2200.9267;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 5);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.1, 0.05, 0.05, 1658.12680109).when(fCNBase1).valueOf(any(double[].class));
      mnUserParameters0.add("l-)!.9", 0.8136031255916273, 2200.9267);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      assertEquals(68, mnUserParameterState0.nfcn());
      
      mnStrategy0.setHessianG2Tolerance(5);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.8266302639481165, (-2554.799266068419), 659.6302, (double)5).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase2, mnUserParameters0);
      assertEquals(9.277011671856913, mnUserParameterState1.edm(), 0.01);
      assertEquals(2.8266302639481165, mnUserParameterState1.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-1217));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(756.15, 2605.0796923158173, 2605.0796923158173, 2605.0796923158173, (-7472.4)).when(fCNBase0).valueOf(any(double[].class));
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1217);
      doubleArray0[1] = (double) (-1217);
      doubleArray0[3] = (double) (-1217);
      doubleArray0[4] = (double) (-1217);
      doubleArray0[5] = (double) (-1217);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse1.calculate(fCNBase0, mnUserParameters0, 1);
      mnHesse0.tolerstp();
      mnHesse0.ncycles();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase1, 1156.79);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(13);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.5);
      MinimumError minimumError0 = new MinimumError(1);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 2147380088, (-1217));
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      // Undeclared exception!
      try { 
        mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters have invalid size
         //
         verifyException("org.freehep.math.minuit.InitialGradientCalculator", e);
      }
  }
}
