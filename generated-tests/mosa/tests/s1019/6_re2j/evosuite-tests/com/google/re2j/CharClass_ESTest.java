/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:46:05 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(287, 287);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange((-722), 2589);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(969, 969);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 591);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[3];
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      charClass0.appendTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(752, 752);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(46, 93);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-415));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-779));
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendLiteral(44005, 44005);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      int[][] intArray0 = new int[0][4];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 151);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(447, 611);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals("[0x0-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[12];
      intArray1[0] = 1427;
      intArray1[1] = 32;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-1136), (-1136));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][5];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-3310));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 8275;
      intArray0[2] = 215;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 8275, 215, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 1114111, 1, 214}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      charClass1.appendTable(intArray1);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      charClass2.negateClass();
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass3 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass3);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      
      CharClass charClass4 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass4);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      
      CharClass charClass5 = new CharClass();
      assertNotNull(charClass5);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass2));
      
      CharClass charClass6 = charClass5.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass6);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass4);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass4));
      
      CharClass charClass7 = charClass6.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass7);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass4);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass0);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass0));
      
      int[] intArray2 = charClass3.toArray();
      assertArrayEquals(new int[] {0, 0, 0, 1114111}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass7);
      assertNotSame(intArray2, intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass5));
      assertFalse(charClass3.equals((Object)charClass6));
      assertFalse(charClass3.equals((Object)charClass7));
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass8 = charClass4.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass8);
      assertNotSame(intArray0, intArray2);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass6);
      assertSame(charClass4, charClass8);
      assertNotSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass7);
      assertNotSame(charClass4, charClass6);
      assertSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass5);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass4.equals((Object)charClass5));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass7));
      assertFalse(charClass4.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1114111, 1114111);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 8275;
      intArray0[2] = 215;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 8275, 215, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 1114111, 1, 214}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 1114111, 1, 214}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertArrayEquals(new int[] {215, 1114111, 1, 214}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][7];
      // Undeclared exception!
      charClass0.appendFoldedRange(6666, 1114112);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 91;
      intArray0[1] = 8275;
      intArray0[2] = 215;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      charClass1.cleanClass();
      charClass3.negateClass();
      charClass0.appendFoldedClass(intArray0);
  }
}
