/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:30:51 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selectable;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page page0 = new Page();
      String string0 = "";
      page0.setRawText("");
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("D*H^,P ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Page page0 = new Page();
      page0.getHeaders();
      page0.setCharset("");
      page0.setHeaders((Map<String, List<String>>) null);
      Json json0 = page0.getJson();
      String string0 = ", rawText='";
      String string1 = "W%IeOcr>W^}+gxgv";
      // Undeclared exception!
      try { 
        json0.css("W%IeOcr>W^}+gxgv", "W%IeOcr>W^}+gxgv");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // $ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).
         //
         verifyException("us.codecraft.webmagic.selector.PlainText", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setRawText((String) null);
      Page page2 = page1.setSkip(false);
      page2.getUrl();
      assertTrue(page2.isDownloadSuccess());
      assertEquals(200, page2.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Page page0 = new Page();
      page0.getHeaders();
      page0.setHeaders((Map<String, List<String>>) null);
      Page page1 = page0.setSkip(true);
      Request request0 = new Request();
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      Json json0 = page1.getJson();
      assertNotNull(json0);
      
      page1.addTargetRequest(request1);
      page1.setCharset(")LPN6{+*9\"e8:l8y\"qQ");
      page0.getRequest();
      Page page2 = Page.fail();
      int int0 = page0.getStatusCode();
      assertEquals(200, int0);
      
      page2.setCharset(" ^>qVAPYyJ#");
      assertFalse(page2.isDownloadSuccess());
      
      Object object0 = new Object();
      page0.putField("_cycle_tried_times", object0);
      page0.getCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)40;
      page0.setBytes(byteArray0);
      assertTrue(page0.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Page page0 = new Page();
      page0.getRequest();
      page0.setRequest((Request) null);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      Request request0 = new Request("");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request1 = request0.setExtras(hashMap0);
      Object object0 = new Object();
      Request request2 = request1.putExtra((String) null, object0);
      page1.setRequest(request2);
      page1.getRawText();
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector((String) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      Request request0 = new Request();
      Request request1 = request0.setMethod((String) null);
      Request request2 = request1.putExtra("_cycle_tried_times", request0);
      Request request3 = request1.putExtra("select text error! ", request2);
      Map<String, Object> map0 = request0.getExtras();
      Request request4 = request3.setExtras(map0);
      Request request5 = request4.setBinaryContent(true);
      page1.setRequest(request5);
      page1.getBytes();
      assertEquals(200, page1.getStatusCode());
      assertFalse(page1.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Page page0 = Page.fail();
      page0.toString();
      page0.setSkip(true);
      Page page1 = page0.setRawText("");
      assertFalse(page1.isDownloadSuccess());
      
      page1.setDownloadSuccess(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)124;
      Request request0 = new Request("");
      Request request1 = request0.setBinaryContent(true);
      page0.setRequest(request1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)0;
      page1.setBytes(byteArray0);
      page0.isDownloadSuccess();
      page1.getTargetRequests();
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page page0 = new Page();
      page0.getRequest();
      byte[] byteArray0 = new byte[0];
      page0.setRequest((Request) null);
      page0.getHeaders();
      page0.setHeaders((Map<String, List<String>>) null);
      page0.setBytes(byteArray0);
      page0.getStatusCode();
      page0.toString();
      page0.setBytes(byteArray0);
      page0.setStatusCode(3140);
      page0.getHeaders();
      page0.getResultItems();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page page0 = new Page();
      page0.getCharset();
      int int0 = 0;
      page0.setStatusCode(0);
      page0.setDownloadSuccess(false);
      page0.setBytes((byte[]) null);
      page0.setDownloadSuccess(false);
      page0.setUrl((Selectable) null);
      Page page1 = Page.fail();
      page0.setDownloadSuccess(true);
      // Undeclared exception!
      try { 
        page1.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Page page0 = Page.fail();
      page0.setDownloadSuccess(false);
      page0.getJson();
      Json json0 = page0.getJson();
      assertNotNull(json0);
      
      page0.setDownloadSuccess(false);
      page0.setBytes((byte[]) null);
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Page page0 = Page.fail();
      page0.setStatusCode(1512);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("su86(d");
      page0.addTargetRequests(list0);
      page0.getStatusCode();
      page0.setDownloadSuccess(true);
      page0.addTargetRequests(list0);
      page0.getJson();
      assertEquals(1512, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0);
      boolean boolean0 = page0.isDownloadSuccess();
      assertEquals(200, page0.getStatusCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0, 830L);
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Page page0 = new Page();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      page0.setHeaders(hashMap0);
      page0.setHtml((Html) null);
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
  }
}
