/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:26:58 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.modes.Mode;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.view.mindmapview.attributeview.AttributePopupMenu;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.MultipleGradientPaint;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelListener;
import java.time.LocalDate;
import java.util.Date;
import java.util.Locale;
import javax.accessibility.AccessibleContext;
import javax.swing.Box;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.CaretEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.metal.MetalTabbedPaneUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.css.engine.SVGCSSEngine;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.util.CSSConstants;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xerces.util.SymbolTable;
import org.apache.xml.serializer.SerializerTrace;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseConnectionHook;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.transferFocusDownCycle();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(90, color0.getGreen());
      assertEquals(164, color0.getBlue());
      assertNotNull(color0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      boolean boolean0 = jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(13);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      AccessibleContext accessibleContext0 = jDayChooser0.getAccessibleContext();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(accessibleContext0);
      
      jDayChooser0.setYear((-1238));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertNotNull(jMonthChooser0);
      
      jDayChooser0.monthChooser = jMonthChooser0;
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.monthChooser.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.monthChooser.isFocusCycleRoot());
      assertEquals(1, jDayChooser0.monthChooser.getMonth());
      assertTrue(jDayChooser0.monthChooser.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.monthChooser.hasSpinner());
      assertFalse(jDayChooser0.monthChooser.getIgnoreRepaint());
      assertFalse(jDayChooser0.monthChooser.isFocusTraversalPolicyProvider());
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
      assertEquals(228, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.setDay(100);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNull(jButton0);
      
      jDayChooser0.firePropertyChange("XTYF", (short)16, (short)16);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2344), (-2344), (-2344), (-2344), 164, (-2344));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2344,MONTH=-2344,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2344,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2344,HOUR_OF_DAY=-2344,MINUTE=164,SECOND=-2344,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.roll(13, true);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2548,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=358,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=4,SECOND=57,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2548,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=358,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=4,SECOND=57,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1536, "16", 9L, 1537);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("16", actionEvent0.getActionCommand());
      assertEquals(1536, actionEvent0.getID());
      assertEquals(1537, actionEvent0.getModifiers());
      assertEquals(9L, actionEvent0.getWhen());
      assertNotNull(actionEvent0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      boolean boolean1 = jDayChooser0.isDoubleBuffered();
      assertTrue(boolean1);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean2);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean3);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      CaretEvent caretEvent0 = mock(CaretEvent.class, new ViolatedAssumptionAnswer());
      JYearChooser jYearChooser0 = new JYearChooser();
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jYearChooser0);
      
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      assertNotNull(date1);
      
      MetalTabbedPaneUI metalTabbedPaneUI0 = new MetalTabbedPaneUI();
      assertNotNull(metalTabbedPaneUI0);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertTrue(jTabbedPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTabbedPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTabbedPane0.isFocusCycleRoot());
      assertFalse(jTabbedPane0.getIgnoreRepaint());
      assertFalse(jTabbedPane0.isFocusTraversalPolicySet());
      assertNotNull(jTabbedPane0);
      
      Rectangle rectangle0 = jDayChooser0.getBounds();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "f,F^";
      stringArray0[2] = "We.Z";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      assertEquals(192, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getGreen());
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.hasSpinner());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jMonthChooser0);
      
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.hasSpinner());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(fopImage_ImageInfo0);
      
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getHeight());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(jpegImage0);
      
      Color color0 = jpegImage0.getTransparentColor();
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getHeight());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNull(color0);
      
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNull(jButton0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = jDayChooser0.setMaxSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      assertNotNull(date0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      assertNotNull(date1);
      
      MetalTabbedPaneUI metalTabbedPaneUI0 = new MetalTabbedPaneUI();
      assertNotNull(metalTabbedPaneUI0);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertTrue(jTabbedPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTabbedPane0.isFocusCycleRoot());
      assertFalse(jTabbedPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTabbedPane0.getIgnoreRepaint());
      assertFalse(jTabbedPane0.isFocusTraversalPolicySet());
      assertNotNull(jTabbedPane0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertNotNull(defaultCaret0);
      
      jDayChooser0.removeMouseMotionListener(defaultCaret0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      
      // Undeclared exception!
      try { 
        metalTabbedPaneUI0.getTabBounds(jTabbedPane0, (-1181));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTabbedPaneUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.weekdayForeground;
      assertEquals(90, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(164, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16754012), color0.getRGB());
      assertNotNull(color0);
      
      ColorSpace colorSpace0 = color0.getColorSpace();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(90, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(164, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16754012), color0.getRGB());
      assertTrue(colorSpace0.isCS_sRGB());
      assertEquals(3, colorSpace0.getNumComponents());
      assertEquals(5, colorSpace0.getType());
      assertNotNull(colorSpace0);
      
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(90, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(164, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16754012), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      AccessibleContext accessibleContext0 = jDayChooser0.getAccessibleContext();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(accessibleContext0);
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      MouseWheelListener[] mouseWheelListenerArray0 = jDayChooser0.getMouseWheelListeners();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(mouseWheelListenerArray0);
      
      Insets insets0 = jDayChooser0.getInsets();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.right);
      assertNotNull(insets0);
      
      insets0.bottom = (-120);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      insets0.bottom = 655;
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      insets0.bottom = (-120);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      Insets insets1 = jDayChooser0.getInsets(insets0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertSame(insets0, insets1);
      assertSame(insets1, insets0);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.right);
      assertEquals(0, insets1.right);
      assertEquals(0, insets1.top);
      assertEquals(0, insets1.left);
      assertEquals(0, insets1.bottom);
      assertNotNull(insets1);
      
      String string0 = jDayChooser0.getUIClassID();
      assertEquals("PanelUI", string0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(string0);
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      SystemColor systemColor0 = SystemColor.controlText;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getRed());
      
      jDayChooser0.setForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getRed());
      
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 3376);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertEquals(3376, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setYear((-1238));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setDay(2305);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Insets insets0 = jDayChooser0.getInsets();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.right);
      assertNotNull(insets0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      float float0 = jDayChooser0.getAlignmentY();
      assertEquals(0.5F, float0, 0.01F);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("English", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(string0);
      
      jDayChooser_DecoratorButton0.setLocale(locale0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 0, 138L, 10118, 0, '>', 28);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 12, true, jDayChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(focusEvent0.isTemporary());
      assertEquals(12, focusEvent0.getID());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(focusEvent0.isTemporary());
      assertEquals(12, focusEvent0.getID());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("i-");
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertNotNull(jCheckBoxMenuItem0);
      
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      assertNotNull(menuSelectionManager0);
      
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 135, 135, 1351, 135, '`', menuElementArray0, menuSelectionManager0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(135L, menuKeyEvent0.getWhen());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isActionKey());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(1344, menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isMetaDown());
      assertEquals(135, menuKeyEvent0.getKeyCode());
      assertEquals('`', menuKeyEvent0.getKeyChar());
      assertEquals(7, menuKeyEvent0.getModifiers());
      assertEquals(135, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isControlDown());
      assertNotNull(menuKeyEvent0);
      
      String string0 = menuKeyEvent0.paramString();
      assertEquals("unknown type,keyCode=135,keyText=Dead Diaeresis,keyChar='`',modifiers=Meta+Ctrl+Shift,extModifiers=Meta+Shift+Button1,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(135L, menuKeyEvent0.getWhen());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isActionKey());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(1344, menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isMetaDown());
      assertEquals(135, menuKeyEvent0.getKeyCode());
      assertEquals('`', menuKeyEvent0.getKeyChar());
      assertEquals(7, menuKeyEvent0.getModifiers());
      assertEquals(135, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isControlDown());
      assertNotNull(string0);
      
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(135L, menuKeyEvent0.getWhen());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isActionKey());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(1344, menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isMetaDown());
      assertEquals(135, menuKeyEvent0.getKeyCode());
      assertEquals('`', menuKeyEvent0.getKeyChar());
      assertEquals(7, menuKeyEvent0.getModifiers());
      assertEquals(135, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isControlDown());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      SystemColor systemColor0 = SystemColor.info;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(224, systemColor0.getRed());
      assertEquals((-2039808), systemColor0.getRGB());
      assertNotNull(systemColor0);
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(224, systemColor0.getRed());
      assertEquals((-2039808), systemColor0.getRGB());
      
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      PanelUI panelUI0 = jDayChooser0.getUI();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(panelUI0);
      
      jDayChooser0.setMaxDayCharacters((-33));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      
      defaultListCellRenderer_UIResource0.setRequestFocusEnabled(true);
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(jPanel0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(90, color0.getGreen());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(164, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 1, 1, 1, '9', 1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1, keyEvent0.getKeyCode());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(1, keyEvent0.getKeyLocation());
      assertEquals(1, keyEvent0.getModifiers());
      assertEquals(1L, keyEvent0.getWhen());
      assertEquals(1, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals('9', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1, keyEvent0.getKeyCode());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(1, keyEvent0.getKeyLocation());
      assertEquals(1, keyEvent0.getModifiers());
      assertEquals(1L, keyEvent0.getWhen());
      assertEquals(1, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertFalse(jTabbedPane0.isFocusTraversalPolicySet());
      assertTrue(jTabbedPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTabbedPane0.getIgnoreRepaint());
      assertFalse(jTabbedPane0.isFocusCycleRoot());
      assertFalse(jTabbedPane0.isFocusTraversalPolicyProvider());
      assertNotNull(jTabbedPane0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Container container0 = defaultListCellRenderer_UIResource0.getTopLevelAncestor();
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertNull(container0);
      
      defaultListCellRenderer_UIResource0.requestFocus();
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      
      KeyEvent keyEvent0 = new KeyEvent(defaultListCellRenderer_UIResource0, 38, (-2710L), 2, 41, '.');
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(38, keyEvent0.getID());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(2, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals((-2710L), keyEvent0.getWhen());
      assertEquals(41, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(128, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('.', keyEvent0.getKeyChar());
      assertNotNull(keyEvent0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      keyEvent0.setKeyChar('.');
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(38, keyEvent0.getID());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(2, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals((-2710L), keyEvent0.getWhen());
      assertEquals(41, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(128, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('.', keyEvent0.getKeyChar());
      
      keyEvent0.setKeyCode(38);
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(38, keyEvent0.getID());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(2, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals((-2710L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(128, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('.', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      
      int int0 = SerializerTrace.EVENTTYPE_PI;
      assertEquals(7, int0);
      
      int int1 = ICC_Profile.icSigDisplayClass;
      assertEquals(1835955314, int1);
      assertFalse(int1 == int0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(7, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(38, keyEvent0.getID());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(2, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals((-2710L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(128, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('.', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertFalse(jTabbedPane0.getIgnoreRepaint());
      assertFalse(jTabbedPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTabbedPane0.isFocusTraversalPolicySet());
      assertFalse(jTabbedPane0.isFocusCycleRoot());
      assertTrue(jTabbedPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jTabbedPane0);
      
      KeyEvent keyEvent0 = new KeyEvent(defaultListCellRenderer_UIResource0, 41, 2, 41, 41, '(');
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(41, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(41, keyEvent0.getModifiers());
      assertEquals('(', keyEvent0.getKeyChar());
      assertEquals(2L, keyEvent0.getWhen());
      assertEquals(41, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(8768, keyEvent0.getModifiersEx());
      assertNotNull(keyEvent0);
      
      keyEvent0.setKeyChar('(');
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(41, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(41, keyEvent0.getModifiers());
      assertEquals('(', keyEvent0.getKeyChar());
      assertEquals(2L, keyEvent0.getWhen());
      assertEquals(41, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(8768, keyEvent0.getModifiersEx());
      
      keyEvent0.setKeyCode(33);
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(41, keyEvent0.getModifiers());
      assertEquals('(', keyEvent0.getKeyChar());
      assertEquals(2L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(41, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(8768, keyEvent0.getModifiersEx());
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setYear((-1238));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      jDayChooser0.setMaxDayCharacters(2);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertFalse(boolean0);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertFalse(jTabbedPane0.getIgnoreRepaint());
      assertFalse(jTabbedPane0.isFocusTraversalPolicySet());
      assertTrue(jTabbedPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTabbedPane0.isFocusCycleRoot());
      assertFalse(jTabbedPane0.isFocusTraversalPolicyProvider());
      assertNotNull(jTabbedPane0);
      
      Boolean boolean1 = new Boolean("day");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis((-34L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMonth(5);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1116), 5, (-1116), 3409, 'n');
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(3409, keyEvent0.getKeyCode());
      assertEquals((-1152), keyEvent0.getModifiersEx());
      assertEquals((-2147483612), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-1116), keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(5L, keyEvent0.getWhen());
      assertEquals('n', keyEvent0.getKeyChar());
      assertNotNull(keyEvent0);
      
      keyEvent0.setKeyChar('n');
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(3409, keyEvent0.getKeyCode());
      assertEquals((-1152), keyEvent0.getModifiersEx());
      assertEquals((-2147483612), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-1116), keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(5L, keyEvent0.getWhen());
      assertEquals('n', keyEvent0.getKeyChar());
      
      keyEvent0.consume();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(3409, keyEvent0.getKeyCode());
      assertEquals((-1152), keyEvent0.getModifiersEx());
      assertEquals((-2147483612), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-1116), keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(5L, keyEvent0.getWhen());
      assertEquals('n', keyEvent0.getKeyChar());
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Color color0 = Color.DARK_GRAY;
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(64, color0.getRed());
      assertEquals((-12566464), color0.getRGB());
      assertEquals(64, color0.getBlue());
      assertEquals(64, color0.getGreen());
      assertNotNull(color0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.getVerifyInputWhenFocusTarget();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      ColorSpace colorSpace0 = color0.getColorSpace();
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(64, color0.getRed());
      assertEquals((-12566464), color0.getRGB());
      assertEquals(64, color0.getBlue());
      assertEquals(64, color0.getGreen());
      assertTrue(colorSpace0.isCS_sRGB());
      assertEquals(3, colorSpace0.getNumComponents());
      assertEquals(5, colorSpace0.getType());
      assertNotNull(colorSpace0);
      
      Box box0 = Box.createVerticalBox();
      assertFalse(box0.getIgnoreRepaint());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertNotNull(box0);
      
      box0.doLayout();
      assertFalse(box0.getIgnoreRepaint());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Insets insets0 = jDayChooser0.getInsets();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.right);
      assertNotNull(insets0);
      
      KeyEvent keyEvent0 = new KeyEvent(box0, (-959), 43, (-959), 35, 'l');
      assertFalse(box0.getIgnoreRepaint());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertEquals(35, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-960), keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('l', keyEvent0.getKeyChar());
      assertEquals(43L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertEquals((-959), keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals((-2147483647), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertNotNull(keyEvent0);
      
      keyEvent0.consume();
      assertFalse(box0.getIgnoreRepaint());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertEquals(35, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-960), keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('l', keyEvent0.getKeyChar());
      assertEquals(43L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertEquals((-959), keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals((-2147483647), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isConsumed());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(box0.getIgnoreRepaint());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertEquals(35, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-960), keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('l', keyEvent0.getKeyChar());
      assertEquals(43L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertEquals((-959), keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals((-2147483647), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isConsumed());
      
      jDayChooser0.setDoubleBuffered(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(90, color1.getGreen());
      assertEquals((-16754012), color1.getRGB());
      assertEquals(0, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(164, color1.getBlue());
      assertNotSame(color1, color0);
      assertFalse(color1.equals((Object)color0));
      assertNotNull(color1);
      
      SystemColor systemColor0 = SystemColor.info;
      assertEquals(224, systemColor0.getRed());
      assertEquals((-2039808), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertNotNull(systemColor0);
      
      FileMode fileMode0 = new FileMode();
      assertEquals("File", fileMode0.toString());
      assertNotNull(fileMode0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      defaultListCellRenderer_UIResource0.setRequestFocusEnabled(false);
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      MouseListener[] mouseListenerArray0 = defaultListCellRenderer_UIResource0.getMouseListeners();
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertNotNull(mouseListenerArray0);
      
      Boolean boolean1 = GVTAttributedCharacterIterator.TextAttribute.OVERLINE_ON;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      String string0 = CSSConstants.CSS_CADETBLUE_VALUE;
      assertEquals("cadetblue", string0);
      assertNotNull(string0);
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setMaxDayCharacters(4);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNull(jButton0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean1 = jDayChooser0.isFocusOwner();
      assertFalse(boolean1);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean1 == boolean0);
      
      AccessibleContext accessibleContext0 = jDayChooser0.getAccessibleContext();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(accessibleContext0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertNotNull(defaultTreeCellRenderer0);
      
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertNotNull(icon0);
      
      JButton jButton0 = new JButton("J\"4y0o", icon0);
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusCycleRoot());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jButton0);
      
      jDayChooser0.selectedDay = jButton0;
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusCycleRoot());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.selectedDay.isFocusCycleRoot());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.selectedDay.getIgnoreRepaint());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.selectedDay.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setYear((-1238));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
      assertEquals(228, color0.getGreen());
      assertNotNull(color0);
      
      jDayChooser0.setDay((-1238));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.keyReleased((KeyEvent) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(228, color0.getGreen());
      assertEquals(238, color0.getBlue());
      assertEquals(210, color0.getRed());
      assertEquals((-2956050), color0.getRGB());
      assertNotNull(color0);
      
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 238);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(238, focusEvent0.getID());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(238, focusEvent0.getID());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.maxSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertNotNull(date1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      SymbolTable symbolTable0 = new SymbolTable();
      assertNotNull(symbolTable0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isRequestFocusEnabled();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setYear((-1238));
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertNotNull(systemColor0);
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertNotNull(mockSimpleDateFormat0);
      
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      assertNull(hierarchyListener1);
      
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      assertNull(hierarchyListener2);
      
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 1560L, (byte)87, 37, 'w');
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getID());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(1560L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('w', keyEvent0.getKeyChar());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(23, keyEvent0.getModifiers());
      assertNotNull(keyEvent0);
      
      keyEvent0.setKeyChar('&');
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getID());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(1560L, keyEvent0.getWhen());
      assertEquals('&', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(23, keyEvent0.getModifiers());
      
      keyEvent0.consume();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getID());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(1560L, keyEvent0.getWhen());
      assertEquals('&', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isConsumed());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(23, keyEvent0.getModifiers());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser1.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getID());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(1560L, keyEvent0.getWhen());
      assertEquals('&', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isConsumed());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(23, keyEvent0.getModifiers());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(13, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMonth(38);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1116), 38, 21, 21, '*');
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1344, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(38L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals((-1116), keyEvent0.getID());
      assertEquals(21, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(21, keyEvent0.getKeyCode());
      assertEquals('*', keyEvent0.getKeyChar());
      assertNotNull(keyEvent0);
      
      keyEvent0.consume();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1344, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(38L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals((-1116), keyEvent0.getID());
      assertEquals(21, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(21, keyEvent0.getKeyCode());
      assertEquals('*', keyEvent0.getKeyChar());
      
      KeyStroke[] keyStrokeArray0 = jDayChooser0.getRegisteredKeyStrokes();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(keyStrokeArray0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1344, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(38L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals((-1116), keyEvent0.getID());
      assertEquals(21, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(21, keyEvent0.getKeyCode());
      assertEquals('*', keyEvent0.getKeyChar());
      
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 1801, '*', (-954), 38, '*');
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals('*', keyEvent1.getKeyChar());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(38, keyEvent1.getKeyCode());
      assertFalse(keyEvent1.isConsumed());
      assertEquals((-2147483642), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isAltDown());
      assertEquals(1801, keyEvent1.getID());
      assertFalse(keyEvent1.isShiftDown());
      assertFalse(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isMetaDown());
      assertTrue(keyEvent1.isControlDown());
      assertEquals((-960), keyEvent1.getModifiersEx());
      assertEquals(42L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isActionKey());
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertNotNull(keyEvent1);
      
      keyEvent1.consume();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent1.isConsumed());
      assertEquals('*', keyEvent1.getKeyChar());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(38, keyEvent1.getKeyCode());
      assertEquals((-2147483642), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isAltDown());
      assertEquals(1801, keyEvent1.getID());
      assertFalse(keyEvent1.isShiftDown());
      assertFalse(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isMetaDown());
      assertTrue(keyEvent1.isControlDown());
      assertEquals((-960), keyEvent1.getModifiersEx());
      assertEquals(42L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isActionKey());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      jDayChooser0.keyPressed(keyEvent1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent1.isConsumed());
      assertEquals('*', keyEvent1.getKeyChar());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(38, keyEvent1.getKeyCode());
      assertEquals((-2147483642), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isAltDown());
      assertEquals(1801, keyEvent1.getID());
      assertFalse(keyEvent1.isShiftDown());
      assertFalse(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isMetaDown());
      assertTrue(keyEvent1.isControlDown());
      assertEquals((-960), keyEvent1.getModifiersEx());
      assertEquals(42L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isActionKey());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      System.setCurrentTimeMillis(21);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean1 = jDayChooser0.isFocusOwner();
      assertFalse(boolean1);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean1 == boolean0);
      
      AccessibleContext accessibleContext0 = jDayChooser0.getAccessibleContext();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(accessibleContext0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertNotNull(defaultTreeCellRenderer0);
      
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertNotNull(icon0);
      
      JButton jButton0 = new JButton((String) null, icon0);
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertNotNull(jButton0);
      
      jDayChooser0.selectedDay = jButton0;
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.selectedDay.isFocusCycleRoot());
      assertTrue(jDayChooser0.selectedDay.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.selectedDay.getIgnoreRepaint());
      
      jDayChooser0.setYear((-1238));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.keyReleased((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jButton0.setActionCommand((String) null);
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((String) null, icon0, false);
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertNotNull(jCheckBoxMenuItem0);
      
      Icon icon1 = jDayChooser_DecoratorButton0.getDisabledSelectedIcon();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertNull(icon1);
      
      MapDialog mapDialog0 = new MapDialog();
      assertNull(mapDialog0.getName());
      assertFalse(mapDialog0.isSearchBarVisible());
      assertFalse(mapDialog0.isLimitSearchToRegion());
      assertEquals(1, MapDialog.SEARCH_DISTANCE_COLUMN);
      assertEquals(600000L, MapDialog.TILE_CACHE_PURGE_TIME_DEFAULT);
      assertNotNull(mapDialog0);
      
      MindMapController mindMapController0 = mapDialog0.getMindMapController();
      assertNull(mapDialog0.getName());
      assertFalse(mapDialog0.isSearchBarVisible());
      assertFalse(mapDialog0.isLimitSearchToRegion());
      assertEquals(1, MapDialog.SEARCH_DISTANCE_COLUMN);
      assertEquals(600000L, MapDialog.TILE_CACHE_PURGE_TIME_DEFAULT);
      assertNull(mindMapController0);
      
      InterpreterPool interpreterPool0 = new InterpreterPool();
      assertNotNull(interpreterPool0);
      
      InterpreterPool interpreterPool1 = new InterpreterPool();
      assertFalse(interpreterPool1.equals((Object)interpreterPool0));
      assertNotNull(interpreterPool1);
      
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 143, 5L, 1, 1, '(');
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(143, keyEvent0.getID());
      assertEquals('(', keyEvent0.getKeyChar());
      assertEquals(5L, keyEvent0.getWhen());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(1, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertNotNull(keyEvent0);
      
      keyEvent0.setKeyCode((-1238));
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(143, keyEvent0.getID());
      assertEquals('(', keyEvent0.getKeyChar());
      assertEquals(5L, keyEvent0.getWhen());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-1238), keyEvent0.getKeyCode());
      assertEquals(1, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(143, keyEvent0.getID());
      assertEquals('(', keyEvent0.getKeyChar());
      assertEquals(5L, keyEvent0.getWhen());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-1238), keyEvent0.getKeyCode());
      assertEquals(1, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      Font font0 = jDayChooser0.getFont();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNull(font0);
      
      defaultListCellRenderer_UIResource0.setFont((Font) null);
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 2);
      assertEquals("Sun Mar 02 02:02:00 GMT 1902", mockDate0.toString());
      assertNotNull(mockDate0);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertFalse(jTabbedPane0.getIgnoreRepaint());
      assertFalse(jTabbedPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTabbedPane0.isFocusCycleRoot());
      assertFalse(jTabbedPane0.isFocusTraversalPolicySet());
      assertTrue(jTabbedPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jTabbedPane0);
      
      Boolean boolean0 = new Boolean("day");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(defaultListCellRenderer_UIResource0, 39, 2, 39, 39, '(');
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals(8640, keyEvent0.getModifiersEx());
      assertEquals('(', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(39, keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(2L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertEquals(15, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals(8640, keyEvent0.getModifiersEx());
      assertEquals('(', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(39, keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(2L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      
      KeyEvent keyEvent1 = new KeyEvent(defaultListCellRenderer_UIResource0, '(', 2, 39, '(', '(');
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(40, keyEvent1.getID());
      assertEquals(40, keyEvent1.getKeyCode());
      assertEquals(8640, keyEvent1.getModifiersEx());
      assertFalse(keyEvent1.isAltDown());
      assertTrue(keyEvent1.isActionKey());
      assertTrue(keyEvent1.isAltGraphDown());
      assertFalse(keyEvent1.isConsumed());
      assertTrue(keyEvent1.isShiftDown());
      assertEquals(39, keyEvent1.getModifiers());
      assertEquals('(', keyEvent1.getKeyChar());
      assertEquals(2L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isControlDown());
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertNotNull(keyEvent1);
      
      keyEvent1.consume();
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(40, keyEvent1.getID());
      assertEquals(40, keyEvent1.getKeyCode());
      assertEquals(8640, keyEvent1.getModifiersEx());
      assertTrue(keyEvent1.isConsumed());
      assertFalse(keyEvent1.isAltDown());
      assertTrue(keyEvent1.isActionKey());
      assertTrue(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isShiftDown());
      assertEquals(39, keyEvent1.getModifiers());
      assertEquals('(', keyEvent1.getKeyChar());
      assertEquals(2L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isControlDown());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(22, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(40, keyEvent1.getID());
      assertEquals(40, keyEvent1.getKeyCode());
      assertEquals(8640, keyEvent1.getModifiersEx());
      assertTrue(keyEvent1.isConsumed());
      assertFalse(keyEvent1.isAltDown());
      assertTrue(keyEvent1.isActionKey());
      assertTrue(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isShiftDown());
      assertEquals(39, keyEvent1.getModifiers());
      assertEquals('(', keyEvent1.getKeyChar());
      assertEquals(2L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isControlDown());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      jDayChooser0.drawDays();
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(22, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      assertNull(databaseConnectionHook0.getName());
      assertEquals(1, (int)databaseConnectionHook0.getRole());
      assertNotNull(databaseConnectionHook0);
      
      Locale locale1 = Locale.US;
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("all", userAgentAdapter0.getMedia());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertNotNull(userAgentAdapter0);
      
      InterpreterPool interpreterPool0 = new InterpreterPool();
      assertNotNull(interpreterPool0);
      
      InterpreterPool interpreterPool1 = new InterpreterPool();
      assertFalse(interpreterPool1.equals((Object)interpreterPool0));
      assertNotNull(interpreterPool1);
      
      // Undeclared exception!
      try { 
        MultipleGradientPaint.CycleMethod.valueOf("plugins/collaboration/database/database_slave_starter_plugin");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.awt.MultipleGradientPaint.CycleMethod.plugins/collaboration/database/database_slave_starter_plugin
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jDayChooser0.decorationBordersVisible = false;
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 38, '*', '*', '*');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(38, keyEvent0.getID());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(8832, keyEvent0.getModifiersEx());
      assertEquals(42, keyEvent0.getKeyCode());
      assertEquals(38L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('*', keyEvent0.getKeyChar());
      assertEquals(42, keyEvent0.getModifiers());
      assertNotNull(keyEvent0);
      
      KeyStroke[] keyStrokeArray0 = jDayChooser0.getRegisteredKeyStrokes();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(keyStrokeArray0);
      
      int int0 = SVGCSSEngine.FLOOD_OPACITY_INDEX;
      assertEquals(20, int0);
      
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 1801, 0L, (-954), 38, '*');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(38, keyEvent1.getKeyCode());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(1801, keyEvent1.getID());
      assertEquals((-960), keyEvent1.getModifiersEx());
      assertEquals((-2147483642), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isShiftDown());
      assertTrue(keyEvent1.isControlDown());
      assertEquals('*', keyEvent1.getKeyChar());
      assertEquals(0L, keyEvent1.getWhen());
      assertFalse(keyEvent1.isConsumed());
      assertTrue(keyEvent1.isActionKey());
      assertFalse(keyEvent1.isAltGraphDown());
      assertFalse(keyEvent1.isAltDown());
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertNotNull(keyEvent1);
      
      int int1 = keyEvent1.getExtendedKeyCode();
      assertEquals(0, int1);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(38, keyEvent1.getKeyCode());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(1801, keyEvent1.getID());
      assertEquals((-960), keyEvent1.getModifiersEx());
      assertEquals((-2147483642), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isShiftDown());
      assertTrue(keyEvent1.isControlDown());
      assertEquals('*', keyEvent1.getKeyChar());
      assertEquals(0L, keyEvent1.getWhen());
      assertFalse(keyEvent1.isConsumed());
      assertTrue(keyEvent1.isActionKey());
      assertFalse(keyEvent1.isAltGraphDown());
      assertFalse(keyEvent1.isAltDown());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertFalse(int1 == int0);
      
      keyEvent1.consume();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(38, keyEvent1.getKeyCode());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(1801, keyEvent1.getID());
      assertEquals((-960), keyEvent1.getModifiersEx());
      assertEquals((-2147483642), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isShiftDown());
      assertTrue(keyEvent1.isControlDown());
      assertEquals('*', keyEvent1.getKeyChar());
      assertEquals(0L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isActionKey());
      assertTrue(keyEvent1.isConsumed());
      assertFalse(keyEvent1.isAltGraphDown());
      assertFalse(keyEvent1.isAltDown());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      keyEvent1.setSource((Object) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(38, keyEvent1.getKeyCode());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(1801, keyEvent1.getID());
      assertEquals((-960), keyEvent1.getModifiersEx());
      assertEquals((-2147483642), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isShiftDown());
      assertTrue(keyEvent1.isControlDown());
      assertEquals('*', keyEvent1.getKeyChar());
      assertEquals(0L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isActionKey());
      assertTrue(keyEvent1.isConsumed());
      assertFalse(keyEvent1.isAltGraphDown());
      assertFalse(keyEvent1.isAltDown());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      keyEvent1.consume();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(38, keyEvent1.getKeyCode());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(1801, keyEvent1.getID());
      assertEquals((-960), keyEvent1.getModifiersEx());
      assertEquals((-2147483642), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isShiftDown());
      assertTrue(keyEvent1.isControlDown());
      assertEquals('*', keyEvent1.getKeyChar());
      assertEquals(0L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isActionKey());
      assertTrue(keyEvent1.isConsumed());
      assertFalse(keyEvent1.isAltGraphDown());
      assertFalse(keyEvent1.isAltDown());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      jDayChooser0.keyPressed(keyEvent1);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(38, keyEvent1.getKeyCode());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(1801, keyEvent1.getID());
      assertEquals((-960), keyEvent1.getModifiersEx());
      assertEquals((-2147483642), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isShiftDown());
      assertTrue(keyEvent1.isControlDown());
      assertEquals('*', keyEvent1.getKeyChar());
      assertEquals(0L, keyEvent1.getWhen());
      assertTrue(keyEvent1.isActionKey());
      assertTrue(keyEvent1.isConsumed());
      assertFalse(keyEvent1.isAltGraphDown());
      assertFalse(keyEvent1.isAltDown());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Color color0 = Color.yellow;
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-256), color0.getRGB());
      assertNotNull(color0);
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-256), color0.getRGB());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setForeground(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-256), color0.getRGB());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 7);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(7, focusEvent0.getID());
      assertNotNull(focusEvent0);
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date1.toString());
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertNotNull(date1);
      
      Color color1 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals((-6029312), color1.getRGB());
      assertEquals(164, color1.getRed());
      assertNotSame(color1, color0);
      assertFalse(color1.equals((Object)color0));
      assertNotNull(color1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      jDayChooser0.setForeground(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-256), color0.getRGB());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotSame(color0, color1);
      assertFalse(color0.equals((Object)color1));
      
      jDayChooser0.setMonth(524);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }
}
