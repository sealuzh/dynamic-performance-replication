/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:40:27 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = 1509;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp0.toString();
      regexp1.name = "m|,hx?";
      regexp0.flags = 93;
      // Undeclared exception!
      try { 
        regexp1.maxCap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp1.op = regexp_Op1;
      regexp1.name = "\n";
      String string0 = regexp1.toString();
      assertEquals("\\B", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op1);
      regexp0.equals(regexp_Op0);
      regexp0.maxCap();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = 515;
      intArray0[1] = 515;
      regexp0.max = 1009;
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.toString();
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 18;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.min = (-2415);
      regexp1.name = "Runic";
      regexp0.equals(regexp1);
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("\b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-8);
      regexp0.runes = intArray0;
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.toString();
      Regexp.Op.values();
      regexp0.reinit();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp0.toString();
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 18;
      regexp0.flags = 18;
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      int[] intArray0 = new int[2];
      regexp0.runes = intArray0;
      regexp0.toString();
      regexp0.equals("[x00]");
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      regexp_Op1.isPseudo();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[x00]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[x00]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 569;
      regexp0.op = regexp_Op0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-8);
      intArray0[1] = 2189;
      regexp0.runes = intArray0;
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.toString();
      Regexp.Op.values();
      regexp0.reinit();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[1] = (-8);
      regexp0.runes = intArray0;
      Object object0 = new Object();
      regexp0.toString();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertNotNull(regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 65325;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp0.cap = 967;
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
      
      regexp0.op = regexp_Op0;
      regexp0.maxCap();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp.Op.values();
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      boolean boolean0 = regexp_Op0.isPseudo();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.op = regexp_Op0;
      regexp0.flags = (-19);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      regexp1.cap = 44;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp0.equals(regexp0);
      int int0 = regexp1.max;
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertFalse(regexp_OpArray1.equals((Object)regexp_OpArray0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      String string0 = regexp0.toString();
      assertEquals("(?-s:.)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 2923;
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp0);
      regexp0.equals(regexp2);
      regexp2.maxCap();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op1);
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("tn&S1:vB,RGa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.tn&S1:vB,RGa
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = (-1691);
      intArray0[6] = 5;
      regexp0.runes = intArray0;
      regexp1.max = 5;
      regexp1.equals(regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp.Op.values();
      regexp0.toString();
      assertFalse(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("tn&S1:vB,RGa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.tn&S1:vB,RGa
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 3;
      intArray0[2] = (-2415);
      intArray0[3] = 45;
      regexp0.runes = intArray0;
      String string0 = regexp0.toString();
      assertEquals("[\\x06-\\x03\\xfffff691-\\-]", string0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp.Op.values();
      Object object0 = new Object();
      boolean boolean0 = regexp1.equals((Object) null);
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Object object1 = new Object();
      regexp1.equals(object1);
      Regexp.Op.values();
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp2);
      boolean boolean1 = regexp1.equals(regexp3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "";
      regexp0.min = 1299;
      regexp0.min = 32;
      regexp0.name = "";
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp1.min = 2938;
      regexp1.flags = 1299;
      regexp1.toString();
      Object object1 = new Object();
      regexp0.equals(object1);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 2923;
      regexp0.equals(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      regexp0.reinit();
      regexp0.cap = 6;
      regexp0.name = "@Hs";
      regexp0.maxCap();
      Regexp.Op.values();
      regexp1.maxCap();
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp0.subs = regexpArray0;
      regexp0.reinit();
      int int0 = regexp0.min;
      regexp0.name = "kZF:z%R39(^x*";
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      regexp0.maxCap();
      Regexp.Op.values();
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.equals(regexp_Op0);
      regexp1.name = "kZF:z%R39(^x*";
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp0.op.isPseudo();
      int int0 = regexp2.flags;
      regexp2.name = "";
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      Object object1 = new Object();
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      String string0 = regexp1.toString();
      assertEquals("\\A?", string0);
      
      boolean boolean0 = regexp1.equals(object0);
      assertFalse(boolean0);
      
      regexp1.equals(regexp1);
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp2.equals((Object)regexp1));
      
      boolean boolean1 = regexp0.equals(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      int int0 = regexp1.cap;
      Regexp.Op regexp_Op2 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op2);
      regexp2.equals("");
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("zOe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.zOe
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Object object0 = new Object();
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.toString();
      Object object1 = new Object();
      regexp1.equals(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Object object2 = new Object();
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
      
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      regexp3.subs = regexpArray0;
      Regexp regexp5 = new Regexp(regexp2);
      regexp5.flags = 43002;
      regexp0.equals(regexp5);
      assertFalse(regexp5.equals((Object)regexp2));
      
      regexp3.toString();
      regexp1.equals(object0);
      regexp1.equals("Bopomofo");
      String string0 = regexp2.name;
      regexp2.toString();
      regexp1.maxCap();
      regexp1.toString();
      Regexp.Op.values();
      regexp1.reinit();
      assertTrue(regexp1.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op.values();
      regexp0.cap = (-2445);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.name = "Q.J*7\"GY3vW";
      regexp0.equals(regexp1);
      Regexp regexp2 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 4;
      Regexp regexp1 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp0.equals(regexp1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      regexp0.op = regexp_Op0;
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.op.isPseudo();
      Regexp[] regexpArray0 = new Regexp[12];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      Object object0 = new Object();
      regexp1.toString();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertNotNull(regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexp0.max = (-2246);
      Regexp regexp2 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2246);
      intArray0[1] = (-2246);
      intArray0[2] = (-2246);
      intArray0[3] = (-2246);
      intArray0[4] = (-2246);
      intArray0[5] = (-2246);
      intArray0[6] = 917502;
      intArray0[7] = (-1402);
      boolean boolean0 = regexp0.equals(regexp2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op1);
      String string0 = regexp0.name;
      Object object0 = new Object();
      Regexp regexp1 = new Regexp(regexp0);
      Object object1 = new Object();
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[21];
      regexpArray0[0] = regexp0;
      String string1 = regexp1.name;
      regexpArray0[2] = regexp0;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp2.subs = regexpArray0;
      regexp0.equals(regexp0);
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0.op);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp0.cap = (-1622);
      regexp1.equals(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp2);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      String string0 = regexp0.name;
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexp1.name = "";
      regexp1.subs = regexpArray0;
      int int0 = regexp1.cap;
      Regexp regexp2 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_LINE;
      regexpArray0[0].op = regexp_Op2;
      regexp3.equals("");
      // Undeclared exception!
      try { 
        regexp1.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.maxCap();
      regexp0.flags = (-513);
      regexp_Op0.isPseudo();
      regexp0.op = regexp_Op0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = "Imperial_Aramaic";
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp1.op = regexp_Op1;
      regexp0.name = "Imperial_Aramaic";
      regexp1.op = regexp_Op0;
      regexp1.op = regexp_Op0;
      regexp1.reinit();
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Imperial_Aramaic");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Imperial_Aramaic
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op1);
      String string0 = regexp0.name;
      Object object0 = new Object();
      Regexp regexp1 = new Regexp(regexp0);
      Object object1 = new Object();
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[21];
      regexpArray0[20] = regexp0;
      String string1 = regexp1.name;
      regexpArray0[2] = regexp0;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp2.subs = regexpArray0;
      regexp0.equals(regexp0);
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      regexp0.op = regexp_Op0;
      String string0 = regexp0.name;
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.op.isPseudo();
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp[] regexpArray1 = new Regexp[1];
      regexpArray1[0] = regexp1;
      regexp1.subs = regexpArray1;
      regexpArray0[0] = regexp0;
      regexp1.cap = (-4368);
      regexp1.subs = regexpArray0;
      int int0 = regexp0.cap;
      regexp0.equals("?)']nnRF^");
      regexp1.name = "kZFvz%+39(^x*";
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = new Regexp(regexp2);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      regexpArray0[0].op = regexp_Op2;
      Regexp regexp4 = new Regexp(regexp0);
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp1);
      int int1 = regexp1.flags;
      int int2 = regexp0.cap;
      regexp_Op0.isPseudo();
      Object object0 = new Object();
      regexp3.maxCap();
      regexp0.maxCap();
      Regexp.Op regexp_Op3 = Regexp.Op.STAR;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Lycian");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Lycian
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[4];
      intArray0[2] = (-2391);
      intArray0[2] = 57;
      regexp0.runes = intArray0;
      int int0 = regexp0.cap;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Object object0 = new Object();
      regexp0.flags = 57;
      regexp0.toString();
      Object object1 = new Object();
      Object object2 = new Object();
      Regexp regexp4 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp regexp5 = new Regexp(regexp_Op2);
      regexp1.maxCap();
      regexp0.reinit();
      regexp0.reinit();
      regexp5.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[^x00-x{10FFFF}]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[^x00-x{10FFFF}]
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
