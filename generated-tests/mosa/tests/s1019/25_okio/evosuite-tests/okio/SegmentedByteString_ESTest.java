/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:55:07 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      segmentedByteString0.write(pipedOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      buffer0.write(byteArray0, (int) (byte)1, (int) (byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)1);
      assertEquals(1, segmentedByteString0.size());
      
      ByteString byteString0 = segmentedByteString0.substring((int) (byte)1, (int) (byte)1);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(pipedOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.rangeEquals((-931), (byte[]) null, (-931), (-931));
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      buffer0.write(byteArray0, (int) (byte)1, (int) (byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)1);
      int int0 = segmentedByteString0.indexOf(byteArray0, (int) (byte)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteString byteString0 = ByteString.encodeUtf8("K5Kg=a0c&fNC");
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      boolean boolean0 = segmentedByteString0.rangeEquals((-1548), (ByteString) null, 7204, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      ByteString.encodeUtf8("K5Kg=a0c&fNC");
      segmentedByteString0.equals("K5Kg=a0c&fNC");
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.encodeUtf8("K5Kg=a0c&fNC");
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      buffer0.write(byteArray0, (int) (byte)1, (int) (byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)1);
      segmentedByteString0.write(buffer0);
      segmentedByteString0.hashCode();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      buffer0.write(byteArray0, (int) (byte)1, (int) (byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)1);
      String string0 = segmentedByteString0.base64Url();
      assertEquals("AA==", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      buffer0.write(byteArray0, (int) (byte)1, (int) (byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)1);
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1102L));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.sha256();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte)12;
      Buffer buffer1 = buffer0.write(byteArray0, 0, (int) (byte)12);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)12);
      byte byte0 = segmentedByteString0.getByte(0);
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte)12;
      Buffer buffer1 = buffer0.write(byteArray0, 0, (int) (byte)12);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)12);
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = segmentedByteString0.startsWith(byteString0);
      assertEquals(12, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)5;
      Buffer buffer1 = buffer0.write(byteArray0, 0, (int) (byte)5);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)5);
      segmentedByteString0.startsWith(byteArray0);
      boolean boolean0 = segmentedByteString0.startsWith((ByteString) segmentedByteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      Buffer buffer1 = buffer0.write(byteArray0, 0, (int) (byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)1);
      boolean boolean0 = segmentedByteString0.startsWith((ByteString) segmentedByteString0);
      byte[] byteArray1 = new byte[0];
      boolean boolean1 = segmentedByteString0.rangeEquals(0, byteArray1, 0, (int) (byte)1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      Buffer buffer1 = buffer0.write(byteArray0, 0, (int) (byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("O", true);
      segmentedByteString0.write(mockFileOutputStream0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)5;
      Buffer buffer1 = buffer0.write(byteArray0, 0, (int) (byte)5);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)5);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.equals(byteString0);
      Buffer buffer2 = new Buffer();
      segmentedByteString0.write(buffer2);
      assertEquals(5L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      buffer0.write(byteArray0, 0, (int) (byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)1);
      ByteString byteString0 = segmentedByteString0.substring((int) (byte)1);
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)5;
      Buffer buffer1 = buffer0.write(byteArray0, 0, (int) (byte)5);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)5);
      ByteString byteString0 = ByteString.encodeUtf8("w");
      boolean boolean0 = segmentedByteString0.rangeEquals(443, byteArray0, (-145), (-1936));
      boolean boolean1 = segmentedByteString0.equals(byteString0);
      assertEquals(5, segmentedByteString0.size());
      assertTrue(boolean1 == boolean0);
      
      segmentedByteString0.internalArray();
      byte[] byteArray1 = segmentedByteString0.toByteArray();
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)12;
      Buffer buffer1 = buffer0.write(byteArray0, 0, (int) (byte)12);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)12);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("X|bnZ$\")$V0");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      segmentedByteString0.endsWith(byteString0);
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=12 content=0c0000000000000000000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }
}
