/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 15:57:09 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 58;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(68, 58);
      rowMajorSparseMatrix0.maxInColumn(13);
      rowMajorSparseMatrix0.copyOfRows(58);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(13, vectorFunction0);
      // Undeclared exception!
      rowMajorSparseMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(113, 113, (-6.0));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(113, 2826.865275);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 113, 1270, 113, 113, 1372, 115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 113, 1270
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.identity(0);
      matrix0.hashCode();
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      NumberFormat.getCurrencyInstance(locale0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.ITALIAN;
      locale1.getDisplayScript();
      locale0.getDisplayCountry(locale1);
      Locale.setDefault(locale_Category0, locale0);
      NumberFormat.getIntegerInstance();
      matrix0.mkString(numberFormat0, "Wrong slice range: [", "org.la4j.iterator.JoinFunction$2");
      matrix0.rank();
      matrix0.sum();
      matrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(4);
      sparseVector0.manhattanNorm();
      DenseVector denseVector0 = DenseVector.zero(4);
      denseVector0.norm();
      sparseVector0.subtract((Vector) denseVector0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      
      Matrix matrix1 = Matrix.identity(4);
      matrix1.product();
      matrix1.equals(matrix0, (double) 4);
      assertEquals(4, matrix0.rows());
      
      String string0 = matrix1.toCSV();
      assertEquals("1.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 1.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      Matrix matrix1 = matrix0.removeLastRow();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(986, 3);
      matrix0.hashCode();
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      matrix1.mkString(numberFormat0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.0, columnMajorSparseMatrix1.density(), 0.01);
      
      Vector vector0 = Vector.zero(786);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow(784, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 786. Should be: 3.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket vector array real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.diagonal(0, 0);
      matrix0.setColumn(0, (double) 0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(1000, 0, (double) 1000, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(7);
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      rowMajorSparseMatrix0.equals((Object) null);
      intArray0[5] = (-1100);
      intArray0[6] = 7;
      intArray0[7] = 7;
      rowMajorSparseMatrix0.power(7);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      rowMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      intArray0[8] = 7;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(113, 113, (-6.0));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(113, 2826.865275);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 113, 1260, (-2255), (-2255), 1372, 115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -2255, -2255
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1000, 2246, 440);
      // Undeclared exception!
      sparseMatrix0.insertColumn(1000, (Vector) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      MockRandom mockRandom0 = new MockRandom(7);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(7, 115, 0.964, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 2, 2, 2, (-150), 115, 1524);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 2, -150
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(6);
      matrix0.euclideanNorm();
      Matrix matrix1 = matrix0.removeFirstRow();
      matrix1.copyOfShape(6, 6);
      Matrix.constant(5, 2562, 2562);
      MockRandom mockRandom0 = new MockRandom(6);
      Matrix.randomSymmetric(6, mockRandom0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.add(2.449489742783178);
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix0.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2206, 1.0111062908331953E-13);
      // Undeclared exception!
      matrix0.mkString("org.la4j.linear.SeidelSolver", "org.la4j.linear.SeidelSolver");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom((-2259L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(6, mockRandom0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte) (-64);
      mockRandom0.nextBytes(byteArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 6, 9);
      rowMajorSparseMatrix0.max();
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Matrix matrix1 = matrix0.blankOfRows(6);
      matrix0.min();
      denseMatrix0.product();
      // Undeclared exception!
      try { 
        matrix1.power((-938));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -938.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 10, mockRandom0);
      denseMatrix0.determinant();
      mockRandom0.longs((long) 10, 2499L);
      Matrix matrix0 = Matrix.identity(10);
      DenseVector denseVector0 = DenseVector.unit(5);
      // Undeclared exception!
      try { 
        matrix0.setColumn(Integer.MAX_VALUE, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 5. Should be: 10.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 266;
      Matrix matrix0 = Matrix.diagonal(266, 266);
      // Undeclared exception!
      try { 
        matrix0.removeColumn((-406));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..265
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(10, 10);
      Matrix matrix1 = Matrix.identity(1649);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      boolean boolean0 = matrix0.equals((Matrix) denseMatrix0, (double) 10);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix1, 4, 1649);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 4 rows and 1649 cols at 0, 0 in a 10x10 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ColumnMajorSparseMatrix.fromCSV("0.000");
      int int0 = (-2082408384);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-108);
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.longs();
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        SparseMatrix.random((-2082408384), (-2082408384), (double) (-2082408384), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(911, 911, (-1181.59));
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1181.59);
      doubleArray1[1] = (double) 911;
      doubleArray1[2] = (-2695.35634438954);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.hadamardProduct(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 911x911 does not equal to 1x3.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1469);
      DenseMatrix denseMatrix1 = DenseMatrix.unit(1000, 1469);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) denseMatrix1, 1469, 409, 1000, 1000, 1000, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1469, 409
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(37, 37);
      DenseVector denseVector0 = DenseVector.unit(46);
      // Undeclared exception!
      try { 
        matrix0.setRow(9, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 46. Should be: 37.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 12.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 12.0;
      doubleArray2[1] = 12.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 12.0;
      doubleArray3[1] = 12.0;
      doubleArray3[2] = 12.0;
      doubleArray3[3] = 12.0;
      doubleArray3[4] = 12.0;
      doubleArray3[5] = 12.0;
      doubleArray3[6] = 12.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 12.0;
      doubleArray4[1] = 12.0;
      doubleArray4[2] = 12.0;
      doubleArray4[3] = 2249.874010108807;
      doubleArray4[4] = 12.0;
      doubleArray4[5] = 12.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 2249.874010108807;
      doubleArray5[1] = 2249.874010108807;
      doubleArray5[2] = 12.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 2249.874010108807;
      doubleArray7[1] = 12.0;
      doubleArray7[2] = 12.0;
      doubleArray7[3] = 2249.874010108807;
      doubleArray7[4] = 12.0;
      doubleArray7[5] = (-3803.461213721555);
      doubleArray7[6] = 1420.0;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(33, 12.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 929.670851197;
      doubleArray2[1] = 1755.96591008;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix1 = ooPlaceKroneckerProduct0.applyCommon(matrix0, matrix0);
      boolean boolean0 = matrix0.equals(matrix1, (-505.72059));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 2;
      int int1 = 1383;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2, 1383);
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 943.451;
      doubleArray2[1] = 12.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-52.0);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.75;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.25375431228228207;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 943.451;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.75;
      doubleArray6[2] = 12.0;
      doubleArray6[3] = 244.651530732;
      doubleArray6[4] = 2.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 1.0;
      doubleArray6[7] = 1.0;
      doubleArray6[8] = 0.964;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 0.75;
      doubleArray7[1] = (-1.0);
      doubleArray7[2] = 943.451;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 12.0;
      doubleArray7[6] = 1.0;
      doubleArray7[7] = 0.964;
      doubleArray7[8] = 0.75;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 1.0;
      doubleArray8[1] = (-52.0);
      doubleArray8[2] = (-52.0);
      doubleArray8[3] = (-52.0);
      doubleArray8[4] = 0.75;
      doubleArray0[7] = doubleArray8;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapColumns(13, (-2049));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 745.527;
      doubleArray1[2] = 6.0;
      doubleArray1[3] = (-426.37);
      doubleArray1[4] = (-3872.41);
      doubleArray1[5] = 1808.331;
      doubleArray1[6] = 1602.77645084;
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      sparseMatrix0.swapRows(3810, 3810);
      assertTrue(sparseMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 4.9E-324;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-513.23098);
      doubleArray1[3] = 4.9E-324;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.017830630622808825;
      doubleArray1[6] = 2.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.spliterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray2 = denseMatrix0.foldColumns(vectorAccumulator0);
      denseMatrix0.swapColumns(6, 1);
      denseMatrix0.manhattanNorm();
      denseMatrix0.toMatrixMarket();
      Matrix.from1DArray(1032, 260, doubleArray1);
      Matrix.from1DArray(260, 9, doubleArray2);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInColumn(1032);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 6.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-906.712241338);
      doubleArray1[3] = (-1124.97938051055);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-906.712241338);
      doubleArray2[2] = (-906.712241338);
      doubleArray2[3] = 6.0;
      doubleArray2[4] = 6.0;
      doubleArray2[5] = 6.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 6.0;
      doubleArray3[2] = (-135.1481897698);
      doubleArray3[3] = 6.0;
      doubleArray3[4] = (-1124.97938051055);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 6.0;
      doubleArray4[1] = 6.0;
      doubleArray4[2] = (-135.1481897698);
      doubleArray4[3] = 6.0;
      doubleArray4[4] = (-135.1481897698);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-1124.97938051055);
      doubleArray5[1] = (-1124.97938051055);
      doubleArray5[2] = (-906.712241338);
      doubleArray5[3] = 6.0;
      doubleArray5[4] = (-1124.97938051055);
      doubleArray5[5] = (-135.1481897698);
      doubleArray5[6] = (-1124.97938051055);
      doubleArray0[4] = doubleArray5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.swapColumns(14, 14);
      assertEquals(20, rowMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SparseMatrix.zero(1000, 2246, 2246);
      Matrix matrix0 = Matrix.zero(1000, 1000);
      // Undeclared exception!
      matrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 6;
      int int1 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 7);
      denseMatrix0.equals((Object) null);
      Matrix matrix0 = denseMatrix0.rotate();
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 1650;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1650);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.copyOfShape(1650, 1650);
      Matrix matrix2 = matrix0.blankOfColumns(1650);
      int int1 = (-539);
      int int2 = 5;
      double double0 = 0.0;
      matrix0.equals(matrix1, 0.0);
      Vector.constant(1650, 0.0);
      // Undeclared exception!
      try { 
        matrix2.blankOfShape((-539), 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -539x5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double double0 = denseMatrix0.product();
      denseMatrix0.getColumn(174);
      denseMatrix0.swapColumns(174, 48);
      Matrix matrix0 = denseMatrix0.shuffle();
      double double1 = matrix0.max();
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 7;
      SparseVector sparseVector0 = SparseVector.zero(7, 7);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = 0.0;
      Matrix matrix0 = Matrix.from1DArray(8, 8, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = 8;
      intArray0[6] = 8;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 686;
      int int1 = 3;
      ColumnMajorSparseMatrix.zero(686, 3, 686);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 882);
      matrix0.setAll((-1260.096));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 882;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-701.425494841);
      doubleArray0[3] = (double) 882;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateColumn(0, vectorFunction0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      denseVector0.mkString(numberFormat0, (String) null);
      denseVector0.max();
      denseVector0.multiply((double) 882);
      // Undeclared exception!
      try { 
        matrix0.multiply((Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 4 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.iterator();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      SparseVector sparseVector0 = SparseVector.zero(6, 2782);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        denseMatrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 6 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.041541017950350194;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      int int0 = (-487);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-487));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(3, 598, 1.0, (Random) mockRandom0);
      sparseMatrix0.toMatrixMarket();
      sparseMatrix0.hashCode();
      Matrix matrix0 = sparseMatrix0.blankOfColumns(598);
      matrix0.removeFirstRow();
      sparseMatrix0.toSparseMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(2818, (-193), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2818x-193
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1938.816323279399);
      doubleArray1[1] = 3.56297101041027;
      doubleArray1[2] = (-278.092145254701);
      doubleArray1[3] = (-198.4);
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 5);
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(5, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      mockRandom0.nextLong();
      Matrix matrix0 = Matrix.randomSymmetric(2, mockRandom0);
      mockRandom0.doubles((double) 0L, 1007.37990572521);
      matrix0.toCSV();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        Vector.unit((-245));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(17, 17);
      matrix0.manhattanNorm();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        matrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(17, 17, 17);
      columnMajorSparseMatrix0.get(3, 3);
      columnMajorSparseMatrix0.determinant();
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (-839.05);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 3.164553961463552E-13;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (double) 3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 3;
      doubleArray3[2] = (-839.05);
      doubleArray3[3] = 3.164553961463552E-13;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.subtract((Matrix) rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 17x17 does not equal to 3x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(32, 32);
      Matrix matrix1 = matrix0.blank();
      matrix0.transpose();
      matrix0.sliceTopLeft(7, 32);
      matrix1.rowMajorIterator();
      // Undeclared exception!
      matrix1.transpose();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      byte[] byteArray0 = new byte[7];
      mockRandom0.longs();
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      Matrix matrix0 = Matrix.randomSymmetric(4, mockRandom0);
      matrix0.columns();
      matrix0.toColumnVector();
      matrix0.rank();
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft((-2054114792), (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-2054114792][0..1].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.25375431228228207;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.25375431228228207;
      doubleArray2[1] = 0.25375431228228207;
      doubleArray2[2] = 0.25375431228228207;
      doubleArray2[3] = 0.25375431228228207;
      doubleArray2[4] = 0.25375431228228207;
      doubleArray2[5] = 0.25375431228228207;
      doubleArray2[6] = 0.25375431228228207;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.25375431228228207;
      doubleArray3[1] = (-841.090574895);
      doubleArray3[2] = 0.25375431228228207;
      doubleArray3[3] = 0.25375431228228207;
      doubleArray3[4] = 0.25375431228228207;
      doubleArray3[5] = 0.25375431228228207;
      doubleArray3[6] = 0.25375431228228207;
      doubleArray3[7] = 0.25375431228228207;
      doubleArray3[8] = 0.25375431228228207;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-841.090574895);
      doubleArray4[1] = 0.25375431228228207;
      doubleArray4[2] = (-841.090574895);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-841.090574895);
      doubleArray5[1] = 0.25375431228228207;
      doubleArray5[2] = (-841.090574895);
      doubleArray5[3] = (-841.090574895);
      doubleArray5[4] = (-841.090574895);
      doubleArray5[5] = (-841.090574895);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 0.25375431228228207;
      doubleArray6[1] = (-841.090574895);
      doubleArray6[2] = (-841.090574895);
      doubleArray6[3] = (-841.090574895);
      doubleArray6[4] = (-841.090574895);
      doubleArray6[5] = 0.25375431228228207;
      doubleArray6[6] = (-841.090574895);
      doubleArray6[7] = 0.25375431228228207;
      doubleArray6[8] = 0.25375431228228207;
      doubleArray0[5] = doubleArray6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 917.97658;
      doubleArray1[2] = (-2005.6029648641652);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 917.97658;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 917.97658;
      doubleArray3[3] = 917.97658;
      doubleArray3[4] = 917.97658;
      doubleArray3[5] = (-2005.6029648641652);
      doubleArray3[6] = 917.97658;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-2005.6029648641652);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 917.97658;
      doubleArray5[1] = (-2005.6029648641652);
      doubleArray5[2] = (-2005.6029648641652);
      doubleArray5[3] = (-2005.6029648641652);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-2005.6029648641652);
      doubleArray5[6] = (-2005.6029648641652);
      doubleArray5[7] = (-2005.6029648641652);
      doubleArray5[8] = 917.97658;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.blankOfColumns((-2109));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1280, 5);
      int int1 = 32;
      columnMajorSparseMatrix0.blankOfRows(9);
      Matrix matrix0 = columnMajorSparseMatrix0.copy();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transformRow(5, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom(5);
      DenseVector denseVector0 = DenseVector.random(32, mockRandom0);
      // Undeclared exception!
      try { 
        matrix1.insertColumn(9, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 961;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(961, 961);
      columnMajorSparseMatrix0.minInRow(8);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2360;
      doubleArray0[1] = (double) 2360;
      doubleArray0[2] = (double) 2360;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2360, 961, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 1698.341328;
      Matrix matrix0 = Matrix.constant(9, 9, 1698.341328);
      matrix0.product();
      int int0 = 3;
      matrix0.setRow(3, (double) 3);
      matrix0.shuffle();
      int int1 = (-2110);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-2110), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1154;
      int int1 = 9;
      Matrix matrix0 = Matrix.zero(1154, 9);
      Matrix matrix1 = null;
      int int2 = 622;
      int int3 = 436;
      // Undeclared exception!
      try { 
        matrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1183.99995;
      doubleArray1[1] = (-1736.782446391475);
      doubleArray1[2] = 0.49174451296796506;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.49174451296796506;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.49174451296796506;
      doubleArray2[3] = (-1736.782446391475);
      doubleArray2[4] = 0.49174451296796506;
      doubleArray2[5] = (-1736.782446391475);
      doubleArray2[6] = 0.49174451296796506;
      doubleArray2[7] = (-1736.782446391475);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1183.99995;
      doubleArray3[1] = 1183.99995;
      doubleArray3[2] = (-1736.782446391475);
      doubleArray3[3] = 0.49174451296796506;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      denseMatrix0.toCSV(numberFormat0);
      denseMatrix0.subtract(0.49174451296796506);
      MockRandom mockRandom0 = new MockRandom((-1447));
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1447), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 957;
      Matrix matrix0 = Matrix.zero(957, 957);
      matrix0.subtract((double) 957);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      // Undeclared exception!
      matrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 6;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(6);
      SparseMatrix sparseMatrix0 = SparseMatrix.random(6, 6, 0.0, (Random) mockRandom0);
      long long0 = 0L;
      mockRandom0.ints(0L);
      double double1 = 0.0;
      sparseMatrix0.setAll(0.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.transformRow(6, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 3912, 3912);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0, 0);
      String string0 = "org.la4j.Vector$1";
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) denseMatrix0, 1, 3912);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 3912 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(656);
      DenseVector denseVector0 = DenseVector.random(656, mockRandom0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      double double0 = matrix0.minInColumn(1);
      assertEquals(0.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 1255;
      int int1 = Integer.MAX_VALUE;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(1255, Integer.MAX_VALUE, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = (-1.0);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-1.0);
      doubleArray8[2] = (-1.0);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 3.164553961463552E-13;
      doubleArray8[7] = 0.0;
      doubleArray8[8] = (-1.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = 3.164553961463552E-13;
      doubleArray9[1] = (-1.0);
      doubleArray9[2] = 3.164553961463552E-13;
      doubleArray9[3] = 3.164553961463552E-13;
      doubleArray0[8] = doubleArray9;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.power(2676);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 9 does not equal to 2.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1000, 2246, 440);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn((-4160), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2245
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.diagonal(8, (-2219.1089));
      matrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(8, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 779);
      Matrix matrix1 = matrix0.blank();
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      matrix1.toMatrixMarket(numberFormat0);
      // Undeclared exception!
      try { 
        matrix1.copyOfRows((-46));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -46x779
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      matrix0.removeLastRow();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(986, 3);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 2012, 9, (-1908874352), 986, (-2547), (-1908874352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2547x-1908874352
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = matrix0.multiply(1.1404738763282678);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 9, 1052, 1, (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1x-694
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.slice(0, (-3166), 450, 1845);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-3166' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1000L);
      DenseVector denseVector0 = DenseVector.random(1832, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.removeColumn(526);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 10;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 16, mockRandom0);
      long long0 = 2499L;
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(6);
      Matrix matrix0 = denseVector0.toRowMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      MatrixInverter matrixInverter0 = matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertNotNull(matrixInverter0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 3912, 3912);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 3912, 1);
      String string0 = "org.la4j.Vector$1";
      // Undeclared exception!
      rowMajorSparseMatrix0.insert((Matrix) denseMatrix0, 1, 3912);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 6;
      int int1 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 7);
      denseMatrix0.equals((Object) denseMatrix0);
      Matrix matrix0 = denseMatrix0.rotate();
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1912, 1912);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.identity(1912);
      columnMajorSparseMatrix1.rowMajorIterator();
      columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      // Undeclared exception!
      try { 
        Matrix.zero((-826), 707);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(175);
      DenseMatrix denseMatrix0 = DenseMatrix.random(4, 4, mockRandom0);
      denseMatrix0.equals((Object) "org.la4j.Vectors$1");
      Locale locale0 = Locale.ROOT;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      NumberFormat.getIntegerInstance();
      Locale locale1 = Locale.FRENCH;
      mockRandom0.nextInt();
      locale0.getDisplayScript(locale1);
      NumberFormat.getIntegerInstance();
      denseMatrix0.mkString(numberFormat0, "\n", "The exponent should be positive: ");
      denseMatrix0.manhattanNorm();
      mockRandom0.nextInt();
      mockRandom0.nextGaussian();
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      int int1 = 2282;
      // Undeclared exception!
      try { 
        denseMatrix0.getRow((-2142114937));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2142114937
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 973;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(973, 973);
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 973;
      doubleArray2[1] = (double) 973;
      doubleArray2[2] = (double) 973;
      doubleArray2[3] = (double) 973;
      doubleArray2[4] = (double) 973;
      doubleArray2[5] = (double) 973;
      doubleArray2[6] = (double) 973;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 973;
      doubleArray3[1] = (double) 973;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 973;
      doubleArray4[1] = (double) 973;
      doubleArray4[2] = (double) 973;
      doubleArray4[3] = (double) 973;
      doubleArray4[4] = (double) 973;
      doubleArray4[5] = (double) 973;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 973;
      doubleArray5[1] = (double) 973;
      doubleArray5[2] = (double) 973;
      doubleArray5[3] = (double) 973;
      doubleArray5[4] = (-1024.9250955);
      doubleArray5[5] = (double) 973;
      doubleArray5[6] = (double) 973;
      doubleArray5[7] = (double) 973;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (double) 973;
      doubleArray6[1] = (-1024.9250955);
      doubleArray6[2] = (-1024.9250955);
      doubleArray6[3] = (-1024.9250955);
      doubleArray6[4] = (double) 973;
      doubleArray6[5] = (-1024.9250955);
      doubleArray6[6] = (double) 973;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (-1024.9250955);
      doubleArray7[1] = (double) 973;
      doubleArray7[2] = (double) 973;
      doubleArray0[6] = doubleArray7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix1);
      SparseMatrix.zero(1079, 1102);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.identity((-2389));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRow(1103, vectorAccumulator0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector.fromMap(hashMap0, 1827);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldRows(vectorAccumulator1);
      org.evosuite.runtime.Random.setNextRandom(4048);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 614;
      MockRandom mockRandom0 = new MockRandom(4048);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(614, 1103, (-617.43603), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double double0 = denseMatrix0.minInRow(37);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-490.38955208869);
      doubleArray1[1] = (-6.0);
      doubleArray1[2] = 2662.0892;
      doubleArray1[3] = 1.063723134927635;
      doubleArray1[4] = (-2360.81285);
      doubleArray1[5] = 1.063723134927635;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-6.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-490.38955208869);
      doubleArray3[1] = 1.063723134927635;
      doubleArray3[2] = 1.063723134927635;
      doubleArray3[3] = 1.063723134927635;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 1.063723134927635;
      doubleArray3[6] = (-6.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-6.0);
      doubleArray4[1] = 1.063723134927635;
      doubleArray4[2] = (-6.0);
      doubleArray4[3] = 1.063723134927635;
      doubleArray4[4] = 1.063723134927635;
      doubleArray4[5] = (-6.0);
      doubleArray4[6] = 1.063723134927635;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = (-2360.81285);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1.063723134927635;
      doubleArray5[1] = (-490.38955208869);
      doubleArray5[2] = 1.063723134927635;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 1.063723134927635;
      doubleArray5[5] = 12.0;
      doubleArray5[6] = (-6.0);
      doubleArray0[4] = doubleArray5;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Vector vector0 = matrix0.toRowVector();
      assertEquals(6, vector0.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1447, 1447);
      // Undeclared exception!
      denseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 10);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      matrix0.manhattanNorm();
      assertTrue(matrix0.equals((Object)rowMajorSparseMatrix0));
      
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(10, (-2160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..10][0..-2160].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2389, 436);
      // Undeclared exception!
      try { 
        sparseMatrix0.setRow((-144), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-144' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 394;
      ColumnMajorSparseMatrix.identity(394);
      int int1 = (-677);
      // Undeclared exception!
      try { 
        Matrix.diagonal((-677), (-677));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 286;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.random((-705), 286, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 7;
      Matrix matrix0 = Matrix.unit(7, 7);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      matrix0.mkString((NumberFormat) decimalFormat0, "-5%Uy;'*v8gzHK-(LU", "-fF");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.getColumn(30);
      DecimalFormat decimalFormat0 = new DecimalFormat("vQ&5i>v?7U?yxH");
      rowMajorSparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfShape(2518, 345);
      matrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        matrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(5, 5);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      String string0 = matrix0.toCSV();
      assertEquals("0.000\n0.000\n0.000\n0.000\n0.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      MockRandom mockRandom0 = new MockRandom(4);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(4, mockRandom0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      denseMatrix0.apply((MatrixMatrixOperation<Matrix>) ooPlaceMatricesMultiplication0, (Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (double) 5;
      doubleArray1[4] = (double) 5;
      doubleArray1[5] = (double) 5;
      Matrix.from1DArray(5, 5, doubleArray1);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      LinearSystemSolver linearSystemSolver0 = matrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(0, linearSystemSolver0.equations());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = (-1903);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(947, (-1903));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 947x-1903
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 9;
      DenseVector denseVector0 = DenseVector.constant(9, 1.063723134927635);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.toColumnVector();
      denseVector0.toBinary();
      Matrix matrix1 = matrix0.removeLastColumn();
      MockRandom mockRandom0 = new MockRandom(9);
      Matrix matrix2 = matrix0.rotate();
      matrix2.divide((-2359.7));
      DenseVector.random(9, mockRandom0);
      matrix0.iterator();
      // Undeclared exception!
      try { 
        matrix1.minInColumn(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(4);
      int int0 = 4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(4);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      matrix0.copyOfColumns(4);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2537.0362;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 4;
      doubleArray0[8] = (double) 4;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(4, 4, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.apply(rowMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ooPlaceOuterProduct0.partiallyApply((DenseVector) null);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.product();
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      matrix0.columnMajorIterator();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      Matrix.block(matrix1, columnMajorSparseMatrix0, matrix1, matrix1);
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.sliceBottomRight(10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [10..0][10..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 975;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(975);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(975, 975);
      // Undeclared exception!
      ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.divide(95.641);
      double double0 = 0.0;
      NumberFormat numberFormat0 = null;
      Matrix matrix0 = denseMatrix0.power(13);
      // Undeclared exception!
      try { 
        matrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-4655.0317838);
      doubleArray1[1] = 0.25375431228228207;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-4655.0317838);
      doubleArray2[1] = 0.25375431228228207;
      doubleArray2[2] = 0.25375431228228207;
      doubleArray2[3] = 0.25375431228228207;
      doubleArray2[4] = 0.25375431228228207;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.25375431228228207;
      doubleArray3[1] = (-4655.0317838);
      doubleArray3[2] = (-4655.0317838);
      doubleArray3[3] = 0.25375431228228207;
      doubleArray3[4] = (-4655.0317838);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.add((Matrix) denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, matrix1.columns());
      assertEquals(3, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 3;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3);
      sparseMatrix0.euclideanNorm();
      Matrix matrix0 = sparseMatrix0.copyOfRows(1858);
      matrix0.columnMajorIterator();
      matrix0.infinityNorm();
      // Undeclared exception!
      try { 
        matrix0.blankOfRows((-319));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -319x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(991, 1746.0);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn(991);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '991' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 436;
      Matrix matrix0 = Matrix.identity(436);
      // Undeclared exception!
      try { 
        matrix0.get(3, (-2813));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2813' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      denseMatrix0.norm();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3, (-1.0));
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.norm();
      ColumnMajorSparseMatrix.identity(16);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      Matrix matrix1 = denseMatrix0.multiply(matrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix1, 16, 16, 16, 10, 4, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 16, 10
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1205, 1205);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInRow(1205);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1205' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 436;
      Matrix matrix0 = Matrix.identity(436);
      int int1 = (-2815);
      // Undeclared exception!
      try { 
        matrix0.get(436, (-2815));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '436' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-786.0);
      doubleArray0[4] = (-3017.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-443.747417502346);
      doubleArray0[7] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("RMkfSSs~5$XPX?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply((DenseMatrix) null, rowMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 4739.6144;
      doubleArray1[1] = (-1766.33182824984);
      doubleArray1[2] = 3036.566381245044;
      doubleArray1[3] = (-1153.33148216419);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-5054.9749655085);
      doubleArray1[6] = (-2385.76091035194);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 3036.566381245044;
      doubleArray2[1] = (-5054.9749655085);
      doubleArray2[2] = (-1153.33148216419);
      doubleArray2[3] = (-1153.33148216419);
      doubleArray2[4] = (-2385.76091035194);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-2385.76091035194);
      doubleArray2[7] = (-2385.76091035194);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 4739.6144;
      doubleArray3[1] = 3036.566381245044;
      doubleArray3[2] = 4739.6144;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 4739.6144;
      doubleArray3[6] = 4739.6144;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-1153.33148216419);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-2303.427117611);
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-2303.427117611);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-1766.33182824984);
      doubleArray5[3] = 1279.5077946890349;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-1153.33148216419);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-2385.76091035194);
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = (-3498);
      int int1 = 2479;
      // Undeclared exception!
      try { 
        Matrix.constant((-3498), 2479, (-3498));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-5929), Integer.MAX_VALUE, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -5929x2147483647
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 818.08485669012;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 818.08485669012;
      doubleArray2[1] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 2.0;
      doubleArray5[4] = 818.08485669012;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 818.08485669012;
      doubleArray5[7] = (-1.0);
      doubleArray5[8] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 818.08485669012;
      doubleArray6[2] = 2.0;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 818.08485669012;
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("..");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(",");
      String string0 = rowMajorSparseMatrix0.toString();
      assertEquals("\n", string0);
      
      Matrix matrix0 = Matrix.unit(947, 947);
      assertEquals(947, matrix0.columns());
      assertEquals(947, matrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom(117L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(4, mockRandom0);
      Matrix matrix1 = rowMajorSparseMatrix0.kroneckerProduct(denseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix2 = matrix1.transform(matrixFunction0);
      double double0 = matrix2.sum();
      assertEquals(0.0, double0, 0.01);
      
      DenseVector denseVector0 = DenseVector.zero(0);
      matrix2.setRow((-2057), (Vector) denseVector0);
      assertTrue(matrix2.equals((Object)matrix1));
      assertEquals(4, matrix2.rows());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = (-2147244212);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        DenseMatrix.random((-2147244212), (-2147244212), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-0.4375);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-3261.901688446491);
      doubleArray1[3] = (-2197.4);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3896.0);
      doubleArray1[6] = 387.2007675;
      doubleArray1[7] = 2487.58234749062;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-0.4375);
      doubleArray3[1] = (-2197.4);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-3896.0);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-671.4277031312495);
      doubleArray4[3] = 942.73;
      doubleArray4[4] = (-3261.901688446491);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-3261.901688446491);
      doubleArray5[1] = (-671.4277031312495);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-2300);
      int int1 = 843;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-2300), 843);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2300x843
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-4314.0984647);
      doubleArray1[1] = (-1238.255);
      doubleArray1[2] = 12.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 12.0;
      doubleArray2[1] = 12.0;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.blankOfRows(667);
      // Undeclared exception!
      try { 
        denseMatrix0.toMatrixMarket();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(4, mockRandom0);
      Matrix matrix1 = Matrix.unit(4, 4);
      matrix0.columns();
      Matrix matrix2 = matrix1.shuffle();
      matrix0.determinant();
      matrix1.min();
      matrix2.toColumnVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.updateColumn(4, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = (-2146728022);
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-2146728022), (-2146728022), (-2146728022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2146728022x-2146728022
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1587, 1587);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateAt(1587, 32, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 13;
      Matrix matrix0 = Matrix.constant(2812, 13, 0.49174451296796506);
      matrix0.setAll(0.49174451296796506);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.slice(430, 13, 2812, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [430..2812][13..9].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
