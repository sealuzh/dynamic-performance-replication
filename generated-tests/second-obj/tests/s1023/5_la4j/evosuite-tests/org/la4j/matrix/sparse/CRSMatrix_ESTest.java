/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:37:44 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.iterator.MatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1738;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1738);
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
      cRSMatrix0.set(int0, int0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      CRSMatrix.block(matrix0, denseMatrix0, matrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(">3K-4eL0h,5Y4p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(880, (-2079));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 880x-2079
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(738, 738);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9978L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(1768, 1768, Double.POSITIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      cRSMatrix0.getColumn(923);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(5638, 5638, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5638' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2319);
      cRSMatrix0.maxInRow(13);
      cRSMatrix0.nonZeroAt(13, 2319);
      CRSMatrix.zero(439, 37);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 973;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.010000000000000002;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(973, 973, doubleArray0);
      int int1 = 237;
      cRSMatrix0.blankOfShape(int0, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 4639;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4639, 801, 4639);
      double[] doubleArray0 = new double[2];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4639).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRow(8, vectorAccumulator0);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      int int1 = 9;
      cRSMatrix0.maxInRow(9);
      cRSMatrix0.toDenseMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix(2, 801, 2, doubleArray0, (int[]) null, (int[]) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.forEach(consumer0);
      int int2 = (-180);
      CRSMatrix.from1DArray(int0, int2, doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      int int3 = (-1159);
      mockRandom0.nextInt(int3);
      double double0 = 578.92328964;
      CRSMatrix.random(int1, int3, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(920, 3040, doubleArray0);
      int int0 = 875;
      cRSMatrix0.nonZeroIteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.divide(1);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1426), 9, (double) 1, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(2, cRSMatrix1.columns());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(1167, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1167
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[2];
      int int0 = 1;
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(3, 0.5, (Random) mockRandom0);
      assertEquals(3, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.1, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(3, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.1, cRSMatrix0.max(), 0.01);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.setRow(0, (double) 0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3, 3, 3);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      MatrixIterator matrixIterator0 = cRSMatrix0.iterator();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(matrixIterator0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.random(709, 2319, 0.0, (Random) mockRandom0);
      cRSMatrix0.maxInRow(13);
      cRSMatrix0.nonZeroIteratorOfRow(16);
      mockRandom0.nextInt();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(37, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix.random(709, 2302, 0.0, (Random) mockRandom0);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix.random(2302, (-2300), (-1.0), (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(13, mockRandom0);
      assertEquals(13, denseMatrix0.columns());
      assertEquals(13, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(923, 923);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(923, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(923, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[1];
      cRSMatrix0.select(intArray0, intArray0);
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 0, doubleArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      SparseMatrix.identity(2);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4639, 801, 4639);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      CRSMatrix.block(cRSMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      String string0 = "This matrix can't grow up.";
      CRSMatrix.fromMatrixMarket(string0);
      int int0 = (-692);
      int int1 = (-2870);
      cRSMatrix0.blankOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(709, 2307, 0.0, (Random) mockRandom0);
      cRSMatrix0.min();
      cRSMatrix0.getRow(36);
      int[] intArray0 = new int[8];
      intArray0[0] = 693;
      intArray0[1] = (-299);
      intArray0[2] = 36;
      intArray0[3] = 709;
      intArray0[4] = 36;
      intArray0[5] = 709;
      intArray0[6] = 2138;
      intArray0[7] = 2307;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 2391;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2391);
      int int1 = 3;
      CRSMatrix.zero(2391, 3);
      cRSMatrix0.setColumn(3, 3143.9893893717613);
      cRSMatrix0.iteratorOfNonZeroRows();
      double[] doubleArray0 = new double[2];
      int int2 = Integer.MAX_VALUE;
      double double0 = 1.6114180478821362E-4;
      cRSMatrix0.getOrElse(int0, int2, double0);
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      DenseVector.fromArray(doubleArray0);
      int int3 = 48;
      int int4 = 2295;
      double double1 = (-1.0);
      MockRandom mockRandom1 = new MockRandom(int1);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(int4, int3, double1, (Random) mockRandom1);
      double[] doubleArray1 = null;
      int int5 = 12;
      CRSMatrix.from1DArray(int5, int1, doubleArray1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.is(matrixPredicate0);
      cRSMatrix0.iteratorOfRow(int5);
      int int6 = 7;
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(int6, int6);
      cRSMatrix2.iteratorOfRow(int3);
      int int7 = 186;
      cRSMatrix1.nonZeroIteratorOfRow(int7);
      int int8 = 179;
      CRSMatrix.identity(int8);
      cRSMatrix2.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2319);
      cRSMatrix0.maxInRow(13);
      cRSMatrix0.nonZeroAt(13, 2319);
      mockRandom0.setSeed((-781L));
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.set(939, 3, (-580.12));
      cRSMatrix0.iteratorOfRow(13);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 32;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 675;
      doubleArray0[1] = (double) 675;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 32;
      doubleArray0[5] = (-128.2306048);
      doubleArray0[6] = (double) 675;
      doubleArray0[7] = (double) 675;
      doubleArray0[8] = (double) 675;
      int[] intArray0 = new int[1];
      intArray0[0] = 939;
      CRSMatrix cRSMatrix0 = new CRSMatrix(32, 32, 675, doubleArray0, intArray0, intArray0);
      Matrix matrix0 = cRSMatrix0.blankOfShape(939, 675);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.copyOfShape(15, 675);
      matrix0.each(matrixProcedure0);
      CRSMatrix.block(matrix0, matrix0, matrix0, cRSMatrix0);
      long long0 = 166L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CRSMatrix.randomSymmetric(intArray0[0], (double) int0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(28, (-0.7));
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(189, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 3129;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3129);
      cRSMatrix0.getColumn(3129);
      int int1 = 0;
      double double0 = new Integer(970);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(0);
      int int2 = 2613;
      cRSMatrix1.set(970, 970, 970);
      cRSMatrix0.maxInRow(int0);
      cRSMatrix1.nonZeroAt(int1, int2);
      int int3 = 3125;
      double double1 = 4746.0;
      cRSMatrix1.set(int3, int2, double1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(677, 1321);
      cRSMatrix0.copyOfShape(677, 85);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(0, 8, (double) 8, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5652);
      cRSMatrix0.toColumnMajorSparseMatrix();
      String string0 = "3+X>(/%^9/pkCpG)P";
      RowMajorSparseMatrix.fromCSV(string0);
      int int0 = 3;
      int int1 = 3129;
      int int2 = 32;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int0, int1, int2);
      String string1 = "sC";
      SparseMatrix.fromMatrixMarket(string1);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.apply(matrixOperation0);
      int int3 = 32;
      Matrix matrix0 = cRSMatrix1.copyOfShape(int3, int1);
      cRSMatrix1.multiply(matrix0);
      int int4 = 564;
      cRSMatrix1.iteratorOfRow(int4);
      cRSMatrix0.setAll(int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom(169L);
      cRSMatrix0.equals((Object) "Z{Cxj1wO5~");
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(709, 2319, 0.0, (Random) mockRandom0);
      cRSMatrix0.maxInRow(13);
      byte[] byteArray0 = null;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      mockRandom0.nextBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(8, (double) 0, (Random) mockRandom0);
      cRSMatrix0.setAll((-1666.9532));
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-419));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Double double0 = new Double((-761.67708857));
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      cRSMatrix0.setAll(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow((-2040109464), (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2040109464
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 4639;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4639, 801, 4639);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4639).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRow(8, vectorAccumulator0);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      int int1 = 2;
      int int2 = 9;
      cRSMatrix0.maxInRow(9);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.nonZeroIteratorOfRow(32);
      int int3 = 1652;
      cRSMatrix0.blankOfShape(9, 8);
      RowMajorSparseMatrix.identity(801);
      cRSMatrix0.min();
      CRSMatrix cRSMatrix1 = new CRSMatrix(154, 142);
      cRSMatrix0.minInRow(9);
      cRSMatrix1.get(152, 179);
      cRSMatrix0.divide(int3);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.eachNonZero(matrixProcedure0);
      double double0 = 904.9712916281225;
      cRSMatrix1.setAll(double0);
      MockRandom mockRandom0 = new MockRandom();
      long long0 = (-618L);
      long long1 = 1602L;
      mockRandom0.longs(long0, long1);
      CRSMatrix.random(int1, int0, (double) int2, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 709;
      int int1 = 335;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2307, 2307);
      cRSMatrix0.getRow(8);
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
      int int2 = 4095;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int2, int2);
      cRSMatrix1.min();
      int int3 = (-222);
      Integer integer0 = new Integer(int3);
      cRSMatrix1.multiplyByItsTranspose();
      int int4 = 476;
      int int5 = 6;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int5;
      CRSMatrix cRSMatrix2 = CRSMatrix.from1DArray(int4, int5, doubleArray0);
      cRSMatrix2.setColumn(int2, (double) int5);
      MockRandom mockRandom0 = new MockRandom();
      int int6 = 4;
      int int7 = 2629;
      double double0 = (-3216.0);
      CRSMatrix.random(int7, int1, double0, (Random) mockRandom0);
      cRSMatrix1.copyOfShape(int0, int6);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 1598);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray1[4] = (double) 13;
      doubleArray1[5] = (double) 13;
      doubleArray1[6] = (double) 13;
      doubleArray1[7] = (double) 13;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2, 13);
      cRSMatrix1.copyOfRows(13);
      cRSMatrix1.blankOfShape(8, 13);
      cRSMatrix0.setAll((-1407.62));
      cRSMatrix1.min();
      CRSMatrix cRSMatrix2 = new CRSMatrix(685, 8);
      cRSMatrix0.minInRow(2);
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-872), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -872x2147483647
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(158, 335, 158);
      cRSMatrix0.nonZeroAt(2, 923);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(709, 709, 0.0, (Random) mockRandom0);
      mockRandom0.ints((long) 709);
      cRSMatrix0.min();
      Integer integer0 = new Integer(709);
      cRSMatrix0.isColumnMajor();
      CRSMatrix cRSMatrix1 = CRSMatrix.random(234, (int) (byte)13, 0.0, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
      CRSMatrix cRSMatrix2 = CRSMatrix.from1DArray((-2152), (byte)13, (double[]) null);
      int int0 = 2378;
      cRSMatrix2.nonZeroIteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      cRSMatrix0.divide(1131.0);
      cRSMatrix0.setColumn(1, 3834.778);
      cRSMatrix0.product();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)13;
      byte byte1 = (byte)89;
      byteArray0[4] = (byte)89;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      int int1 = 923;
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(923, (-3572.473));
      CRSMatrix.identity(923);
      cRSMatrix2.isColumnMajor();
      CRSMatrix.fromBinary(byteArray0);
      cRSMatrix1.nonZeroRowMajorIterator();
      double double0 = new Double(1);
      cRSMatrix0.nonZeroIteratorOfRow((-5723));
      int int2 = 1;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int3 = 635;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, int3);
      cRSMatrix2.insertColumn(int0, sparseVector0);
      int int4 = (-1);
      cRSMatrix2.getOrElse(int2, int4, int1);
      double double1 = (-1442.22);
      cRSMatrix2.setAll(double1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 709;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2307);
      int int1 = 37;
      Integer integer0 = new Integer(37);
      cRSMatrix0.nonZeroAt(709, 3);
      int int2 = (-3135);
      int int3 = 3;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero((-3135), 3);
      Matrix.identity(int2);
      int int4 = 3;
      cRSMatrix1.setColumn(int4, (double) int4);
      cRSMatrix0.product();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.setAll(int3);
      MockRandom mockRandom0 = new MockRandom();
      int int5 = (-629);
      long long0 = (-296L);
      MockRandom mockRandom1 = new MockRandom(long0);
      CRSMatrix.random(int0, int5, (double) int1, (Random) mockRandom1);
      double[] doubleArray0 = null;
      int int6 = 631;
      CRSMatrix.from1DArray(int6, int2, doubleArray0);
      cRSMatrix1.nonZeroIteratorOfRow(int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 709;
      int int1 = 2307;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(709, 2307, 0.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(706, vectorAccumulator0);
      int int2 = 13;
      int int3 = 693;
      cRSMatrix0.min();
      Integer integer0 = new Integer(709);
      cRSMatrix0.setRow(2307, (double) 709);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.nonZeroIteratorOfRow(int1);
      long long0 = 3446L;
      double double0 = 0.7;
      double double1 = (-347.240767256055);
      mockRandom0.doubles(long0, double0, double1);
      int int4 = 5075;
      SparseMatrix.zero(int3, int4);
      org.evosuite.runtime.Random.setNextRandom(int2);
      cRSMatrix0.nonZeroIteratorOfRow(int2);
      double double2 = (-65.35407774235);
      CRSMatrix.diagonal(int0, double2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 13;
      cRSMatrix0.maxInRow(2);
      int int1 = 17;
      Matrix matrix0 = Matrix.constant(17, 2066, (-2329.8528));
      Matrix matrix1 = cRSMatrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix1, cRSMatrix0, matrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(709);
      int int0 = 13;
      cRSMatrix0.maxInRow(13);
      cRSMatrix0.min();
      Integer integer0 = new Integer(0);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(709, 0, (double) 13, (Random) mockRandom0);
      cRSMatrix1.multiplyByItsTranspose();
      int[] intArray0 = new int[0];
      cRSMatrix1.select(intArray0, intArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix1.toRowMajorSparseMatrix();
      int int1 = (-1555);
      cRSMatrix1.blankOfShape(int0, int1);
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(923, 335, 8);
      cRSMatrix0.getRow(335);
      cRSMatrix0.maxInRow(2);
      MockRandom mockRandom0 = new MockRandom();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.set(1448, (-1610), 2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(923);
      cRSMatrix0.iterator();
      int[] intArray0 = new int[1];
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix.identity((-135));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 709;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(709, 2307, 0.0, (Random) mockRandom0);
      int int1 = 693;
      Integer integer0 = new Integer(2307);
      Integer integer1 = new Integer(709);
      cRSMatrix0.isColumnMajor();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)13;
      byteArray0[1] = (byte)13;
      byte byte1 = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)96;
      cRSMatrix0.transform((MatrixFunction) null);
      Integer integer2 = new Integer(byte1);
      MatrixProcedure matrixProcedure0 = null;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(byteArray0[4]);
      cRSMatrix0.each(matrixProcedure0);
      mockRandom0.ints();
      double double0 = (-448.587069);
      mockRandom0.doubles((long) int1, (double) byte0, double0);
      int int2 = 905;
      int int3 = (-1970);
      cRSMatrix0.getOrElse(int2, int3, byteArray0[2]);
      VectorProcedure vectorProcedure0 = null;
      cRSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
      cRSMatrix1.nonZeroIteratorOfRow(int1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      cRSMatrix0.divide(1);
      cRSMatrix0.setColumn(1, 3834.778);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.product();
      cRSMatrix0.nonZeroRowMajorIterator();
      byte[] byteArray0 = new byte[1];
      double[] doubleArray0 = null;
      int int1 = (-2700);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-2700), (byte)0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2700x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      cRSMatrix0.divide(1131.0);
      Double double0 = new Double(628.1889535233);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(32, 0);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      int int0 = 0;
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(32, 1922, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.updateAt(32, 1, matrixFunction0);
      VectorProcedure vectorProcedure0 = null;
      cRSMatrix2.eachInRow(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
          double[][] doubleArray0 = new double[1][5];
          double[] doubleArray1 = new double[16];
          doubleArray1[0] = (double) 13;
          doubleArray1[1] = (double) 13;
          doubleArray1[2] = (double) 13;
          cRSMatrix0.toColumnVector();
          doubleArray1[3] = (double) 13;
          doubleArray1[4] = (double) 13;
          doubleArray1[5] = (double) 13;
          doubleArray1[6] = (double) 13;
          doubleArray1[1] = (double) 13;
          CRSMatrix.identity(13);
          doubleArray0[0] = doubleArray1;
          double[] doubleArray2 = new double[5];
          doubleArray2[1] = 13.0;
          doubleArray2[2] = (double) 13;
          double[][] doubleArray3 = new double[4][0];
          doubleArray3[0] = doubleArray2;
          doubleArray3[1] = doubleArray1;
          doubleArray3[2] = doubleArray1;
          doubleArray3[3] = doubleArray1;
          SparseMatrix sparseMatrix0 = SparseMatrix.identity(13);
          sparseMatrix0.spliterator();
          RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray3);
          rowMajorSparseMatrix0.toString();
          sparseMatrix0.trace();
          VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            cRSMatrix0.eachInRow(13, vectorProcedure0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 14
             //
             verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.toColumnVector();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = new CRSMatrix(3267, 385);
      Double double0 = new Double(13);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      double[][] doubleArray0 = new double[6][1];
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      cRSMatrix0.toColumnVector();
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int1 = 3;
      int int2 = 700;
      int int3 = 685;
      int int4 = 7;
      CRSMatrix cRSMatrix1 = new CRSMatrix(685, 7, 13);
      int int5 = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(1, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 161;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1694, 161, 161);
      cRSMatrix0.transformRow(96, (VectorFunction) null);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(int0);
      cRSMatrix1.iteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray1[4] = (double) 13;
      doubleArray1[5] = (double) 13;
      doubleArray1[6] = (double) 13;
      doubleArray1[7] = (double) 13;
      doubleArray0[0] = doubleArray1;
      Double double0 = new Double(0.0);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      cRSMatrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow((-2316), (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2316
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 911;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(911, 911);
      cRSMatrix0.max();
      String string0 = "No rows or columns selected.";
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket("No rows or columns selected.");
      cRSMatrix0.iteratorOfColumn(int0);
      cRSMatrix1.columnMajorIterator();
      String string1 = "@-_@)*I)gG2";
      cRSMatrix0.blank();
      RowMajorSparseMatrix.fromMatrixMarket(string1);
      int int1 = 911;
      RowMajorSparseMatrix.zero(int1, int0);
      org.evosuite.runtime.Random.setNextRandom(int0);
      int int2 = (-2282);
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(int2);
      int int3 = (-2883);
      cRSMatrix2.copyOfShape(int0, int3);
      int int4 = Integer.MAX_VALUE;
      cRSMatrix0.nonZeroIteratorOfColumn(int4);
      VectorProcedure vectorProcedure0 = null;
      Matrix.fromMatrixMarket(string0);
      cRSMatrix0.eachInRow(int0, vectorProcedure0);
      cRSMatrix1.maxInRow(int3);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[16];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray1[2] = (double) 13;
      cRSMatrix0.toColumnVector();
      doubleArray1[3] = (double) 13;
      doubleArray1[4] = (double) 13;
      doubleArray1[5] = (double) 13;
      doubleArray1[6] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 13;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 13;
      double[][] doubleArray3 = new double[4][0];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(13);
      sparseMatrix0.spliterator();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray3);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.nonZeroIteratorOfRow(13);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).max();
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toRowMajorSparseMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(567, 754);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.setRow(1593, (double) 1593);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      cRSMatrix0.multiplyByItsTranspose();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(1167, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1167
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.divide(1131.0);
      cRSMatrix0.min();
      Integer integer0 = new Integer(1);
      cRSMatrix0.setRow(1, (double) 1);
      cRSMatrix1.iteratorOfNonZeroRows();
      cRSMatrix0.nonZeroIteratorOfRow(1);
      double double0 = (-347.240767256055);
      mockRandom0.doubles(1926L, 606.33996256848, 1019.31);
      int int0 = 5075;
      SparseMatrix.zero(5075, 615);
      org.evosuite.runtime.Random.setNextRandom(1);
      // Undeclared exception!
      try { 
        cRSMatrix1.nonZeroIteratorOfRow((-1592));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1592
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      cRSMatrix0.toColumnVector();
      doubleArray0[3] = (double) 13;
      int int0 = 4;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(100.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(4, 4, matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(13, 1535.5060207);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      cRSMatrix0.toColumnVector();
      doubleArray0[3] = (double) 13;
      int int0 = 4;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(4, 4, matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(13, 1535.5060207);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      cRSMatrix0.toColumnVector();
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 13;
      Double double0 = new Double(13.0);
      Double double1 = new Double(531.16500842);
      cRSMatrix0.setRow(0, (double) 0);
      cRSMatrix0.nonZeroIteratorOfRow(13);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("8");
      cRSMatrix0.toColumnVector();
      cRSMatrix0.multiplyByItsTranspose();
      long long0 = 2382L;
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(427);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 427
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      cRSMatrix0.toColumnVector();
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(3267, 385);
      Double double0 = new Double(13.0);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CRSMatrix.from2DArray(doubleArray1);
      CRSMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        cRSMatrix1.getOrElse(2572, 3556, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3556' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      int int1 = 438;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(438);
      cRSMatrix0.spliterator();
      cRSMatrix0.toMatrixMarket();
      Matrix matrix0 = cRSMatrix0.removeFirstRow();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int2 = 249;
      matrix0.getColumn(438);
      sparseMatrix0.setRow(249, (double) 249);
      int int3 = (-1);
      int int4 = 13;
      SparseMatrix.zero(int0, int4);
      int int5 = (-950);
      org.evosuite.runtime.Random.setNextRandom(int5);
      ((CRSMatrix) sparseMatrix0).minInRow(int0);
      matrix0.infinityNorm();
      int int6 = 394;
      double double0 = 0.0;
      CRSMatrix.random(int2, int6, double0, (Random) mockRandom0);
      double double1 = (-52.0);
      CRSMatrix.diagonal(int1, double1);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.setRow(int1, double0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(int3, vectorProcedure0);
      int int7 = 4563;
      cRSMatrix1.nonZeroIteratorOfRow(int7);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[16];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray1[2] = (double) 13;
      cRSMatrix0.toColumnVector();
      doubleArray1[3] = (double) 13;
      doubleArray1[4] = (double) 13;
      doubleArray1[5] = (double) 13;
      doubleArray1[6] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray0[0] = doubleArray1;
      cRSMatrix0.min();
      Integer integer0 = new Integer((-1168));
      cRSMatrix0.multiplyByItsTranspose();
      double double0 = 1385.0268437010236;
      cRSMatrix0.setRow(8, (double) 13);
      // Undeclared exception!
      try { 
        CRSMatrix.random(714, 714, (-1955.58431), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(13.0, 3076.1085534607, 13.0, 0.0, (-1973.69326933)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int0 = 385;
      CRSMatrix cRSMatrix1 = new CRSMatrix(3267, 385);
      Double double0 = new Double(13.0);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInRow((-3132));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3132
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 923;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 8, 8);
      cRSMatrix0.min();
      Integer integer0 = new Integer(8);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 0.9255441462366898;
      cRSMatrix0.rank();
      doubleArray0[2] = 0.0;
      doubleArray0[5] = (double) 923;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = new CRSMatrix(700, 3, 685);
      // Undeclared exception!
      try { 
        cRSMatrix1.eachInRow(8, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      cRSMatrix0.divide(1131.0);
      Double double0 = new Double(1131.0);
      int int1 = (-398);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(8, (-398));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(8, Double.NEGATIVE_INFINITY);
      Matrix matrix0 = cRSMatrix1.insert((Matrix) denseMatrix0);
      DenseVector denseVector0 = DenseVector.constant(8, (-398));
      Matrix matrix1 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, matrix0, cRSMatrix1, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.divide(1);
      cRSMatrix0.setColumn(1, 3834.778);
      cRSMatrix0.product();
      cRSMatrix0.setColumn(1, 0.0);
      cRSMatrix1.product();
      cRSMatrix1.nonZeroRowMajorIterator();
      cRSMatrix1.setAll(0.0);
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(636, 1, 3143.9893893717613, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 8, 8);
      cRSMatrix0.min();
      Integer integer0 = new Integer(8);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 582;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(8, 778, 8);
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.maxInRow(582);
      byte[] byteArray0 = null;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.each(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = null;
      int int1 = (-1176);
      cRSMatrix0.iteratorOfRow(int1);
      cRSMatrix1.to(matrixFactory0);
      int int2 = 48;
      cRSMatrix1.nonZeroIteratorOfRow(int0);
      cRSMatrix0.rowMajorIterator();
      MockRandom mockRandom0 = new MockRandom(int2);
      mockRandom0.nextBytes(byteArray0);
      int int3 = (-1590);
      cRSMatrix2.minInRow(int3);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 2307;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 32);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(709);
      byte[] byteArray0 = cRSMatrix1.toBinary();
      int int1 = 910;
      CRSMatrix.diagonal(910, (-1302.676248898987));
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(32, 32);
      CRSMatrix cRSMatrix3 = CRSMatrix.identity(923);
      cRSMatrix0.isColumnMajor();
      CRSMatrix cRSMatrix4 = CRSMatrix.fromBinary(byteArray0);
      CRSMatrix.randomSymmetric(709, 926.67115294, (Random) mockRandom0);
      cRSMatrix0.min();
      int int2 = 1;
      Integer integer0 = new Integer(int2);
      cRSMatrix1.divide(int0);
      CRSMatrix cRSMatrix5 = new CRSMatrix();
      int int3 = 48;
      cRSMatrix4.setRow(int3, (double) int1);
      int int4 = 165;
      cRSMatrix3.nonZeroIteratorOfRow(int4);
      int int5 = 2704;
      int int6 = (-1689);
      cRSMatrix2.getOrElse(int5, int6, int6);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.toColumnVector();
      cRSMatrix0.multiplyByItsTranspose();
      Integer integer0 = new Integer(13);
      cRSMatrix0.isColumnMajor();
      int int0 = 234;
      MockRandom mockRandom0 = new MockRandom(1340L);
      int int1 = 1616;
      // Undeclared exception!
      CRSMatrix.random(13, 1616, 0.8, (Random) mockRandom0);
  }
}
