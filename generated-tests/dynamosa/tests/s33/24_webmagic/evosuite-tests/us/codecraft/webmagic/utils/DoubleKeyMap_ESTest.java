/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 23:09:50 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      Map<String, HashMap<HashMap<HashMap, Map>, Map<Object, Map<Map<String, String>, HashMap<Integer, String>>>>> map0 = doubleKeyMap1.newMap();
      Object object0 = new Object();
      doubleKeyMap0.put(object0, (Object) doubleKeyMap1, (String) null);
      String string0 = doubleKeyMap0.remove(object0, (Object) map0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      HashMap<String, HashMap<HashMap<HashMap, Map>, Map<Object, Map<Map<String, String>, HashMap<Integer, String>>>>> hashMap0 = new HashMap<String, HashMap<HashMap<HashMap, Map>, Map<Object, Map<Map<String, String>, HashMap<Integer, String>>>>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Map<Map<HashMap<String, Object>, HashMap<HashMap<HashMap, Object>, String>>, HashMap<String, HashMap<HashMap<Integer, Map<String, String>>, Map<HashMap<Integer, Object>, Map<String, String>>>>> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put((Object) hashMap1, (Object) map0, "");
      String string0 = doubleKeyMap0.remove((Object) hashMap0, (Object) hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Integer>, Integer>();
      Map<HashMap<Object, Integer>, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, Integer>, String, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, String, String>(map0);
      doubleKeyMap1.put((HashMap<Object, Integer>) null, "wrong proto type map ", "");
      Map<String, String> map1 = doubleKeyMap1.remove((HashMap<Object, Integer>) null);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put("", integer0, integer0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Integer>, Integer>> hashMap0 = new HashMap<String, Map<HashMap<Object, Integer>, Integer>>(1138, 1138);
      DoubleKeyMap<String, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Integer>, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap0.remove("", (HashMap<Object, Integer>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, String>, String>();
      DoubleKeyMap<Map<Integer, Object>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Object>, Object, String>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap2 = new DoubleKeyMap<Integer, String, String>();
      Map<Integer, Object> map0 = doubleKeyMap2.newMap();
      String string0 = doubleKeyMap1.remove(map0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Integer>, Integer>> hashMap0 = new HashMap<String, Map<HashMap<Object, Integer>, Integer>>(1138, 1138);
      DoubleKeyMap<String, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Integer>, Integer>(hashMap0);
      Map<HashMap<Object, Integer>, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Integer>, String, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, String, String>(map0, class0);
      Map<String, String> map1 = doubleKeyMap1.remove((HashMap<Object, Integer>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Object, HashMap<Object, Object>>();
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Map<Object, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-4001));
      DoubleKeyMap<HashMap<Integer, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Integer, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(hashMap0, integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Map<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, String>, Object>();
      Object object0 = doubleKeyMap0.get((Map<String, String>) null, (Map<String, String>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Integer>, Integer>> hashMap0 = new HashMap<String, Map<HashMap<Object, Integer>, Integer>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Integer>, Integer>(hashMap0, class0);
      Map<HashMap<Object, Integer>, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null, class0);
      String string0 = doubleKeyMap1.get((Object) null, (Object) map0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>();
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer((-3961));
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Map<String, String> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0);
      Map<Integer, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Map<HashMap<Map<String, String>, Object>, String>> hashMap0 = new HashMap<Object, Map<HashMap<Map<String, String>, Object>, String>>();
      DoubleKeyMap<Object, HashMap<Map<String, String>, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Map<String, String>, Object>, String>(hashMap0);
      HashMap<Map<String, String>, Object> hashMap1 = new HashMap<Map<String, String>, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, hashMap1, "Ad9lX7e");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Integer) null, (Object) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-4001));
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      String string0 = doubleKeyMap0.remove((Object) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      Map<String, HashMap<HashMap<HashMap, Map>, Map<Object, Map<Map<String, String>, HashMap<Integer, String>>>>> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put((Object) "", (Object) map0, "");
      String string0 = doubleKeyMap0.put((Object) "", (Object) map0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      doubleKeyMap0.put((Object) hashMap0, (Object) hashMap0, "Y#50bD>:/XeawfqE7=");
      DoubleKeyMap<Map<Object, Object>, HashMap<Object, Map<String, String>>, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, HashMap<Object, Map<String, String>>, Integer>();
      String string0 = doubleKeyMap0.get((Object) hashMap0, (Object) doubleKeyMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, Map<String, Object>, Map<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, Object>, Map<Object, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
