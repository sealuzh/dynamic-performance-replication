/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 05:08:14 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParser_ESTest extends JavaParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("UnaryExpression");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      char char0 = 's';
      try { 
        javaParser0.ForUpdate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: /
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Type();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = '&';
      charArray0[2] = '>';
      charArray0[3] = 'T';
      charArray0[4] = '@';
      charArray0[5] = 'y';
      javaParser0.TypeArgument();
      assertFalse(javaParser0.lookingAhead);
      
      Token token0 = javaParser0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-84), (byte)89);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-84), (byte)25, (byte) (-78)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(88, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)25);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-84), (byte)25, (byte) (-78)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(88, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-84), (byte)25, (byte) (-78)}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(4, byteArray0.length);
      assertEquals(88, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.Block();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\"");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.StatementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.PreDecrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      String string0 = ",?L):T6";
      StringReader stringReader0 = new StringReader(",?L):T6");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PostfixExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("(Twk'#={4r]L0rM");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser("(Twk'#={4r]L0rM");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(":.i\"s@Hla8X67");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ForUpdate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ClassOrInterfaceType();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "NWR/lb\\,CW0[h)fWN";
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      assertNotNull(simpleNode0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: /
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fr[}O/g#Q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("{I-%fr[}O/g#Q");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SystemInUtil.addInputLine("Q`");
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")hP7Kl&xYM'><V-<'C(");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: )
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader2 = new StringReader(" : ");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(" : ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("{F");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SystemInUtil.addInputLine("{IrbwjGxOew%5A");
      int int0 = 90;
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 11.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("OfK@!Brw8$ZbOa");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-10));
      assertNotNull(simpleNode0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = null;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      nodeArray0[3] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      assertEquals(4, simpleNode0.jjtGetNumChildren());
      
      javaParser0.currNode = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      try { 
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3153);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader(" : ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(" : ");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(javaParser0, javaParser1);
      
      try { 
        javaParser1.ConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser2 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser2);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser2.DoStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParser0.ArgumentList();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertNotSame(javaParser0, javaParser1);
      
      try { 
        javaParser1.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal((-281));
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("nY9P/kCq=MR-4W^yp-(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-281), 2);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.PreDecrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line -281, column 2.  Encountered: nY9P
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser("x");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser0.ReInit(javaParser1.token_source);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser0, javaParser1);
      assertNotSame(javaParser1, javaParser0);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mo`n`");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("mo`n`");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser1.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertNotSame(javaParser0, javaParser1);
      assertNotSame(javaParser1, javaParser0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      javaParserTokenManager0.jjimageLen = 0;
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      
      javaCharStream0.ReInit((InputStream) sequenceInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(javaParser0, javaParser1);
      
      Token token0 = javaParser1.getToken((-1));
      assertNotNull(token0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertNotSame(javaParser0, javaParser1);
      assertNotSame(javaParser1, javaParser0);
      
      int int0 = javaParser0.Modifiers();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, int0);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertNotSame(javaParser0, javaParser1);
      
      JavaParser javaParser2 = new JavaParser("");
      assertNotNull(javaParser2);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      
      try { 
        javaParser1.PostfixExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = ".i\"s@Hla8X67";
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      StringReader stringReader0 = new StringReader(".i\"s@Hla8X67");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Type();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      String string0 = "";
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4096);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.mark(1572);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValuePair();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 64, column 4115.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)66;
      byte byte0 = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)106;
      byte byte1 = (byte)67;
      byteArray0[5] = (byte)67;
      StringReader stringReader0 = new StringReader("]3owP>n%B'j<#14X1");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ImplementsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ]
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.FormalParameter();
      assertFalse(javaParser0.lookingAhead);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(255);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isSynchronized(107);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("C`rNSnE9ql");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 51);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 51. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      assertNotNull(simpleNode0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      javaParser0.EnumConstant();
      assertFalse(javaParser0.lookingAhead);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 115, 109, 83);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = (-1499);
      javaCharStream0.ReInit((Reader) stringReader0, 105, (-1499));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.AdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: /
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UnaryExpression";
      JavaParser.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      try { 
        javaParser1.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: UnaryExpression
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(148);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      javaParser0.ExclusiveOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ConditionalExpression();
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser1.ForUpdate();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser0, javaParser1);
      assertNotSame(javaParser1, javaParser0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser1.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser2 = new JavaParser(javaParser1.token_source);
      assertNotNull(javaParser2);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      
      javaParser2.EnumConstant();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.equals((Object)javaParser2));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertNotSame(javaParser1, javaParser0);
      assertNotSame(javaParser1, javaParser2);
      assertNotSame(javaParser2, javaParser0);
      assertNotSame(javaParser2, javaParser1);
      
      int int0 = 83;
      javaCharStream0.ReInit((Reader) stringReader0, 115, 83);
      assertFalse(javaParser1.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.equals((Object)javaParser2));
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(javaParser1, javaParser0);
      assertNotSame(javaParser1, javaParser2);
      
      // Undeclared exception!
      try { 
        javaParser0.AdditiveExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QGokw<X:DoPm/y{<");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.TypeParameter();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 0, column 5.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.RelationalExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      StringReader stringReader0 = new StringReader("\"/=\"");
      assertNotNull(stringReader0);
      
      stringReader0.mark(2);
      StringReader stringReader1 = new StringReader("\"/=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser1 = new JavaParser(stringReader1);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser1.VariableInitializer();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParser1, javaParser0);
      
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic((-1080));
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.FormalParameter();
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-696), 75);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser1.TypeParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JavaParser javaParser0 = null;
      try {
        javaParser0 = new JavaParser((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: com
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\":\"");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Java Parser Version 1.1:  File ";
      stringArray0[1] = "\":\"";
      JavaParser.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: \":\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      long long0 = stringReader0.skip(1L);
      assertEquals(1L, long0);
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: N
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("%>o\"!xq`+MDu|");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(471);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 112, 52, 26);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager1);
      assertNotNull(javaParser1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Su)OGU*&b'");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.NullLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: Su
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: -
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      String string0 = "0T`F^qV+iTwFhtbFKM~";
      StringReader stringReader0 = new StringReader("0T`F^qV+iTwFhtbFKM~");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ShiftExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: T
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser1.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser2 = new JavaParser(javaParser1.token_source);
      assertNotNull(javaParser2);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      
      javaParser2.EnumConstant();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.equals((Object)javaParser2));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertNotSame(javaParser1, javaParser0);
      assertNotSame(javaParser1, javaParser2);
      assertNotSame(javaParser2, javaParser0);
      assertNotSame(javaParser2, javaParser1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, Integer.MAX_VALUE);
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.equals((Object)javaParser2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertNotSame(javaParser1, javaParser0);
      assertNotSame(javaParser1, javaParser2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParser javaParser3 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser3);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser3.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.equals((Object)javaParser2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParser3.equals((Object)javaParser2));
      assertFalse(javaParser3.equals((Object)javaParser0));
      assertFalse(javaParser3.equals((Object)javaParser1));
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      
      try { 
        javaParser2.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 15.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("ShiftExpression");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PreDecrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)6, 93);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)116, (byte)53, (byte)102, (byte)119, (byte)86, (byte)6, (byte)67, (byte)31}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)116, (byte)53, (byte)102, (byte)119, (byte)86, (byte)6, (byte)67, (byte)31}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(8, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      // Undeclared exception!
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = JavaParser.ModifierSet.NATIVE;
      assertEquals(128, int0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3271, 3271, 3271);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.InstanceOfExpression();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(3277, javaCharStream0.getBeginColumn());
      assertEquals(3277, javaCharStream0.getEndColumn());
      assertEquals(3277, javaCharStream0.getColumn());
      assertEquals(3271, javaCharStream0.getEndLine());
      assertEquals(3271, javaCharStream0.getLine());
      assertEquals(3271, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 3271, column 3277.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Su)OGU*&b'");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: )
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.Modifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4280, 2642);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-4279), byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, byteArray0.length);
      assertEquals((-4279), byteArrayInputStream0.available());
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\"");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Pq)H!jtCM[O");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        javaParser1.MultiplicativeExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "\"strictfp\"";
      SystemInUtil.addInputLine("\"strictfp\"");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = null;
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "\"strictfp\"";
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 11.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mo`n`");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SystemInUtil.addInputLine(", column ");
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Encountered \"");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser1.EnumConstant();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("@XS");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser1.ShiftExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ConditionalOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.FormalParameter();
      assertFalse(javaParser0.lookingAhead);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader(";awXP;7,r^j");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.BlockStatement();
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser(";awXP;7,r^j");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser0.ResultType();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertNotSame(javaParser0, javaParser1);
      
      try { 
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(997);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("NWR/lb,CW0[h)fWN");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("ClassOrInterfaceBodyDeclaration");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.InclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SystemInUtil.addInputLine("lU8");
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "@";
      JavaParser javaParser0 = new JavaParser("@");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser("sxv(Y}_V((Cg~_5}[7");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JavaParser javaParser1 = new JavaParser(stringReader1);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 10.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = (-218);
      javaParser0.VariableDeclarator();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.NullLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 75, 75, 75);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.curLexState = 75;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 53.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3271, 3271, 3271);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('N', char0);
      assertEquals(3271, javaCharStream0.getEndLine());
      assertEquals(3271, javaCharStream0.getLine());
      assertEquals(3271, javaCharStream0.getColumn());
      assertEquals(3271, javaCharStream0.getBeginColumn());
      assertEquals(3271, javaCharStream0.getBeginLine());
      assertEquals(3271, javaCharStream0.getEndColumn());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean2 = javaParser_ModifierSet0.isProtected(0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.UnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("ShiftExpression");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      stringReader0.mark(4622);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 10.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4280, 2642);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)95}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-4279), byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)95}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, byteArray0.length);
      assertEquals((-4279), byteArrayInputStream0.available());
      
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("{F");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet";
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: com
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.UnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = '&';
      charArray0[2] = '>';
      charArray0[3] = 'T';
      charArray0[4] = '@';
      charArray0[5] = 'y';
      charArray0[6] = ' ';
      charArray0[7] = ':';
      charArray0[8] = 's';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'x', '&', '>', 'T', '@', 'y', ' ', ':', 's'}, charArray0);
      assertEquals(1, int0);
      assertEquals(9, charArray0.length);
      
      int int1 = (-218);
      try { 
        javaParser0.VariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("n&=DvO@-*,zTW{^qrHO");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: n
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean1 = javaParser1.lookingAhead;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser2 = new JavaParser("UnaryExpression");
      assertNotNull(javaParser2);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      
      try { 
        javaParser2.EnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      stringReader0.mark(4622);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.VariableInitializer();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4096);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.Name();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 64, column 4096.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ycJ-");
      assertNotNull(stringReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader1 = new StringReader("ycJ-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader0.mark(83);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(97);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jscO(H");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      stringReader0.mark(100);
      StringReader stringReader1 = new StringReader("jscO(H");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      try { 
        javaParser0.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      int int0 = 4622;
      stringReader0.mark(4622);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.VariableInitializer();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile(4);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWS");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: /
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal((-2192));
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertTrue(boolean0);
      
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      StringReader stringReader0 = new StringReader("\"/=\"");
      assertNotNull(stringReader0);
      
      stringReader0.mark(2);
      StringReader stringReader1 = new StringReader("\"/=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader0.mark(70);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate(2147483646);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertTrue(boolean0);
      assertFalse(javaParser_ModifierSet0.equals((Object)javaParser_ModifierSet1));
      assertNotSame(javaParser_ModifierSet0, javaParser_ModifierSet1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaParser0.ReferenceType();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 53.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ExtendsList(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(148);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("ShiftExpression");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      StringReader stringReader0 = new StringReader("\"/=\"");
      assertNotNull(stringReader0);
      
      stringReader0.mark(28);
      StringReader stringReader1 = new StringReader("\"/=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser1 = new JavaParser(stringReader1);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser1.VariableInitializer();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParser1, javaParser0);
      
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      int int0 = 4622;
      stringReader0.mark(4622);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate(274);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QGokw<X:DoPm/y{<");
      assertNotNull(stringReader0);
      
      stringReader0.mark(1113);
      StringReader stringReader1 = new StringReader("QGokw<X:DoPm/y{<");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParser0.StatementExpression();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".i\"s@Hla8X67");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = (-2100);
      try { 
        javaParser0.AnnotationTypeDeclaration((-2100));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mo`n`");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser1.CompilationUnit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: mo
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\",\"");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(4);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("`:Z5VBcg");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      stringReader0.mark(1503);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o=rE?]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 581, 18);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 581, column 18.  Encountered: o
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(97);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("N");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 27, 67);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-22), byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 86);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-22), byteArrayInputStream0.available());
      
      JavaParser javaParser1 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser1);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78)}, byteArray0);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(5, byteArray0.length);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals((-22), byteArrayInputStream0.available());
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate((-2112));
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      stringReader0.mark(4622);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ON
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      StringReader stringReader0 = new StringReader("\"/=\"");
      assertNotNull(stringReader0);
      
      stringReader0.mark(2);
      StringReader stringReader1 = new StringReader("\"/=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser1 = new JavaParser(stringReader1);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.TypeArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: \"/=\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".  Encountered: ");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean1 = javaParser_ModifierSet0.isAbstract(57);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        javaParser0.AnnotationTypeDeclaration(659);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PF7V@J");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.UnaryExpressionNotPlusMinus();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: @
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.AnnotationTypeDeclaration(659);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      JavaParser javaParser0 = new JavaParser("x");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MethodDeclaration(256);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4096);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser("b5z~'");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MethodDeclaration(2308);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      StringReader stringReader0 = new StringReader("0T`F^qV+iTwFhtbFKM~");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ShiftExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: T
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaParser0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "`3q";
      StringReader stringReader0 = new StringReader("`3q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(8);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("-^bz#lGN(}");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.BreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic((-3574));
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("IfStatement");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser1.BlockStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "!_?$a)|Opc.Sp?,vE|B";
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ShiftExpression();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.FieldDeclaration(83);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 2354;
      StringReader stringReader0 = new StringReader("j9{&;z!^.8");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("ShiftExpression");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      JavaParser javaParser1 = new JavaParser("ShiftExpression");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic((-3574));
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Dk[Ohu\"}'PPHvLG");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sDB0(J9;70Qu");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(",v.%&Ys\"s4QxJgkJ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(">>=");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      Token token0 = javaParser0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals("", token0.toString());
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(1);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(148);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w'i+s,z/B4-+m`za");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.FieldDeclaration((-490));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"+\" (43), after : \"\\'i\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 34. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParser javaParser0 = new JavaParser("P");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte byte0 = (byte)25;
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected((byte)25);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 4, (byte)121, 54);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 4, column 121.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      assertNotNull(jJTJavaParserState0);
      
      try { 
        javaParser0.ImplementsList(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("(Twk'#={4r]L0rM");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser1.StatementExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"=\" (61), after : \"\\'#\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("J_4(u(SX1a7hwb8(\"5");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser0.DoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: x
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      StringReader stringReader0 = new StringReader("\"/=\"");
      assertNotNull(stringReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: \"/=\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4096);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 2);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      int int0 = 85;
      stringReader0.mark(85);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser0.StatementExpression();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertNotSame(javaParser0, javaParser1);
      
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mo`n`");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ExtendsList(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      StringReader stringReader0 = new StringReader("\"/=\"");
      assertNotNull(stringReader0);
      
      stringReader0.mark(2);
      StringReader stringReader1 = new StringReader("\"/=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser1 = new JavaParser(stringReader1);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      assertNotNull(simpleNode0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      javaParser0.EnumConstant();
      assertFalse(javaParser0.lookingAhead);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "yGd_t";
      stringArray0[1] = "         java JavaParser < inputfile";
      stringArray0[2] = "NWR/lb,CW0[h)fWN";
      JavaParser.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: /
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sDB0(J9;70Qu");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader2 = new StringReader("p");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(" : ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 8.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "\"strictfp\"";
      SystemInUtil.addInputLine("\"strictfp\"");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = null;
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: \"strictfp\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "Java Parser Version 1.1:  File ";
      JavaParser javaParser0 = new JavaParser("Java Parser Version 1.1:  File ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      JavaParser javaParser0 = new JavaParser("F0&j@-%}wrZ\"\"3`2kss");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.EnumDeclaration(2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 512, 512);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean1 = javaParser_ModifierSet1.isPrivate((-1536));
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean1);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      
      JavaParser javaParser0 = new JavaParser("_pI[=");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PrimitiveType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("&38lXAGb`.U8WF0lX,");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceBody(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.RelationalExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(512);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      File file0 = MockFile.createTempFile("\"for\"", "\"for\"");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("\"for\"0\"for\"", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/\"for\"0\"for\"", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("\"for\"0\"for\"", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/\"for\"0\"for\"", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, mockFileInputStream0.available());
      
      try { 
        javaParser0.ConditionalAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(1086);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean1 = sequenceInputStream0.markSupported();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringWriter stringWriter1 = stringWriter0.append('@');
      assertNotNull(stringWriter1);
      assertEquals("@", stringWriter0.toString());
      assertEquals("@", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = stringWriter1.append('P');
      assertNotNull(stringWriter2);
      assertEquals("@P", stringWriter0.toString());
      assertEquals("@P", stringWriter1.toString());
      assertEquals("@P", stringWriter2.toString());
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      
      // Undeclared exception!
      try { 
        javaParser0.dump(stringWriter2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      String string0 = "\"kO";
      StringReader stringReader0 = new StringReader("\"kO");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"kO");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('=');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) stringReader0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\"kO", objectArray0);
      assertNotNull(printWriter0);
      assertEquals(3, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        javaParser1.dump(printWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JavaParser javaParser0 = new JavaParser(dataInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableDeclaratorId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Op.Sp?,vE\"B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4096);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("!_?$a)|Op.Sp?,vE\"B");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.mark(1558);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 64, column 4114.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("case");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser("case");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser1.disable_tracing();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser1, javaParser0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1005), 78);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)103}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(78, byteArrayInputStream0.available());
      
      JavaParser javaParser2 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser2);
      assertArrayEquals(new byte[] {(byte)44, (byte)103}, byteArray0);
      assertFalse(javaParser2.lookingAhead);
      assertEquals(2, byteArray0.length);
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertEquals(78, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser2.DefaultValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser("An interface cannot have initializers");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      StringReader stringReader0 = new StringReader("qdz,WEES)4L8D#kzP\u0003");
      assertNotNull(stringReader0);
      
      javaParser1.ReInit((Reader) stringReader0);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser1, javaParser0);
      
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(50);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal((-281));
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("nY9P/kCq=MR-4W^yp-(");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Pw(0");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1, 78);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.Name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ConditionalOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(".i\"s@Hla8X67");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.IfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      assertNotNull(jJTJavaParserState0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/10_jmca");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "+");
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      int int0 = (-3704);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-3704), 128);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.AssignmentOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PF7V@J");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      int int0 = 100;
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.UnaryExpressionNotPlusMinus();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: @
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "x";
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ConditionalOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = '&';
      charArray0[2] = '>';
      charArray0[3] = 'T';
      charArray0[4] = '@';
      charArray0[5] = 'y';
      charArray0[6] = ' ';
      charArray0[7] = ':';
      javaParser0.ForUpdate();
      assertFalse(javaParser0.lookingAhead);
      
      charArray0[8] = 's';
      try { 
        stringReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Cp");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParser1.PrimaryPrefix();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser1, javaParser0);
      
      SystemInUtil.addInputLine("UnaryExpression");
      try { 
        javaParser1.Block();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 15.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
      
      String string0 = "ShiftExpression";
      JavaParser javaParser0 = new JavaParser("ShiftExpression");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 128);
      assertNotNull(simpleNode0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      SimpleNode simpleNode1 = new SimpleNode(4);
      assertNotNull(simpleNode1);
      assertFalse(simpleNode1.equals((Object)simpleNode0));
      assertEquals(0, simpleNode1.jjtGetNumChildren());
      
      Node node0 = simpleNode1.parent;
      assertNull(node0);
      
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        javaParser1.FieldDeclaration(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 15.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SystemInUtil.addInputLine("\"strictfp\"");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "\"strictfp\"";
      stringArray0[2] = "\"strictfp\"";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = "\"strictfp\"";
      JavaParser.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: \"strictfp\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(106);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("9isX9l^");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("\"/P5`Oo/s?");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      javaParser1.NameList();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser1, javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(4);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 13.  Encountered: )
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = ".  Encountered: ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "x";
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.VariableDeclarator();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = false;
      try { 
        javaParser0.VariableDeclaratorId();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("ShiftExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 15.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(148);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ShiftExpression();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      JavaParser javaParser1 = new JavaParser("F0&j@-%}wrZ\"\"3`2kss");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.EnumDeclaration(79);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: UnaryExpression
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Java Parser Version 1.1:  File ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader1 = new StringReader("J_4(u(SX1a7hwb8(\"5");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.FieldDeclaration(83);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader2 = new StringReader(" : ");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(" : ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      
      try { 
        javaParser0.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("J_4(u(SX1a7hwb8(\"5");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative((-1504));
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      try { 
        javaParser0.PackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: x
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yx");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Yx");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParser0.ReferenceType();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PF7V@J");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      stringReader0.mark(100);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.UnaryExpressionNotPlusMinus();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: @
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4096);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufsize = 512;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 64, column 4101.  Encountered: )
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4280, (byte)95);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)95}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-4279), byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)95}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, byteArray0.length);
      assertEquals((-4279), byteArrayInputStream0.available());
      
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("case");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)44;
      // Undeclared exception!
      try { 
        javaParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("e~< p`");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      stringReader0.close();
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = 75;
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: Parser
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SystemInUtil.addInputLine("4!l,kj");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: 4
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      char char0 = 'R';
      StringReader stringReader0 = new StringReader(".i\"s@Hla8X67");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.RelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "An interface cannot have initializers";
      JavaParser javaParser0 = new JavaParser("An interface cannot have initializers");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ExtendsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-59), 37);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-59), (byte)116, (byte)32}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(37, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-59), (byte)116, (byte)32}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(4, byteArray0.length);
      assertEquals(37, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclaration((byte) (-59));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SystemInUtil.addInputLine("]/KK9YEl/RN7/='dNB");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      StringReader stringReader0 = new StringReader("]/KK9YEl/RN7/='dNB");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ]
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("ShiftExpression");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.ClassOrInterfaceDeclaration(1693);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: Java
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3271, (-3777), 3271);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.InstanceOfExpression();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(3271, javaCharStream0.getBeginLine());
      assertEquals((-3771), javaCharStream0.getBeginColumn());
      assertEquals(3271, javaCharStream0.getEndLine());
      assertEquals((-3771), javaCharStream0.getColumn());
      assertEquals((-3771), javaCharStream0.getEndColumn());
      assertEquals(3271, javaCharStream0.getLine());
      
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 3271, column -3771.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      stringReader0.mark(4622);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.VariableInitializer();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean0 = javaParser_ModifierSet1.isSynchronized(1086);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('@');
      assertNotNull(stringWriter1);
      assertEquals("@", stringWriter0.toString());
      assertEquals("@", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = stringWriter1.append('P');
      assertNotNull(stringWriter2);
      assertEquals("@P", stringWriter0.toString());
      assertEquals("@P", stringWriter1.toString());
      assertEquals("@P", stringWriter2.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      
      // Undeclared exception!
      try { 
        javaParser0.dump(stringWriter2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(148);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader(" : ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser((String) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser1.ReInit((Reader) stringReader0);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser1, javaParser0);
      
      JavaParser javaParser2 = new JavaParser(stringReader0);
      assertNotNull(javaParser2);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      
      try { 
        javaParser2.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      String string0 = "J_4(u(SX1a7hwb8(\"5";
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient((-1));
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertTrue(boolean0);
      
      try { 
        javaParser0.EnumDeclaration(128);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: x
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.VariableDeclaratorId();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: Parser
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"//\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)57;
      byte byte0 = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)57, (byte)68);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (byte)85, 3669, 1406);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser1.AndExpression();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser1, javaParser0);
      
      JavaCharStream javaCharStream1 = javaParser0.jj_input_stream;
      assertNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(6, byteArray0.length);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser2 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser2);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(6, byteArray0.length);
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.EnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 85, column 3668.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\"byte\"");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1005), 78);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)103}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(78, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)44, (byte)103}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(2, byteArray0.length);
      assertEquals(78, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("m0jT6/W)CiMK&");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("K+hu0iG/{");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.VariableDeclarator();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.NullLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<SINGLE_LINE_COMMENT>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("<SINGLE_LINE_COMMENT>");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      stringReader0.reset();
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      javaParser0.ConditionalExpression();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertNotSame(javaParser0, javaParser1);
      
      try { 
        javaParser1.ForUpdate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean0 = javaParser_ModifierSet1.isSynchronized(1086);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('@');
      assertNotNull(stringWriter1);
      assertEquals("@", stringWriter0.toString());
      assertEquals("@", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(2850);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("MC1j?L(|cl&:&*vw2S<");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("6c@W(t");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(2850);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.FormalParameter();
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-696), 75);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser1.AssignmentOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-84);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-84), (byte)89);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-84), (byte)25, (byte) (-84), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(89, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)25);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-84), (byte)25, (byte) (-84), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(89, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-84), (byte)25, (byte) (-84), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(9, byteArray0.length);
      assertEquals(89, byteArrayInputStream0.available());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Encountered \"";
      stringArray0[1] = "\" at line ";
      // Undeclared exception!
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = ".  Encountered: ";
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 659;
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(255);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean1 = javaParser_ModifierSet0.isPrivate(512);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean1);
      assertFalse(javaParser_ModifierSet0.equals((Object)javaParser_ModifierSet1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(javaParser_ModifierSet0, javaParser_ModifierSet1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("%>o\"!xq`+MDu|");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = true;
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)57;
      byte byte0 = (byte)19;
      byteArray0[2] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)86, (byte)57, (byte)19}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)57);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)86, (byte)57, (byte)19}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pushbackInputStream0);
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)86, (byte)57, (byte)19}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaParser javaParser1 = new JavaParser(sequenceInputStream0);
      assertNotNull(javaParser1);
      assertArrayEquals(new byte[] {(byte)86, (byte)57, (byte)19}, byteArray0);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(3, byteArray0.length);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(3, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser1.BlockStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      int int0 = stringReader1.read();
      assertEquals(33, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic((-1080));
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.FieldDeclaration(83);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sDB0(J9;70Qu");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.RelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 8.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ShiftExpression();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      int int0 = (-2749);
      try { 
        javaParser0.MethodDeclaration((-2749));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m__M3KDXsj!flh");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean1 = javaParser_ModifierSet0.isFinal(17);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.VariableDeclaratorId();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("%>o\"!xq`+MDu|");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      assertNotNull(jJTJavaParserState0);
      
      try { 
        javaParser0.IfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot have initializers");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SystemInUtil.addInputLine("\"strictfp\"");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser("");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: \"strictfp\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      stringReader0.reset();
      SystemInUtil.addInputLine("{IrbwjGxOew%5A");
      int int0 = 90;
      stringReader0.mark(90);
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 11.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParser0.ArgumentList();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertNotSame(javaParser0, javaParser1);
      
      try { 
        javaParser0.AssignmentOperator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 53.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.enable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: UnaryExpression
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-42);
      byteArray0[8] = (byte) (-94);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte)115, (byte)66, (byte)17, (byte)106, (byte)67, (byte)64, (byte) (-42), (byte) (-94)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      boolean boolean1 = sequenceInputStream0.markSupported();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, (byte)96);
      assertNotNull(bufferedInputStream0);
      
      int int0 = bufferedInputStream0.read();
      assertEquals((-1), int0);
      
      boolean boolean2 = bufferedInputStream0.markSupported();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Literal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean1 = javaParser_ModifierSet0.isStatic(8);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.StatementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JavaParser.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4096);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = javaParser_ModifierSet0.isPrivate(4);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("UO&16G&Ed*`s+m|kV");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Block();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)49, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-124), (byte)0, (byte)120}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-45), byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-124), (byte)0, (byte)120}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(4, byteArray0.length);
      assertEquals((-45), byteArrayInputStream0.available());
      
      boolean boolean0 = true;
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(148);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\"byte\"");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.EnumDeclaration(307);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("OfK@!Brw8$ZbOa");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.NullLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      stringReader0.mark(90);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"protected\"");
      assertFalse(boolean0);
      
      SystemInUtil.addInputLine("h\u0004R'E4!+?y5m<^");
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.FieldDeclaration(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 53.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParser1.ArgumentList();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser1, javaParser0);
      
      try { 
        javaParser1.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 15.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      int int0 = 90;
      stringReader0.mark(90);
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        JavaParser.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q'i#4k&");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"#\" (35), after : \"\\'i\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      assertNotNull(simpleNode0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      int int0 = 83;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 115, 109, 83);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, 105, 115);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParser0.AdditiveExpression();
      assertFalse(javaParser0.lookingAhead);
      
      Token token0 = javaParser0.getToken(int0);
      assertNotNull(token0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(16, token0.beginColumn);
      assertEquals(16, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals("", token0.toString());
      
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 7.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'/Pl<9A )6Fy(");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceDeclaration((-218));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"P\" (80), after : \"\\'/\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      StringReader stringReader0 = new StringReader("\"/=\"");
      assertNotNull(stringReader0);
      
      stringReader0.mark(2);
      StringReader stringReader1 = new StringReader("\"/=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser1 = new JavaParser(stringReader1);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser0.UnaryExpression();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParser0, javaParser1);
      
      stringReader0.mark(70);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate(2147483646);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertTrue(boolean0);
      assertFalse(javaParser_ModifierSet0.equals((Object)javaParser_ModifierSet1));
      assertNotSame(javaParser_ModifierSet0, javaParser_ModifierSet1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-110), (-2108));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean2 = stringReader0.markSupported();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2108), (-110));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaParser1.token_source.setDebugStream(javaParserTokenManager0.debugStream);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaParser0, javaParser1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParser1, javaParser0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParser javaParser2 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser2);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      
      JavaParser javaParser3 = new JavaParser(stringReader0);
      assertNotNull(javaParser3);
      assertFalse(javaParser3.lookingAhead);
      assertFalse(javaParser3.equals((Object)javaParser2));
      assertFalse(javaParser3.equals((Object)javaParser1));
      assertFalse(javaParser3.equals((Object)javaParser0));
      
      try { 
        javaParser3.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = javaParser0.Modifiers();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, int0);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(javaParser0, javaParser1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)89;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jt_-o+");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: jt_
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m__M3KDXsj!flh");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("m__M3KDXsj!flh");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.VariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic((-3574));
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(">T2{Aio`>");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      String[] stringArray0 = new String[0];
      JavaParser.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      stringReader0.mark(85);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.StatementExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 27, 67);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-22), byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 86);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-22), byteArrayInputStream0.available());
      
      JavaParser javaParser1 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser1);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78)}, byteArray0);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(5, byteArray0.length);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals((-22), byteArrayInputStream0.available());
      
      try { 
        javaParser1.Block();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ON:Uhrt5DK");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      int int0 = 4622;
      stringReader0.mark(4622);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ON
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Literal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4280, 2642);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)95}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-4279), byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)95}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, byteArray0.length);
      assertEquals((-4279), byteArrayInputStream0.available());
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser1.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser2 = new JavaParser(javaParser1.token_source);
      assertNotNull(javaParser2);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      
      javaParser2.EnumConstant();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.equals((Object)javaParser2));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertNotSame(javaParser1, javaParser0);
      assertNotSame(javaParser1, javaParser2);
      assertNotSame(javaParser2, javaParser0);
      assertNotSame(javaParser2, javaParser1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 84, (-574), 269);
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaParser2.ReInit((JavaParserTokenManager) null);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.equals((Object)javaParser2));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertNotSame(javaParser1, javaParser0);
      assertNotSame(javaParser1, javaParser2);
      assertNotSame(javaParser2, javaParser0);
      assertNotSame(javaParser2, javaParser1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isStatic(95);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Op.Sp?,vE\"B");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser2 = new JavaParser("UnaryExpression");
      assertNotNull(javaParser2);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParser0.EnumConstant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      assertNotNull(jJTJavaParserState0);
      
      stringReader0.close();
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      StringReader stringReader0 = new StringReader(".i\"s@Hla8X67");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic((-907));
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertTrue(boolean0);
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      javaParser0.StatementExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 43.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(95);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      SystemInUtil.addInputLine("<l=mc]0(v");
      int int0 = 2743;
      int int1 = JavaParser.ModifierSet.removeModifier(2, 4);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean0 = javaParser_ModifierSet1.isTransient(2147483646);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertTrue(boolean0);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      
      StringReader stringReader0 = new StringReader("hb^vIw}HFnLxoj6BV");
      assertNotNull(stringReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(2140);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.BreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4096);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean1 = javaParser_ModifierSet1.isPublic(42);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean1);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1916));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = "";
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.EnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mo`n`");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      try { 
        javaParser0.BreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: mo
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      StringReader stringReader0 = new StringReader("\"/=\"");
      assertNotNull(stringReader0);
      
      stringReader0.mark(2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader1 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser("BxIJWtzgHAt%/|Hm;C");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      try { 
        javaParser0.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: Parser
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QGokw<X:DoPm/y{<");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("QGokw<X:DoPm/y{<");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParser0.MultiplicativeExpression();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      SystemInUtil.addInputLine("]/KK9YEl/RN7/='dNB");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean1 = javaParser_ModifierSet0.isStatic(1378);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      StringReader stringReader0 = new StringReader("]/KK9YEl/RN7/='dNB");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ]
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("NWR/lb,CW0[h)fWN");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaParser javaParser2 = new JavaParser(mockFileInputStream0);
      assertNotNull(javaParser2);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(fileDescriptor0.valid());
      
      javaParser1.TypeArgument();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser2));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotSame(javaParser1, javaParser2);
      assertNotSame(javaParser1, javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mo`n`");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '3';
      charArray0[2] = 'i';
      charArray0[3] = '$';
      charArray0[4] = 'd';
      charArray0[5] = 'h';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'m', 'o', '`', 'n', '`', 'h'}, charArray0);
      assertEquals(5, int0);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">zb^%");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaParser1.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser2 = new JavaParser(javaParser1.token_source);
      assertNotNull(javaParser2);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      
      javaParser2.EnumConstant();
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.equals((Object)javaParser2));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertNotSame(javaParser1, javaParser0);
      assertNotSame(javaParser1, javaParser2);
      assertNotSame(javaParser2, javaParser1);
      assertNotSame(javaParser2, javaParser0);
      
      try { 
        javaParser2.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 15.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      Node node0 = javaParser0.currNode;
      assertNull(node0);
      
      try { 
        javaParser0.AdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = ".  Encountered: ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ReturnStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      assertTrue(boolean0);
      
      stringReader0.reset();
      int int0 = 90;
      stringReader0.mark(90);
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 2354;
      // Undeclared exception!
      try { 
        javaParser0.ExtendsList(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      StringReader stringReader0 = new StringReader(".i\"s@Hla8X67");
      assertNotNull(stringReader0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      JavaParser javaParser0 = new JavaParser(".i\"s@Hla8X67");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      File file0 = MockFile.createTempFile("tW3\"~fVOtH", " not found.");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/tW3\"~fVOtH0 not found.", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("tW3\"~fVOtH0 not found.", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/tW3\"~fVOtH0 not found.", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("tW3\"~fVOtH0 not found.", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, mockFileInputStream0.available());
      
      try { 
        javaParser0.ImplementsList(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(4);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MethodDeclaration(2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: /
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      SystemInUtil.addInputLine("Q`");
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(148);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader(" : ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser1.ReInit((Reader) stringReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)64;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "w-";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "&&";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JavaParser.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      StringReader stringReader0 = new StringReader("w-");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: w
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isVolatile(68);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = null;
      try {
        javaParser0 = new JavaParser((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JavaParser javaParser0 = new JavaParser(dataInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.lookingAhead = false;
      // Undeclared exception!
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4096);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 64, column 4115.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ycJ-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("ycJ-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader1);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParser0.Type();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: -
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m__M3KDXsj!flh");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.VariableDeclarator();
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-3147));
      assertNotNull(simpleNode0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      javaParser0.VariableInitializer();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 14.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
      assertNotNull(stringReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader1 = new StringReader("\"?\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser("p");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: \"?\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(148);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(148);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      
      javaParser0.lookingAhead = true;
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      javaParser0.ConditionalExpression();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertNotSame(javaParser0, javaParser1);
      
      try { 
        javaParser1.ForUpdate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(512);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      File file0 = MockFile.createTempFile("\"for\"", "\"for\"");
      assertNotNull(file0);
      assertEquals("/tmp/\"for\"0\"for\"", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("\"for\"0\"for\"", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals("/tmp/\"for\"0\"for\"", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("\"for\"0\"for\"", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0, mockFileInputStream0.available());
      
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Encountered \"");
      assertNotNull(stringReader0);
      
      int int0 = 2354;
      JavaParser javaParser0 = new JavaParser("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ExtendsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 75, 75, 75);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser1.AssignmentOperator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 75, column 75.  Encountered: Java
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3153);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertNotNull(javaParser1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser1.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      SystemInUtil.addInputLine("R0");
      JavaParser javaParser0 = new JavaParser("R0");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)89;
      byteArray0[8] = (byte)125;
      byteArray0[8] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1381), 19);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)109, (byte) (-112), (byte)103, (byte)35, (byte)81, (byte)89, (byte)0, (byte) (-29)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      JavaParser javaParser1 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser1);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)109, (byte) (-112), (byte)103, (byte)35, (byte)81, (byte)89, (byte)0, (byte) (-29)}, byteArray0);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(9, byteArray0.length);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(19, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser1.StatementExpressionList();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      SystemInUtil.addInputLine("R0");
      JavaParser javaParser0 = new JavaParser("R0");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PrimitiveType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: R0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "Java Parser Version 1.1:  File ";
      JavaParser javaParser0 = new JavaParser("Java Parser Version 1.1:  File ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      char char0 = 'x';
      char char1 = '&';
      char char2 = '>';
      char char3 = '@';
      char char4 = 'y';
      char char5 = 's';
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser1.ForUpdate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-124);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3928);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      Token token0 = javaParser0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", token0.toString());
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pm0_z[i77W_F]^#CM");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 15.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean0 = javaParser_ModifierSet1.isSynchronized(1086);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean0);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('@');
      assertNotNull(stringWriter1);
      assertEquals("@", stringWriter0.toString());
      assertEquals("@", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      // Undeclared exception!
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sDB0(J9;70Qu");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader2 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParser javaParser0 = new JavaParser(" : ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 8.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceDeclaration(4280);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("UnaryExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser2 = new JavaParser(stringReader0);
      assertNotNull(javaParser2);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser0.FieldDeclaration((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader0 = new StringReader("mn:>I1yW=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-628), (-628));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("_pI[=");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      JavaParser javaParser1 = new JavaParser("");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(64);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("!_?$a)|Opc.Sp?,vE|B");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 4);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate((-2749));
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)89}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("x");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader1 = new StringReader("J_4(u(SX1a7hwb8(\"5");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaParser javaParser2 = new JavaParser("F[]|83");
      assertNotNull(javaParser2);
      assertFalse(javaParser2.lookingAhead);
      assertFalse(javaParser2.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      
      try { 
        javaParser2.MemberValueArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(512);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean0);
      
      File file0 = MockFile.createTempFile("\"for\"", "\"for\"");
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("\"for\"0\"for\"", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/\"for\"0\"for\"", file0.toString());
      
      StringReader stringReader0 = new StringReader("\"for\"");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      Token token0 = Token.newToken(16);
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      
      javaParser0.jj_nt = token0;
      assertNull(token0.toString());
      assertNull(javaParser0.jj_nt.toString());
      
      javaParser0.UnaryExpression();
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)57;
      byte byte0 = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)57, (byte)68);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (byte)85, (byte)33, 1406);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte)97, (byte)33, (byte)85, (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(6, byteArray0.length);
      assertEquals((-51), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWN");
      assertNotNull(stringReader0);
      
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 85, column 32.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      assertNotNull(jJTJavaParserState0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(4);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(512);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("FormalParameter");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.MultiplicativeExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 15.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ycJ-");
      assertNotNull(stringReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader1 = new StringReader("ycJ-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser("AsDYWLft@B[");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader1);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      javaParser0.TypeParameter();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = "NWR/lb\\,CW0[h)fWS";
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile(4);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("NWR/lb,CW0[h)fWS");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceDeclaration(256);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: NWR
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UgG");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(85, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1582));
      assertNotNull(simpleNode0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Node node0 = simpleNode0.parent;
      assertNull(node0);
      
      javaParser0.currNode = null;
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: gG
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("{I-%fg[}O/g:Q");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser("{I-%fg[}O/g:Q");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.RelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(1L);
      assertEquals(1L, long0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = (-2100);
      int int1 = 85;
      try { 
        javaParser0.AnnotationTypeDeclaration(85);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: Encountered
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      stringReader0.mark(90);
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      boolean boolean1 = javaParser_ModifierSet0.isTransient(90);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("KV;Ov?.MEULn.5W .N");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParser javaParser0 = new JavaParser(stringReader2);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{F");
      assertNotNull(stringReader0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(111);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-756), (-1140));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean0 = javaParser_ModifierSet1.isSynchronized(1086);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      int int0 = JavaParser.ModifierSet.removeModifier(4096, 76);
      assertEquals(4096, int0);
      
      JavaParser.ModifierSet javaParser_ModifierSet2 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet2);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(javaParser_ModifierSet2.equals((Object)javaParser_ModifierSet1));
      assertFalse(javaParser_ModifierSet2.equals((Object)javaParser_ModifierSet0));
      
      StringReader stringReader0 = new StringReader("A class cannot extend more than one other class");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      try { 
        stringReader0.skip(8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }
}
