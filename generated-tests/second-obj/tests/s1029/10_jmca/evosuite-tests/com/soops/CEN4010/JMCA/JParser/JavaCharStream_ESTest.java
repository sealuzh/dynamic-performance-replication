/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:56:47 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.backup((-2335));
      assertEquals(2334, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0);
      javaCharStream0.Done();
      javaCharStream0.ReInit((Reader) null, 2061, 0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((-2023));
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.backup((-2340));
      javaCharStream0.adjustBeginLineColumn((-2340), (-2340));
      assertEquals(2339, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-3400), (-693));
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      javaCharStream0.ReInit((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream.hexval('E');
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2691, 9);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 94, (-3336));
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BBj0");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.getBeginColumn();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)57, (byte)58);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1, (byte)58, 172);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      javaCharStream0.backup(1);
      javaCharStream0.readChar();
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) pipedReader0, 1, 1, (-2429));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.backup(88);
      javaCharStream0.getLine();
      assertEquals(4007, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2Z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 352, 0);
      javaCharStream0.GetImage();
      JavaCharStream.hexval('d');
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-3400), 928);
      javaCharStream0.GetImage();
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1582, 1582);
      char[] charArray0 = javaCharStream0.GetSuffix(93);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.backup((-2345));
      javaCharStream0.getLine();
      assertEquals(2344, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 69);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream1);
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-3400), 946);
      javaCharStream0.line = (-3400);
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        JavaCharStream.hexval('k');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char char0 = 'e';
      JavaCharStream.hexval('e');
      InputStream inputStream0 = null;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("!f0^,ru;");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaCharStream0.UpdateLineColumn('t');
      javaCharStream0.GetImage();
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JavaCharStream.hexval('D');
      boolean boolean0 = JavaCharStream.staticFlag;
      MockFile mockFile0 = new MockFile("", "Aswg~I{t");
      assertEquals(0L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]a}`j|Seq+FQEr_");
      assertFalse(boolean0);
      
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-3400), (-1));
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(374);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream1);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1939);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 1939, 1939);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.maxNextCharInd = 1939;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1939, javaCharStream0.getBeginLine());
      assertEquals(1939, javaCharStream0.getEndColumn());
      assertEquals(1939, javaCharStream0.getLine());
      assertEquals(1939, javaCharStream0.getEndLine());
      assertEquals(1939, javaCharStream0.getColumn());
      assertEquals(1939, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(374);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 928);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 11);
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 54, 11);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int1 = JavaCharStream.hexval('9');
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, (-1567), 0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.prevCharIsLF = false;
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 928);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = JavaCharStream.staticFlag;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1937);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[0] = (byte)6;
      byteArray0[4] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)10, (byte)0, (byte)117, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1), (-1));
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean2 = byteArrayInputStream0.markSupported();
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)10, (byte)0, (byte)117, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockFile mockFile0 = new MockFile(" clumn ", " clumn ");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/ clumn ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" clumn ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/ clumn / clumn ", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      long long0 = bufferedInputStream0.skip((byte) (-40));
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      assertEquals(0L, long0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1864);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 1864, (-2606), (byte) (-40));
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      long long0 = bufferedInputStream0.skip((byte) (-40));
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      assertEquals(0L, long0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 1362, 0);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      javaCharStream0.adjustBeginLineColumn(71, 799);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(72, javaCharStream0.getBeginLine());
      assertEquals(799, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      javaCharStream0.adjustBeginLineColumn(1362, 1);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1364, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean2 = stringReader0.ready();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char char0 = 'P';
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1104), (-1104));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40)}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = JavaCharStream.staticFlag;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      int int1 = JavaCharStream.hexval('A');
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2652);
      assertNotNull(pipedReader0);
      
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 11, 101);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("column ");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'c', 'o', 'l', 'u'}, charArray0);
      assertEquals(4, int0);
      
      boolean boolean2 = stringReader0.ready();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-28);
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)79;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-28), (byte)101, (byte)79}, byteArray0);
      
      int int0 = JavaCharStream.hexval('7');
      assertEquals(7, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      assertNotNull(charsetDecoder0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, (CharsetDecoder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset decoder
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1999), 498);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(498, javaCharStream0.getColumn());
      assertEquals((-1999), javaCharStream0.getEndLine());
      assertEquals(498, javaCharStream0.getEndColumn());
      assertEquals(498, javaCharStream0.getBeginColumn());
      assertEquals((-1999), javaCharStream0.getLine());
      assertEquals((-1999), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      assertEquals(']', char0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertEquals(2, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      long long0 = byteArrayInputStream0.skip((-604L));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(0L, long0);
      
      byteArrayInputStream0.close();
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      char char1 = '2';
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BBj0");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)93, (byte)93}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean2 = byteArrayInputStream0.markSupported();
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)93, (byte)93}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1, 5332, 1750);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)93, (byte)93}, byteArray0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5332, javaCharStream0.getEndColumn());
      assertEquals(5332, javaCharStream0.getColumn());
      assertEquals(5332, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)93, (byte)93}, byteArray0);
      assertEquals('\r', char0);
      
      int int0 = javaCharStream0.getEndColumn();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5332, javaCharStream0.getEndColumn());
      assertEquals(5332, javaCharStream0.getColumn());
      assertEquals(5332, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)93, (byte)93}, byteArray0);
      assertEquals(5332, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.backup(38);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(4057, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4058, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockFile mockFile0 = new MockFile(" clumn ", " clumn ");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/ clumn / clumn ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(" clumn ", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/ clumn ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      
      javaCharStream0.adjustBeginLineColumn((-1339), 38);
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals((-1339), javaCharStream0.getEndLine());
      assertEquals((-1339), javaCharStream0.getLine());
      assertEquals((-1338), javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4058, javaCharStream0.bufpos);
      
      char char1 = Locale.UNICODE_LOCALE_EXTENSION;
      assertFalse(char1 == char0);
      assertEquals('u', char1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      char char2 = javaCharStream0.BeginToken();
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals((-1339), javaCharStream0.getEndLine());
      assertEquals((-1339), javaCharStream0.getLine());
      assertEquals((-1339), javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4059, javaCharStream0.bufpos);
      assertFalse(char2 == char1);
      assertTrue(char2 == char0);
      assertEquals('\u0000', char2);
      
      char char3 = javaCharStream0.BeginToken();
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals((-1339), javaCharStream0.getEndLine());
      assertEquals((-1339), javaCharStream0.getLine());
      assertEquals((-1339), javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(4060, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(char3 == char1);
      assertTrue(char3 == char2);
      assertTrue(char3 == char0);
      assertEquals('\u0000', char3);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals((-1338), javaCharStream0.getLine());
      assertEquals((-1338), javaCharStream0.getEndLine());
      assertEquals((-1339), javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = JavaCharStream.hexval('C');
      assertFalse(int1 == int0);
      assertEquals(12, int1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1), 80);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      pipedInputStream0.mark((-1));
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      assertNotNull(pipedOutputStream1);
      assertFalse(pipedOutputStream1.equals((Object)pipedOutputStream0));
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream((byte) (-40));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[23];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)13;
      byteArray1[15] = (byte)93;
      byteArray0[0] = (byte) (-78);
      byteArray1[4] = (byte) (-78);
      byteArray1[17] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertNotNull(byteArrayInputStream0);
      assertEquals(23, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)13, (byte) (-78));
      assertNotNull(javaCharStream0);
      assertEquals(23, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaCharStream0.AdjustBuffSize();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long long0 = byteArrayInputStream0.skip((byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0L, long0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      javaCharStream0.FillBuff();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      javaCharStream0.adjustBeginLineColumn((-869), (byte)13);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-868), javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char char0 = javaCharStream0.BeginToken();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-868), javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals((-868), javaCharStream0.getLine());
      assertEquals((-868), javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals('\r', char0);
      
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.backup(3);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4092, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4093, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      
      javaCharStream0.line = 97;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      javaCharStream0.available = (-875);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char char1 = File.pathSeparatorChar;
      assertFalse(char1 == char0);
      assertEquals(':', char1);
      
      byte[] byteArray0 = new byte[0];
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4093, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = pipedInputStream0.read(byteArray0);
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char char2 = javaCharStream0.readChar();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream0.bufpos);
      assertTrue(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('\u0000', char2);
      
      boolean boolean2 = byteArrayInputStream0.markSupported();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("BBj0");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 200, (-3143));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[2];
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'B', 'B'}, charArray0);
      assertEquals(2, int0);
      
      charArray0[0] = 'f';
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int1 = JavaCharStream.hexval('f');
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      javaCharStream0.bufsize = (int) 'f';
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, int2);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      int int3 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      assertFalse(boolean0);
      
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertEquals(2, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      long long0 = byteArrayInputStream1.skip((byte)31);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(2L, long0);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream2);
      assertEquals(2, byteArrayInputStream2.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      
      byteArrayInputStream2.close();
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertEquals(2, byteArrayInputStream2.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)6}, byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      int int1 = JavaCharStream.hexval('2');
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      int int2 = JavaCharStream.hexval('2');
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.bufpos = 3;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = new byte[23];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte)93;
      byteArray0[0] = (byte) (-78);
      byteArray1[4] = (byte) (-78);
      byteArray1[17] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertNotNull(byteArrayInputStream0);
      assertEquals(23, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)13, (byte) (-78));
      assertNotNull(javaCharStream0);
      assertEquals(23, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byteArrayInputStream0.close();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byteArrayInputStream0.mark((byte)13);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean2 = byteArrayInputStream0.markSupported();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      char char1 = javaCharStream0.BeginToken();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals((-78), javaCharStream0.getBeginColumn());
      assertEquals((-78), javaCharStream0.getColumn());
      assertEquals((-78), javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(char1 == char0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals('\r', char1);
      
      char char2 = javaCharStream0.BeginToken();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('\uFFFD', char2);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      javaCharStream0.Done();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(38);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4057, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4058, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(3);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4092, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(4093, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = JavaCharStream.staticFlag;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char char1 = File.pathSeparatorChar;
      assertFalse(char1 == char0);
      assertEquals(':', char1);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(4093, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = pipedInputStream0.read(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, int0);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      char char2 = javaCharStream0.BeginToken();
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(4094, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertTrue(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('\u0000', char2);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedReader0, 4094, 3, 3);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char char3 = javaCharStream0.BeginToken();
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertTrue(char3 == char2);
      assertFalse(char3 == char1);
      assertTrue(char3 == char0);
      assertEquals('\u0000', char3);
      
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(3);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4092, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4093, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = JavaCharStream.staticFlag;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockFile mockFile0 = new MockFile("BBj0", "BBj0");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/BBj0", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals("BBj0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/BBj0/BBj0", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      
      char char1 = File.pathSeparatorChar;
      assertFalse(char1 == char0);
      assertEquals(':', char1);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      char char2 = javaCharStream0.BeginToken();
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4094, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertTrue(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('\u0000', char2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      char char3 = javaCharStream0.BeginToken();
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertTrue(char3 == char0);
      assertTrue(char3 == char2);
      assertFalse(char3 == char1);
      assertEquals('\u0000', char3);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      javaCharStream0.available = 3;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      boolean boolean4 = byteArrayInputStream0.markSupported();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      javaCharStream0.AdjustBuffSize();
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        Charset.forName("BBj0");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // BBj0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
