/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 06:30:33 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("p", token2.getTokenText());
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("G", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("=$", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.at();
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.minus();
      Token token1 = xPathLexer0.minus();
      assertEquals("(", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      Token token4 = xPathLexer0.whitespace();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token4);
      assertEquals((-2), token4.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.consume(1822);
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.notEquals();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wXZs6UCn*'");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      String string0 = token1.toString();
      assertEquals("[ (19) (XZ)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.getPreviousToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('9');
      assertTrue(boolean0);
      
      Token token2 = xPathLexer0.minus();
      assertEquals("s", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("6", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("U", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("C", token5.getTokenText());
      
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals(19, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('I');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.consume(1452);
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.consume(0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.dollar();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N[Ghly");
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.consume((-1));
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.endPosition();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.dots();
      xPathLexer0.identifier();
      xPathLexer0.getXPath();
      xPathLexer0.dots();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.literal();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.minus();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('+');
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.setXPath("tlFSbaTFAnj-)qN%}");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o0c0r@&-12HO2{@sD");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.minus();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.getXPath();
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftParen();
      assertEquals(1, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.consume(733);
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.setXPath("d/)VXnf%GA%W/&");
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("d", token4.getTokenText());
      
      Token token5 = xPathLexer0.literal();
      assertEquals(27, token5.getTokenType());
      assertEquals(")VXnf%GA%W", token5.getTokenText());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.not();
      assertEquals("&", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(14, int0);
      
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.setXPath("d/)VXnf%GA%W/&");
      Token token7 = xPathLexer0.at();
      assertEquals("d", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      assertEquals("/", token8.getTokenText());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals(")V", token9.getTokenText());
      
      xPathLexer0.leftParen();
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.setXPath("cyY-W{-c98M0<,ogQZ");
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("y", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.identifier();
      assertEquals("Y-W", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      token0.toString();
      Token token4 = xPathLexer0.slashes();
      assertEquals("{", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      xPathLexer0.operatorName();
      String string1 = token5.toString();
      assertEquals("[ (23) (-)", string1);
      
      xPathLexer0.setXPath("[ (30) ()");
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.hasMoreChars();
      xPathLexer0.setPreviousToken(token5);
      Token token6 = xPathLexer0.dollar();
      assertEquals("[", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.consume((-4798));
      xPathLexer0.setXPath("");
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j}JB?");
      xPathLexer0.isIdentifierChar('b');
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.setXPath("j}JB?");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L'H5B@4Le6RnOu");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.comma();
      assertEquals("'", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      assertEquals("5B", token2.getTokenText());
      
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.dots();
      Token token4 = xPathLexer0.number();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("L'H5B@4Le6RnOu");
      Token token5 = xPathLexer1.rightParen();
      assertEquals("L", token5.getTokenText());
      
      xPathLexer1.literal();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer3.star();
      Token token8 = xPathLexer2.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (13) (@)", string0);
      
      Token token10 = xPathLexer3.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer2.setPreviousToken(token4);
      Token token11 = xPathLexer3.number();
      assertEquals(30, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=1~%$$4I");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token3 = xPathLexer0.equals();
      assertEquals("$", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("4", token5.getTokenText());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j}JB?");
      xPathLexer0.whitespace();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("C0_{iJQWrGqq#M");
      xPathLexer1.slashes();
      xPathLexer1.doubleColon();
      xPathLexer1.or();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j}JB?");
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar(']');
      xPathLexer0.and();
      xPathLexer0.plus();
      xPathLexer0.setXPath("?MnL");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.endPosition();
      xPathLexer0.setXPath("1ye%");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mb");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('u');
      XPathLexer xPathLexer1 = new XPathLexer("mObV");
      xPathLexer1.and();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer1.setXPath("mObV");
      xPathLexer0.nextToken();
      xPathLexer1.operatorName();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.setXPath("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.endPosition();
      xPathLexer0.equals();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L'H5B@4Le6RnOu");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("L", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("'", token1.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.identifier();
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.dots();
      assertEquals("@", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("L'H5B@4Le6RnOu");
      xPathLexer1.setXPath("");
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("Le6RnOu", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(3, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(" ", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.setXPath("y");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('u');
      XPathLexer xPathLexer1 = new XPathLexer("mObV");
      xPathLexer0.leftParen();
      xPathLexer1.and();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer1.setXPath("mObV");
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j}JB?");
      xPathLexer0.isIdentifierChar('b');
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("j}JB?");
      Token token0 = xPathLexer2.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("mObV");
      xPathLexer1.and();
      xPathLexer1.star();
      xPathLexer0.plus();
      xPathLexer1.setXPath(":=pG%=$4I");
      xPathLexer1.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.setXPath("/Zfp}'>]cr");
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('');
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      Token token1 = xPathLexer0.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.setXPath("/Zfp}'>]cr");
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('');
      assertFalse(boolean0);
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("f", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("p", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("}", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("'", token7.getTokenText());
      
      xPathLexer0.setXPath("/Zfp}'>]cr");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("/", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals("Z", token9.getTokenText());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.nextToken();
      assertEquals("fp", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.consume(733);
      xPathLexer0.pipe();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.colon();
      xPathLexer0.setXPath("d/)VXnf%GA%W/&");
      xPathLexer0.div();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.setXPath("d/)VXnf%GA%W/&");
      xPathLexer0.at();
      xPathLexer0.getXPath();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("w-0p", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("\"", token3.getTokenText());
      
      xPathLexer0.setXPath("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("-", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L'H5B@4Le6RnOu");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.identifier();
      xPathLexer0.getXPath();
      xPathLexer0.dots();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("L'H5B@4Le6RnOu");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("a.SWz7KH");
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.consume(733);
      xPathLexer0.pipe();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.colon();
      xPathLexer0.setXPath("d/)Vnf%GA%W/&");
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("d/)Vnf%GA%W/&");
      xPathLexer1.doubleColon();
      xPathLexer0.or();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.div();
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierChar('u');
      XPathLexer xPathLexer1 = new XPathLexer("mObV");
      xPathLexer0.leftParen();
      xPathLexer1.and();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer1.setXPath("mObV");
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T^K^OA");
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("HyIX`m*");
      xPathLexer0.at();
      Token token0 = xPathLexer1.plus();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer("HyIX`m*");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.and();
      xPathLexer0.plus();
      xPathLexer1.setXPath("HyIX`m*");
      xPathLexer1.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer1.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K4lPQAJp1=BoX})yw9");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.plus();
      assertEquals("o", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.setXPath("O^C44E:gByVm2VV]^F");
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("O", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("^C44E:gByVm2VV]^F", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("^", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E'O7LM'^");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("'", token1.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.setXPath("y");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("gyI}Zh#s6F^ot?&w");
      Token token4 = xPathLexer3.rightParen();
      assertEquals("g", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T^K^OA");
      Token token0 = xPathLexer0.minus();
      assertEquals("T", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setXPath("T^K^OA");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("T", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer2.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer2.mod();
      Token token4 = xPathLexer2.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer2.getXPath();
      Token token5 = xPathLexer1.star();
      assertEquals("^", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.setXPath("/Zfp}'>]cr");
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.setXPath("oQAv,H2:!jXmt2lz");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K4lPQAJp1=BoX})yw9");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('(');
      assertFalse(boolean0);
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("X", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("}", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals(")", token3.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.setXPath("+JdE,d6@ntH$_6z15");
      Token token4 = xPathLexer0.nextToken();
      assertEquals(5, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals("J", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("dE", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals(",", token7.getTokenText());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T^K^OA");
      Token token0 = xPathLexer0.minus();
      assertEquals("T", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("HyIX`m*");
      xPathLexer0.at();
      Token token1 = xPathLexer1.plus();
      String string0 = token1.toString();
      assertEquals("[ (5) (H)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("K", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      Token token3 = xPathLexer1.dots();
      assertEquals("y", token3.getTokenText());
      
      Token token4 = xPathLexer1.identifier();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("[ (5) (H)");
      Token token7 = xPathLexer0.rightBracket();
      assertEquals("A", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer3.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer2.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer1.mod();
      Token token10 = xPathLexer1.nextToken();
      assertEquals("`m*", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{'$#!Q`]!gWcup");
      XPathLexer xPathLexer1 = new XPathLexer("E'O7LM'^");
      xPathLexer1.nextToken();
      xPathLexer1.comma();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer1.consume();
      xPathLexer0.setXPath("y");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("=", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("G", token2.getTokenText());
      
      xPathLexer0.setXPath("y");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.isIdentifierChar('1');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.setXPath("[ (");
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('u');
      XPathLexer xPathLexer1 = new XPathLexer("mObV");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("mObV");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token0 = xPathLexer4.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.setXPath("/Zfp}'>]cr");
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.isIdentifierStartChar('');
      Token token0 = xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      Token token1 = xPathLexer0.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("~", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.setXPath("w-0p~4\"`p|ZUKvucy-");
      Token token3 = xPathLexer0.not();
      assertEquals("w", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("-", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("0", token5.getTokenText());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("p", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('2');
      assertTrue(boolean0);
      
      xPathLexer0.or();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("[*WZZ7M}Y|ky]aNNp$B");
      xPathLexer0.setXPath("VKa1%T9?");
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
      assertEquals("VKa1%T9?", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.getXPath();
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(" ", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('B');
      xPathLexer0.or();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token3 = xPathLexer1.leftParen();
      assertEquals("[", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("*d9:@$0KBv\"_jt/e(pr");
      Token token4 = xPathLexer2.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer1.leftBracket();
      xPathLexer2.setXPath("*d9:@$0KBv\"_jt/e(pr");
      XPathLexer xPathLexer3 = new XPathLexer("iXT+0pEF-J/Tl'56v6D");
      Token token6 = xPathLexer3.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer1.mod();
      Token token8 = xPathLexer3.nextToken();
      assertEquals(5, token8.getTokenType());
      assertEquals("+", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K4lPQAJp1=BoX})yw9");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("K4lPQAJp1=BoX})yw9");
      xPathLexer0.nextToken();
      xPathLexer1.rightParen();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('u');
      XPathLexer xPathLexer1 = new XPathLexer("ODbV");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setXPath("(wP>)0 ~4!P+Y92@{");
      xPathLexer2.at();
      xPathLexer1.nextToken();
      xPathLexer2.operatorName();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mObV");
      xPathLexer0.and();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      xPathLexer0.setXPath(":=pG%=$4I");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(18, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(21, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("pG", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('E');
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.setXPath("\"h$ns[U:oBcf,uqXk");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("w-0p", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("~", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("\"", token3.getTokenText());
      
      xPathLexer0.setXPath("w-0p~4\"`p|ZUKvucy-");
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(6, token5.getTokenType());
      assertEquals("-", token5.getTokenText());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('u');
      xPathLexer0.isIdentifierStartChar('S');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("cJ;v,");
      Token token0 = xPathLexer2.not();
      assertEquals("c", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer2.leftParen();
      assertEquals("J", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer2.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals(";", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer1.setXPath("");
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer2.rightParen();
      assertEquals("v", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      xPathLexer2.mod();
      Token token7 = xPathLexer2.nextToken();
      assertEquals(32, token7.getTokenType());
      assertEquals(",", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Tbm_");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("w-0p", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("\"", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("`", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("p", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("|", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("ZUKvucy-", token7.getTokenText());
      
      xPathLexer0.and();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("7r@(w*fO.X5");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      xPathLexer2.mod();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.plus();
      assertEquals(" ", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.setXPath(") (");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(")", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("(", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals("=", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.setXPath("q(G!Z|");
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.operatorName();
      Token token2 = xPathLexer2.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("q", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer1.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(" ", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer2.plus();
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("eX,P5x^");
      Token token5 = xPathLexer3.nextToken();
      assertEquals("eX", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("(", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      xPathLexer2.and();
      xPathLexer2.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j}JB?");
      xPathLexer0.and();
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("}", token1.getTokenText());
      
      xPathLexer0.setXPath("*d9:@$0KBv\"_jt/e(pr");
      Token token2 = xPathLexer0.not();
      assertEquals("*", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("d9:@$0KBv\"_jt/e(pr", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("d", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(":", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j}JcB?");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("j}", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("J", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("B", token3.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.equals();
      xPathLexer0.setXPath("");
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j}JB?");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("j}JB?");
      xPathLexer1.plus();
      xPathLexer1.setXPath("");
      XPathLexer xPathLexer2 = new XPathLexer("o4a'y7&kj_6\"%6/\"");
      xPathLexer2.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer1.nextToken();
      xPathLexer2.and();
      Token token0 = xPathLexer2.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j}JB?");
      xPathLexer0.and();
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("}", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.setXPath("*d9:@$KBv\"_'*jt/e(pr");
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(":", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("@", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("$", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K4lPQAJp1=BoX})yw9");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.comma();
      assertEquals("=", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.setXPath("2#X2+lu.z,!&>");
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("<C.e9nbzGr.)U,?.cC");
      xPathLexer1.rightParen();
      Token token3 = xPathLexer3.rightParen();
      assertEquals("<", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer3.nextToken();
      assertEquals("C.e9nbzGr.", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.setXPath(";N+%{Y-U8:");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=1~%$$4I");
      xPathLexer0.comma();
      xPathLexer0.setXPath(")");
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.setXPath("zRiS-%8M");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("zRiS-%8M");
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.setXPath("/Zfp}'>]cr");
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.setXPath("oQAv,H2:!jXmt2lz");
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer1.getXPath();
      xPathLexer0.colon();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.endPosition();
      xPathLexer0.setXPath("1ye%");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("y", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("e%", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("e", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("%", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('+');
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("o1f`i`");
      xPathLexer1.and();
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer0.plus();
      xPathLexer1.setXPath("l2Qz(,");
      xPathLexer1.nextToken();
      xPathLexer0.div();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('+');
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.setXPath("WU");
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hHxej[o|FrMT.");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("H", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer2.setXPath("brsH");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("xej", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer4.rightParen();
      xPathLexer1.operatorName();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("[", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j}JB?");
      Token token0 = xPathLexer0.dots();
      assertEquals("j", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.number();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("}", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("JB", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.setXPath("7r@(w*fO.X5");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("r", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("@", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.setXPath(":=pG%=$4I");
      xPathLexer0.setXPath("mObV");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("]P-lO~Uf!yQAkTZ8acm");
      Token token6 = xPathLexer2.nextToken();
      assertEquals(4, token6.getTokenType());
      assertEquals("]", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gr@(w*fO.W5");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.consume(733);
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.setXPath("d/)VXnf%GA%W/&");
      Token token4 = xPathLexer0.dots();
      assertEquals("d", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertEquals(27, token5.getTokenType());
      assertEquals(")VXnf%GA%W", token5.getTokenText());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.not();
      assertEquals("&", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(14, int0);
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.setXPath("d/)VXnf%GA%W/&");
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer0.getXPath();
      Token token10 = xPathLexer0.rightBracket();
      assertEquals("/", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(")V", token11.getTokenText());
      
      Token token12 = xPathLexer0.leftParen();
      assertEquals("X", token12.getTokenText());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals("nf", token13.getTokenText());
      assertEquals(15, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.setXPath("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.setXPath("/Zfp}'>]cr");
      xPathLexer0.number();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setXPath("42s");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("/", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token3 = xPathLexer1.rightParen();
      assertEquals("4", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer1.nextToken();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("Z", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("=wo,E");
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.setXPath("zp?F");
      Token token4 = xPathLexer0.nextToken();
      assertEquals("zp?F", token4.getTokenText());
      
      xPathLexer1.operatorName();
      Token token5 = xPathLexer1.rightParen();
      assertEquals("=", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~4]{PaT14 ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("~4]{PaT14 ", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.plus();
      assertEquals("]", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("Ijk7dd");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("Ijk7dd", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.isIdentifierChar('+');
      Token token4 = xPathLexer0.minus();
      assertEquals("{", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L'H5B@4Le6RnOu");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("=h`0nMo|");
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.rightParen();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K4lPQAJp1=BoX})yw9");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("l", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("PQAJp1", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".Amgf@MG5Pi,8r(D");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") .(");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.setXPath(") .(");
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(")", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(13, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("(", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('d');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") .(");
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.dots();
      assertEquals(" .", token0.getTokenText());
      assertEquals(14, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("(", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("OgS#XZwV6-");
      xPathLexer1.getXPath();
      int int0 = xPathLexer1.endPosition();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wS-0p~4\"`p|:UKwvucy-");
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.setXPath("wS-0p~4\"`p|:UKwvucy-");
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q\"zw#Foq1?-");
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("q\"zw#Foq1?-");
      xPathLexer1.not();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*d9:@$0KBv\"_jt/e(pr");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.plus();
      xPathLexer0.setXPath("y`e'<UygN");
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.comma();
      xPathLexer0.setXPath("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('~');
      xPathLexer0.or();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("$6");
      xPathLexer1.leftParen();
      xPathLexer0.nextToken();
      xPathLexer1.number();
      xPathLexer1.rightParen();
      xPathLexer1.whitespace();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U[");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setXPath("y");
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ss8xZPzP");
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("Ss8xZPzP");
      xPathLexer1.comma();
      xPathLexer1.setXPath("");
      xPathLexer1.nextToken();
      xPathLexer0.plus();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer1.nextToken();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("fZwp}'>]cr");
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer0.and();
      Token token2 = xPathLexer1.dollar();
      assertEquals(")", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("Z", token3.getTokenText());
      
      xPathLexer0.setXPath("vD1p");
      Token token4 = xPathLexer0.nextToken();
      assertEquals("vD1p", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.literal();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("/z;t}C;;XFd");
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      xPathLexer1.consume();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.setXPath(") (");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(";t}C;;XFd", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer1.rightParen();
      assertEquals(";", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q\"zw#Foq1?-");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("q\"zw#Foq1?-");
      Token token1 = xPathLexer1.not();
      assertEquals("q", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("zw", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      xPathLexer1.mod();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Foq1?-", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.setXPath("fZwp}'>]cr");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("f", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("Z", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('~');
      xPathLexer0.or();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("}", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("'", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(4, token5.getTokenType());
      assertEquals("]", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("r", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*d9:@$0KBv\"_jt/e(pr");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      xPathLexer0.setXPath("*d9:@$0KBv\"_jt/e(pr");
      Token token3 = xPathLexer0.nextToken();
      assertEquals("*", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("d9", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals(":", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals("$", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q\"zw#Foq1?-");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.plus();
      assertEquals("w", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("#Foq1?-", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a.SWz7KH");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("a.SWz7KH", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("f!V*N@PA4QM8sI%");
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!Sk7\":P 7B");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4.39^kf&Uv6|/\"w@");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a.SWz7KH");
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("a.SWz7KH", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T^K^OA");
      XPathLexer xPathLexer1 = new XPathLexer("EeudAE` x?RhO|CDX");
      Token token0 = xPathLexer1.dots();
      assertEquals("E", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer1.rightParen();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("udAE", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer1.setPreviousToken(token1);
      assertEquals(2, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7r@(w*fO.X5");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("7", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("r", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("@", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4.39^kf&Uv6|/\"w@");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token0 = xPathLexer1.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer1.whitespace();
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(")", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(1, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token5);
      assertEquals(15, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E'O7LM'^");
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4.39^kf&Uv6|/\"w@");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3c");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("3", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.setXPath("p-m^Yo~}xqG");
      Token token0 = xPathLexer0.comma();
      assertEquals("p", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("-", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("m", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("^", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Yo", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("~}xqG", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<:&~cb%gh3CN{-R");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_})?");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setXPath("*d9:@$0KBv\"_jt/e(pr");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.and();
      Token token1 = xPathLexer1.nextToken();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$s2yP 8S1YcPc");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("$", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("s2yP", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("swNy)dlbQZ.;.]X");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer1.setXPath("-DBXcr}?V,/#i@FLN!8");
      Token token2 = xPathLexer1.pipe();
      assertEquals("-", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("DBXcr", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a.SWz7KH");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("f!V*N@PA4QM8sI%");
      XPathLexer xPathLexer1 = new XPathLexer("f!V*N@PA4QM8sI%");
      XPathLexer xPathLexer2 = new XPathLexer("5#\"wy");
      Token token0 = xPathLexer2.nextToken();
      assertEquals("5", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer1.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(">6B}XNG;k!r[");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(">", token0.getTokenText());
      assertEquals(9, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S+&9:(.Zd1FGOVVc");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.and();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.notEquals();
      xPathLexer0.comma();
      token1.toString();
      xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.notEquals();
      xPathLexer0.endPosition();
      xPathLexer0.dots();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.endPosition();
      xPathLexer0.setXPath("S+&9:(.Zd1FGOVVc");
      assertEquals("S+&9:(.Zd1FGOVVc", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mot[ActnJ[");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("moct1J");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".6D8.^3&pzurD g Ue`");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".6", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("D8.^3&pzurD g Ue`", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.at();
      xPathLexer0.endPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.hasMoreChars();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.consume(122);
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierStartChar('p');
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.consume();
      assertEquals(") (", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".1kxzi+XmIwJCX");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".1", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",w.5,CHBW<Y]zM.#");
      Token token0 = xPathLexer0.slashes();
      assertEquals(",", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(".5", token2.getTokenText());
      assertEquals(31, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".6.FD8.^3&zuD g VKU`");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".6", token0.getTokenText());
  }
}
