/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:35:35 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)101, 39, (byte)101);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)101, (byte)101, (byte)101);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(102, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!");
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(89, token0.kind);
      assertEquals("!", token0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("9+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("+", token0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)108, (byte)102, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)53;
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)108, (byte)102, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1793), (byte)102, (byte)0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)108, (byte)102, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)108, (byte)102, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1793), javaCharStream0.getBeginLine());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals((-1793), javaCharStream0.getEndLine());
      assertEquals((-1793), javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals("lf5", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)108, (byte)102, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1793), token0.beginLine);
      assertEquals(104, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1793), token0.endLine);
      assertEquals(102, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte)53;
      byteArray0[1] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)112, (byte)53);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(114, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getEndColumn());
      assertEquals("pp5", token0.toString());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(112, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(114, token0.endColumn);
      assertEquals(0, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.ReInit((JavaCharStream) null, 0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 79, 79, 60);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-869), 43, 43);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-869), javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals((-869), javaCharStream0.getLine());
      assertEquals((-869), javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(43, token0.endColumn);
      assertEquals(43, token0.beginColumn);
      assertEquals((-869), token0.beginLine);
      assertEquals(124, token0.kind);
      assertEquals((-869), token0.endLine);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-18));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -18. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)4, (byte)4, (byte)4);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 4, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[1] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)112, (byte)53);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("5p5", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)112, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(114, token0.endColumn);
      assertEquals(112, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)4, (byte)4);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("Z", token0.toString());
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(4, token0.beginLine);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 4, column 5.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1495), (byte)108, (byte)53);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1495), javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals((-1495), javaCharStream0.getEndLine());
      assertEquals((-1495), javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals("5l", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1495), token0.beginLine);
      assertEquals((-1495), token0.endLine);
      assertEquals(108, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(109, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-121), (byte)101}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-121), (byte)101}, byteArray0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 42, (byte) (-121), (byte)101);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-121), (byte)101}, byteArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.line = (int) (byte)101;
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-121), (byte)101}, byteArray0);
      assertNotNull(pushbackInputStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-121), (byte)101}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals((-121), javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals((-121), javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals((-121), javaCharStream0.getColumn());
      assertEquals("e", token0.toString());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-121), (byte)101}, byteArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-121), token0.endColumn);
      assertEquals(101, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-121), token0.beginColumn);
      assertEquals(101, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-112);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte) (-112), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1515), (byte) (-112), (byte)53);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte) (-112), (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte) (-112), (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1515), javaCharStream0.getLine());
      assertEquals((-1515), javaCharStream0.getEndLine());
      assertEquals((-112), javaCharStream0.getBeginColumn());
      assertEquals((-112), javaCharStream0.getColumn());
      assertEquals((-1515), javaCharStream0.getBeginLine());
      assertEquals((-112), javaCharStream0.getEndColumn());
      assertEquals("5", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte) (-112), (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1515), token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals((-112), token0.endColumn);
      assertEquals((-112), token0.beginColumn);
      assertEquals((-1515), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray0);
      assertTrue(boolean0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-106), (byte) (-106), 30);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 38, (byte) (-106));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (byte) (-106), 2963, 8257536);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 38, column -105.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)53, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)53, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)53, (byte)112, (byte)112);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)112, (byte)53, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 8257536, (-1));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)112, (byte)53, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)112, (byte)53, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8257536, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(8257536, javaCharStream1.getEndLine());
      assertEquals(8257536, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals("p5", token0.toString());
      assertArrayEquals(new byte[] {(byte)112, (byte)53, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(8257536, token0.beginLine);
      assertEquals(8257536, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8257536, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(8257536, javaCharStream1.getEndLine());
      assertEquals(8257536, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertArrayEquals(new byte[] {(byte)112, (byte)53, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)101, (byte)43, (byte)101, (byte)101, (byte)101}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)101, (byte)43, (byte)101, (byte)101, (byte)101}, byteArray0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1495), 116, (byte)43);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)101, (byte)43, (byte)101, (byte)101, (byte)101}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)101, (byte)43, (byte)101, (byte)101, (byte)101}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1495), javaCharStream0.getEndLine());
      assertEquals((-1495), javaCharStream0.getLine());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals((-1495), javaCharStream0.getBeginLine());
      assertEquals("e", token0.toString());
      assertArrayEquals(new byte[] {(byte)101, (byte)43, (byte)101, (byte)101, (byte)101}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1495), token0.endLine);
      assertEquals(116, token0.beginColumn);
      assertEquals(116, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1495), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)101, (byte)101, (byte)108, (byte)40, (byte)101, (byte)101, (byte)108, (byte)108}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)101, (byte)101, (byte)108, (byte)40, (byte)101, (byte)101, (byte)108, (byte)108}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 167, (-598), 1968);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)101, (byte)101, (byte)108, (byte)40, (byte)101, (byte)101, (byte)108, (byte)108}, byteArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)101, (byte)101, (byte)108, (byte)40, (byte)101, (byte)101, (byte)108, (byte)108}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-598), javaCharStream0.getBeginColumn());
      assertEquals(167, javaCharStream0.getEndLine());
      assertEquals(167, javaCharStream0.getLine());
      assertEquals((-595), javaCharStream0.getColumn());
      assertEquals(167, javaCharStream0.getBeginLine());
      assertEquals((-595), javaCharStream0.getEndColumn());
      assertEquals("5eel", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)101, (byte)101, (byte)108, (byte)40, (byte)101, (byte)101, (byte)108, (byte)108}, byteArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(167, token0.endLine);
      assertEquals(167, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-598), token0.beginColumn);
      assertEquals((-595), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)101, (byte)53}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)101, (byte)53}, byteArray0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)101, 453, 36);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)101, (byte)53}, byteArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)101, (byte)53}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(457, javaCharStream0.getColumn());
      assertEquals(453, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(457, javaCharStream0.getEndColumn());
      assertEquals("555e5", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)101, (byte)53}, byteArray0);
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(453, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(101, token0.beginLine);
      assertEquals(101, token0.endLine);
      assertEquals(457, token0.endColumn);
      
      Token token1 = new Token();
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      
      token0.next = token1;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(457, javaCharStream0.getColumn());
      assertEquals(453, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(457, javaCharStream0.getEndColumn());
      assertEquals("555e5", token0.toString());
      assertNull(token1.toString());
      assertNull(token0.next.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(457, javaCharStream0.getColumn());
      assertEquals(453, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(457, javaCharStream0.getEndColumn());
      assertEquals("555e5", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)101, (byte)53}, byteArray0);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(453, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(101, token0.beginLine);
      assertEquals(101, token0.endLine);
      assertEquals(457, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = 'p';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\'', 'p', '\'', '\'', '\''}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\'', 'p', '\'', '\'', '\''}, charArray0);
      assertNotNull(pushbackReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      assertArrayEquals(new char[] {'\'', '\'', 'p', '\'', '\'', '\''}, charArray0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 29, 1109);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\'', '\'', 'p', '\'', '\'', '\''}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\'', '\'', 'p', '\'', '\'', '\''}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 29, column 1110.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 'I';
      charArray0[2] = '\'';
      charArray0[3] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'I', '\'', 'S'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 46, 46);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', 'I', '\'', 'S'}, charArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', 'I', '\'', 'S'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals("'I'", token0.toString());
      assertArrayEquals(new char[] {'\'', 'I', '\'', 'S'}, charArray0);
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.endLine);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(48, token0.endColumn);
      assertEquals(72, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'\'', 'I', '\'', 'S'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 46, column 50.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'I';
      charArray0[2] = '\'';
      charArray0[3] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', 'I', '\'', 'S'}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'2', 'I', '\'', 'S'}, charArray0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 46, 46);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'I', '\'', 'S'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'I', '\'', 'S'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals("2I", token0.toString());
      assertArrayEquals(new char[] {'2', 'I', '\'', 'S'}, charArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(47, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(46, token0.endLine);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'2', 'I', '\'', 'S'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 46, column 50.  Encountered: <EOF> after : \"\\'S\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)108, (byte)108, (byte)53}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)53;
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)108, (byte)108, (byte)53}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1793), (byte)108, (byte)0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)108, (byte)108, (byte)53}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (-2491), (int) (byte)0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)108, (byte)108, (byte)53}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)108, (byte)108, (byte)53}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2491), javaCharStream0.getBeginLine());
      assertEquals((-2491), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals((-2491), javaCharStream0.getLine());
      assertEquals("ll5", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)108, (byte)108, (byte)53}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals((-2491), token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2491), token0.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2491), javaCharStream0.getBeginLine());
      assertEquals((-2491), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals((-2491), javaCharStream0.getLine());
      assertEquals("ll5", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)108, (byte)108, (byte)53}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals((-2491), token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2491), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1495), (byte)108, (byte)53);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, (-1), (byte)108, 3629);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.curLexState = 58;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1495), javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals((-1495), javaCharStream0.getEndLine());
      assertEquals((-1495), javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)108, (byte)0, (byte)0}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals((-1495), token0.endLine);
      assertEquals((-1495), token0.beginLine);
      assertEquals(108, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)108, (byte)102, (byte)53}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)53;
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)108, (byte)102, (byte)53}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      assertNotNull(pushbackReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)53, (byte)108);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 53, column 110.  Encountered: <EOF> after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals(4, int0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)43, 112, (-2067));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = '\'';
      charArray0[2] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '\'', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'/', '\'', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(pushbackReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertArrayEquals(new char[] {'/', '\'', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, 94, (-905));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'/', '\'', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(111, token0.endColumn);
      assertEquals(43, token0.beginLine);
      assertEquals(111, token0.beginColumn);
      assertEquals(43, token0.endLine);
      assertEquals(0, token0.kind);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertArrayEquals(new char[] {'/', '\'', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("/", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token1);
      assertEquals((-905), token1.endColumn);
      assertEquals(94, token1.endLine);
      assertEquals(94, token1.beginLine);
      assertEquals(104, token1.kind);
      assertEquals((-905), token1.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9+");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertNotNull(pushbackReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 80, 32);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals("gggggg", token0.toString());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(80, token0.endLine);
      assertEquals(80, token0.beginLine);
      assertEquals(32, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(37, token0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals("", token1.toString());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(37, token1.endColumn);
      assertEquals(80, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(37, token1.beginColumn);
      assertEquals(80, token1.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals("", token2.toString());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertNotNull(token2);
      assertEquals(80, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(80, token2.endLine);
      assertEquals(37, token2.endColumn);
      assertEquals(37, token2.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)9, (byte)20, (byte)9, (byte)32, (byte)22, (byte)42, (byte)68}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)9, (byte)20, (byte)9, (byte)32, (byte)22, (byte)42, (byte)68}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 2493, 617, (byte)20);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)9, (byte)20, (byte)9, (byte)32, (byte)22, (byte)42, (byte)68}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 1027, (-1531));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)9, (byte)20, (byte)9, (byte)32, (byte)22, (byte)42, (byte)68}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)9, (byte)20, (byte)9, (byte)32, (byte)22, (byte)42, (byte)68}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (byte)22, (-1), 4740);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)9, (byte)20, (byte)9, (byte)32, (byte)22, (byte)42, (byte)68}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)9, (byte)20, (byte)9, (byte)32, (byte)22, (byte)42, (byte)68}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 22, column 1.  Encountered: \"\\u0014\" (20), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)53;
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'S';
      charArray0[2] = '\'';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (-905), (byte)112);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -905, column 117.  Encountered: <EOF> after : \"\\'QQ\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)116, (byte)70);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1431);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1431. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1:");
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = JavaCharStream.staticFlag;
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1061, 1061, 41);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 91, (byte)4);
      byteArrayInputStream1.markSupported();
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 19);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2391);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (byte)4, 1109);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9+");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)4, (byte)4);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!");
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'f';
      charArray0[3] = 'H';
      charArray0[4] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0, 2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-1990));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte)108;
      byteArray1[2] = (byte) (-29);
      byteArrayInputStream0.skip((byte) (-29));
      byteArrayInputStream0.read(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-64), (byte)108);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)17;
      byteArrayInputStream1.markSupported();
      StringReader stringReader0 = new StringReader("?S");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 26, 26);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 51);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 51. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 13, 2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)101;
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream2.mark(404);
      byteArrayInputStream2.read(byteArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1975, 1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'G';
      charArray0[2] = 'O';
      charArray0[3] = 'X';
      charArray0[4] = '_';
      charArray0[6] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, (byte)112);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 69);
      BufferedReader bufferedReader0 = new BufferedReader(lineNumberReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 4096, 79);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[1] = (byte)112;
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)53, (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 't';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 5430, 2590);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 5430);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 5430. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, (byte)101);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2304, (byte)101);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 46, (byte) (-106));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-439));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -439. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      String string0 = "jWUi<aYF";
      StringReader stringReader0 = new StringReader("vd=w.u Z*IQ['\"sO=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\"\f\"", "_M>");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // _M>
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.mark((byte)99);
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'b';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1, (-1156));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column -1156.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      StringReader stringReader0 = new StringReader("?S");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1, (-1), 5);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.ReInit(javaCharStream1);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader1 = new PushbackReader(pushbackReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 119, 119);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 119, column 120.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)53;
      byteArrayInputStream0.read(byteArray1);
      StringReader stringReader0 = new StringReader("jWUi<aYF");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(".", "jWUi<aYF");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // jWUi<aYF
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = '2';
      charArray0[2] = '&';
      charArray0[3] = 'y';
      charArray0[4] = '+';
      charArray0[5] = 'B';
      charArray0[6] = 'W';
      charArray0[7] = 'm';
      charArray0[8] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-106), (byte) (-106));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = 'O';
      charArray0[2] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, (byte)112);
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0, 73);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 12, 17);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(3242);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3242. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = 'S';
      charArray0[2] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 2086);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 50);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 2086, (-2493));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'E';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 110, (-4712));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[2] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 't';
      charArray0[2] = '~';
      charArray0[3] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 517, (-1071));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '|';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3429, 2476);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 2476);
      BufferedReader bufferedReader1 = new BufferedReader(pushbackReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader1, 3429, 3429);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.mark((byte)99);
      StringReader stringReader0 = new StringReader("throw");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1110));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1110. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream0.mark((byte)101);
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '&';
      charArray0[2] = 'T';
      charArray0[3] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      pushbackReader0.unread((int) (byte)101);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 122, 17);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)101;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.mark(404);
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'T';
      charArray0[2] = 'A';
      charArray0[3] = '{';
      charArray0[4] = 'G';
      charArray0[5] = 'M';
      charArray0[6] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (-299), 4);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'Y';
      charArray0[2] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)112, (-556));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)43, (byte)43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 44. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)99;
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = 'I';
      charArray0[3] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (byte)99, (byte)99);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 99, column 101.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[1] = (byte)112;
      byteArray0[4] = (byte)53;
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'n';
      charArray0[2] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 3761, (-953));
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)99;
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = 'I';
      charArray0[2] = '^';
      charArray0[3] = 'n';
      charArray0[4] = 'f';
      charArray0[5] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 46, (byte)108);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)112, (-556));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 995, 3429);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 3429);
      BufferedReader bufferedReader1 = new BufferedReader(pushbackReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, 3429, 3429);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = 'S';
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("!Mef6qQvl0");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-869), 43, 43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-869), 43);
      javaCharStream1.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.ReInit(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager2.getNextToken();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-869), 43, 43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[6] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-869), 43);
      javaCharStream1.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjFillToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.ReInit(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager2.getNextToken();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      char[] charArray0 = new char[2];
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 93, (byte)53, (byte)53);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaCharStream1.maxNextCharInd = 80;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'f';
      charArray0[3] = 'n';
      charArray0[4] = 'f';
      charArray0[5] = '^';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (-4712), (-4712));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'T';
      StringReader stringReader0 = new StringReader(",");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte byte0 = (byte)101;
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'm';
      charArray0[2] = 'B';
      charArray0[3] = '\\';
      charArray0[4] = '|';
      charArray0[5] = '|';
      charArray0[6] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 995, Integer.MAX_VALUE);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          byte[] byteArray0 = new byte[1];
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
          byteArrayInputStream0.markSupported();
          ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
          byte[] byteArray1 = new byte[7];
          byteArray1[0] = (byte)17;
          char[] charArray0 = new char[1];
          charArray0[0] = 'm';
          CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
          JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 46, (byte)17);
          JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
          JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
          javaParserTokenManager1.getNextToken();
          JavaParserTokenManager javaParserTokenManager2 = null;
          try {
            javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 46);
            fail("Expecting exception: Error");
          
          } catch(Error e) {
             //
             // Error: Ignoring invalid lexical state : 46. State unchanged.
             //
             verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)101;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'U';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      bufferedReader0.mark(72);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (byte)50, 112);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      bufferedReader0.lines();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte) (-108));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -108. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)53;
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'S';
      charArray0[2] = '\'';
      charArray0[4] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader1 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-268), (byte)112);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.newToken(117);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '}';
      charArray0[2] = '|';
      charArray0[3] = '~';
      charArray0[4] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)0, (-2568));
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.newToken('|');
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = '|';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '|';
      charArray0[5] = '~';
      charArray0[6] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 55, 1974);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.newToken(55);
  }
}
