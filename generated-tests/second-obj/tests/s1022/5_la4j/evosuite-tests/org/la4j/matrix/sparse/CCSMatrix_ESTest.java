/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:52:55 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      mockRandom0.longs(1L);
      mockRandom0.nextBoolean();
      cCSMatrix0.setColumn(0, (-4985.837873));
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 359;
      doubleArray0[5] = (double) 359;
      doubleArray0[6] = (double) 359;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(359, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(359, (-3717));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3717
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      CCSMatrix.from1DArray(3, 3, doubleArray0);
      int int0 = 1015;
      MockRandom mockRandom0 = new MockRandom(3);
      // Undeclared exception!
      try { 
        CCSMatrix.random(1015, 5, (-259.933575888596), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(958);
      cCSMatrix0.isZeroAt(889, 889);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(958);
      cCSMatrix0.isZeroAt(889, 0);
      CCSMatrix.zero(0, 61);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[3] = (double) 1276;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(8, 8, (double) 8, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1103L);
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.random(16, 16, 1.0, (Random) mockRandom0);
      assertNotNull(cCSMatrix0);
      assertEquals(16, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(16, cCSMatrix0.rows());
      assertEquals(0.9, cCSMatrix0.max(), 0.01);
      assertEquals(256, cCSMatrix0.cardinality());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 16;
      intArray0[4] = 16;
      intArray0[5] = 1197;
      intArray0[6] = 16;
      intArray0[7] = 16;
      intArray0[8] = 16;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      assertNotNull(cCSMatrix0);
      assertEquals(4, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
      assertEquals(4, cCSMatrix0.rows());
      
      CCSMatrix cCSMatrix1 = new CCSMatrix(4, 4);
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(4, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(4, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      
      double double0 = cCSMatrix0.min();
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(4, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
      assertEquals(4, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 227.856031346);
      assertNotNull(cCSMatrix0);
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
      assertEquals(227.856031346, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(4, cCSMatrix0.rows());
      
      double double0 = cCSMatrix0.max();
      assertEquals(227.856031346, double0, 0.01);
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
      assertEquals(227.856031346, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(4, cCSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("54/|^>Gn<3bN4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      cCSMatrix0.each((MatrixProcedure) null);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(958);
      cCSMatrix0.isZeroAt((-1409), 0);
      Matrix.unit(958, 958);
      cCSMatrix0.blankOfShape(5, (-1409));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 227.9);
      assertNotNull(cCSMatrix0);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(227.9, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.cardinality());
      
      Locale locale0 = Locale.forLanguageTag("JO0m)2-lA%U.");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = cCSMatrix0.nonZeroAt(0, 4);
      assertFalse(boolean0);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(227.9, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      assertNotNull(cCSMatrix0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      VectorIterator vectorIterator0 = cCSMatrix0.nonZeroIteratorOfRow(2);
      assertNotNull(vectorIterator0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(2);
      assertNotNull(compressedVector0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.zero(2, 2, 2);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(436, 2);
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(436, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 958;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(958);
      cCSMatrix0.nonZeroColumnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(958, 889, matrixFunction0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 889;
      doubleArray0[1] = (double) 889;
      CCSMatrix.from1DArray(889, (-519), doubleArray0);
      int int1 = 119;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int2 = 9;
      double[][] doubleArray1 = new double[1][4];
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) int1;
      doubleArray2[1] = (double) int2;
      doubleArray2[2] = (double) int0;
      cCSMatrix0.copy();
      doubleArray2[3] = (double) int2;
      doubleArray1[0] = doubleArray2;
      int int3 = (-1251);
      double double0 = 1427.39684764184;
      Matrix.constant(int1, int3, double0);
      CCSMatrix.identity(int0);
      cCSMatrix0.copy();
      int int4 = (-1814);
      int int5 = 2749;
      int int6 = 1235;
      CCSMatrix.zero(int4, int5, int6);
      cCSMatrix0.max();
      cCSMatrix0.minInRow(int5);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      double double0 = cCSMatrix0.max();
      assertNotNull(cCSMatrix1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (double) 952;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(119, 119);
      int int0 = 8;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(8, vectorProcedure0);
      int int1 = (-1);
      cCSMatrix0.getColumn((-1));
      int int2 = 32;
      cCSMatrix0.minInColumn(int2);
      double double0 = (-347.823146521567);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int0, double0);
      cCSMatrix0.minInColumn(int2);
      int int3 = 6;
      cCSMatrix1.maxInColumn(int3);
      int int4 = 1130;
      Matrix matrix0 = cCSMatrix1.copyOfRows(int4);
      CCSMatrix.block(matrix0, cCSMatrix1, cCSMatrix0, cCSMatrix0);
      double double1 = Locale.LanguageRange.MAX_WEIGHT;
      cCSMatrix1.toBinary();
      int int5 = (-1087);
      cCSMatrix0.nonZeroAt(int5, int1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      int int6 = 0;
      double double2 = (-961.3217);
      CCSMatrix.diagonal(int6, double2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1904;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1904);
      cCSMatrix0.foldColumns((VectorAccumulator) null);
      int int1 = (-1879048191);
      cCSMatrix0.removeRow(int1);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int0, int0);
      int int2 = (-1331);
      cCSMatrix1.minInColumn(int2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Integer integer0 = new Integer(2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.nonZeroIteratorOfRow(2);
      cCSMatrix0.getRow(2);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 2, 2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, sparseMatrix0, cCSMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 1058.747134);
      cCSMatrix0.max();
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[5] = 4;
      intArray0[5] = 4;
      cCSMatrix0.removeFirstRow();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 1058.747134);
      cCSMatrix0.norm();
      cCSMatrix0.max();
      CCSMatrix cCSMatrix1 = new CCSMatrix(4, 4);
      int[] intArray0 = new int[2];
      intArray0[0] = 2944;
      intArray0[1] = 2944;
      // Undeclared exception!
      try { 
        cCSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2944' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4);
      int[] intArray0 = new int[2];
      intArray0[1] = 4;
      intArray0[1] = 2944;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2944' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector sparseVector0 = SparseVector.zero(1);
      sparseVector0.toDiagonalMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(4);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 8.0;
      sparseMatrix0.copy();
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.0);
      MockRandom mockRandom0 = new MockRandom(1677L);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 30);
      ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, columnMajorSparseMatrix0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      cCSMatrix0.toSparseMatrix();
      sparseVector0.infinityNorm();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.min();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      cCSMatrix0.iterator();
      int int0 = 11;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(11, (-1303.8609));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      MockRandom mockRandom1 = new MockRandom(11);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix1.foldNonZero(matrixAccumulator0);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((int) (byte)36, (-6202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 36x-6202
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.blankOfColumns((byte)96);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix.unit(924, 924);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix(924, 924, 924);
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix2 = (CCSMatrix)ColumnMajorSparseMatrix.identity(2195);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 8.0;
      cRSMatrix0.copy();
      doubleArray0[0] = doubleArray1;
      MockRandom mockRandom0 = new MockRandom(1677L);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(8.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.apply((ColumnMajorSparseMatrix) cCSMatrix1, (RowMajorSparseMatrix) cRSMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix2.updateAt(924, 924, matrixFunction0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.getColumn(0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      Integer integer0 = new Integer(4);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.nonZeroIteratorOfRow(4);
      cCSMatrix0.iteratorOrNonZeroColumns();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1710);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix0.toMatrixMarket();
      Matrix matrix0 = cCSMatrix0.copyOfRows(4);
      cCSMatrix0.setAll((-0.4375));
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, matrix0, matrix0, columnMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = null;
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 210;
      double double0 = 1603.29202;
      ColumnMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      cCSMatrix1.multiplyByItsTranspose();
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix1.each(matrixProcedure0);
      int int1 = 2;
      cCSMatrix0.minInColumn(int1);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      cCSMatrix0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(2743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2743
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 1058.747134);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.norm();
      cCSMatrix0.max();
      CCSMatrix cCSMatrix1 = new CCSMatrix(2, 2);
      int int0 = 2944;
      cCSMatrix0.setAll((-391.38604666181));
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Integer integer0 = new Integer(2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.nonZeroIteratorOfRow(2);
      cCSMatrix0.getRow(2);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 2, 2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, sparseMatrix0, cCSMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 227.9);
      cCSMatrix0.copyOfShape(5, 8);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.iteratorOrNonZeroColumns();
      org.evosuite.runtime.Random.setNextRandom(3333);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2666);
      Integer integer0 = new Integer(2666);
      cCSMatrix0.nonZeroIteratorOfRow(2666);
      cCSMatrix0.getRow(4087);
      SparseMatrix.zero(1038, 2666, 1038);
      Matrix matrix0 = Matrix.unit(2666, 910);
      CCSMatrix.block(cCSMatrix1, matrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 227.9);
          cCSMatrix0.nonZeroAt(4, 4);
          cCSMatrix0.setAll((-1978.39963048));
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2448);
      Matrix.unit(2448, 2448);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)920, (double)2448, (-1.0), (-1.0), (-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformRow(920, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MockRandom mockRandom0 = new MockRandom();
      double double0 = 1.0;
      // Undeclared exception!
      CCSMatrix.randomSymmetric(896, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      cCSMatrix0.iterator();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal((byte)1, 9.95506746625E11);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      cCSMatrix1.withSolver(linearAlgebra_SolverFactory0);
      String string0 = cCSMatrix1.toMatrixMarket();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1163);
      columnMajorSparseMatrix0.copy();
      CCSMatrix cCSMatrix2 = CCSMatrix.randomSymmetric(58, (double) 1163, (Random) mockRandom0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.to(matrixFactory0);
      String string1 = "XL1U)Z2NS!r_&v";
      CCSMatrix.fromCSV(string1);
      CCSMatrix.fromMatrixMarket(string0);
      int int0 = (-1584);
      int int1 = (-1024);
      double double0 = 100.1;
      cCSMatrix1.set(int0, int1, double0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector sparseVector0 = SparseVector.zero(1);
      int int0 = 4;
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(4);
      int int1 = 0;
      columnMajorSparseMatrix0.transformRow(0, vectorFunction1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, cCSMatrix0, columnMajorSparseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-775.21421388012), 1024.0, 906.2080046185, 1971.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int int0 = 1;
      SparseVector sparseVector0 = SparseVector.zero(1);
      int int1 = 4;
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(4);
      columnMajorSparseMatrix0.transformRow(1, vectorFunction1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, cCSMatrix0, columnMajorSparseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int int0 = 1;
      SparseVector sparseVector0 = SparseVector.zero(1);
      int int1 = 4;
      sparseVector0.toDiagonalMatrix();
      ColumnMajorSparseMatrix.identity(4);
      cCSMatrix0.setAll(4);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(4, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 4x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = new CCSMatrix(889, 13, 13);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
      MockRandom mockRandom0 = new MockRandom(423L);
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix.randomSymmetric((-1409), (double) 889, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 1058.747134);
      cCSMatrix0.max();
      CCSMatrix cCSMatrix1 = new CCSMatrix(4, 4);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      int int0 = 48;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cCSMatrix2.swapRows(4, 3888);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 958;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(958);
      int int1 = 889;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)889, (double)958, (double)889, (double)889, (double)889).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformRow(889, vectorFunction0);
      cCSMatrix0.set(int0, int1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      cCSMatrix0.iterator();
      int int0 = 9;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = 783;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll(0.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[3] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.toDiagonalMatrix();
      ColumnMajorSparseMatrix.identity(1395);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.copy();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero((-1610612735), (-1610612735), 4836);
      cCSMatrix1.minInColumn(int1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.nonZeroIteratorOfRow(4);
      cCSMatrix0.getRow(4);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(4);
      mockRandom1.nextLong();
      MockRandom mockRandom2 = new MockRandom(0L);
      int[] intArray0 = new int[1];
      mockRandom1.nextFloat();
      cCSMatrix0.select(intArray0, intArray0);
      Integer integer0 = new Integer(4);
      ColumnMajorSparseMatrix.identity(4);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int int1 = (-1978);
      // Undeclared exception!
      try { 
        Matrix.diagonal((-1978), (-1510.62270799));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero((int) (byte)1, (int) (byte)1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2004.6246253763861)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      int int0 = 13;
      ColumnMajorSparseMatrix.identity(1163);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (-1303.8609);
      SparseVector.fromArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.toDiagonalMatrix();
      CCSMatrix.fromBinary(byteArray0);
      int int1 = 4;
      MockRandom mockRandom0 = new MockRandom(int0);
      CCSMatrix.randomSymmetric(int1, (double) int0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toRowVector();
      cCSMatrix0.getRow(13);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[8] = (double) 952;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.kroneckerProduct(cCSMatrix0);
      cCSMatrix1.nonZeroColumnMajorIterator();
      cCSMatrix0.copyOfShape(1, 1);
      org.evosuite.runtime.Random.setNextRandom(13);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      cCSMatrix0.iterator();
      byte byte1 = (byte) (-37);
      int int0 = 32;
      double double0 = (-1303.8609);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(32, (-1303.8609));
      double[] doubleArray0 = new double[7];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)32, (double)(byte)9, (double)32, (double)32, 4486.3685342).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      SparseVector sparseVector0 = SparseVector.zero(10, 7);
      sparseVector0.toDiagonalMatrix();
      cCSMatrix1.updateColumn(7, vectorFunction0);
      doubleArray0[0] = (double) (byte) (-37);
      MockRandom mockRandom0 = new MockRandom(478L);
      // Undeclared exception!
      try { 
        CCSMatrix.random(7, 1073, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1965;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1965, 1965);
      MockRandom mockRandom0 = new MockRandom((-1293L));
      mockRandom0.nextBoolean();
      cCSMatrix0.setColumn((int) (byte)9, (-215.570193599981));
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      int int1 = (-1610612735);
      int int2 = 60;
      CCSMatrix cCSMatrix2 = new CCSMatrix(int0, int1, int2);
      int int3 = (-1862);
      cCSMatrix2.minInColumn(int3);
      int int4 = 1045;
      int int5 = (-2840);
      CCSMatrix.zero(int4, int2, int5);
      cCSMatrix2.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      cCSMatrix0.iterator();
      byte byte0 = (byte) (-37);
      int int0 = 32;
      double double0 = (-1303.8609);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(32, (-1303.8609));
      double[] doubleArray0 = new double[7];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.updateColumn(7, vectorFunction0);
      doubleArray0[0] = (double) (byte) (-37);
      doubleArray0[1] = (-1303.8609);
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1303.8609);
      doubleArray0[5] = (double) (byte) (-37);
      doubleArray0[6] = (double) (byte)9;
      int[] intArray0 = null;
      CCSMatrix cCSMatrix2 = null;
      try {
        cCSMatrix2 = new CCSMatrix((byte)9, 32, (byte) (-37), doubleArray0, (int[]) null, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -37.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      byte byte0 = (byte)1;
      cCSMatrix0.iterator();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal((byte)1, 9.95506746625E11);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      cCSMatrix1.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix1.toMatrixMarket();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.2976478635754204E9).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1163;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1163);
      Double double0 = new Double(9.95506746625E11);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("%%MatrixMarket matrix coordinate real general column-major\n1 1 1\n1 1 995506746625.000\n");
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int1 = 1729;
      int int2 = 5;
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int1, int2, matrixFunction1);
      int int3 = 4085;
      cCSMatrix1.blankOfShape(int2, int3);
      int int4 = 0;
      int int5 = 4;
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(int4, int0, int5);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachInColumn(byte0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Integer integer0 = new Integer(2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(2);
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.zero(2, 2, 2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseVector.fromArray(doubleArray0);
      ColumnMajorSparseMatrix.identity(2);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cRSMatrix0.copy();
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn((-574));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -574
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector sparseVector0 = SparseVector.zero(2);
      sparseVector0.toDiagonalMatrix();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      Matrix matrix0 = cCSMatrix0.copy();
      // Undeclared exception!
      try { 
        matrix0.minInColumn(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix.unit(924, 924);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix(924, 924, 924);
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.zero(2195);
      compressedVector0.toDiagonalMatrix();
      CCSMatrix cCSMatrix2 = (CCSMatrix)ColumnMajorSparseMatrix.identity(2195);
      ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector0, (ColumnMajorSparseMatrix) cCSMatrix1);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 8.0;
      cRSMatrix0.copy();
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.0);
      MockRandom mockRandom0 = new MockRandom(1677L);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix1 = (CRSMatrix)RowMajorSparseMatrix.fromCSV("");
      CRSMatrix cRSMatrix2 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (RowMajorSparseMatrix) cRSMatrix1);
      CCSMatrix.block(cCSMatrix0, cRSMatrix0, cRSMatrix2, cCSMatrix0);
      RowMajorSparseMatrix.fromCSV("");
      inPlaceCopyMatrixToMatrix0.apply((ColumnMajorSparseMatrix) cCSMatrix1, (RowMajorSparseMatrix) cRSMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix2.updateAt(924, 924, matrixFunction0);
      cCSMatrix2.blankOfShape(1323, 1323);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      byte[] byteArray0 = new byte[8];
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(20, (-1303.8609));
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix0.toMatrixMarket();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll((-23.4416095088));
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2004.6246253763861);
      doubleArray0[2] = (-23.4416095088);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.toDiagonalMatrix();
      cCSMatrix1.minInColumn(7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow((byte)0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(958);
      int int0 = 889;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) 958;
      doubleArray0[1] = (double) 889;
      doubleArray0[5] = (double) 958;
      cCSMatrix0.minInColumn(889);
      Matrix matrix0 = cCSMatrix0.copy();
      matrix0.apply((MatrixOperation<CCSMatrix>) null);
      int int1 = 8;
      int[] intArray0 = new int[7];
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int1;
      ColumnMajorSparseMatrix.identity(int1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int2 = 4657;
      int int3 = 920;
      CCSMatrix.zero(int2, int3);
      String string0 = "x";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 958;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(958);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1804, 958, 3883);
      CCSMatrix.block(sparseMatrix0, sparseMatrix0, cCSMatrix0, sparseMatrix0);
      double double0 = new Integer(int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 9;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3425.33), 1022.2788, 1022.2788, 1022.2788, 1022.2788).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transform(matrixFunction0);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      cCSMatrix0.apply(matrixOperation0);
      cCSMatrix0.iteratorOfColumn(9);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
      String string0 = ",8)";
      Locale locale0 = new Locale(",8)", ",8)");
      NumberFormat.getNumberInstance(locale0);
      String string1 = "j#*BPakE^-pP`;?|";
      NumberFormat.getNumberInstance();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("This matrix can't grow up.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"This matrix can't grow up.\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toString();
      cCSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape((-1968526676), 961);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1968526676x961
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 783;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 783;
      doubleArray0[1] = (double) 783;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.toDiagonalMatrix();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, columnMajorSparseMatrix0);
      CCSMatrix.identity(783);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(945, 193);
      cCSMatrix0.minInColumn(945);
      int int1 = 194;
      double double0 = (-2452.465226);
      CCSMatrix.diagonal(int1, double0);
      double double1 = new Integer(int0);
      cCSMatrix0.columnMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int2 = (-575);
      CCSMatrix.identity(int2);
      int int3 = 1141;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(int3, int0, doubleArray0[0], (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(940);
      cCSMatrix0.isZeroAt(889, 32);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.transformRow(944, vectorFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.maxInColumn(13);
      cCSMatrix0.minInColumn((-296));
      int int0 = 16;
      int int1 = 1128;
      CCSMatrix.identity(int1);
      CCSMatrix.identity(int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      CCSMatrix cCSMatrix1 = new CCSMatrix(783, (byte)32, 9);
      CCSMatrix.diagonal((byte)32, 0.0);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal((byte)32, 9);
      cCSMatrix2.iteratorOfColumn(9);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix1.maxInColumn(2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[8] = (double) 952;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (double) 952;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = (double) 952;
      doubleArray1[6] = (double) 952;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 952.0;
      doubleArray0[1] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)matrix0.kroneckerProduct(cCSMatrix0);
      cCSMatrix1.nonZeroColumnMajorIterator();
      cCSMatrix1.copyOfShape(32, 32);
      org.evosuite.runtime.Random.setNextRandom(2270);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[8] = (double) 952;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (double) 952;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = (double) 952;
      doubleArray1[6] = (double) 952;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 952.0;
      doubleArray0[1] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector sparseVector0 = SparseVector.zero(952, 952);
      sparseVector0.infinityNorm();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1618);
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      columnMajorSparseMatrix0.copy();
      cCSMatrix0.max();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.maxInColumn(1618);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.max();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.nonZeroIteratorOfRow(4);
      cCSMatrix0.getRow(4);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      int[] intArray0 = new int[5];
      int int1 = 2;
      cCSMatrix0.toString();
      intArray0[0] = 2;
      cCSMatrix0.mkString("1.000 0.000 0.000 0.000\n0.000 1.000 0.000 0.000\n0.000 0.000 1.000 0.000\n0.000 0.000 0.000 1.000\n", "6F}968tyG GyAIr");
      cCSMatrix0.select(intArray0, intArray0);
      double[][] doubleArray0 = new double[0][3];
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }
}
