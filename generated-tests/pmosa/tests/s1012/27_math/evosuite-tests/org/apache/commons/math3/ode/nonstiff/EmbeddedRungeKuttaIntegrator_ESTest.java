/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:14:10 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(853.882619192, 853.882619192, 853.882619192, 7327.8342312);
      double double0 = dormandPrince853Integrator0.getMaxGrowth();
      assertEquals(10.0, double0, 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 7327.8342312;
      doubleArray0[1] = 7327.8342312;
      doubleArray0[2] = 853.882619192;
      doubleArray0[3] = 853.882619192;
      doubleArray0[4] = 853.882619192;
      doubleArray0[5] = 10.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(7327.8342312, 853.882619192, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1647.5492556459, 1647.5492556459, 1647.5492556459, 1647.5492556459);
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1647.5492556459;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1647.5492556459;
      doubleArray2[1] = 1647.5492556459;
      doubleArray2[2] = 1647.5492556459;
      doubleArray2[3] = 1647.5492556459;
      doubleArray2[4] = 1647.5492556459;
      doubleArray2[5] = (-284.08923608031);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-284.08923608031);
      doubleArray3[1] = 575.45215;
      doubleArray3[2] = 1647.5492556459;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-284.08923608031);
      doubleArray5[1] = (-284.08923608031);
      doubleArray5[2] = 575.45215;
      doubleArray5[3] = 575.45215;
      doubleArray5[4] = 0.5186077356338501;
      doubleArray5[5] = 1647.5492556459;
      doubleArray5[6] = 1647.5492556459;
      doubleArray5[7] = 1647.5492556459;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 575.45215;
      doubleArray0[5] = doubleArray6;
      dormandPrince54Integrator0.estimateError(doubleArray0, doubleArray4, doubleArray1, 4115.50104980822);
      double double0 = dormandPrince54Integrator0.getSafety();
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(710.744693, (-895.55222474374), (-895.55222474374), 0.0);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.scalRelativeTolerance = 0.0;
      dormandPrince54Integrator0.setMinReduction(0.0);
      dormandPrince54Integrator0.setMaxGrowth((-9.698281856949837E-8));
      dormandPrince54Integrator0.getSafety();
      dormandPrince54Integrator0.setMinReduction((-674.1));
      dormandPrince54Integrator0.getMaxGrowth();
      assertEquals((-9.698281856949837E-8), dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-674.1);
      doubleArray0[1] = (-9.698281856949837E-8);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-9.698281856949837E-8);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-1.0), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getSafety();
      double double0 = highamHall54Integrator0.getMinReduction();
      assertEquals(0.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2343.265696);
      doubleArray0[1] = 1607.2715;
      doubleArray0[2] = 1607.2715;
      doubleArray0[3] = (-2343.265696);
      doubleArray0[4] = 1607.2715;
      doubleArray0[5] = (-2343.265696);
      doubleArray0[6] = (-2343.265696);
      doubleArray0[7] = 1607.2715;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1607.2715, (-2343.265696), doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2343.265696), 1607.2715, 14.101419448852539, (-2343.265696));
      dormandPrince853Integrator0.getOrder();
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      highamHall54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 14.101419448852539);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2343.265696));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 1019.18547264434, 1.0, 1.0);
      double[] doubleArray0 = new double[7];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(882).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      doubleArray0[0] = (-1167.1334293814846);
      doubleArray0[1] = 1019.18547264434;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1019.18547264434;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, (-3350.434655), doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-1309.8869), 1019.18547264434, (-1309.8869));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      MullerSolver mullerSolver0 = new MullerSolver((-1167.1334293814846), 0.9);
      highamHall54Integrator0.addEventHandler((EventHandler) eventFilter0, 0.0, 1.0, 882, (UnivariateSolver) mullerSolver0);
      dormandPrince853Integrator0.getOrder();
      highamHall54Integrator0.estimateError((double[][]) null, doubleArray0, doubleArray0, 1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE2, (-1347.183));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(402.5764, 402.5764, doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, 402.5764, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[0][6];
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 402.5764;
      doubleArray2[1] = 402.5764;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 402.5764;
      dormandPrince54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray2, 0.2);
      highamHall54Integrator0.vecRelativeTolerance = doubleArray2;
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(0.9, (-1157.914), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray3 = expandableStatefulODE0.getCompleteState();
      expandableStatefulODE0.getCompleteState();
      int int0 = 390;
      highamHall54Integrator0.setMaxEvaluations(390);
      HighamHall54Integrator highamHall54Integrator2 = new HighamHall54Integrator(0.2, 1.0, doubleArray0, doubleArray3);
      // Undeclared exception!
      highamHall54Integrator2.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 0.9;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.9, 0.9, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE1, 0.9);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(144).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.3355404629413039);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          double[] doubleArray0 = new double[0];
          HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(402.5764, 402.5764, 402.5764, 402.5764);
          DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1133.0), 402.5764, 479.027, 0.2);
          dormandPrince853Integrator0.getOrder();
          double[][] doubleArray1 = new double[14][4];
          doubleArray1[0] = doubleArray0;
          double[] doubleArray2 = new double[5];
          doubleArray2[0] = (double) 8;
          doubleArray2[1] = 1.880755298741952E-9;
          doubleArray2[2] = 479.027;
          doubleArray2[3] = (-657.0);
          doubleArray2[4] = 479.027;
          doubleArray1[1] = doubleArray2;
          doubleArray1[2] = doubleArray0;
          double double0 = new Double((-657.0));
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          // Undeclared exception!
          dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.2);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 10.0, (-3309.1022196358213), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(9.693260855961159E-8);
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
      assertEquals(8, highamHall54Integrator0.getEvaluations());
  }
}
