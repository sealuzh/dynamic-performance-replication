/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:51:21 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparseMatrix.zero(1, 1, 1);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(1, 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "klC;lgh\\`k>g}94OL";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("klC;lgh`k>g}94OL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(0, 4, 916.0);
      basic1DMatrix0.toArray();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 992;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(992, 992);
      basic1DMatrix0.iteratorOfColumn(992);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      basic1DMatrix0.multiply((double) 992);
      String string0 = null;
      basic1DMatrix0.mkString(numberFormat0, string0, string0);
      String string1 = "xH+)i";
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromCSV(string1);
      int int1 = 2099;
      double double0 = 3861.132;
      basic1DMatrix1.setColumn(int1, double0);
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.diagonal(int0, int0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.to(matrixFactory0);
      int int2 = (-5678);
      Basic1DMatrix.unit(int1, int2);
      int int3 = 1070;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.eachInColumn(int3, vectorProcedure0);
      int int4 = 1279;
      basic1DMatrix2.blankOfShape(int4, int4);
      MatrixFactory<Basic1DMatrix> matrixFactory1 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.to(matrixFactory1);
      int int5 = (-2641);
      Basic1DMatrix.unit(int5, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparseMatrix.diagonal(1, 1);
      double[][] doubleArray0 = new double[1][6];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(6, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(0, 0, (Random) null);
      basic1DMatrix0.getRow(0);
      basic1DMatrix0.toBinary();
      int int2 = (-2935);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(0, (-2935));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparseMatrix.diagonal(1, 1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(1, 1, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.toBinary();
      org.evosuite.runtime.Random.setNextRandom(1097);
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(761, 761, (double[]) null);
      // Undeclared exception!
      try { 
        basic1DMatrix0.setAll(761);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(0, mockRandom0);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)1;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(0, 6);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(0, (byte)1);
      assertEquals(0, matrix0.rows());
      assertEquals(1, matrix0.columns());
      
      MockRandom mockRandom0 = new MockRandom(366L);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric((byte)0, mockRandom0);
      assertEquals(0, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 761;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(761, 761, (double[]) null);
      // Undeclared exception!
      try { 
        basic1DMatrix0.rank();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(0, 0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.spliterator();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, (-1244.57525828665));
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(4);
      MockRandom mockRandom0 = new MockRandom();
      basic1DMatrix0.norm();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      assertEquals(83361792, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      basic1DMatrix0.swapColumns(0, 0);
      Basic1DMatrix.diagonal(9, (-1513.99747194064));
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1513.99747194064);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 1562;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-1513.99747194064);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 9;
      doubleArray4[1] = (double) 9;
      doubleArray4[2] = (double) 1562;
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      Basic1DMatrix.randomSymmetric(245, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      basic1DMatrix0.swapRows(2168, 8);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      basic1DMatrix0.swapRows(1889, 1889);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      basic1DMatrix0.swapColumns(0, 0);
      basic1DMatrix0.product();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(9, (-1513.99747194064));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1513.99747194064);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix1, basic1DMatrix1, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(0, 0);
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(0, 21);
      assertEquals(21, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.identity(21);
      assertEquals(21, basic1DMatrix2.rows());
      
      basic1DMatrix0.swapRows(5, 2439);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(3);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(3250, 0);
      assertEquals(0, matrix0.columns());
      assertEquals(3250, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparseMatrix.diagonal(1, 1);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(1, mockRandom0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(25, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      int int0 = 0;
      int int1 = 18;
      basic1DMatrix0.swapColumns(0, 18);
      basic1DMatrix0.product();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(18, 0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(12, 12);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.identity(1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      SparseMatrix sparseMatrix0 = basic1DMatrix0.toSparseMatrix();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 276;
      doubleArray0[1] = (double) 276;
      doubleArray0[2] = (double) 276;
      doubleArray0[3] = (double) 276;
      doubleArray0[4] = (double) 276;
      doubleArray0[5] = (double) 276;
      doubleArray0[6] = (double) 276;
      doubleArray0[7] = (double) 276;
      Matrix matrix0 = Matrix.from1DArray(276, 276, doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, sparseMatrix0, matrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 560;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(560, 1);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2240
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, 1);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(5444, 1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10890
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }
}
