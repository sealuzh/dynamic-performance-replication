/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:43:24 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser.parse("|", 8);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 8, (-189));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        Parser.parse("(?P(", (-4592));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "(?P<(?(\"(6 c>,#?5";
      try { 
        Parser.parse("(?P<(?(\"(6 c>,#?5", 237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?(\"(6 c`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", (-1372));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "(?P<(?(\"6 c>,?5";
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("(B", 2081);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(B`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1769;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "\\C";
      Regexp regexp1 = Parser.parse("C", 1769);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int1 = 8490;
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      String string1 = ">T$2K.P T]J9U41_fN";
      int int2 = 48;
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "\\0";
      int int0 = 1408;
      Regexp regexp0 = Parser.parse("\u0000", 1408);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int1 = 1663;
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 120, 1408);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        Parser.parse("[", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 345);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 6, 345);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]", 4);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int0 = 1531;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1531, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "+^k<`u^qg=";
      int int0 = 97;
      try { 
        Parser.parse("+^k<`u^qg=", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      int int0 = (-2340);
      Regexp regexp0 = Parser.parse("e.", (-2340));
      assertNotNull(regexp0);
      
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexpArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-2595);
      String string0 = "o?)nZ%qCn90h";
      int int1 = 204;
      try { 
        Parser.parse("o?)nZ%qCn90h", 204);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        Parser.parse("*5lx-Q'bF+'mwg", (-2567));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Soc*c.", 400);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-1667);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("p8", (-837));
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("^", 64);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      regexpArray0[3] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1), 326);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp0 = Parser.parse("-", 53);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 43742, 53);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-3301);
      try { 
        Parser.parse("v).p}!,OL Q$0jD,d", 3893);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-308);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse(":$z", 57);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2227), (-308));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2227
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "\\6";
      int int0 = 321;
      Parser parser0 = new Parser("]+@~!;n", 321);
      assertNotNull(parser0);
      
      String string1 = "1`dbr*d\\)r!N";
      Regexp regexp0 = Parser.parse("\u0006", 970);
      assertNotNull(regexp0);
      
      String string2 = "[::]";
      String string3 = "$)";
      try { 
        Parser.parse("$)", 321);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "|'";
      int int0 = 4;
      Regexp regexp0 = Parser.parse("|'", 4);
      assertNotNull(regexp0);
      
      int int1 = 356;
      Regexp[] regexpArray0 = new Regexp[2];
      int int2 = 1967;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 4, 1967);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        Parser.parse("(", 784);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "!E|0";
      Regexp[] regexpArray0 = new Regexp[3];
      int int0 = 53;
      Regexp regexp0 = Parser.parse("!E|0", 53);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 43742, 53);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 43641;
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse(")Hlv", (-2060));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 1384);
      assertNotNull(regexp0);
      
      int int0 = (-2465);
      Regexp[] regexpArray0 = new Regexp[1];
      int int1 = 8593;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      String string0 = "ebf#QKqIA~";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int2 = (-1699);
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, int2, int2);
      assertFalse(regexpArray0.equals((Object)regexpArray1));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertNotNull(regexpArray2);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray0, regexpArray2);
      assertNotSame(regexpArray1, regexpArray2);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray2, regexpArray1);
      assertNotSame(regexpArray2, regexpArray0);
      
      int int3 = 1537;
      int int4 = 93;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int3, int4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p", 43632);
      assertNotNull(regexp0);
      
      int int0 = 3;
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1749;
      Regexp regexp0 = Parser.parse("p@^", 1749);
      assertNotNull(regexp0);
      
      String string0 = "\\P";
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      try { 
        Parser.parse("(d", 43613);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(d`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      try { 
        Parser.parse("[:", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "\\6";
      int int0 = 1613;
      try { 
        Parser.parse("[:", 1613);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      int int0 = 127150;
      try { 
        Parser.parse("c(", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `c(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-493);
      String string0 = "[:";
      Regexp regexp0 = Parser.parse("{%Vsr{%:", 8);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = regexp1.subs;
      assertNull(regexpArray0);
      
      String string1 = "X}=?cAK*\\5SCAh";
      String string2 = "\\5";
      int int1 = 109;
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 8581;
      Parser parser0 = new Parser("PP`", 8581);
      assertNotNull(parser0);
      
      int int1 = 65;
      int int2 = 41;
      Regexp regexp0 = Parser.parse("{~", 41);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 4;
      String string0 = "nX[\\3DR";
      try { 
        Parser.parse("nX[\u0003DR", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[\u0003DR`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1769;
      int int1 = (-180);
      String string0 = "[^\\x00-\\x{s10FFFF}]";
      Regexp regexp0 = Parser.parse("[^x00-x{s10FFFF}]", 1769);
      assertNotNull(regexp0);
      
      String string1 = "Dqp{]E";
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string2 = "gT&k{164jFzF$'Xt";
      Regexp regexp2 = Parser.parse(string2, int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      int int2 = 126;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      int int3 = 3034;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Parser parser0 = new Parser("(?-m:$)", (-2873));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("xc5q3N!4a|y<D1N7", (-3301));
      assertNotNull(regexp0);
      
      int int0 = 88;
      Regexp regexp1 = Parser.parse("{E", (-2873));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int1 = 53;
      Regexp regexp2 = Parser.parse("[^x00-x{10FFFF}]", 53);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int2 = 65616;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 88, 37);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", (-1168));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      String string0 = "|.C)Bm5hc";
      try { 
        Parser.parse("|.C)Bm5hc", 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[1] = regexpArray0[0];
      int int0 = 501;
      try { 
        Parser.parse("Pz:/+)GqF^N", 501);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P@^", 1001);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1006;
      String string0 = "[";
      int int1 = 3800;
      try { 
        Parser.parse("[", 3800);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 113;
      try { 
        Parser.parse("(*P(", 113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP@^", (-2571));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[10];
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1545), (-119));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1545
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "[:\\x00-\\x{10FFFF}]";
      String string1 = "\\x";
      int int0 = (-3446);
      int int1 = 0;
      Regexp regexp0 = Parser.parse("x", 0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int2 = (-1676);
      Regexp regexp2 = Parser.parse(string0, int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      
      Regexp regexp3 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      String string2 = "-";
      String string3 = "Pc";
      Regexp regexp4 = Parser.parse(string3, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      
      int int3 = 1630;
      Regexp regexp5 = Parser.parse(string2, int3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      
      Regexp regexp6 = Parser.parse(string2, int1);
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotNull(regexp6);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      
      int int4 = (-3716);
      Regexp regexp7 = Parser.parse(string3, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(regexp7);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp3);
      
      String string4 = "?bf";
      try { 
        Parser.parse(string4, int4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("\u0006", (-760));
      assertNotNull(regexp0);
      
      int int0 = (-1747);
      int int1 = (-3339);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "tjJ]b+<r";
      int int0 = 123;
      Regexp regexp0 = Parser.parse("x{", 124);
      assertNotNull(regexp0);
      
      int int1 = 2;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = "Ogham";
      int int2 = 64435;
      Regexp regexp2 = Parser.parse(string1, int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string2 = "\\s";
      Regexp regexp3 = Parser.parse(string2, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      String string3 = "g1_6L=<Pz";
      int int3 = (-3238);
      Regexp regexp4 = Parser.parse(string3, int3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      
      String string4 = "O}`UlK`QPB\"%16`";
      Regexp regexp5 = Parser.parse(string4, int0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      
      String string5 = "*PyQZr(t]|,>G];";
      Parser parser0 = new Parser(string5, int0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp4;
      regexpArray0[2] = regexp5;
      regexpArray0[3] = regexp4;
      regexpArray0[4] = regexp4;
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp4;
      regexpArray0[7] = regexp0;
      int int4 = 2335;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int4, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2335
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Lo", 347);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexp0.cap = 0;
      Regexp regexp1 = Parser.parse("Va3eL29&=OF_cHf", 347);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp1.toString();
      assertEquals("(?i:V\\x7fa3eL29&=OF_cHf)", string0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(string0);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 0, 0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp regexp2 = Parser.parse("|XCxJEC0bzK", 0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string1 = "\\p\\?v3";
      try { 
        Parser.parse(string1, regexp0.cap);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-16);
      String string0 = "nX[\\DR";
      try { 
        Parser.parse("nX[DR", (-16));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[DR`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:e-e!KC", (-493));
      assertNotNull(regexp0);
      
      String string0 = "+";
      int int0 = (-1699);
      try { 
        Parser.parse("+", (-1699));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("pP@", (-516));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("#Q;*qQhh<~V(P", 1498);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 6077, (-516));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?i:!E)|(?i:x7f0)", 1749);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?i:!E)|(?i:x7f0)`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      try { 
        Parser.parse("(?(?-m:$)", (-304));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      try { 
        Parser.parse("(?i:", (-2583));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-2607);
      String string0 = "(?s=.)";
      try { 
        Parser.parse("(?s=.)", (-2607));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?s=`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 65);
      assertNotNull(regexp0);
      
      regexp0.name = "(?-m:$)";
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[1] = regexp1;
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 24);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Lo", 347);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("KQ{", (-2435));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "tjJ]b+<r";
      int int0 = 627;
      Regexp regexp0 = Parser.parse("tjJ]b+<r", 627);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse(">u,{5", 124);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      Regexp regexp4 = Parser.parse(",", 627);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 123, 1789);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("(t-m:$h)", 2844);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse(":R$h<_98|j)f E2G", (-1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 115, 43641);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("CK3+]eMbi{9N+", 8);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[1] = regexp2;
      regexpArray0[3] = regexp1;
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("\f", 1693);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      boolean boolean0 = regexp2.equals(regexp1);
      assertFalse(boolean0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp3));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp4);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp3);
      
      Regexp regexp5 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      
      Regexp regexp6 = new Regexp(regexp5);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp5));
      assertNotNull(regexp6);
      
      Regexp regexp7 = new Regexp(regexp_Op0);
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp5));
      assertNotNull(regexp7);
      
      int int0 = 91;
      Regexp regexp8 = Parser.parse("e", 91);
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp6));
      assertNotNull(regexp8);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp6);
      
      Regexp regexp9 = new Regexp(regexp8);
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp5));
      assertTrue(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp3));
      assertNotNull(regexp9);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 91, 118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Parser parser0 = new Parser("[?S\" VpP^ya", 1476);
      assertNotNull(parser0);
      
      try { 
        Parser.parse("(?-m", 1476);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Parser parser0 = new Parser("m\"v", 14);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse(">TMa>", 105);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("a ", 14);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("m\"v", 105);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse(">TMa>", 222);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp4);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertNotNull(regexp6);
      
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp2);
      assertTrue(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp6));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp7);
      
      regexpArray0[7] = regexp7;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 116, 116);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = (-2066);
      String string0 = "[:.]";
      Regexp regexp0 = Parser.parse("[:.]", 43641);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string1 = regexp1.toString();
      assertEquals("[\\.:]", string1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2066), 43641);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2066
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 43613;
      try { 
        Parser.parse("GYDxD{?e", 43613);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P3cd:?|", 36);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("P3cd:?|", (-1435084081));
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 1794;
      String string0 = "[^\\x00-\\x{10FFFF}]";
      String string1 = "=5ae\"-ggHps-bz";
      Regexp regexp0 = Parser.parse("=5ae\"-ggHps-bz", 1006);
      assertNotNull(regexp0);
      
      int int1 = 857;
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", 857);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-52), 73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -52
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 54;
      Regexp regexp0 = Parser.parse("[:x00-x{1$0FFFF}]", 54);
      assertNotNull(regexp0);
      
      int int1 = 11265;
      int int2 = 124;
      Regexp regexp1 = Parser.parse("[:x00-x{1$0FFFF}]", 124);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexp0.max = int0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      String string0 = null;
      String string1 = "";
      Regexp regexp5 = Parser.parse(string1, regexp0.max);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotNull(regexp5);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      
      // Undeclared exception!
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Regexp regexp0 = Parser.parse("xx2{12xqz", 1509);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("invalid character class", 58);
      assertNotNull(parser0);
      
      String string0 = "\\P";
      Regexp regexp1 = Parser.parse("xx2{12xqz", (-2289));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("p", (-2289));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 97;
      Regexp regexp0 = new Regexp((Regexp.Op) null);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("Y^||[", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = (-2123);
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", (-2915));
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp regexp1 = Parser.parse("/=3Ydn?f@7H|E2?", 6827);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2123), (-2915));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2583);
      intArray0[1] = (-2583);
      intArray0[2] = (-2583);
      intArray0[3] = (-2583);
      intArray0[4] = (-2583);
      intArray0[5] = (-2583);
      regexp0.runes = intArray0;
      String string0 = regexp1.toString();
      assertEquals("\\A", string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(string0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp2 = Parser.parse("A", (-2583));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse("A", (-2381));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      Regexp regexp4 = Parser.parse("A", (-2381));
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertTrue(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      
      String string1 = "?)4(U";
      try { 
        Parser.parse("?)4(U", (-2583));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 1749;
      String string0 = "^ther_ID_Continue";
      Regexp regexp0 = Parser.parse("\r@^", 1749);
      assertNotNull(regexp0);
      
      int int1 = (-269);
      Regexp regexp1 = Parser.parse("Pd", (-269));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int2 = (-1504);
      Regexp regexp2 = Parser.parse("Pd", (-1504));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string1 = "^:Z}UC(";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `^:Z}UC(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = (-17);
      String string0 = "\\1";
      int int1 = 2448;
      Regexp regexp0 = Parser.parse("\u0001", 2448);
      assertNotNull(regexp0);
      
      String string1 = "\\p8";
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0006D", 324);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[4];
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "mA=I5n\\1%L)+vT=|=";
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 2384;
      int int1 = 4;
      try { 
        Parser.parse("mA=I5n\u0001%L)+vT=|=", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 54);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("[:x00-x{10FFFF}]", 93);
      assertNotNull(parser0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("[:x00-x{10FFFF}]", 32);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      regexp1.flags = 32;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, 928, 928);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertNotNull(regexpArray2);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray1, regexpArray2);
      assertNotSame(regexpArray2, regexpArray1);
      assertNotSame(regexpArray2, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "[]";
      try { 
        Parser.parse("[]", 1764);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", (-1822));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("DK,c<", 4231);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("pP@^", 2278);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexp1.reinit();
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp2);
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      
      Parser parser1 = new Parser("&'PiXlY", (-1822));
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      Regexp regexp6 = Parser.parse("(?(?-m:$)", 2278);
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
      assertNotNull(regexp6);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp2);
      
      Regexp regexp7 = Parser.parse("B", 741);
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp4));
      assertNotNull(regexp7);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp4);
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp7;
      regexpArray0[1] = regexp4;
      Regexp regexp8 = new Regexp(regexp_Op0);
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp6));
      assertNotNull(regexp8);
      
      regexpArray0[2] = regexp8;
      regexpArray0[3] = regexp5;
      Regexp regexp9 = Parser.parse("DK,c<", 741);
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp2));
      assertNotNull(regexp9);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp2);
      
      regexpArray0[4] = regexp9;
      Regexp regexp10 = new Regexp(regexp_Op0);
      assertFalse(regexp10.equals((Object)regexp9));
      assertFalse(regexp10.equals((Object)regexp7));
      assertFalse(regexp10.equals((Object)regexp6));
      assertFalse(regexp10.equals((Object)regexp5));
      assertFalse(regexp10.equals((Object)regexp1));
      assertFalse(regexp10.equals((Object)regexp0));
      assertFalse(regexp10.equals((Object)regexp2));
      assertNotNull(regexp10);
      
      regexpArray0[5] = regexp10;
      Regexp regexp11 = new Regexp(regexp2);
      assertFalse(regexp1.equals((Object)regexp8));
      assertFalse(regexp1.equals((Object)regexp10));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp7));
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp9));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp5));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp9));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp8));
      assertTrue(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp10));
      assertFalse(regexp2.equals((Object)regexp6));
      assertFalse(regexp2.equals((Object)regexp7));
      assertTrue(regexp11.equals((Object)regexp5));
      assertTrue(regexp11.equals((Object)regexp2));
      assertFalse(regexp11.equals((Object)regexp0));
      assertFalse(regexp11.equals((Object)regexp6));
      assertFalse(regexp11.equals((Object)regexp7));
      assertFalse(regexp11.equals((Object)regexp10));
      assertFalse(regexp11.equals((Object)regexp8));
      assertFalse(regexp11.equals((Object)regexp4));
      assertTrue(regexp11.equals((Object)regexp1));
      assertFalse(regexp11.equals((Object)regexp3));
      assertFalse(regexp11.equals((Object)regexp9));
      assertNotNull(regexp11);
      
      regexpArray0[6] = regexp11;
      regexpArray0[7] = regexp1;
      regexpArray0[8] = regexp0;
      int int0 = (-1393);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1393), (-1822));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "dHZ Z\\bps^AwO&Z,?k";
      Regexp regexp0 = Parser.parse("dHZ Z\bps^AwO&Z,?k", (-1687));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[22];
      regexpArray0[0] = regexp1;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1687), (-545));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1687
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "\\5";
      int int0 = 2033;
      Regexp regexp0 = Parser.parse("\u0005", 2033);
      assertNotNull(regexp0);
      
      String string1 = "\\v";
      Parser parser0 = new Parser(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(parser0);
      
      int int1 = 2669;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 237;
      Regexp regexp0 = Parser.parse(".E6NRGMg:/s*?4", 237);
      assertNotNull(regexp0);
      
      String string0 = "invalid escape sequence";
      String string1 = null;
      Regexp[] regexpArray0 = regexp0.subs;
      assertNotNull(regexpArray0);
      
      int int1 = (-262);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1083, (-262));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp regexp0 = Parser.parse("^Ra.W8.6dN", 41);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Parser parser0 = new Parser("\"$A hF{E^{gJ${U", 7);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("\"$A hF{E^{gJ${U", 7);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("\n", 5788);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "k";
      Parser parser0 = new Parser("k", 0);
      assertNotNull(parser0);
      
      int int0 = 3860;
      try { 
        Parser.parse("`Q\u0000,Bd)LpM", 3860);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "(?s)";
      Regexp regexp0 = Parser.parse("(?s)", (-2583));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string1 = regexp0.name;
      assertNull(string1);
      
      int int0 = (-4127);
      Regexp regexp2 = Parser.parse("(?s)", (-4127));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      regexp0.reinit();
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      
      Regexp regexp4 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-631));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0003", 65);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string0 = "]|eq{}n5i0xMqU';cq";
      String string1 = "0d^Dfrs";
      int int0 = 62;
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      boolean boolean0 = regexp1.equals(regexp2);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Parser parser0 = new Parser(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = (-2607);
      String string0 = "`Q\\0mBd)p";
      try { 
        Parser.parse("`Q\u0000mBd)p", (-2607));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = "[:Ne-!KC";
      int int0 = (-1543);
      try { 
        Parser.parse("[:Ne-!KC", (-1543));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `e-!`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp regexp0 = Parser.parse("(?P<", 46);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("Eg}f%e<", 951);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("(?P<(?-m:$)", 7614);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      
      Regexp regexp6 = new Regexp(regexp1);
      assertTrue(regexp1.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertTrue(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp3));
      assertNotNull(regexp6);
      
      try { 
        Parser.parse("(M:[GmW\"V~z/bFs-", 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[GmW\"V~z/bFs-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = "r\\4NU;j<3";
      int int0 = 3401;
      Regexp regexp2 = Parser.parse("r\u0004NU;j<3", 3401);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\4`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int int0 = 83;
      Regexp regexp0 = Parser.parse("P\n", 83);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexp1.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      
      int int1 = 120;
      Regexp regexp3 = Parser.parse("P\n", 83);
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp1;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp3;
      regexpArray0[8] = regexp1;
      regexp1.subs = regexpArray0;
      Regexp[] regexpArray1 = regexp1.subs;
      assertNotNull(regexpArray1);
      assertSame(regexpArray1, regexpArray0);
      
      Regexp regexp4 = Parser.parse("\u0006", 83);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      
      Regexp regexp5 = Parser.parse("5mOs}8;RGX1?_e&O", 339);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      
      Regexp regexp6 = Parser.parse("[:-]#", 120);
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertNotNull(regexp6);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 339, 49);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("5mOs}8;RGX1?_e&O", 43619);
      assertNotNull(regexp0);
      
      regexp0.min = (-2688);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp1.cap = (-2688);
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      regexp1.op = regexp_Op0;
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      
      Regexp regexp3 = Parser.parse("\"B|", 120);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      Regexp[] regexpArray0 = regexp3.subs;
      assertNotNull(regexpArray0);
      
      Regexp regexp4 = Parser.parse("[:-]#", 0);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      
      Regexp regexp5 = new Regexp(regexp1.op);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      
      Regexp regexp6 = Parser.parse("END_TEXT", 43619);
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertNotNull(regexp6);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp4);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = "[::\\x00-\\x3{10FFFF}]";
      Regexp regexp0 = Parser.parse("[::x00-x3{10FFFF}]", 100);
      assertNotNull(regexp0);
      
      int int0 = 3082;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexp2.reinit();
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      int int1 = 120;
      String string1 = "%uv1OCIfhVblr@A'PP'";
      Regexp regexp3 = Parser.parse(string1, int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      String string2 = ";K^2}V{U%WRQ<sMy";
      Regexp regexp4 = Parser.parse(string2, int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      
      Regexp[] regexpArray0 = regexp4.subs;
      assertNull(regexpArray0);
      
      String string3 = "Lu";
      int int2 = 941;
      Regexp regexp5 = Parser.parse(string3, int2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x3{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 113);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 3422;
      Parser parser0 = new Parser("d", 3422);
      assertNotNull(parser0);
      
      String string0 = "[:R**xG\\";
      try { 
        Parser.parse("[:R**xG", 113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:R**xG`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = "G\\P^";
      int int0 = 253;
      Regexp regexp0 = Parser.parse("GP^", 253);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = null;
      Parser parser0 = new Parser(string1, int0);
      assertNotNull(parser0);
      
      regexp0.max = int0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int1 = 2384;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("[:]q5^ug", 321);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("@[SD%Y'_.8+uDnB@t", 1662);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("4T&k{164jFz$P\"qX", 1662);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse("[:]q5^ug", 123);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = Parser.parse("p", 321);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("QOGVwGF4K9pF8p", (-516));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("QOGVwGF4K9pF8p", (-1754));
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("P", 2342);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("QOGVwGF4K9pF8p", 98);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      String string0 = "\\p5<@";
      Parser parser0 = new Parser("p5<@", (-918));
      assertNotNull(parser0);
      
      String string1 = ".]";
      Regexp regexp0 = Parser.parse(".]", 10);
      assertNotNull(regexp0);
      
      int int0 = (-634);
      Regexp regexp1 = Parser.parse("8gVyn", 3133);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int1 = 388;
      Regexp regexp2 = Parser.parse("J=H1+v>tm6\u0007", 388);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      int int2 = (-963);
      Regexp regexp3 = Parser.parse(string1, int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      String string2 = "LExM526=S+!b*q>";
      int int3 = 1099;
      Regexp regexp4 = Parser.parse(string2, int3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      
      Parser parser1 = new Parser(string1, int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      Regexp regexp5 = Parser.parse(string0, int3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp6 = new Regexp(regexp_Op0);
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp1));
      assertNotNull(regexp6);
      
      Regexp[] regexpArray0 = null;
      int int4 = 120630;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int4, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
