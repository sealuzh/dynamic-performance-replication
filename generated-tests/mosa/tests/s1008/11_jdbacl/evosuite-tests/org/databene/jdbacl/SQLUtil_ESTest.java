/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:33:19 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.sql.JDBCType;
import java.time.temporal.ChronoUnit;
import java.util.HashSet;
import java.util.Set;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.mutatesStructure("BH%M7&pFG%.1?7qXCcO");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[2] = null;
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("DaK\"U_-`R:U@NC");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("PRIMARY KEY ", "PRIMARY KEY ", "PRIMARY KEY ");
      assertEquals("'PRIMARY KEY '", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.removeComments("s4[BJ_CF/xW7|");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments(" AND ");
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.h2.index.PageBtreeLeaf";
      String string0 = SQLUtil.innerJoin("org.h2.index.PageBtreeLeaf", stringArray0, "org.h2.index.PageBtreeLeaf", "org.h2.index.PageBtreeLeaf", stringArray0);
      assertEquals("org.h2.index.PageBtreeLeaf as org.h2.index.PageBtreeLeaf on org.h2.index.PageBtreeLeaf.org.h2.index.PageBtreeLeaf = org.h2.index.PageBtreeLeaf.org.h2.index.PageBtreeLeaf", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "uXID~", stringArray0);
      assertEquals("left join  as uXID~ on . = uXID~. and . = uXID~. and . = uXID~. and . = uXID~. and . = uXID~.", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("s4[BJ_CFg;xW7|", false, "F", "F");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK F", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "47b", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":$IvGhl}P68s");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setBinaryStream(");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table setBinaryStream(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(45, "table null");
      Integer integer0 = new Integer(45);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("table null TABLE NULL(45) NULL", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("HELP");
      SQLUtil.addOptionalCondition("HELP", stringBuilder1);
      assertEquals("HELP or HELP", stringBuilder1.toString());
      assertEquals("HELP or HELP", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "update";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ")Bzf+tuB7>W_n <");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(")Bzf+tuB7>W_n <", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition(")Bzf+tuB7>W_n <", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-2111), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2111
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Set<DBForeignKeyConstraint> set0 = new HashSet<DBForeignKeyConstraint>();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "472", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT 472 ", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("DTT&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".WU>t@x(L{<Y%4", dBSchema0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DTT&";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "j]k;-", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT j]k;- UNIQUE (DTT&)", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop index");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = SQLUtil.normalize("U:f}c?Ez*s,&AaR\"Gp", true);
      assertEquals("U : f } c ? Ez * s, & AaR \"Gp\"", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" LO+4x:ghDK-e+B%c");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " LO+4x:ghDK-e+B%c", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" LO+4x:ghDK-e+B%c\" PRIMARY KEY ()", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals(" LO+4x:ghDK-e+B%c. LO+4x:ghDK-e+B%c", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("truncatecreatequeryobject(class<t>)");
      tableContainer0.getTable("6go8%VPO%ekX\"+4+");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("truncatecreatequeryobject(class<t>)", (DBTable) null, (-378), "truncatecreatequeryobject(class<t>)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"class<t>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      SQLUtil.normalize(", eventCount: ", false);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = "@j={u wm@+[";
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(" = ", defaultDBTable0, 2778, "(, , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.normalize("9>}y(-*yi3#.B", false);
      assertEquals("9 > } y (- * yi3 #.B", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      OutputStream outputStream0 = fileUtil0.openOutputStreamElement("9>}y(-*yi3#.B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("9>}y(-*yi3#.B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 9>}y(-*yi3#.B
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("DATE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setBinaryStream(");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "setBinaryStream(", false, stringArray0);
      String string0 = SQLUtil.join("DATE", "xe;Wx-JA[?", stringArray0, "drop tableasc_or_desc", "drop tableasc_or_desc", stringArray0);
      assertEquals("DATE join drop tableasc_or_desc as drop tableasc_or_desc on ", string0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable1, "e%][M", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CjM", true, dBPrimaryKeyConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance(1782, "BLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eumm", defaultDBTable1, dBDataType0, integer1);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("BLOB", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setBinaryStream(");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "setBinaryStream(", false, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("setBinaryStream(");
      DBSchema dBSchema0 = new DBSchema("X0X81S", dBCatalog0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ClientInfo property not supp[rted.");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "create table";
      stringArray0[1] = "create table";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder(90);
      SQLUtil.addRequiredCondition(".", stringBuilder0);
      assertEquals(".", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = FBConnectionProperties.TYPE_PROPERTY;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("type");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string1 = SchemaDescriptor.NULLID_SCHEMA_UUID;
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("\u0001\u01A3");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("s4[BJ_CF/xW7|", false);
      assertEquals("s4 [ BJ_CF / xW7 |", string0);
      
      boolean boolean0 = SQLUtil.isDDL("s4 [ BJ_CF  / xW7 |");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1476), ";CLQSriVX2Y$|n?hZ}");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deleteel_sj)]:tjuxx+fa@yu", defaultDBTable0, dBDataType0, integer0, integer1);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(";CLQSRIVX2Y$|N?HZ}(0,2)", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("selectel_sj)X:tjux+fa@y", false);
      assertEquals("selectel_sj) X : tjux + fa @ y", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setBinaryStream(");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "setBinaryStream(", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "L6*1{]E>p_*fo,", (String[]) null, "D'\"R43uh.;%SaF", "This statement does not declare an OUT parameter.  Use '{' ?= call ... '}' to declare one.", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(109, "s.tBinaryStreaO(");
      JDBCType jDBCType0 = JDBCType.REF_CURSOR;
      Integer integer0 = jDBCType0.getVendorTypeNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("s.tBinaryStreaO(", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("s.tBinaryStreaO(", defaultDBTable0, 109, "el_SJ)]:Tjuxx+fa@yu");
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("s.tBinaryStreaO( EL_SJ)]:TJUXX+FA@YU NULL", string0);
      
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("el_SJ)]:Tjuxx+fa@yu");
      assertNull(boolean1);
      
      DBCatalog dBCatalog0 = new DBCatalog("s.tBinaryStreaO(");
      dBCatalog0.getSchema((String) null);
      defaultDBColumn1.setName("s.tBinaryStreaO(");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EL_SJ)]:TJUXX+FA@YU";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "create table";
      stringArray0[1] = "create table";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("create table", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("update", stringBuilder0);
      assertEquals("update", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("P:E`KQ*b", defaultDBTable0, 109, "e_SJ)]:Tjuxx+fa@yu");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("e_SJ)]:Tjuxx+fa@yu");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P:E`KQ*b", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("- ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SchemaDescriptor.SYSPROC_SCHEMA_UUID;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionoin(<r1idw0um#");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("'ROW'", false);
      assertEquals("'ROW'", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectel_sj)]:tjuxx+fa@yu");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "selectel_sj)]:tjuxx";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "selectel_sj)]:tjuxx", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT selectel_sj)]:tjuxx UNIQUE (selectel_sj)]:tjuxx)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-!f";
      DBSchema dBSchema0 = new DBSchema("-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[1], dBSchema0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, (-1730878509), "table null");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*", defaultDBTable0, (-1914822276), "*");
      defaultDBColumn0.setDefaultValue("*");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("* * DEFAULT * NULL", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("insert", defaultDBTable0, 244, "Xt");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("*, *, *, *, insert, *", string1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectel_sj)X:tjux+fa@y");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Character character0 = Character.valueOf('\u000F');
      String string0 = SQLUtil.substituteMarkers("E)0Q!m", "E)0Q!m", character0);
      assertEquals("'\u000F'", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = " LO+4x\\:ghDK-e+B%c";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" LO+4x:ghDK-e+B%c");
      String[] stringArray0 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " LO+4x:ghDK-e+B%c", false, (String[]) null);
      dBPrimaryKeyConstraint0.toString();
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select into!nrrul7v]t_=ws", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("");
      DBSchema dBSchema0 = new DBSchema(stringArray0[5], dBCatalog0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@M.jr?\"kS");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table", defaultDBTable0, 1426, "M8~~");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBDataType dBDataType0 = DBDataType.getInstance(90030, "e_SJ)]:Tjuxx+fa@yu");
      Integer integer0 = new Integer((-159));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Illegal column type format: ", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("E_SJ)]:TJUXX+FA@YU(-159,-159)", string0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("jkSyf :8ZpG");
      assertNull(boolean1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("INSERT VALUES");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create table");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create table M8~~ NULL", string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = FBConnectionProperties.TYPE_PROPERTY;
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      String string2 = SQLUtil.normalize("table null", true);
      assertTrue(string2.equals((Object)string1));
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("table null", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string3 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"table null\" FOREIGN KEY () REFERENCES null()", string3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" LO+4x:ghDK-e+B%c");
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }
}
