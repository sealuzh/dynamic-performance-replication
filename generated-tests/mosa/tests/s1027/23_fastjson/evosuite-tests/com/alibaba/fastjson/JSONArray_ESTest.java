/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:38:50 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(525);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 525, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      jSONArray1.spliterator();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getString(525);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 525, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(2190, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2190, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3061, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3061, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseArray("", class0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.add((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      jSONArray0.fluentSet(18, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(528);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 528, Size: 526
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1551);
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1103);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1103, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(2184);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2184
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(525);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.getComponentType();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      jSONArray1.lastIndexOf(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(525);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      jSONArray0.getJSONArray(0);
      long long0 = jSONArray1.getLongValue(18);
      assertEquals(526, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>(525);
      jSONArray0.addAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      MockHijrahDate[] mockHijrahDateArray0 = new MockHijrahDate[1];
      MockHijrahDate[] mockHijrahDateArray1 = jSONArray1.toArray(mockHijrahDateArray0);
      assertSame(mockHijrahDateArray0, mockHijrahDateArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(76);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      boolean boolean0 = jSONArray0.remove((Object) propertyNamingStrategy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(480);
      // Undeclared exception!
      try { 
        jSONArray0.subList(480, (-3988));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(480) > toIndex(-3988)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(119);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 119, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONScanner jSONScanner0 = new JSONScanner("~sV2;3mZJ#Shs", 0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      jSONArray1.getByteValue(0);
      Integer integer0 = new Integer(18);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(18, "~sV2;3mZJ#Shs");
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(525);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 525, Size: 19
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1103);
      Class<Method> class0 = Method.class;
      List<Method> list0 = jSONArray0.toJavaList(class0);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      jSONArray0.contains(class1);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = Opcodes.LCONST_1;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(525);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 525, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1853, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1853, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.clear();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "");
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getString(18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      jSONArray1.toJavaList(class0);
      LinkedList<MockThaiBuddhistDate> linkedList0 = new LinkedList<MockThaiBuddhistDate>();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      linkedList0.add(mockThaiBuddhistDate0);
      boolean boolean0 = jSONArray1.containsAll(linkedList0);
      assertEquals(1, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(525);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 525, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1103);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.lastIndexOf(mockJapaneseDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1345));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(5196, class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.getObject(525, (Type) class0);
      jSONArray0.add(525, (Object) jSONArray1);
      int int0 = jSONArray1.size();
      assertEquals(5198, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(422, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 422, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      jSONArray0.clear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-3883));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(5218, object0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(5219, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(5219, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      JSONArray jSONArray2 = new JSONArray(18);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      
      boolean boolean0 = jSONArray1.getBooleanValue(18);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(5219, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(5219, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      Date date0 = jSONArray1.getDate(18);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(date0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(525);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1103);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(1103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1103, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      jSONArray0.clear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      JSONArray jSONArray2 = (JSONArray)jSONArray1.clone();
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertTrue(jSONArray2.equals((Object)jSONArray1));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.size());
      
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(525);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 525, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner("~sV2;3mZJ#Shs", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('~', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      JSONArray jSONArray2 = jSONArray0.getJSONArray(0);
      assertSame(jSONArray0, jSONArray1);
      assertNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      
      long long0 = jSONArray1.getLongValue(18);
      assertEquals(0L, long0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      assertNull(class1);
      
      jSONArray0.setComponentType((Type) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner("~sV2;3mZJ#Shs", 525);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(525, jSONScanner0.getFeatures());
      assertEquals('~', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(2211, jSONScanner0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2212, jSONArray0.size());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(525, jSONScanner0.getFeatures());
      assertEquals('~', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2212, jSONArray1.size());
      
      JSONArray jSONArray2 = jSONArray0.getJSONArray(0);
      assertSame(jSONArray0, jSONArray1);
      assertNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2212, jSONArray0.size());
      
      JSONScanner jSONScanner1 = new JSONScanner("~sV2;3mZJ#Shs");
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals("Unknown", jSONScanner1.tokenName());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('~', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      
      JSONArray jSONArray3 = jSONArray0.fluentSet(525, jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2212, jSONArray0.size());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(525, jSONScanner0.getFeatures());
      assertEquals('~', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2212, jSONArray1.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2212, jSONArray3.size());
      
      JSONObject jSONObject0 = jSONArray3.getJSONObject(2182);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNull(jSONObject0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2212, jSONArray0.size());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(525, jSONScanner0.getFeatures());
      assertEquals('~', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2212, jSONArray1.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2212, jSONArray3.size());
      
      String string0 = jSONArray3.getString(18);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNull(string0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2212, jSONArray0.size());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(525, jSONScanner0.getFeatures());
      assertEquals('~', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2212, jSONArray1.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2212, jSONArray3.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1103);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(5196, class0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(5197, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(5197, jSONArray1.size());
      
      String[] stringArray0 = new String[18];
      stringArray0[0] = "1.2.46";
      stringArray0[2] = "~sV2;3mZJ#Shs";
      stringArray0[4] = "~sV2;3mZJ#Shs";
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(listIterator0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(5197, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "~sV2;3mZJ#Shs";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter1);
      assertFalse(simplePropertyPreFilter1.equals((Object)simplePropertyPreFilter0));
      assertEquals(0, simplePropertyPreFilter1.getMaxLevel());
      
      int int0 = jSONArray1.getIntValue(18);
      assertEquals(0, int0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(5197, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(5197, jSONArray1.size());
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(5197, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(5197, jSONArray1.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("Unknown", jSONScanner0.tokenName());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      JSONArray jSONArray2 = jSONArray0.getJSONArray(0);
      assertSame(jSONArray0, jSONArray1);
      assertNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      
      boolean boolean0 = jSONArray1.getBooleanValue(18);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(43);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), mockMinguoDate0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-6281));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("Unknown", jSONScanner0.tokenName());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1890, jSONScanner0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1891, jSONArray0.size());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("EOF", jSONScanner0.tokenName());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1891, jSONArray1.size());
      
      short short0 = jSONArray1.getShortValue(0);
      assertEquals((short)0, short0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1891, jSONArray0.size());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("EOF", jSONScanner0.tokenName());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1891, jSONArray1.size());
      
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1891, jSONArray0.size());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("EOF", jSONScanner0.tokenName());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1891, jSONArray1.size());
      assertEquals(1891, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(1890);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.JSONScanner@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(5221, object0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(5222, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(5222, jSONArray1.size());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "~sV2;3mZJ#Shs";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "~sV2;3mZJ#Shs";
      stringArray0[4] = "~sV2;3mZJ#Shs";
      stringArray0[5] = "~sV2;3mZJ#Shs";
      stringArray0[6] = "1.2.46";
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(5221);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.Object@dc6d346
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      long long0 = jSONArray0.getLongValue(18);
      assertEquals(0L, long0);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      String string0 = jSONArray0.getString(518);
      assertSame(jSONArray0, jSONArray1);
      assertNull(string0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      JSONObject jSONObject0 = jSONArray1.getJSONObject(18);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      boolean boolean0 = jSONArray1.removeAll(jSONArray0);
      assertTrue(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getByte(18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(3483, object0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3484, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3484, jSONArray1.size());
      
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3483, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3483, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3483, jSONArray2.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.remove((-1053));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1890, jSONScanner0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1891, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("EOF", jSONScanner0.tokenName());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(1891, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      double double0 = jSONArray1.getDoubleValue(0);
      assertEquals(0.0, double0, 0.01);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1891, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("EOF", jSONScanner0.tokenName());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(1891, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      String string0 = jSONArray0.getString(525);
      assertSame(jSONArray0, jSONArray1);
      assertNull(string0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1891, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1094);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Object[] objectArray0 = jSONArray0.toArray();
      assertNotNull(objectArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(5196, class0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(5197, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(5197, jSONArray1.size());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(iterator0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(5197, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      MockMinguoDate mockMinguoDate0 = jSONArray1.getObject(525, (Type) class0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(mockMinguoDate0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(5197, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(5197, jSONArray1.size());
      
      boolean boolean0 = jSONArray0.retainAll(jSONArray1);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(5197, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(5197, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("~sV2;3mZJ#Shs", 525);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(525, jSONScanner0.getFeatures());
      assertEquals('~', jSONScanner0.getCurrent());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      MockMinguoDate mockMinguoDate0 = jSONArray1.getObject(0, (Type) parameterizedTypeImpl0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(mockMinguoDate0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, mockHijrahDate0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@33cdb179
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("~sV2;3mZJ#Shs", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('~', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      byte byte0 = jSONArray1.getByteValue(0);
      assertEquals((byte)0, byte0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      Integer integer0 = new Integer(18);
      assertEquals(18, (int)integer0);
      assertNotNull(integer0);
      
      long long0 = jSONArray1.getLongValue(0);
      assertEquals(0L, long0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      jSONArray0.setRelatedArray(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(525);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(27);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      int int0 = 2219;
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(525);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = JSON.toJSONString(object0, false);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      float float0 = jSONArray1.getFloatValue(310);
      assertEquals(0.0F, float0, 0.01F);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      JSONObject jSONObject0 = jSONArray0.getJSONObject(174);
      assertSame(jSONArray0, jSONArray1);
      assertNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      
      String string1 = jSONArray1.getString(525);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(526, jSONArray1.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(525);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner("~sV2;3mZJ#Shs");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('~', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(4096, (Object) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(4097, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(4097, jSONArray1.size());
      
      Boolean boolean0 = jSONArray0.getBoolean(4096);
      assertSame(jSONArray0, jSONArray1);
      assertNull(boolean0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(4097, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      String string0 = jSONArray1.getString(1093);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(string0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(4097, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(4097, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertEquals(526, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      int int0 = jSONArray0.indexOf(jSONArray1);
      assertEquals((-1), int0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertEquals(526, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(525);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~sV2;3mZJ#Shs\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1890, jSONScanner0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1891, jSONArray0.size());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("EOF", jSONScanner0.tokenName());
      assertEquals(1891, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      short short0 = jSONArray1.getShortValue(0);
      assertEquals((short)0, short0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1891, jSONArray0.size());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("EOF", jSONScanner0.tokenName());
      assertEquals(1891, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      JSONArray jSONArray2 = jSONArray1.fluentAdd((int) (short)0, (Object) jSONArray0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1892, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("EOF", jSONScanner0.tokenName());
      assertEquals(1892, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1892, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray2.getFloatValue((short)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"blankInput\":true,\"current\":\"\\u001A\",\"eOF\":true,\"features\":0,\"locale\":{\"country\":\"\",\"displayCountry\":\"\",\"displayLanguage\":\"English\",\"displayName\":\"English\",\"displayScript\":\"\",\"displayVariant\":\"\",\"extensionKeys\":[],\"iSO3Country\":\"\",\"iSO3Language\":\"eng\",\"language\":\"en\",\"script\":\"\",\"unicodeLocaleAttributes\":[],\"unicodeLocaleKeys\":[],\"variant\":\"\"},\"matchStat\":0,\"ref\":false,\"timeZone\":\"GMT\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(525, "~sV2;3mZJ#Shs");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(526, jSONArray0.size());
      assertEquals(526, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray0.getShort(525);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~sV2;3mZJ#Shs\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONObject jSONObject0 = new JSONObject(18, true);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONObject0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      
      JSONObject jSONObject1 = jSONArray1.getJSONObject(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      
      // Undeclared exception!
      try { 
        jSONArray1.getString((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
