/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:03:11 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectStreamConstants;
import java.io.PipedOutputStream;
import java.lang.reflect.Array;
import java.util.Locale;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.LocalVariableInstruction;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.StackInstruction;
import org.apache.bcel.generic.StoreInstruction;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP2 dUP2_0 = new DUP2();
      GETFIELD gETFIELD0 = new GETFIELD(28);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)2);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals("sipush", sIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(6451);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals((short)178, gETSTATIC0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction((StackInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NEW nEW0 = new NEW(4);
      FSTORE fSTORE0 = new FSTORE(4);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals(2, fSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(2);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals(1, dLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      gOTO_W0.toString();
      instConstraintVisitor0.visitGOTO_W(gOTO_W0);
      assertEquals((short)200, gOTO_W0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitICONST((ICONST) null);
      DCMPG dCMPG0 = new DCMPG();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(128, 128);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDCONST((DCONST) null);
      LSHL lSHL0 = new LSHL();
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(163);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals((short)21, iLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DREM dREM0 = new DREM();
      instConstraintVisitor0.visitDSTORE((DSTORE) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE(0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      assertEquals(0, lSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitALOAD((ALOAD) null);
      AALOAD aALOAD0 = new AALOAD();
      assertEquals("aaload", aALOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      assertEquals("fconst_0", fCONST0.getName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(311, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      DALOAD dALOAD1 = new DALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDALOAD(dALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DALOAD constraint violated: The 'index' is not of type int but of type .
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+T@mFC6I4MMJ7I5v");
      OperandStack operandStack0 = new OperandStack(194, objectType0);
      LocalVariables localVariables0 = new LocalVariables(194);
      OperandStack operandStack1 = new OperandStack(194, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      LRETURN lRETURN0 = (LRETURN)InstructionConstants.LRETURN;
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type '+T@mFC6I4MMJ7I5v'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(3098);
      ObjectType objectType0 = ObjectType.getInstance("m24v@%>@/;");
      OperandStack operandStack0 = new OperandStack(3098, objectType0);
      operandStack0.equals(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      OperandStack operandStack1 = new OperandStack(460, objectType0);
      AASTORE aASTORE0 = new AASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(460, (short)165);
      mULTIANEWARRAY0.setIndex(1703);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '165' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      PUTFIELD pUTFIELD0 = new PUTFIELD((byte)0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFieldInstruction(pUTFIELD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction PUTFIELD constraint violated: Index '0' should refer to a CONSTANT_Fieldref_info structure, but refers to 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+T@mFC6I4MMJ7I5v");
      OperandStack operandStack0 = new OperandStack(194, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      int int0 = (-1715);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("");
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack(311, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      frame0.toString();
      operandStack0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getArgumentTypes("()L;");
      Frame.setThis(uninitializedObjectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+T@mFC6I4MMJ7I5v");
      OperandStack operandStack0 = new OperandStack(194, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type '+T@mFC6I4MMJ7I5v'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LLOAD lLOAD0 = new LLOAD(28);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      BasicType basicType0 = Type.VOID;
      Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("zG)g");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'zG)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BASTORE bASTORE0 = new BASTORE();
      ObjectType objectType0 = ObjectType.getInstance("+T@mFC6I4MMJ7I5v");
      OperandStack operandStack0 = new OperandStack(207, objectType0);
      LocalVariables localVariables0 = new LocalVariables(207);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      uninitializedObjectType0.normalizeForStackOrLocal();
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type '+T@mFC6I4MMJ7I5v'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("Stack next-to-top must be of type double[] but is '");
      ObjectType objectType1 = ObjectType.getInstance("Stack next-to-top must be of type double[] but is '");
      OperandStack operandStack0 = new OperandStack(1901, objectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      MONITOREXIT mONITOREXIT1 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT1);
      assertEquals((short)195, mONITOREXIT1.getOpcode());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(2056);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(2056);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEDYNAMIC0);
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 1929;
      LocalVariables localVariables0 = new LocalVariables(1929);
      ObjectType objectType0 = new ObjectType("");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(1929, objectType0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Frame.getThis();
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LDC_W lDC_W0 = new LDC_W(169);
      LocalVariables localVariables0 = new LocalVariables(169);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("Current method has return type of '");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      OperandStack operandStack1 = new OperandStack(169, objectType0);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type 'Current method has return type of ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(311, objectType0);
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      GETFIELD gETFIELD0 = new GETFIELD(1901);
      FALOAD fALOAD0 = new FALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(246, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name 
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BASTORE bASTORE0 = new BASTORE();
      ObjectType objectType0 = ObjectType.getInstance("+T@mFC6I4MMJ7I5v");
      OperandStack operandStack0 = new OperandStack(166, objectType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(78);
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FLOAD fLOAD0 = new FLOAD(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(fLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FLOAD constraint violated: Read-Access on local variable 2 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      LocalVariables localVariables0 = new LocalVariables(1901);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("zG)g");
      int int0 = 2;
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      FileSystemHandling.shouldAllThrowIOExceptions();
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type 'zG)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(479);
      ObjectType objectType0 = new ObjectType("");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(311, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.clone();
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      frame1.toString();
      byte[] byteArray0 = new byte[0];
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setMethodGen((MethodGen) null);
      DUP2 dUP2_0 = new DUP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2(dUP2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(46);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("Current method has return type of '");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type 'Current method has return type of ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 1841;
      LocalVariables localVariables0 = new LocalVariables(1841);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(167, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      frame0.getClone();
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(233, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ATHROW aTHROW0 = new ATHROW();
      IOR iOR0 = new IOR();
      instConstraintVisitor0.setFrame(frame0);
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(246, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("Huh?! Constant pool index of instruction '");
      ObjectType objectType1 = ObjectType.getInstance("Huh?! Constant pool index of instruction '");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(1901, objectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Character.getName(1901);
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        dSUB0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: Cannot consume 4 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 1901.
         // Huh?! Constant pool index of instruction ' (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(233, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ATHROW aTHROW0 = new ATHROW();
      IOR iOR0 = new IOR();
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      LSHR lSHR0 = new LSHR();
      LocalVariables localVariables0 = new LocalVariables(254);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      String string0 = localVariables0.toString();
      ObjectType objectType0 = new ObjectType(string0);
      OperandStack operandStack0 = new OperandStack(254, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FLOAD fLOAD0 = new FLOAD(254);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // 31: <unknown object>
         // 32: <unknown object>
         // 33: <unknown object>
         // 34: <unknown object>
         // 35: <unknown object>
         // 36: <unknown object>
         // 37: <unknown object>
         // 38: <unknown object>
         // 39: <unknown object>
         // 40: <unknown object>
         // 41: <unknown object>
         // 42: <unknown object>
         // 43: <unknown object>
         // 44: <unknown object>
         // 45: <unknown object>
         // 46: <unknown object>
         // 47: <unknown object>
         // 48: <unknown object>
         // 49: <unknown object>
         // 50: <unknown object>
         // 51: <unknown object>
         // 52: <unknown object>
         // 53: <unknown object>
         // 54: <unknown object>
         // 55: <unknown object>
         // 56: <unknown object>
         // 57: <unknown object>
         // 58: <unknown object>
         // 59: <unknown object>
         // 60: <unknown object>
         // 61: <unknown object>
         // 62: <unknown object>
         // 63: <unknown object>
         // 64: <unknown object>
         // 65: <unknown object>
         // 66: <unknown object>
         // 67: <unknown object>
         // 68: <unknown object>
         // 69: <unknown object>
         // 70: <unknown object>
         // 71: <unknown object>
         // 72: <unknown object>
         // 73: <unknown object>
         // 74: <unknown object>
         // 75: <unknown object>
         // 76: <unknown object>
         // 77: <unknown object>
         // 78: <unknown object>
         // 79: <unknown object>
         // 80: <unknown object>
         // 81: <unknown object>
         // 82: <unknown object>
         // 83: <unknown object>
         // 84: <unknown object>
         // 85: <unknown object>
         // 86: <unknown object>
         // 87: <unknown object>
         // 88: <unknown object>
         // 89: <unknown object>
         // 90: <unknown object>
         // 91: <unknown object>
         // 92: <unknown object>
         // 93: <unknown object>
         // 94: <unknown object>
         // 95: <unknown object>
         // 96: <unknown object>
         // 97: <unknown object>
         // 98: <unknown object>
         // 99: <unknown object>
         // 100: <unknown object>
         // 101: <unknown object>
         // 102: <unknown object>
         // 103: <unknown object>
         // 104: <unknown object>
         // 105: <unknown object>
         // 106: <unknown object>
         // 107: <unknown object>
         // 108: <unknown object>
         // 109: <unknown object>
         // 110: <unknown object>
         // 111: <unknown object>
         // 112: <unknown object>
         // 113: <unknown object>
         // 114: <unknown object>
         // 115: <unknown object>
         // 116: <unknown object>
         // 117: <unknown object>
         // 118: <unknown object>
         // 119: <unknown object>
         // 120: <unknown object>
         // 121: <unknown object>
         // 122: <unknown object>
         // 123: <unknown object>
         // 124: <unknown object>
         // 125: <unknown object>
         // 126: <unknown object>
         // 127: <unknown object>
         // 128: <unknown object>
         // 129: <unknown object>
         // 130: <unknown object>
         // 131: <unknown object>
         // 132: <unknown object>
         // 133: <unknown object>
         // 134: <unknown object>
         // 135: <unknown object>
         // 136: <unknown object>
         // 137: <unknown object>
         // 138: <unknown object>
         // 139: <unknown object>
         // 140: <unknown object>
         // 141: <unknown object>
         // 142: <unknown object>
         // 143: <unknown object>
         // 144: <unknown object>
         // 145: <unknown object>
         // 146: <unknown object>
         // 147: <unknown object>
         // 148: <unknown object>
         // 149: <unknown object>
         // 150: <unknown object>
         // 151: <unknown object>
         // 152: <unknown object>
         // 153: <unknown object>
         // 154: <unknown object>
         // 155: <unknown object>
         // 156: <unknown object>
         // 157: <unknown object>
         // 158: <unknown object>
         // 159: <unknown object>
         // 160: <unknown object>
         // 161: <unknown object>
         // 162: <unknown object>
         // 163: <unknown object>
         // 164: <unknown object>
         // 165: <unknown object>
         // 166: <unknown object>
         // 167: <unknown object>
         // 168: <unknown object>
         // 169: <unknown object>
         // 170: <unknown object>
         // 171: <unknown object>
         // 172: <unknown object>
         // 173: <unknown object>
         // 174: <unknown object>
         // 175: <unknown object>
         // 176: <unknown object>
         // 177: <unknown object>
         // 178: <unknown object>
         // 179: <unknown object>
         // 180: <unknown object>
         // 181: <unknown object>
         // 182: <unknown object>
         // 183: <unknown object>
         // 184: <unknown object>
         // 185: <unknown object>
         // 186: <unknown object>
         // 187: <unknown object>
         // 188: <unknown object>
         // 189: <unknown object>
         // 190: <unknown object>
         // 191: <unknown object>
         // 192: <unknown object>
         // 193: <unknown object>
         // 194: <unknown object>
         // 195: <unknown object>
         // 196: <unknown object>
         // 197: <unknown object>
         // 198: <unknown object>
         // 199: <unknown object>
         // 200: <unknown object>
         // 201: <unknown object>
         // 202: <unknown object>
         // 203: <unknown object>
         // 204: <unknown object>
         // 205: <unknown object>
         // 206: <unknown object>
         // 207: <unknown object>
         // 208: <unknown object>
         // 209: <unknown object>
         // 210: <unknown object>
         // 211: <unknown object>
         // 212: <unknown object>
         // 213: <unknown object>
         // 214: <unknown object>
         // 215: <unknown object>
         // 216: <unknown object>
         // 217: <unknown object>
         // 218: <unknown object>
         // 219: <unknown object>
         // 220: <unknown object>
         // 221: <unknown object>
         // 222: <unknown object>
         // 223: <unknown object>
         // 224: <unknown object>
         // 225: <unknown object>
         // 226: <unknown object>
         // 227: <unknown object>
         // 228: <unknown object>
         // 229: <unknown object>
         // 230: <unknown object>
         // 231: <unknown object>
         // 232: <unknown object>
         // 233: <unknown object>
         // 234: <unknown object>
         // 235: <unknown object>
         // 236: <unknown object>
         // 237: <unknown object>
         // 238: <unknown object>
         // 239: <unknown object>
         // 240: <unknown object>
         // 241: <unknown object>
         // 242: <unknown object>
         // 243: <unknown object>
         // 244: <unknown object>
         // 245: <unknown object>
         // 246: <unknown object>
         // 247: <unknown object>
         // 248: <unknown object>
         // 249: <unknown object>
         // 250: <unknown object>
         // 251: <unknown object>
         // 252: <unknown object>
         // 253: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("v");
      String string0 = Constants.ILLEGAL_OPCODE;
      OperandStack operandStack0 = new OperandStack(1901, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE((IFLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LSHR lSHR0 = new LSHR();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("p]Ta9*6B(ex-");
      OperandStack operandStack0 = new OperandStack(1901, objectType0);
      LocalVariables localVariables1 = new LocalVariables(2);
      objectType0.toString();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      MockFile mockFile0 = new MockFile("p]Ta9*6B(ex-", "p]Ta9*6B(ex-");
      RET rET0 = new RET(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1841);
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ds{g1u?r%A0&hTfvaJ");
      OperandStack operandStack0 = new OperandStack(167, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(13);
      ObjectType objectType0 = new ObjectType("CJx<TE");
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      operandStack0.getClone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASTORE aSTORE0 = new ASTORE(1446);
      operandStack0.equals(aSTORE0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LCJx<TE;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      String string0 = "zG)g";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("zG)g");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'zG)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(46);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("Current method has return type of '");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      OperandStack operandStack1 = new OperandStack(128);
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'Current method has return type of ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(46);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("Current method has return type of '");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      LRETURN lRETURN0 = new LRETURN();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      I2F i2F0 = new I2F();
      I2L i2L0 = new I2L();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'Current method has return type of ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("zG)g");
      objectType0.getFirstCommonSuperclass(objectType0);
      OperandStack operandStack0 = new OperandStack(1901, objectType0.STRING);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type 'java.lang.String'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aoy\"Xz}kM/kE.~k");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1901);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("aoy\"Xz}kM/kE.~k");
      OperandStack operandStack0 = new OperandStack(1556, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type 'aoy\"Xz}kM.kE.~k'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(246, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1894);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("~F)g");
      DALOAD dALOAD0 = new DALOAD();
      int int0 = 3059;
      OperandStack operandStack0 = new OperandStack(1894, objectType0);
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2((POP2) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitLCONST((LCONST) null);
      Frame frame0 = null;
      try {
        frame0 = new Frame((-1411), (-1411));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(1894);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("~F)g");
      OperandStack operandStack0 = new OperandStack(1894, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      DALOAD dALOAD0 = new DALOAD();
      ConstantClass constantClass0 = new ConstantClass(1894);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      localVariables0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type '~F)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+T@mFC6I4MMJ7I5v");
      OperandStack operandStack0 = new OperandStack(194, objectType0);
      LocalVariables localVariables0 = new LocalVariables(57);
      OperandStack operandStack1 = new OperandStack(194, objectType0);
      ConstantString constantString0 = new ConstantString((-309));
      ConstantString constantString1 = new ConstantString(constantString0);
      operandStack1.equals(constantString1);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type '+T@mFC6I4MMJ7I5v'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      int int0 = 1909;
      LocalVariables localVariables0 = new LocalVariables(1909);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("zG)g");
      OperandStack operandStack0 = new OperandStack(1909, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      FCMPG fCMPG0 = new FCMPG();
      ConstantClass constantClass0 = new ConstantClass(1909);
      ConstantClass constantClass1 = new ConstantClass(1909);
      ObjectType.getInstance("zG)g");
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type 'zG)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1916);
      LocalVariables localVariables1 = new LocalVariables(1916);
      String string0 = localVariables1.toString();
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance(string0);
      LocalVariables localVariables2 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      localVariables2.clone();
      OperandStack operandStack1 = new OperandStack(1916, objectType0);
      F2I f2I0 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // 31: <unknown object>
         // 32: <unknown object>
         // 33: <unknown object>
         // 34: <unknown object>
         // 35: <unknown object>
         // 36: <unknown object>
         // 37: <unknown object>
         // 38: <unknown object>
         // 39: <unknown object>
         // 40: <unknown object>
         // 41: <unknown object>
         // 42: <unknown object>
         // 43: <unknown object>
         // 44: <unknown object>
         // 45: <unknown object>
         // 46: <unknown object>
         // 47: <unknown object>
         // 48: <unknown object>
         // 49: <unknown object>
         // 50: <unknown object>
         // 51: <unknown object>
         // 52: <unknown object>
         // 53: <unknown object>
         // 54: <unknown object>
         // 55: <unknown object>
         // 56: <unknown object>
         // 57: <unknown object>
         // 58: <unknown object>
         // 59: <unknown object>
         // 60: <unknown object>
         // 61: <unknown object>
         // 62: <unknown object>
         // 63: <unknown object>
         // 64: <unknown object>
         // 65: <unknown object>
         // 66: <unknown object>
         // 67: <unknown object>
         // 68: <unknown object>
         // 69: <unknown object>
         // 70: <unknown object>
         // 71: <unknown object>
         // 72: <unknown object>
         // 73: <unknown object>
         // 74: <unknown object>
         // 75: <unknown object>
         // 76: <unknown object>
         // 77: <unknown object>
         // 78: <unknown object>
         // 79: <unknown object>
         // 80: <unknown object>
         // 81: <unknown object>
         // 82: <unknown object>
         // 83: <unknown object>
         // 84: <unknown object>
         // 85: <unknown object>
         // 86: <unknown object>
         // 87: <unknown object>
         // 88: <unknown object>
         // 89: <unknown object>
         // 90: <unknown object>
         // 91: <unknown object>
         // 92: <unknown object>
         // 93: <unknown object>
         // 94: <unknown object>
         // 95: <unknown object>
         // 96: <unknown object>
         // 97: <unknown object>
         // 98: <unknown object>
         // 99: <unknown object>
         // 100: <unknown object>
         // 101: <unknown object>
         // 102: <unknown object>
         // 103: <unknown object>
         // 104: <unknown object>
         // 105: <unknown object>
         // 106: <unknown object>
         // 107: <unknown object>
         // 108: <unknown object>
         // 109: <unknown object>
         // 110: <unknown object>
         // 111: <unknown object>
         // 112: <unknown object>
         // 113: <unknown object>
         // 114: <unknown object>
         // 115: <unknown object>
         // 116: <unknown object>
         // 117: <unknown object>
         // 118: <unknown object>
         // 119: <unknown object>
         // 120: <unknown object>
         // 121: <unknown object>
         // 122: <unknown object>
         // 123: <unknown object>
         // 124: <unknown object>
         // 125: <unknown object>
         // 126: <unknown object>
         // 127: <unknown object>
         // 128: <unknown object>
         // 129: <unknown object>
         // 130: <unknown object>
         // 131: <unknown object>
         // 132: <unknown object>
         // 133: <unknown object>
         // 134: <unknown object>
         // 135: <unknown object>
         // 136: <unknown object>
         // 137: <unknown object>
         // 138: <unknown object>
         // 139: <unknown object>
         // 140: <unknown object>
         // 141: <unknown object>
         // 142: <unknown object>
         // 143: <unknown object>
         // 144: <unknown object>
         // 145: <unknown object>
         // 146: <unknown object>
         // 147: <unknown object>
         // 148: <unknown object>
         // 149: <unknown object>
         // 150: <unknown object>
         // 151: <unknown object>
         // 152: <unknown object>
         // 153: <unknown object>
         // 154: <unknown object>
         // 155: <unknown object>
         // 156: <unknown object>
         // 157: <unknown object>
         // 158: <unknown object>
         // 159: <unknown object>
         // 160: <unknown object>
         // 161: <unknown object>
         // 162: <unknown object>
         // 163: <unknown object>
         // 164: <unknown object>
         // 165: <unknown object>
         // 166: <unknown object>
         // 167: <unknown object>
         // 168: <unknown object>
         // 169: <unknown object>
         // 170: <unknown object>
         // 171: <unknown object>
         // 172: <unknown object>
         // 173: <unknown object>
         // 174: <unknown object>
         // 175: <unknown object>
         // 176: <unknown object>
         // 177: <unknown object>
         // 178: <unknown object>
         // 179: <unknown object>
         // 180: <unknown object>
         // 181: <unknown object>
         // 182: <unknown object>
         // 183: <unknown object>
         // 184: <unknown object>
         // 185: <unknown object>
         // 186: <unknown object>
         // 187: <unknown object>
         // 188: <unknown object>
         // 189: <unknown object>
         // 190: <unknown object>
         // 191: <unknown object>
         // 192: <unknown object>
         // 193: <unknown object>
         // 194: <unknown object>
         // 195: <unknown object>
         // 196: <unknown object>
         // 197: <unknown object>
         // 198: <unknown object>
         // 199: <unknown object>
         // 200: <unknown object>
         // 201: <unknown object>
         // 202: <unknown object>
         // 203: <unknown object>
         // 204: <unknown object>
         // 205: <unknown object>
         // 206: <unknown object>
         // 207: <unknown object>
         // 208: <unknown object>
         // 209: <unknown object>
         // 210: <unknown object>
         // 211: <unknown object>
         // 212: <unknown object>
         // 213: <unknown object>
         // 214: <unknown object>
         // 215: <unknown object>
         // 216: <unknown object>
         // 217: <unknown object>
         // 218: <unknown object>
         // 219: <unknown object>
         // 220: <unknown object>
         // 221: <unknown object>
         // 222: <unknown object>
         // 223: <unknown object>
         // 224: <unknown object>
         // 225: <unknown object>
         // 226: <unknown object>
         // 227: <unknown object>
         // 228: <unknown object>
         // 229: <unknown object>
         // 230: <unknown object>
         // 231: <unknown object>
         // 232: <unknown object>
         // 233: <unknown object>
         // 234: <unknown object>
         // 235: <unknown object>
         // 236: <unknown object>
         // 237: <unknown object>
         // 238: <unknown object>
         // 239: <unknown object>
         // 240: <unknown object>
         // 241: <unknown object>
         // 242: <unknown object>
         // 243: <unknown object>
         // 244: <unknown object>
         // 245: <unknown object>
         // 246: <unknown object>
         // 247: <unknown object>
         // 248: <unknown object>
         // 249: <unknown object>
         // 250: <unknown object>
         // 251: <unknown object>
         // 252: <unknown object>
         // 253: <unknown object>
         // 254: <unknown object>
         // 255: <unknown object>
         // 256: <unknown object>
         // 257: <unknown object>
         // 258: <unknown object>
         // 259: <unknown object>
         // 260: <unknown object>
         // 261: <unknown object>
         // 262: <unknown object>
         // 263: <unknown object>
         // 264: <unknown object>
         // 265: <unknown object>
         // 266: <unknown object>
         // 267: <unknown object>
         // 268: <unknown object>
         // 269: <unknown object>
         // 270: <unknown object>
         // 271: <unknown object>
         // 272: <unknown object>
         // 273: <unknown object>
         // 274: <unknown object>
         // 275: <unknown object>
         // 276: <unknown object>
         // 277: <unknown object>
         // 278: <unknown object>
         // 279: <unknown object>
         // 280: <unknown object>
         // 281: <unknown object>
         // 282: <unknown object>
         // 283: <unknown object>
         // 284: <unknown object>
         // 285: <unknown object>
         // 286: <unknown object>
         // 287: <unknown object>
         // 288: <unknown object>
         // 289: <unknown object>
         // 290: <unknown object>
         // 291: <unknown object>
         // 292: <unknown object>
         // 293: <unknown object>
         // 294: <unknown object>
         // 295: <unknown object>
         // 296: <unknown object>
         // 297: <unknown object>
         // 298: <unknown object>
         // 299: <unknown object>
         // 300: <unknown object>
         // 301: <unknown object>
         // 302: <unknown object>
         // 303: <unknown object>
         // 304: <unknown object>
         // 305: <unknown object>
         // 306: <unknown object>
         // 307: <unknown object>
         // 308: <unknown object>
         // 309: <unknown object>
         // 310: <unknown object>
         // 311: <unknown object>
         // 312: <unknown object>
         // 313: <unknown object>
         // 314: <unknown object>
         // 315: <unknown object>
         // 316: <unknown object>
         // 317: <unknown object>
         // 318: <unknown object>
         // 319: <unknown object>
         // 320: <unknown object>
         // 321: <unknown object>
         // 322: <unknown object>
         // 323: <unknown object>
         // 324: <unknown object>
         // 325: <unknown object>
         // 326: <unknown object>
         // 327: <unknown object>
         // 328: <unknown object>
         // 329: <unknown object>
         // 330: <unknown object>
         // 331: <unknown object>
         // 332: <unknown object>
         // 333: <unknown object>
         // 334: <unknown object>
         // 335: <unknown object>
         // 336: <unknown object>
         // 337: <unknown object>
         // 338: <unknown object>
         // 339: <unknown object>
         // 340: <unknown object>
         // 341: <unknown object>
         // 342: <unknown object>
         // 343: <unknown object>
         // 344: <unknown object>
         // 345: <unknown object>
         // 346: <unknown object>
         // 347: <unknown object>
         // 348: <unknown object>
         // 349: <unknown object>
         // 350: <unknown object>
         // 351: <unknown object>
         // 352: <unknown object>
         // 353: <unknown object>
         // 354: <unknown object>
         // 355: <unknown object>
         // 356: <unknown object>
         // 357: <unknown object>
         // 358: <unknown object>
         // 359: <unknown object>
         // 360: <unknown object>
         // 361: <unknown object>
         // 362: <unknown object>
         // 363: <unknown object>
         // 364: <unknown object>
         // 365: <unknown object>
         // 366: <unknown object>
         // 367: <unknown object>
         // 368: <unknown object>
         // 369: <unknown object>
         // 370: <unknown object>
         // 371: <unknown object>
         // 372: <unknown object>
         // 373: <unknown object>
         // 374: <unknown object>
         // 375: <unknown object>
         // 376: <unknown object>
         // 377: <unknown object>
         // 378: <unknown object>
         // 379: <unknown object>
         // 380: <unknown object>
         // 381: <unknown object>
         // 382: <unknown object>
         // 383: <unknown object>
         // 384: <unknown object>
         // 385: <unknown object>
         // 386: <unknown object>
         // 387: <unknown object>
         // 388: <unknown object>
         // 389: <unknown object>
         // 390: <unknown object>
         // 391: <unknown object>
         // 392: <unknown object>
         // 393: <unknown object>
         // 394: <unknown object>
         // 395: <unknown object>
         // 396: <unknown object>
         // 397: <unknown object>
         // 398: <unknown object>
         // 399: <unknown object>
         // 400: <unknown object>
         // 401: <unknown object>
         // 402: <unknown object>
         // 403: <unknown object>
         // 404: <unknown object>
         // 405: <unknown object>
         // 406: <unknown object>
         // 407: <unknown object>
         // 408: <unknown object>
         // 409: <unknown object>
         // 410: <unknown object>
         // 411: <unknown object>
         // 412: <unknown object>
         // 413: <unknown object>
         // 414: <unknown object>
         // 415: <unknown object>
         // 416: <unknown object>
         // 417: <unknown object>
         // 418: <unknown object>
         // 419: <unknown object>
         // 420: <unknown object>
         // 421: <unknown object>
         // 422: <unknown object>
         // 423: <unknown object>
         // 424: <unknown object>
         // 425: <unknown object>
         // 426: <unknown object>
         // 427: <unknown object>
         // 428: <unknown object>
         // 429: <unknown object>
         // 430: <unknown object>
         // 431: <unknown object>
         // 432: <unknown object>
         // 433: <unknown object>
         // 434: <unknown object>
         // 435: <unknown object>
         // 436: <unknown object>
         // 437: <unknown object>
         // 438: <unknown object>
         // 439: <unknown object>
         // 440: <unknown object>
         // 441: <unknown object>
         // 442: <unknown object>
         // 443: <unknown object>
         // 444: <unknown object>
         // 445: <unknown object>
         // 446: <unknown object>
         // 447: <unknown object>
         // 448: <unknown object>
         // 449: <unknown object>
         // 450: <unknown object>
         // 451: <unknown object>
         // 452: <unknown object>
         // 453: <unknown object>
         // 454: <unknown object>
         // 455: <unknown object>
         // 456: <unknown object>
         // 457: <unknown object>
         // 458: <unknown object>
         // 459: <unknown object>
         // 460: <unknown object>
         // 461: <unknown object>
         // 462: <unknown object>
         // 463: <unknown object>
         // 464: <unknown object>
         // 465: <unknown object>
         // 466: <unknown object>
         // 467: <unknown object>
         // 468: <unknown object>
         // 469: <unknown object>
         // 470: <unknown object>
         // 471: <unknown object>
         // 472: <unknown object>
         // 473: <unknown object>
         // 474: <unknown object>
         // 475: <unknown object>
         // 476: <unknown object>
         // 477: <unknown object>
         // 478: <unknown object>
         // 479: <unknown object>
         // 480: <unknown object>
         // 481: <unknown object>
         // 482: <unknown object>
         // 483: <unknown object>
         // 484: <unknown object>
         // 485: <unknown object>
         // 486: <unknown object>
         // 487: <unknown object>
         // 488: <unknown object>
         // 489: <unknown object>
         // 490: <unknown object>
         // 491: <unknown object>
         // 492: <unknown object>
         // 493: <unknown object>
         // 494: <unknown object>
         // 495: <unknown object>
         // 496: <unknown object>
         // 497: <unknown object>
         // 498: <unknown object>
         // 499: <unknown object>
         // 500: <unknown object>
         // 501: <unknown object>
         // 502: <unknown object>
         // 503: <unknown object>
         // 504: <unknown object>
         // 505: <unknown object>
         // 506: <unknown object>
         // 507: <unknown object>
         // 508: <unknown object>
         // 509: <unknown object>
         // 510: <unknown object>
         // 511: <unknown object>
         // 512: <unknown object>
         // 513: <unknown object>
         // 514: <unknown object>
         // 515: <unknown object>
         // 516: <unknown object>
         // 517: <unknown object>
         // 518: <unknown object>
         // 519: <unknown object>
         // 520: <unknown object>
         // 521: <unknown object>
         // 522: <unknown object>
         // 523: <unknown object>
         // 524: <unknown object>
         // 525: <unknown object>
         // 526: <unknown object>
         // 527: <unknown object>
         // 528: <unknown object>
         // 529: <unknown object>
         // 530: <unknown object>
         // 531: <unknown object>
         // 532: <unknown object>
         // 533: <unknown object>
         // 534: <unknown object>
         // 535: <unknown object>
         // 536: <unknown object>
         // 537: <unknown object>
         // 538: <unknown object>
         // 539: <unknown object>
         // 540: <unknown object>
         // 541: <unknown object>
         // 542: <unknown object>
         // 543: <unknown object>
         // 544: <unknown object>
         // 545: <unknown object>
         // 546: <unknown object>
         // 547: <unknown object>
         // 548: <unknown object>
         // 549: <unknown object>
         // 550: <unknown object>
         // 551: <unknown object>
         // 552: <unknown object>
         // 553: <unknown object>
         // 554: <unknown object>
         // 555: <unknown object>
         // 556: <unknown object>
         // 557: <unknown object>
         // 558: <unknown object>
         // 559: <unknown object>
         // 560: <unknown object>
         // 561: <unknown object>
         // 562: <unknown object>
         // 563: <unknown object>
         // 564: <unknown object>
         // 565: <unknown object>
         // 566: <unknown object>
         // 567: <unknown object>
         // 568: <unknown object>
         // 569: <unknown object>
         // 570: <unknown object>
         // 571: <unknown object>
         // 572: <unknown object>
         // 573: <unknown object>
         // 574: <unknown object>
         // 575: <unknown object>
         // 576: <unknown object>
         // 577: <unknown object>
         // 578: <unknown object>
         // 579: <unknown object>
         // 580: <unknown object>
         // 581: <unknown object>
         // 582: <unknown object>
         // 583: <unknown object>
         // 584: <unknown object>
         // 585: <unknown object>
         // 586: <unknown object>
         // 587: <unknown object>
         // 588: <unknown object>
         // 589: <unknown object>
         // 590: <unknown object>
         // 591: <unknown object>
         // 592: <unknown object>
         // 593: <unknown object>
         // 594: <unknown object>
         // 595: <unknown object>
         // 596: <unknown object>
         // 597: <unknown object>
         // 598: <unknown object>
         // 599: <unknown object>
         // 600: <unknown object>
         // 601: <unknown object>
         // 602: <unknown object>
         // 603: <unknown object>
         // 604: <unknown object>
         // 605: <unknown object>
         // 606: <unknown object>
         // 607: <unknown object>
         // 608: <unknown object>
         // 609: <unknown object>
         // 610: <unknown object>
         // 611: <unknown object>
         // 612: <unknown object>
         // 613: <unknown object>
         // 614: <unknown object>
         // 615: <unknown object>
         // 616: <unknown object>
         // 617: <unknown object>
         // 618: <unknown object>
         // 619: <unknown object>
         // 620: <unknown object>
         // 621: <unknown object>
         // 622: <unknown object>
         // 623: <unknown object>
         // 624: <unknown object>
         // 625: <unknown object>
         // 626: <unknown object>
         // 627: <unknown object>
         // 628: <unknown object>
         // 629: <unknown object>
         // 630: <unknown object>
         // 631: <unknown object>
         // 632: <unknown object>
         // 633: <unknown object>
         // 634: <unknown object>
         // 635: <unknown object>
         // 636: <unknown object>
         // 637: <unknown object>
         // 638: <unknown object>
         // 639: <unknown object>
         // 640: <unknown object>
         // 641: <unknown object>
         // 642: <unknown object>
         // 643: <unknown object>
         // 644: <unknown object>
         // 645: <unknown object>
         // 646: <unknown object>
         // 647: <unknown object>
         // 648: <unknown object>
         // 649: <unknown object>
         // 650: <unknown object>
         // 651: <unknown object>
         // 652: <unknown object>
         // 653: <unknown object>
         // 654: <unknown object>
         // 655: <unknown object>
         // 656: <unknown object>
         // 657: <unknown object>
         // 658: <unknown object>
         // 659: <unknown object>
         // 660: <unknown object>
         // 661: <unknown object>
         // 662: <unknown object>
         // 663: <unknown object>
         // 664: <unknown object>
         // 665: <unknown object>
         // 666: <unknown object>
         // 667: <unknown object>
         // 668: <unknown object>
         // 669: <unknown object>
         // 670: <unknown object>
         // 671: <unknown object>
         // 672: <unknown object>
         // 673: <unknown object>
         // 674: <unknown object>
         // 675: <unknown object>
         // 676: <unknown object>
         // 677: <unknown object>
         // 678: <unknown object>
         // 679: <unknown object>
         // 680: <unknown object>
         // 681: <unknown object>
         // 682: <unknown object>
         // 683: <unknown object>
         // 684: <unknown object>
         // 685: <unknown object>
         // 686: <unknown object>
         // 687: <unknown object>
         // 688: <unknown object>
         // 689: <unknown object>
         // 690: <unknown object>
         // 691: <unknown object>
         // 692: <unknown object>
         // 693: <unknown object>
         // 694: <unknown object>
         // 695: <unknown object>
         // 696: <unknown object>
         // 697: <unknown object>
         // 698: <unknown object>
         // 699: <unknown object>
         // 700: <unknown object>
         // 701: <unknown object>
         // 702: <unknown object>
         // 703: <unknown object>
         // 704: <unknown object>
         // 705: <unknown object>
         // 706: <unknown object>
         // 707: <unknown object>
         // 708: <unknown object>
         // 709: <unknown object>
         // 710: <unknown object>
         // 711: <unknown object>
         // 712: <unknown object>
         // 713: <unknown object>
         // 714: <unknown object>
         // 715: <unknown object>
         // 716: <unknown object>
         // 717: <unknown object>
         // 718: <unknown object>
         // 719: <unknown object>
         // 720: <unknown object>
         // 721: <unknown object>
         // 722: <unknown object>
         // 723: <unknown object>
         // 724: <unknown object>
         // 725: <unknown object>
         // 726: <unknown object>
         // 727: <unknown object>
         // 728: <unknown object>
         // 729: <unknown object>
         // 730: <unknown object>
         // 731: <unknown object>
         // 732: <unknown object>
         // 733: <unknown object>
         // 734: <unknown object>
         // 735: <unknown object>
         // 736: <unknown object>
         // 737: <unknown object>
         // 738: <unknown object>
         // 739: <unknown object>
         // 740: <unknown object>
         // 741: <unknown object>
         // 742: <unknown object>
         // 743: <unknown object>
         // 744: <unknown object>
         // 745: <unknown object>
         // 746: <unknown object>
         // 747: <unknown object>
         // 748: <unknown object>
         // 749: <unknown object>
         // 750: <unknown object>
         // 751: <unknown object>
         // 752: <unknown object>
         // 753: <unknown object>
         // 754: <unknown object>
         // 755: <unknown object>
         // 756: <unknown object>
         // 757: <unknown object>
         // 758: <unknown object>
         // 759: <unknown object>
         // 760: <unknown object>
         // 761: <unknown object>
         // 762: <unknown object>
         // 763: <unknown object>
         // 764: <unknown object>
         // 765: <unknown object>
         // 766: <unknown object>
         // 767: <unknown object>
         // 768: <unknown object>
         // 769: <unknown object>
         // 770: <unknown object>
         // 771: <unknown object>
         // 772: <unknown object>
         // 773: <unknown object>
         // 774: <unknown object>
         // 775: <unknown object>
         // 776: <unknown object>
         // 777: <unknown object>
         // 778: <unknown object>
         // 779: <unknown object>
         // 780: <unknown object>
         // 781: <unknown object>
         // 782: <unknown object>
         // 783: <unknown object>
         // 784: <unknown object>
         // 785: <unknown object>
         // 786: <unknown object>
         // 787: <unknown object>
         // 788: <unknown object>
         // 789: <unknown object>
         // 790: <unknown object>
         // 791: <unknown object>
         // 792: <unknown object>
         // 793: <unknown object>
         // 794: <unknown object>
         // 795: <unknown object>
         // 796: <unknown object>
         // 797: <unknown object>
         // 798: <unknown object>
         // 799: <unknown object>
         // 800: <unknown object>
         // 801: <unknown object>
         // 802: <unknown object>
         // 803: <unknown object>
         // 804: <unknown object>
         // 805: <unknown object>
         // 806: <unknown object>
         // 807: <unknown object>
         // 808: <unknown object>
         // 809: <unknown object>
         // 810: <unknown object>
         // 811: <unknown object>
         // 812: <unknown object>
         // 813: <unknown object>
         // 814: <unknown object>
         // 815: <unknown object>
         // 816: <unknown object>
         // 817: <unknown object>
         // 818: <unknown object>
         // 819: <unknown object>
         // 820: <unknown object>
         // 821: <unknown object>
         // 822: <unknown object>
         // 823: <unknown object>
         // 824: <unknown object>
         // 825: <unknown object>
         // 826: <unknown object>
         // 827: <unknown object>
         // 828: <unknown object>
         // 829: <unknown object>
         // 830: <unknown object>
         // 831: <unknown object>
         // 832: <unknown object>
         // 833: <unknown object>
         // 834: <unknown object>
         // 835: <unknown object>
         // 836: <unknown object>
         // 837: <unknown object>
         // 838: <unknown object>
         // 839: <unknown object>
         // 840: <unknown object>
         // 841: <unknown object>
         // 842: <unknown object>
         // 843: <unknown object>
         // 844: <unknown object>
         // 845: <unknown object>
         // 846: <unknown object>
         // 847: <unknown object>
         // 848: <unknown object>
         // 849: <unknown object>
         // 850: <unknown object>
         // 851: <unknown object>
         // 852: <unknown object>
         // 853: <unknown object>
         // 854: <unknown object>
         // 855: <unknown object>
         // 856: <unknown object>
         // 857: <unknown object>
         // 858: <unknown object>
         // 859: <unknown object>
         // 860: <unknown object>
         // 861: <unknown object>
         // 862: <unknown object>
         // 863: <unknown object>
         // 864: <unknown object>
         // 865: <unknown object>
         // 866: <unknown object>
         // 867: <unknown object>
         // 868: <unknown object>
         // 869: <unknown object>
         // 870: <unknown object>
         // 871: <unknown object>
         // 872: <unknown object>
         // 873: <unknown object>
         // 874: <unknown object>
         // 875: <unknown object>
         // 876: <unknown object>
         // 877: <unknown object>
         // 878: <unknown object>
         // 879: <unknown object>
         // 880: <unknown object>
         // 881: <unknown object>
         // 882: <unknown object>
         // 883: <unknown object>
         // 884: <unknown object>
         // 885: <unknown object>
         // 886: <unknown object>
         // 887: <unknown object>
         // 888: <unknown object>
         // 889: <unknown object>
         // 890: <unknown object>
         // 891: <unknown object>
         // 892: <unknown object>
         // 893: <unknown object>
         // 894: <unknown object>
         // 895: <unknown object>
         // 896: <unknown object>
         // 897: <unknown object>
         // 898: <unknown object>
         // 899: <unknown object>
         // 900: <unknown object>
         // 901: <unknown object>
         // 902: <unknown object>
         // 903: <unknown object>
         // 904: <unknown object>
         // 905: <unknown object>
         // 906: <unknown object>
         // 907: <unknown object>
         // 908: <unknown object>
         // 909: <unknown object>
         // 910: <unknown object>
         // 911: <unknown object>
         // 912: <unknown object>
         // 913: <unknown object>
         // 914: <unknown object>
         // 915: <unknown object>
         // 916: <unknown object>
         // 917: <unknown object>
         // 918: <unknown object>
         // 919: <unknown object>
         // 920: <unknown object>
         // 921: <unknown object>
         // 922: <unknown object>
         // 923: <unknown object>
         // 924: <unknown object>
         // 925: <unknown object>
         // 926: <unknown object>
         // 927: <unknown object>
         // 928: <unknown object>
         // 929: <unknown object>
         // 930: <unknown object>
         // 931: <unknown object>
         // 932: <unknown object>
         // 933: <unknown object>
         // 934: <unknown object>
         // 935: <unknown object>
         // 936: <unknown object>
         // 937: <unknown object>
         // 938: <unknown object>
         // 939: <unknown object>
         // 940: <unknown object>
         // 941: <unknown object>
         // 942: <unknown object>
         // 943: <unknown object>
         // 944: <unknown object>
         // 945: <unknown object>
         // 946: <unknown object>
         // 947: <unknown object>
         // 948: <unknown object>
         // 949: <unknown object>
         // 950: <unknown object>
         // 951: <unknown object>
         // 952: <unknown object>
         // 953: <unknown object>
         // 954: <unknown object>
         // 955: <unknown object>
         // 956: <unknown object>
         // 957: <unknown object>
         // 958: <unknown object>
         // 959: <unknown object>
         // 960: <unknown object>
         // 961: <unknown object>
         // 962: <unknown object>
         // 963: <unknown object>
         // 964: <unknown object>
         // 965: <unknown object>
         // 966: <unknown object>
         // 967: <unknown object>
         // 968: <unknown object>
         // 969: <unknown object>
         // 970: <unknown object>
         // 971: <unknown object>
         // 972: <unknown object>
         // 973: <unknown object>
         // 974: <unknown object>
         // 975: <unknown object>
         // 976: <unknown object>
         // 977: <unknown object>
         // 978: <unknown object>
         // 979: <unknown object>
         // 980: <unknown object>
         // 981: <unknown object>
         // 982: <unknown object>
         // 983: <unknown object>
         // 984: <unknown object>
         // 985: <unknown object>
         // 986: <unknown object>
         // 987: <unknown object>
         // 988: <unknown object>
         // 989: <unknown object>
         // 990: <unknown object>
         // 991: <unknown object>
         // 992: <unknown object>
         // 993: <unknown object>
         // 994: <unknown object>
         // 995: <unknown object>
         // 996: <unknown object>
         // 997: <unknown object>
         // 998: <unknown object>
         // 999: <unknown object>
         // 1000: <unknown object>
         // 1001: <unknown object>
         // 1002: <unknown object>
         // 1003: <unknown object>
         // 1004: <unknown object>
         // 1005: <unknown object>
         // 1006: <unknown object>
         // 1007: <unknown object>
         // 1008: <unknown object>
         // 1009: <unknown object>
         // 1010: <unknown object>
         // 1011: <unknown object>
         // 1012: <unknown object>
         // 1013: <unknown object>
         // 1014: <unknown object>
         // 1015: <unknown object>
         // 1016: <unknown object>
         // 1017: <unknown object>
         // 1018: <unknown object>
         // 1019: <unknown object>
         // 1020: <unknown object>
         // 1021: <unknown object>
         // 1022: <unknown object>
         // 1023: <unknown object>
         // 1024: <unknown object>
         // 1025: <unknown object>
         // 1026: <unknown object>
         // 1027: <unknown object>
         // 1028: <unknown object>
         // 1029: <unknown object>
         // 1030: <unknown object>
         // 1031: <unknown object>
         // 1032: <unknown object>
         // 1033: <unknown object>
         // 1034: <unknown object>
         // 1035: <unknown object>
         // 1036: <unknown object>
         // 1037: <unknown object>
         // 1038: <unknown object>
         // 1039: <unknown object>
         // 1040: <unknown object>
         // 1041: <unknown object>
         // 1042: <unknown object>
         // 1043: <unknown object>
         // 1044: <unknown object>
         // 1045: <unknown object>
         // 1046: <unknown object>
         // 1047: <unknown object>
         // 1048: <unknown object>
         // 1049: <unknown object>
         // 1050: <unknown object>
         // 1051: <unknown object>
         // 1052: <unknown object>
         // 1053: <unknown object>
         // 1054: <unknown object>
         // 1055: <unknown object>
         // 1056: <unknown object>
         // 1057: <unknown object>
         // 1058: <unknown object>
         // 1059: <unknown object>
         // 1060: <unknown object>
         // 1061: <unknown object>
         // 1062: <unknown object>
         // 1063: <unknown object>
         // 1064: <unknown object>
         // 1065: <unknown object>
         // 1066: <unknown object>
         // 1067: <unknown object>
         // 1068: <unknown object>
         // 1069: <unknown object>
         // 1070: <unknown object>
         // 1071: <unknown object>
         // 1072: <unknown object>
         // 1073: <unknown object>
         // 1074: <unknown object>
         // 1075: <unknown object>
         // 1076: <unknown object>
         // 1077: <unknown object>
         // 1078: <unknown object>
         // 1079: <unknown object>
         // 1080: <unknown object>
         // 1081: <unknown object>
         // 1082: <unknown object>
         // 1083: <unknown object>
         // 1084: <unknown object>
         // 1085: <unknown object>
         // 1086: <unknown object>
         // 1087: <unknown object>
         // 1088: <unknown object>
         // 1089: <unknown object>
         // 1090: <unknown object>
         // 1091: <unknown object>
         // 1092: <unknown object>
         // 1093: <unknown object>
         // 1094: <unknown object>
         // 1095: <unknown object>
         // 1096: <unknown object>
         // 1097: <unknown object>
         // 1098: <unknown object>
         // 1099: <unknown object>
         // 1100: <unknown object>
         // 1101: <unknown object>
         // 1102: <unknown object>
         // 1103: <unknown object>
         // 1104: <unknown object>
         // 1105: <unknown object>
         // 1106: <unknown object>
         // 1107: <unknown object>
         // 1108: <unknown object>
         // 1109: <unknown object>
         // 1110: <unknown object>
         // 1111: <unknown object>
         // 1112: <unknown object>
         // 1113: <unknown object>
         // 1114: <unknown object>
         // 1115: <unknown object>
         // 1116: <unknown object>
         // 1117: <unknown object>
         // 1118: <unknown object>
         // 1119: <unknown object>
         // 1120: <unknown object>
         // 1121: <unknown object>
         // 1122: <unknown object>
         // 1123: <unknown object>
         // 1124: <unknown object>
         // 1125: <unknown object>
         // 1126: <unknown object>
         // 1127: <unknown object>
         // 1128: <unknown object>
         // 1129: <unknown object>
         // 1130: <unknown object>
         // 1131: <unknown object>
         // 1132: <unknown object>
         // 1133: <unknown object>
         // 1134: <unknown object>
         // 1135: <unknown object>
         // 1136: <unknown object>
         // 1137: <unknown object>
         // 1138: <unknown object>
         // 1139: <unknown object>
         // 1140: <unknown object>
         // 1141: <unknown object>
         // 1142: <unknown object>
         // 1143: <unknown object>
         // 1144: <unknown object>
         // 1145: <unknown object>
         // 1146: <unknown object>
         // 1147: <unknown object>
         // 1148: <unknown object>
         // 1149: <unknown object>
         // 1150: <unknown object>
         // 1151: <unknown object>
         // 1152: <unknown object>
         // 1153: <unknown object>
         // 1154: <unknown object>
         // 1155: <unknown object>
         // 1156: <unknown object>
         // 1157: <unknown object>
         // 1158: <unknown object>
         // 1159: <unknown object>
         // 1160: <unknown object>
         // 1161: <unknown object>
         // 1162: <unknown object>
         // 1163: <unknown object>
         // 1164: <unknown object>
         // 1165: <unknown object>
         // 1166: <unknown object>
         // 1167: <unknown object>
         // 1168: <unknown object>
         // 1169: <unknown object>
         // 1170: <unknown object>
         // 1171: <unknown object>
         // 1172: <unknown object>
         // 1173: <unknown object>
         // 1174: <unknown object>
         // 1175: <unknown object>
         // 1176: <unknown object>
         // 1177: <unknown object>
         // 1178: <unknown object>
         // 1179: <unknown object>
         // 1180: <unknown object>
         // 1181: <unknown object>
         // 1182: <unknown object>
         // 1183: <unknown object>
         // 1184: <unknown object>
         // 1185: <unknown object>
         // 1186: <unknown object>
         // 1187: <unknown object>
         // 1188: <unknown object>
         // 1189: <unknown object>
         // 1190: <unknown object>
         // 1191: <unknown object>
         // 1192: <unknown object>
         // 1193: <unknown object>
         // 1194: <unknown object>
         // 1195: <unknown object>
         // 1196: <unknown object>
         // 1197: <unknown object>
         // 1198: <unknown object>
         // 1199: <unknown object>
         // 1200: <unknown object>
         // 1201: <unknown object>
         // 1202: <unknown object>
         // 1203: <unknown object>
         // 1204: <unknown object>
         // 1205: <unknown object>
         // 1206: <unknown object>
         // 1207: <unknown object>
         // 1208: <unknown object>
         // 1209: <unknown object>
         // 1210: <unknown object>
         // 1211: <unknown object>
         // 1212: <unknown object>
         // 1213: <unknown object>
         // 1214: <unknown object>
         // 1215: <unknown object>
         // 1216: <unknown object>
         // 1217: <unknown object>
         // 1218: <unknown object>
         // 1219: <unknown object>
         // 1220: <unknown object>
         // 1221: <unknown object>
         // 1222: <unknown object>
         // 1223: <unknown object>
         // 1224: <unknown object>
         // 1225: <unknown object>
         // 1226: <unknown object>
         // 1227: <unknown object>
         // 1228: <unknown object>
         // 1229: <unknown object>
         // 1230: <unknown object>
         // 1231: <unknown object>
         // 1232: <unknown object>
         // 1233: <unknown object>
         // 1234: <unknown object>
         // 1235: <unknown object>
         // 1236: <unknown object>
         // 1237: <unknown object>
         // 1238: <unknown object>
         // 1239: <unknown object>
         // 1240: <unknown object>
         // 1241: <unknown object>
         // 1242: <unknown object>
         // 1243: <unknown object>
         // 1244: <unknown object>
         // 1245: <unknown object>
         // 1246: <unknown object>
         // 1247: <unknown object>
         // 1248: <unknown object>
         // 1249: <unknown object>
         // 1250: <unknown object>
         // 1251: <unknown object>
         // 1252: <unknown object>
         // 1253: <unknown object>
         // 1254: <unknown object>
         // 1255: <unknown object>
         // 1256: <unknown object>
         // 1257: <unknown object>
         // 1258: <unknown object>
         // 1259: <unknown object>
         // 1260: <unknown object>
         // 1261: <unknown object>
         // 1262: <unknown object>
         // 1263: <unknown object>
         // 1264: <unknown object>
         // 1265: <unknown object>
         // 1266: <unknown object>
         // 1267: <unknown object>
         // 1268: <unknown object>
         // 1269: <unknown object>
         // 1270: <unknown object>
         // 1271: <unknown object>
         // 1272: <unknown object>
         // 1273: <unknown object>
         // 1274: <unknown object>
         // 1275: <unknown object>
         // 1276: <unknown object>
         // 1277: <unknown object>
         // 1278: <unknown object>
         // 1279: <unknown object>
         // 1280: <unknown object>
         // 1281: <unknown object>
         // 1282: <unknown object>
         // 1283: <unknown object>
         // 1284: <unknown object>
         // 1285: <unknown object>
         // 1286: <unknown object>
         // 1287: <unknown object>
         // 1288: <unknown object>
         // 1289: <unknown object>
         // 1290: <unknown object>
         // 1291: <unknown object>
         // 1292: <unknown object>
         // 1293: <unknown object>
         // 1294: <unknown object>
         // 1295: <unknown object>
         // 1296: <unknown object>
         // 1297: <unknown object>
         // 1298: <unknown object>
         // 1299: <unknown object>
         // 1300: <unknown object>
         // 1301: <unknown object>
         // 1302: <unknown object>
         // 1303: <unknown object>
         // 1304: <unknown object>
         // 1305: <unknown object>
         // 1306: <unknown object>
         // 1307: <unknown object>
         // 1308: <unknown object>
         // 1309: <unknown object>
         // 1310: <unknown object>
         // 1311: <unknown object>
         // 1312: <unknown object>
         // 1313: <unknown object>
         // 1314: <unknown object>
         // 1315: <unknown object>
         // 1316: <unknown object>
         // 1317: <unknown object>
         // 1318: <unknown object>
         // 1319: <unknown object>
         // 1320: <unknown object>
         // 1321: <unknown object>
         // 1322: <unknown object>
         // 1323: <unknown object>
         // 1324: <unknown object>
         // 1325: <unknown object>
         // 1326: <unknown object>
         // 1327: <unknown object>
         // 1328: <unknown object>
         // 1329: <unknown object>
         // 1330: <unknown object>
         // 1331: <unknown object>
         // 1332: <unknown object>
         // 1333: <unknown object>
         // 1334: <unknown object>
         // 1335: <unknown object>
         // 1336: <unknown object>
         // 1337: <unknown object>
         // 1338: <unknown object>
         // 1339: <unknown object>
         // 1340: <unknown object>
         // 1341: <unknown object>
         // 1342: <unknown object>
         // 1343: <unknown object>
         // 1344: <unknown object>
         // 1345: <unknown object>
         // 1346: <unknown object>
         // 1347: <unknown object>
         // 1348: <unknown object>
         // 1349: <unknown object>
         // 1350: <unknown object>
         // 1351: <unknown object>
         // 1352: <unknown object>
         // 1353: <unknown object>
         // 1354: <unknown object>
         // 1355: <unknown object>
         // 1356: <unknown object>
         // 1357: <unknown object>
         // 1358: <unknown object>
         // 1359: <unknown object>
         // 1360: <unknown object>
         // 1361: <unknown object>
         // 1362: <unknown object>
         // 1363: <unknown object>
         // 1364: <unknown object>
         // 1365: <unknown object>
         // 1366: <unknown object>
         // 1367: <unknown object>
         // 1368: <unknown object>
         // 1369: <unknown object>
         // 1370: <unknown object>
         // 1371: <unknown object>
         // 1372: <unknown object>
         // 1373: <unknown object>
         // 1374: <unknown object>
         // 1375: <unknown object>
         // 1376: <unknown object>
         // 1377: <unknown object>
         // 1378: <unknown object>
         // 1379: <unknown object>
         // 1380: <unknown object>
         // 1381: <unknown object>
         // 1382: <unknown object>
         // 1383: <unknown object>
         // 1384: <unknown object>
         // 1385: <unknown object>
         // 1386: <unknown object>
         // 1387: <unknown object>
         // 1388: <unknown object>
         // 1389: <unknown object>
         // 1390: <unknown object>
         // 1391: <unknown object>
         // 1392: <unknown object>
         // 1393: <unknown object>
         // 1394: <unknown object>
         // 1395: <unknown object>
         // 1396: <unknown object>
         // 1397: <unknown object>
         // 1398: <unknown object>
         // 1399: <unknown object>
         // 1400: <unknown object>
         // 1401: <unknown object>
         // 1402: <unknown object>
         // 1403: <unknown object>
         // 1404: <unknown object>
         // 1405: <unknown object>
         // 1406: <unknown object>
         // 1407: <unknown object>
         // 1408: <unknown object>
         // 1409: <unknown object>
         // 1410: <unknown object>
         // 1411: <unknown object>
         // 1412: <unknown object>
         // 1413: <unknown object>
         // 1414: <unknown object>
         // 1415: <unknown object>
         // 1416: <unknown object>
         // 1417: <unknown object>
         // 1418: <unknown object>
         // 1419: <unknown object>
         // 1420: <unknown object>
         // 1421: <unknown object>
         // 1422: <unknown object>
         // 1423: <unknown object>
         // 1424: <unknown object>
         // 1425: <unknown object>
         // 1426: <unknown object>
         // 1427: <unknown object>
         // 1428: <unknown object>
         // 1429: <unknown object>
         // 1430: <unknown object>
         // 1431: <unknown object>
         // 1432: <unknown object>
         // 1433: <unknown object>
         // 1434: <unknown object>
         // 1435: <unknown object>
         // 1436: <unknown object>
         // 1437: <unknown object>
         // 1438: <unknown object>
         // 1439: <unknown object>
         // 1440: <unknown object>
         // 1441: <unknown object>
         // 1442: <unknown object>
         // 1443: <unknown object>
         // 1444: <unknown object>
         // 1445: <unknown object>
         // 1446: <unknown object>
         // 1447: <unknown object>
         // 1448: <unknown object>
         // 1449: <unknown object>
         // 1450: <unknown object>
         // 1451: <unknown object>
         // 1452: <unknown object>
         // 1453: <unknown object>
         // 1454: <unknown object>
         // 1455: <unknown object>
         // 1456: <unknown object>
         // 1457: <unknown object>
         // 1458: <unknown object>
         // 1459: <unknown object>
         // 1460: <unknown object>
         // 1461: <unknown object>
         // 1462: <unknown object>
         // 1463: <unknown object>
         // 1464: <unknown object>
         // 1465: <unknown object>
         // 1466: <unknown object>
         // 1467: <unknown object>
         // 1468: <unknown object>
         // 1469: <unknown object>
         // 1470: <unknown object>
         // 1471: <unknown object>
         // 1472: <unknown object>
         // 1473: <unknown object>
         // 1474: <unknown object>
         // 1475: <unknown object>
         // 1476: <unknown object>
         // 1477: <unknown object>
         // 1478: <unknown object>
         // 1479: <unknown object>
         // 1480: <unknown object>
         // 1481: <unknown object>
         // 1482: <unknown object>
         // 1483: <unknown object>
         // 1484: <unknown object>
         // 1485: <unknown object>
         // 1486: <unknown object>
         // 1487: <unknown object>
         // 1488: <unknown object>
         // 1489: <unknown object>
         // 1490: <unknown object>
         // 1491: <unknown object>
         // 1492: <unknown object>
         // 1493: <unknown object>
         // 1494: <unknown object>
         // 1495: <unknown object>
         // 1496: <unknown object>
         // 1497: <unknown object>
         // 1498: <unknown object>
         // 1499: <unknown object>
         // 1500: <unknown object>
         // 1501: <unknown object>
         // 1502: <unknown object>
         // 1503: <unknown object>
         // 1504: <unknown object>
         // 1505: <unknown object>
         // 1506: <unknown object>
         // 1507: <unknown object>
         // 1508: <unknown object>
         // 1509: <unknown object>
         // 1510: <unknown object>
         // 1511: <unknown object>
         // 1512: <unknown object>
         // 1513: <unknown object>
         // 1514: <unknown object>
         // 1515: <unknown object>
         // 1516: <unknown object>
         // 1517: <unknown object>
         // 1518: <unknown object>
         // 1519: <unknown object>
         // 1520: <unknown object>
         // 1521: <unknown object>
         // 1522: <unknown object>
         // 1523: <unknown object>
         // 1524: <unknown object>
         // 1525: <unknown object>
         // 1526: <unknown object>
         // 1527: <unknown object>
         // 1528: <unknown object>
         // 1529: <unknown object>
         // 1530: <unknown object>
         // 1531: <unknown object>
         // 1532: <unknown object>
         // 1533: <unknown object>
         // 1534: <unknown object>
         // 1535: <unknown object>
         // 1536: <unknown object>
         // 1537: <unknown object>
         // 1538: <unknown object>
         // 1539: <unknown object>
         // 1540: <unknown object>
         // 1541: <unknown object>
         // 1542: <unknown object>
         // 1543: <unknown object>
         // 1544: <unknown object>
         // 1545: <unknown object>
         // 1546: <unknown object>
         // 1547: <unknown object>
         // 1548: <unknown object>
         // 1549: <unknown object>
         // 1550: <unknown object>
         // 1551: <unknown object>
         // 1552: <unknown object>
         // 1553: <unknown object>
         // 1554: <unknown object>
         // 1555: <unknown object>
         // 1556: <unknown object>
         // 1557: <unknown object>
         // 1558: <unknown object>
         // 1559: <unknown object>
         // 1560: <unknown object>
         // 1561: <unknown object>
         // 1562: <unknown object>
         // 1563: <unknown object>
         // 1564: <unknown object>
         // 1565: <unknown object>
         // 1566: <unknown object>
         // 1567: <unknown object>
         // 1568: <unknown object>
         // 1569: <unknown object>
         // 1570: <unknown object>
         // 1571: <unknown object>
         // 1572: <unknown object>
         // 1573: <unknown object>
         // 1574: <unknown object>
         // 1575: <unknown object>
         // 1576: <unknown object>
         // 1577: <unknown object>
         // 1578: <unknown object>
         // 1579: <unknown object>
         // 1580: <unknown object>
         // 1581: <unknown object>
         // 1582: <unknown object>
         // 1583: <unknown object>
         // 1584: <unknown object>
         // 1585: <unknown object>
         // 1586: <unknown object>
         // 1587: <unknown object>
         // 1588: <unknown object>
         // 1589: <unknown object>
         // 1590: <unknown object>
         // 1591: <unknown object>
         // 1592: <unknown object>
         // 1593: <unknown object>
         // 1594: <unknown object>
         // 1595: <unknown object>
         // 1596: <unknown object>
         // 1597: <unknown object>
         // 1598: <unknown object>
         // 1599: <unknown object>
         // 1600: <unknown object>
         // 1601: <unknown object>
         // 1602: <unknown object>
         // 1603: <unknown object>
         // 1604: <unknown object>
         // 1605: <unknown object>
         // 1606: <unknown object>
         // 1607: <unknown object>
         // 1608: <unknown object>
         // 1609: <unknown object>
         // 1610: <unknown object>
         // 1611: <unknown object>
         // 1612: <unknown object>
         // 1613: <unknown object>
         // 1614: <unknown object>
         // 1615: <unknown object>
         // 1616: <unknown object>
         // 1617: <unknown object>
         // 1618: <unknown object>
         // 1619: <unknown object>
         // 1620: <unknown object>
         // 1621: <unknown object>
         // 1622: <unknown object>
         // 1623: <unknown object>
         // 1624: <unknown object>
         // 1625: <unknown object>
         // 1626: <unknown object>
         // 1627: <unknown object>
         // 1628: <unknown object>
         // 1629: <unknown object>
         // 1630: <unknown object>
         // 1631: <unknown object>
         // 1632: <unknown object>
         // 1633: <unknown object>
         // 1634: <unknown object>
         // 1635: <unknown object>
         // 1636: <unknown object>
         // 1637: <unknown object>
         // 1638: <unknown object>
         // 1639: <unknown object>
         // 1640: <unknown object>
         // 1641: <unknown object>
         // 1642: <unknown object>
         // 1643: <unknown object>
         // 1644: <unknown object>
         // 1645: <unknown object>
         // 1646: <unknown object>
         // 1647: <unknown object>
         // 1648: <unknown object>
         // 1649: <unknown object>
         // 1650: <unknown object>
         // 1651: <unknown object>
         // 1652: <unknown object>
         // 1653: <unknown object>
         // 1654: <unknown object>
         // 1655: <unknown object>
         // 1656: <unknown object>
         // 1657: <unknown object>
         // 1658: <unknown object>
         // 1659: <unknown object>
         // 1660: <unknown object>
         // 1661: <unknown object>
         // 1662: <unknown object>
         // 1663: <unknown object>
         // 1664: <unknown object>
         // 1665: <unknown object>
         // 1666: <unknown object>
         // 1667: <unknown object>
         // 1668: <unknown object>
         // 1669: <unknown object>
         // 1670: <unknown object>
         // 1671: <unknown object>
         // 1672: <unknown object>
         // 1673: <unknown object>
         // 1674: <unknown object>
         // 1675: <unknown object>
         // 1676: <unknown object>
         // 1677: <unknown object>
         // 1678: <unknown object>
         // 1679: <unknown object>
         // 1680: <unknown object>
         // 1681: <unknown object>
         // 1682: <unknown object>
         // 1683: <unknown object>
         // 1684: <unknown object>
         // 1685: <unknown object>
         // 1686: <unknown object>
         // 1687: <unknown object>
         // 1688: <unknown object>
         // 1689: <unknown object>
         // 1690: <unknown object>
         // 1691: <unknown object>
         // 1692: <unknown object>
         // 1693: <unknown object>
         // 1694: <unknown object>
         // 1695: <unknown object>
         // 1696: <unknown object>
         // 1697: <unknown object>
         // 1698: <unknown object>
         // 1699: <unknown object>
         // 1700: <unknown object>
         // 1701: <unknown object>
         // 1702: <unknown object>
         // 1703: <unknown object>
         // 1704: <unknown object>
         // 1705: <unknown object>
         // 1706: <unknown object>
         // 1707: <unknown object>
         // 1708: <unknown object>
         // 1709: <unknown object>
         // 1710: <unknown object>
         // 1711: <unknown object>
         // 1712: <unknown object>
         // 1713: <unknown object>
         // 1714: <unknown object>
         // 1715: <unknown object>
         // 1716: <unknown object>
         // 1717: <unknown object>
         // 1718: <unknown object>
         // 1719: <unknown object>
         // 1720: <unknown object>
         // 1721: <unknown object>
         // 1722: <unknown object>
         // 1723: <unknown object>
         // 1724: <unknown object>
         // 1725: <unknown object>
         // 1726: <unknown object>
         // 1727: <unknown object>
         // 1728: <unknown object>
         // 1729: <unknown object>
         // 1730: <unknown object>
         // 1731: <unknown object>
         // 1732: <unknown object>
         // 1733: <unknown object>
         // 1734: <unknown object>
         // 1735: <unknown object>
         // 1736: <unknown object>
         // 1737: <unknown object>
         // 1738: <unknown object>
         // 1739: <unknown object>
         // 1740: <unknown object>
         // 1741: <unknown object>
         // 1742: <unknown object>
         // 1743: <unknown object>
         // 1744: <unknown object>
         // 1745: <unknown object>
         // 1746: <unknown object>
         // 1747: <unknown object>
         // 1748: <unknown object>
         // 1749: <unknown object>
         // 1750: <unknown object>
         // 1751: <unknown object>
         // 1752: <unknown object>
         // 1753: <unknown object>
         // 1754: <unknown object>
         // 1755: <unknown object>
         // 1756: <unknown object>
         // 1757: <unknown object>
         // 1758: <unknown object>
         // 1759: <unknown object>
         // 1760: <unknown object>
         // 1761: <unknown object>
         // 1762: <unknown object>
         // 1763: <unknown object>
         // 1764: <unknown object>
         // 1765: <unknown object>
         // 1766: <unknown object>
         // 1767: <unknown object>
         // 1768: <unknown object>
         // 1769: <unknown object>
         // 1770: <unknown object>
         // 1771: <unknown object>
         // 1772: <unknown object>
         // 1773: <unknown object>
         // 1774: <unknown object>
         // 1775: <unknown object>
         // 1776: <unknown object>
         // 1777: <unknown object>
         // 1778: <unknown object>
         // 1779: <unknown object>
         // 1780: <unknown object>
         // 1781: <unknown object>
         // 1782: <unknown object>
         // 1783: <unknown object>
         // 1784: <unknown object>
         // 1785: <unknown object>
         // 1786: <unknown object>
         // 1787: <unknown object>
         // 1788: <unknown object>
         // 1789: <unknown object>
         // 1790: <unknown object>
         // 1791: <unknown object>
         // 1792: <unknown object>
         // 1793: <unknown object>
         // 1794: <unknown object>
         // 1795: <unknown object>
         // 1796: <unknown object>
         // 1797: <unknown object>
         // 1798: <unknown object>
         // 1799: <unknown object>
         // 1800: <unknown object>
         // 1801: <unknown object>
         // 1802: <unknown object>
         // 1803: <unknown object>
         // 1804: <unknown object>
         // 1805: <unknown object>
         // 1806: <unknown object>
         // 1807: <unknown object>
         // 1808: <unknown object>
         // 1809: <unknown object>
         // 1810: <unknown object>
         // 1811: <unknown object>
         // 1812: <unknown object>
         // 1813: <unknown object>
         // 1814: <unknown object>
         // 1815: <unknown object>
         // 1816: <unknown object>
         // 1817: <unknown object>
         // 1818: <unknown object>
         // 1819: <unknown object>
         // 1820: <unknown object>
         // 1821: <unknown object>
         // 1822: <unknown object>
         // 1823: <unknown object>
         // 1824: <unknown object>
         // 1825: <unknown object>
         // 1826: <unknown object>
         // 1827: <unknown object>
         // 1828: <unknown object>
         // 1829: <unknown object>
         // 1830: <unknown object>
         // 1831: <unknown object>
         // 1832: <unknown object>
         // 1833: <unknown object>
         // 1834: <unknown object>
         // 1835: <unknown object>
         // 1836: <unknown object>
         // 1837: <unknown object>
         // 1838: <unknown object>
         // 1839: <unknown object>
         // 1840: <unknown object>
         // 1841: <unknown object>
         // 1842: <unknown object>
         // 1843: <unknown object>
         // 1844: <unknown object>
         // 1845: <unknown object>
         // 1846: <unknown object>
         // 1847: <unknown object>
         // 1848: <unknown object>
         // 1849: <unknown object>
         // 1850: <unknown object>
         // 1851: <unknown object>
         // 1852: <unknown object>
         // 1853: <unknown object>
         // 1854: <unknown object>
         // 1855: <unknown object>
         // 1856: <unknown object>
         // 1857: <unknown object>
         // 1858: <unknown object>
         // 1859: <unknown object>
         // 1860: <unknown object>
         // 1861: <unknown object>
         // 1862: <unknown object>
         // 1863: <unknown object>
         // 1864: <unknown object>
         // 1865: <unknown object>
         // 1866: <unknown object>
         // 1867: <unknown object>
         // 1868: <unknown object>
         // 1869: <unknown object>
         // 1870: <unknown object>
         // 1871: <unknown object>
         // 1872: <unknown object>
         // 1873: <unknown object>
         // 1874: <unknown object>
         // 1875: <unknown object>
         // 1876: <unknown object>
         // 1877: <unknown object>
         // 1878: <unknown object>
         // 1879: <unknown object>
         // 1880: <unknown object>
         // 1881: <unknown object>
         // 1882: <unknown object>
         // 1883: <unknown object>
         // 1884: <unknown object>
         // 1885: <unknown object>
         // 1886: <unknown object>
         // 1887: <unknown object>
         // 1888: <unknown object>
         // 1889: <unknown object>
         // 1890: <unknown object>
         // 1891: <unknown object>
         // 1892: <unknown object>
         // 1893: <unknown object>
         // 1894: <unknown object>
         // 1895: <unknown object>
         // 1896: <unknown object>
         // 1897: <unknown object>
         // 1898: <unknown object>
         // 1899: <unknown object>
         // 1900: <unknown object>
         // 1901: <unknown object>
         // 1902: <unknown object>
         // 1903: <unknown object>
         // 1904: <unknown object>
         // 1905: <unknown object>
         // 1906: <unknown object>
         // 1907: <unknown object>
         // 1908: <unknown object>
         // 1909: <unknown object>
         // 1910: <unknown object>
         // 1911: <unknown object>
         // 1912: <unknown object>
         // 1913: <unknown object>
         // 1914: <unknown object>
         // 1915: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1894);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("zG)g");
      OperandStack operandStack0 = new OperandStack(1894, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type 'zG)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aoy\"Xz}kM/kE.~k");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1901);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("aoy\"Xz}kM/kE.~k");
      OperandStack operandStack0 = new OperandStack(1556, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'aoy\"Xz}kM.kE.~k'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("zG)g");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.set(2, objectType0);
      localVariables0.merge(localVariables1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FNEG fNEG0 = new FNEG();
      LCMP lCMP0 = new LCMP();
      lCMP0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type 'zG)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1916);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("zG)g");
      OperandStack operandStack0 = new OperandStack(1916, objectType0);
      Character.getName(1916);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals("ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW");
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(1916);
      L2F l2F0 = new L2F();
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'zG)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1889);
      ObjectType objectType0 = ObjectType.getInstance("v");
      Class<DREM>[] classArray0 = (Class<DREM>[]) Array.newInstance(Class.class, 3);
      Class<DREM> class0 = DREM.class;
      classArray0[0] = class0;
      Class<DREM> class1 = DREM.class;
      classArray0[1] = class1;
      classArray0[2] = class0;
      Type.getTypes(classArray0);
      OperandStack operandStack0 = new OperandStack(1889, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ISHR iSHR0 = new ISHR();
      PUTFIELD pUTFIELD0 = new PUTFIELD(1889);
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type 'v'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LSHR lSHR0 = new LSHR();
      int int0 = 1;
      LocalVariables localVariables0 = new LocalVariables(1);
      ObjectType objectType0 = new ObjectType("i");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      operandStack0.toString();
      LocalVariables localVariables1 = new LocalVariables(1);
      OperandStack operandStack1 = new OperandStack(4136, objectType0);
      operandStack1.getClone();
      LocalVariables localVariables2 = new LocalVariables(1);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, false);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      LRETURN lRETURN0 = (LRETURN)InstructionConstants.LRETURN;
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) lRETURN0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 'i'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LDC_W lDC_W0 = new LDC_W(169);
      BASTORE bASTORE0 = new BASTORE();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("The stack top type '");
      OperandStack operandStack0 = new OperandStack(169, objectType0);
      LocalVariables localVariables0 = new LocalVariables(169);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      boolean boolean0 = new Boolean("The stack top type '");
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      Frame.getThis();
      frame0.getClone();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL((FMUL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("");
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack(311, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      operandStack0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(224, 311);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1841);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1841, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      frame0.getClone();
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 1922;
      LocalVariables localVariables0 = new LocalVariables(1922);
      ObjectType objectType0 = new ObjectType("");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(1922, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.clear();
      LocalVariables localVariables1 = new LocalVariables(1922);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1841);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(167, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      DMUL dMUL0 = new DMUL();
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(41, objectType0);
      OperandStack operandStack1 = new OperandStack(41, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.getClone();
      OperandStack operandStack2 = new OperandStack(41, objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ARETURN aRETURN0 = new ARETURN();
      LNEG lNEG0 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+T@mFC6I4MMJ7I5v");
      OperandStack operandStack0 = new OperandStack(194);
      LocalVariables localVariables0 = new LocalVariables(57);
      OperandStack operandStack1 = new OperandStack(194, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      LRETURN lRETURN0 = (LRETURN)InstructionConstants.LRETURN;
      LUSHR lUSHR0 = new LUSHR();
      lUSHR0.copy();
      ASTORE aSTORE0 = new ASTORE(57);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals("astore", aSTORE0.getName());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1871);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("~F)g");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(1871, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.BYTE);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type '~F)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1901);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("Assignings");
      OperandStack operandStack0 = new OperandStack(1901, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = (Frame)frame0.clone();
      ObjectType objectType1 = new ObjectType("BBV&U'I:N >f62m");
      OperandStack operandStack1 = new OperandStack(1901, objectType1);
      instConstraintVisitor0.setFrame(frame1);
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'Assignings'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1894);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("zG)g");
      OperandStack operandStack0 = new OperandStack(1894, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'zG)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("");
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack(311, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      operandStack0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(224, 311);
      IXOR iXOR0 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LSHR lSHR0 = new LSHR();
      LocalVariables localVariables0 = new LocalVariables(1);
      ObjectType objectType0 = new ObjectType("i");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      OperandStack operandStack1 = new OperandStack(4136, objectType0);
      operandStack1.getClone();
      LocalVariables localVariables1 = new LocalVariables(1);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ISTORE iSTORE0 = new ISTORE(4136);
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'i'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1878);
      Character.getName(1878);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("ARABIC LETTER BEH WITH SMALL V");
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.initializeObject(uninitializedObjectType0);
      frame0.toString();
      frame0.equals("ARABIC LETTER BEH WITH SMALL V");
      ARETURN aRETURN0 = new ARETURN();
      operandStack0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame frame2 = frame0.getClone();
      ARETURN aRETURN1 = new ARETURN();
      ARETURN aRETURN2 = new ARETURN();
      aRETURN2.copy();
      instConstraintVisitor0.setFrame(frame2);
      POP2 pOP2_0 = new POP2();
      localVariables0.toString();
      AASTORE aASTORE0 = new AASTORE();
      IINC iINC0 = new IINC(1421, 28);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(233, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ATHROW aTHROW0 = new ATHROW();
      IOR iOR0 = new IOR();
      ARETURN aRETURN0 = new ARETURN();
      // Undeclared exception!
      try { 
        aRETURN0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1841);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(167, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      operandStack0.getClone();
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("~ou&o@%\"-.@/Fq3");
      OperandStack operandStack0 = new OperandStack(46, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      NOP nOP0 = new NOP();
      NOP nOP1 = new NOP();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      GETFIELD gETFIELD0 = new GETFIELD(46);
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type '~ou&o@%\"-.@.Fq3'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("y");
      OperandStack operandStack0 = new OperandStack(311, objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = new OperandStack(1901, objectType0);
      operandStack0.pop((-1597));
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getStart();
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGE constraint violated: The value at the stack top is not of type 'int', but of type 'y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LXOR lXOR0 = new LXOR();
      LSUB lSUB0 = new LSUB();
      PUTFIELD pUTFIELD0 = new PUTFIELD(83);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(83, 2767);
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      BASTORE bASTORE0 = new BASTORE();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      int int0 = 2127;
      ASTORE aSTORE0 = new ASTORE((byte)2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(aSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ASTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+T@mFC6I4MMJ7I5v");
      LocalVariables localVariables0 = new LocalVariables(194);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(194, objectType0);
      localVariables0.merge(localVariables0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      LRETURN lRETURN0 = (LRETURN)InstructionConstants.LRETURN;
      DMUL dMUL0 = new DMUL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ((IF_ICMPEQ) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO(gOTO0);
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(1901, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      Frame.getThis();
      frame0.toString();
      operandStack1.initializeObject((UninitializedObjectType) null);
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("t");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(1901, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      Frame.getThis();
      frame0.toString();
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type 't'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1862);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("IndYx '");
      Pattern.quote("IndYx '");
      OperandStack operandStack0 = new OperandStack(1862, objectType0);
      LocalVariables localVariables1 = new LocalVariables(3);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.clone();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'IndYx ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1894);
      Character.getName(1894);
      ObjectType objectType0 = ObjectType.getInstance("ARABIC LETTER MEEM WITH DOT BELOW");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      LSHR lSHR0 = new LSHR();
      frame0.equals(lSHR0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ARETURN aRETURN2 = new ARETURN();
      aRETURN2.copy();
      operandStack0.push(objectType0);
      aRETURN0.consumeStack(constantPoolGen0);
      int int0 = Long.BYTES;
      ObjectType.getInstance("ARABIC LETTER MEEM WITH DOT BELOW");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      Locale locale0 = Locale.US;
      operandStack0.getClone();
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type 'ARABIC LETTER MEEM WITH DOT BELOW'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType.getInstance("");
      ObjectType objectType0 = ObjectType.getInstance("");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantClass constantClass0 = new ConstantClass(239);
      I2C i2C0 = new I2C();
      i2C0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C((I2C) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      LSHR lSHR0 = new LSHR();
      LocalVariables localVariables0 = new LocalVariables(254);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      String string0 = localVariables0.toString();
      ObjectType objectType0 = new ObjectType(string0);
      OperandStack operandStack0 = new OperandStack(254, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Object object0 = new Object();
      F2L f2L0 = new F2L();
      f2L0.toString(false);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // 31: <unknown object>
         // 32: <unknown object>
         // 33: <unknown object>
         // 34: <unknown object>
         // 35: <unknown object>
         // 36: <unknown object>
         // 37: <unknown object>
         // 38: <unknown object>
         // 39: <unknown object>
         // 40: <unknown object>
         // 41: <unknown object>
         // 42: <unknown object>
         // 43: <unknown object>
         // 44: <unknown object>
         // 45: <unknown object>
         // 46: <unknown object>
         // 47: <unknown object>
         // 48: <unknown object>
         // 49: <unknown object>
         // 50: <unknown object>
         // 51: <unknown object>
         // 52: <unknown object>
         // 53: <unknown object>
         // 54: <unknown object>
         // 55: <unknown object>
         // 56: <unknown object>
         // 57: <unknown object>
         // 58: <unknown object>
         // 59: <unknown object>
         // 60: <unknown object>
         // 61: <unknown object>
         // 62: <unknown object>
         // 63: <unknown object>
         // 64: <unknown object>
         // 65: <unknown object>
         // 66: <unknown object>
         // 67: <unknown object>
         // 68: <unknown object>
         // 69: <unknown object>
         // 70: <unknown object>
         // 71: <unknown object>
         // 72: <unknown object>
         // 73: <unknown object>
         // 74: <unknown object>
         // 75: <unknown object>
         // 76: <unknown object>
         // 77: <unknown object>
         // 78: <unknown object>
         // 79: <unknown object>
         // 80: <unknown object>
         // 81: <unknown object>
         // 82: <unknown object>
         // 83: <unknown object>
         // 84: <unknown object>
         // 85: <unknown object>
         // 86: <unknown object>
         // 87: <unknown object>
         // 88: <unknown object>
         // 89: <unknown object>
         // 90: <unknown object>
         // 91: <unknown object>
         // 92: <unknown object>
         // 93: <unknown object>
         // 94: <unknown object>
         // 95: <unknown object>
         // 96: <unknown object>
         // 97: <unknown object>
         // 98: <unknown object>
         // 99: <unknown object>
         // 100: <unknown object>
         // 101: <unknown object>
         // 102: <unknown object>
         // 103: <unknown object>
         // 104: <unknown object>
         // 105: <unknown object>
         // 106: <unknown object>
         // 107: <unknown object>
         // 108: <unknown object>
         // 109: <unknown object>
         // 110: <unknown object>
         // 111: <unknown object>
         // 112: <unknown object>
         // 113: <unknown object>
         // 114: <unknown object>
         // 115: <unknown object>
         // 116: <unknown object>
         // 117: <unknown object>
         // 118: <unknown object>
         // 119: <unknown object>
         // 120: <unknown object>
         // 121: <unknown object>
         // 122: <unknown object>
         // 123: <unknown object>
         // 124: <unknown object>
         // 125: <unknown object>
         // 126: <unknown object>
         // 127: <unknown object>
         // 128: <unknown object>
         // 129: <unknown object>
         // 130: <unknown object>
         // 131: <unknown object>
         // 132: <unknown object>
         // 133: <unknown object>
         // 134: <unknown object>
         // 135: <unknown object>
         // 136: <unknown object>
         // 137: <unknown object>
         // 138: <unknown object>
         // 139: <unknown object>
         // 140: <unknown object>
         // 141: <unknown object>
         // 142: <unknown object>
         // 143: <unknown object>
         // 144: <unknown object>
         // 145: <unknown object>
         // 146: <unknown object>
         // 147: <unknown object>
         // 148: <unknown object>
         // 149: <unknown object>
         // 150: <unknown object>
         // 151: <unknown object>
         // 152: <unknown object>
         // 153: <unknown object>
         // 154: <unknown object>
         // 155: <unknown object>
         // 156: <unknown object>
         // 157: <unknown object>
         // 158: <unknown object>
         // 159: <unknown object>
         // 160: <unknown object>
         // 161: <unknown object>
         // 162: <unknown object>
         // 163: <unknown object>
         // 164: <unknown object>
         // 165: <unknown object>
         // 166: <unknown object>
         // 167: <unknown object>
         // 168: <unknown object>
         // 169: <unknown object>
         // 170: <unknown object>
         // 171: <unknown object>
         // 172: <unknown object>
         // 173: <unknown object>
         // 174: <unknown object>
         // 175: <unknown object>
         // 176: <unknown object>
         // 177: <unknown object>
         // 178: <unknown object>
         // 179: <unknown object>
         // 180: <unknown object>
         // 181: <unknown object>
         // 182: <unknown object>
         // 183: <unknown object>
         // 184: <unknown object>
         // 185: <unknown object>
         // 186: <unknown object>
         // 187: <unknown object>
         // 188: <unknown object>
         // 189: <unknown object>
         // 190: <unknown object>
         // 191: <unknown object>
         // 192: <unknown object>
         // 193: <unknown object>
         // 194: <unknown object>
         // 195: <unknown object>
         // 196: <unknown object>
         // 197: <unknown object>
         // 198: <unknown object>
         // 199: <unknown object>
         // 200: <unknown object>
         // 201: <unknown object>
         // 202: <unknown object>
         // 203: <unknown object>
         // 204: <unknown object>
         // 205: <unknown object>
         // 206: <unknown object>
         // 207: <unknown object>
         // 208: <unknown object>
         // 209: <unknown object>
         // 210: <unknown object>
         // 211: <unknown object>
         // 212: <unknown object>
         // 213: <unknown object>
         // 214: <unknown object>
         // 215: <unknown object>
         // 216: <unknown object>
         // 217: <unknown object>
         // 218: <unknown object>
         // 219: <unknown object>
         // 220: <unknown object>
         // 221: <unknown object>
         // 222: <unknown object>
         // 223: <unknown object>
         // 224: <unknown object>
         // 225: <unknown object>
         // 226: <unknown object>
         // 227: <unknown object>
         // 228: <unknown object>
         // 229: <unknown object>
         // 230: <unknown object>
         // 231: <unknown object>
         // 232: <unknown object>
         // 233: <unknown object>
         // 234: <unknown object>
         // 235: <unknown object>
         // 236: <unknown object>
         // 237: <unknown object>
         // 238: <unknown object>
         // 239: <unknown object>
         // 240: <unknown object>
         // 241: <unknown object>
         // 242: <unknown object>
         // 243: <unknown object>
         // 244: <unknown object>
         // 245: <unknown object>
         // 246: <unknown object>
         // 247: <unknown object>
         // 248: <unknown object>
         // 249: <unknown object>
         // 250: <unknown object>
         // 251: <unknown object>
         // 252: <unknown object>
         // 253: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1919);
      OperandStack operandStack0 = new OperandStack(1870);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.getClone();
      BasicType basicType0 = Type.DOUBLE;
      operandStack1.push(basicType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      String string0 = frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      ACONST_NULL aCONST_NULL1 = new ACONST_NULL();
      MockFile mockFile0 = new MockFile(string0);
      instConstraintVisitor0.setFrame(frame0);
      POP2 pOP2_0 = new POP2();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      D2I d2I0 = new D2I();
      instConstraintVisitor0.visitD2I(d2I0);
      FALOAD fALOAD0 = new FALOAD();
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("zG)g");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO_W0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.getEnd();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("Stack next-to-top must be of type double[] but is '");
      ObjectType objectType1 = ObjectType.getInstance("Stack next-to-top must be of type double[] but is '");
      String string0 = Constants.ILLEGAL_OPCODE;
      OperandStack operandStack0 = new OperandStack(1901, objectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      operandStack0.getClone();
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'Stack next-to-top must be of type double[] but is ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1960);
      ObjectType objectType0 = ObjectType.getInstance("i");
      localVariables0.toString();
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(1960, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(158, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      frame0.clone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      DSUB dSUB0 = new DSUB();
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type 'i'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("zG)g");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      GETFIELD gETFIELD0 = new GETFIELD(1901);
      ILOAD iLOAD0 = new ILOAD(128);
      // Undeclared exception!
      try { 
        iLOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: Cannot produce 1 stack slots: only 0 free stack slot(s) left.
         // Stack:
         // Slots used: 2 MaxStack: 2.
         // zG)g (Size: 1)
         // zG)g (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1894);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("~F)g");
      OperandStack operandStack0 = new OperandStack(1894, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      byteArray0[0] = (byte) (-62);
      byteArray0[3] = (byte)41;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) dALOAD0);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type '~F)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("");
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack(311, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Class<POP2> class0 = POP2.class;
      Type.getType(class0);
      frame0.toString();
      operandStack0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ((IFEQ) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1784, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DRETURN dRETURN0 = new DRETURN();
      DRETURN dRETURN1 = new DRETURN();
      DRETURN dRETURN2 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1898);
      localVariables0.merge(localVariables0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("zG)g");
      OperandStack operandStack0 = new OperandStack(1898, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      F2D f2D0 = new F2D();
      localVariables0.toString();
      InstructionList instructionList0 = new InstructionList();
      CHECKCAST cHECKCAST0 = new CHECKCAST(1915);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(1878);
      Character.getName(1878);
      Boolean boolean0 = new Boolean(true);
      ObjectType objectType0 = ObjectType.getInstance("ARABIC LETTER BEH WITH SMALL V");
      OperandStack operandStack0 = new OperandStack(1878, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.toString();
      ARETURN aRETURN0 = new ARETURN();
      OperandStack operandStack1 = new OperandStack(1878, objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame frame2 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame2);
      D2L d2L0 = new D2L();
      Boolean boolean1 = new Boolean("5zg");
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      ASTORE aSTORE0 = new ASTORE(1878);
      LSTORE lSTORE0 = new LSTORE(2048);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(lSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'ARABIC LETTER BEH WITH SMALL V'; Instruction type: 'long'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LSHR lSHR0 = new LSHR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(1);
      ObjectType objectType0 = new ObjectType("i");
      LocalVariables localVariables1 = new LocalVariables(1);
      localVariables1.toString();
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(197, objectType0);
      localVariables1.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables2 = new LocalVariables(1);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      RETURN rETURN0 = new RETURN();
      frame0.equals(objectType0);
      BasicType basicType0 = Type.VOID;
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_2;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(aLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ALOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      AALOAD aALOAD0 = new AALOAD();
      LALOAD lALOAD0 = new LALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLALOAD(lALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1894);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("zG)g");
      OperandStack operandStack0 = new OperandStack(1894, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      FCMPG fCMPG0 = new FCMPG();
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      int int0 = (-424);
      LocalVariables localVariables1 = null;
      try {
        localVariables1 = new LocalVariables((-424));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1894);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("~F)g");
      OperandStack operandStack0 = new OperandStack(1894, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      LRETURN lRETURN0 = new LRETURN();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type '~F)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LSHR lSHR0 = new LSHR();
      LocalVariables localVariables0 = new LocalVariables(1894);
      BasicType basicType0 = Type.VOID;
      OperandStack operandStack0 = new OperandStack(1894, basicType0.STRING);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.toString();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Locale locale0 = Locale.GERMANY;
      LRETURN lRETURN0 = new LRETURN();
      FCMPG fCMPG0 = new FCMPG();
      frame0.getClone();
      LocalVariables localVariables1 = new LocalVariables(1894);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      int int0 = 3;
      LocalVariables localVariables2 = new LocalVariables(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE((IFNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+T@mFC6I4MMJ7I5v");
      LocalVariables localVariables0 = new LocalVariables(194);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(194, objectType0);
      localVariables0.merge(localVariables0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      ARETURN aRETURN0 = new ARETURN();
      DALOAD dALOAD0 = new DALOAD();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      Locale locale0 = Locale.GERMANY;
      FCMPG fCMPG0 = new FCMPG();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(1901);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type '+T@mFC6I4MMJ7I5v'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1898);
      String string0 = File.separator;
      ObjectType objectType0 = new ObjectType("/");
      OperandStack operandStack0 = new OperandStack(559, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF((byte)19);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1930);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1930, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      Frame frame1 = new Frame(1930, 1930);
      IASTORE iASTORE0 = new IASTORE();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1894);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("~F)g");
      OperandStack operandStack0 = new OperandStack(1894, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      NOP nOP0 = new NOP();
      NOP nOP1 = new NOP();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type '~F)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1960);
      ObjectType objectType0 = ObjectType.getInstance("i");
      localVariables0.toString();
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(1960, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(158, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      operandStack1.clone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) aRETURN0);
      L2D l2D0 = new L2D();
      l2D0.toString();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLT constraint violated: The value at the stack top is not of type 'int', but of type 'i'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1888);
      ObjectType objectType0 = new ObjectType("Q_");
      OperandStack operandStack0 = new OperandStack(822, objectType0);
      localVariables0.set(822, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      localVariables0.set(961, objectType0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      constantPoolGen2.addNameAndType(")2WU'&5N0)FY", "Q_");
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type 'Q_'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      LSHR lSHR0 = new LSHR();
      LocalVariables localVariables0 = new LocalVariables(254);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      String string0 = localVariables0.toString();
      ObjectType objectType0 = new ObjectType(string0);
      OperandStack operandStack0 = new OperandStack(254, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FLOAD fLOAD0 = new FLOAD(254);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      FASTORE fASTORE0 = new FASTORE();
      fASTORE0.getExceptions();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // 31: <unknown object>
         // 32: <unknown object>
         // 33: <unknown object>
         // 34: <unknown object>
         // 35: <unknown object>
         // 36: <unknown object>
         // 37: <unknown object>
         // 38: <unknown object>
         // 39: <unknown object>
         // 40: <unknown object>
         // 41: <unknown object>
         // 42: <unknown object>
         // 43: <unknown object>
         // 44: <unknown object>
         // 45: <unknown object>
         // 46: <unknown object>
         // 47: <unknown object>
         // 48: <unknown object>
         // 49: <unknown object>
         // 50: <unknown object>
         // 51: <unknown object>
         // 52: <unknown object>
         // 53: <unknown object>
         // 54: <unknown object>
         // 55: <unknown object>
         // 56: <unknown object>
         // 57: <unknown object>
         // 58: <unknown object>
         // 59: <unknown object>
         // 60: <unknown object>
         // 61: <unknown object>
         // 62: <unknown object>
         // 63: <unknown object>
         // 64: <unknown object>
         // 65: <unknown object>
         // 66: <unknown object>
         // 67: <unknown object>
         // 68: <unknown object>
         // 69: <unknown object>
         // 70: <unknown object>
         // 71: <unknown object>
         // 72: <unknown object>
         // 73: <unknown object>
         // 74: <unknown object>
         // 75: <unknown object>
         // 76: <unknown object>
         // 77: <unknown object>
         // 78: <unknown object>
         // 79: <unknown object>
         // 80: <unknown object>
         // 81: <unknown object>
         // 82: <unknown object>
         // 83: <unknown object>
         // 84: <unknown object>
         // 85: <unknown object>
         // 86: <unknown object>
         // 87: <unknown object>
         // 88: <unknown object>
         // 89: <unknown object>
         // 90: <unknown object>
         // 91: <unknown object>
         // 92: <unknown object>
         // 93: <unknown object>
         // 94: <unknown object>
         // 95: <unknown object>
         // 96: <unknown object>
         // 97: <unknown object>
         // 98: <unknown object>
         // 99: <unknown object>
         // 100: <unknown object>
         // 101: <unknown object>
         // 102: <unknown object>
         // 103: <unknown object>
         // 104: <unknown object>
         // 105: <unknown object>
         // 106: <unknown object>
         // 107: <unknown object>
         // 108: <unknown object>
         // 109: <unknown object>
         // 110: <unknown object>
         // 111: <unknown object>
         // 112: <unknown object>
         // 113: <unknown object>
         // 114: <unknown object>
         // 115: <unknown object>
         // 116: <unknown object>
         // 117: <unknown object>
         // 118: <unknown object>
         // 119: <unknown object>
         // 120: <unknown object>
         // 121: <unknown object>
         // 122: <unknown object>
         // 123: <unknown object>
         // 124: <unknown object>
         // 125: <unknown object>
         // 126: <unknown object>
         // 127: <unknown object>
         // 128: <unknown object>
         // 129: <unknown object>
         // 130: <unknown object>
         // 131: <unknown object>
         // 132: <unknown object>
         // 133: <unknown object>
         // 134: <unknown object>
         // 135: <unknown object>
         // 136: <unknown object>
         // 137: <unknown object>
         // 138: <unknown object>
         // 139: <unknown object>
         // 140: <unknown object>
         // 141: <unknown object>
         // 142: <unknown object>
         // 143: <unknown object>
         // 144: <unknown object>
         // 145: <unknown object>
         // 146: <unknown object>
         // 147: <unknown object>
         // 148: <unknown object>
         // 149: <unknown object>
         // 150: <unknown object>
         // 151: <unknown object>
         // 152: <unknown object>
         // 153: <unknown object>
         // 154: <unknown object>
         // 155: <unknown object>
         // 156: <unknown object>
         // 157: <unknown object>
         // 158: <unknown object>
         // 159: <unknown object>
         // 160: <unknown object>
         // 161: <unknown object>
         // 162: <unknown object>
         // 163: <unknown object>
         // 164: <unknown object>
         // 165: <unknown object>
         // 166: <unknown object>
         // 167: <unknown object>
         // 168: <unknown object>
         // 169: <unknown object>
         // 170: <unknown object>
         // 171: <unknown object>
         // 172: <unknown object>
         // 173: <unknown object>
         // 174: <unknown object>
         // 175: <unknown object>
         // 176: <unknown object>
         // 177: <unknown object>
         // 178: <unknown object>
         // 179: <unknown object>
         // 180: <unknown object>
         // 181: <unknown object>
         // 182: <unknown object>
         // 183: <unknown object>
         // 184: <unknown object>
         // 185: <unknown object>
         // 186: <unknown object>
         // 187: <unknown object>
         // 188: <unknown object>
         // 189: <unknown object>
         // 190: <unknown object>
         // 191: <unknown object>
         // 192: <unknown object>
         // 193: <unknown object>
         // 194: <unknown object>
         // 195: <unknown object>
         // 196: <unknown object>
         // 197: <unknown object>
         // 198: <unknown object>
         // 199: <unknown object>
         // 200: <unknown object>
         // 201: <unknown object>
         // 202: <unknown object>
         // 203: <unknown object>
         // 204: <unknown object>
         // 205: <unknown object>
         // 206: <unknown object>
         // 207: <unknown object>
         // 208: <unknown object>
         // 209: <unknown object>
         // 210: <unknown object>
         // 211: <unknown object>
         // 212: <unknown object>
         // 213: <unknown object>
         // 214: <unknown object>
         // 215: <unknown object>
         // 216: <unknown object>
         // 217: <unknown object>
         // 218: <unknown object>
         // 219: <unknown object>
         // 220: <unknown object>
         // 221: <unknown object>
         // 222: <unknown object>
         // 223: <unknown object>
         // 224: <unknown object>
         // 225: <unknown object>
         // 226: <unknown object>
         // 227: <unknown object>
         // 228: <unknown object>
         // 229: <unknown object>
         // 230: <unknown object>
         // 231: <unknown object>
         // 232: <unknown object>
         // 233: <unknown object>
         // 234: <unknown object>
         // 235: <unknown object>
         // 236: <unknown object>
         // 237: <unknown object>
         // 238: <unknown object>
         // 239: <unknown object>
         // 240: <unknown object>
         // 241: <unknown object>
         // 242: <unknown object>
         // 243: <unknown object>
         // 244: <unknown object>
         // 245: <unknown object>
         // 246: <unknown object>
         // 247: <unknown object>
         // 248: <unknown object>
         // 249: <unknown object>
         // 250: <unknown object>
         // 251: <unknown object>
         // 252: <unknown object>
         // 253: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      ObjectType objectType0 = ObjectType.getInstance("+zy(\"TM{;Y%v`");
      Boolean boolean0 = new Boolean("+zy(\"TM{;Y%v`");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      LocalVariables localVariables0 = new LocalVariables(91);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(91);
      OperandStack operandStack1 = new OperandStack(91);
      localVariables1.getClone();
      localVariables0.toString();
      localVariables0.merge(localVariables1);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1926);
      LocalVariables localVariables1 = new LocalVariables(1926);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1308);
      operandStack0.push(objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      Frame frame1 = frame0.getClone();
      Pattern.quote("");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Locale locale0 = Locale.GERMANY;
      LRETURN lRETURN0 = new LRETURN();
      frame0.toString();
      FCMPG fCMPG0 = new FCMPG();
      operandStack0.clone();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      L2D l2D0 = new L2D();
      DNEG dNEG0 = new DNEG();
      InstructionList instructionList0 = new InstructionList(aRETURN0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      l2D0.toString();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE(iF_ICMPGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(1930);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1930, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      Frame frame1 = new Frame(1930, 1930);
      IASTORE iASTORE0 = new IASTORE();
      L2D l2D0 = new L2D();
      InstructionList instructionList0 = new InstructionList(iASTORE0);
      SALOAD sALOAD0 = (SALOAD)InstructionConstants.SALOAD;
      instructionList0.insert((Instruction) sALOAD0);
      LOR lOR0 = new LOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1901);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      int int0 = 246;
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(246, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(localVariables0);
      instConstraintVisitor0.setFrame(frame0);
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-116));
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      FNEG fNEG0 = new FNEG();
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1922);
      ObjectType objectType0 = new ObjectType("");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(1922, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.clear();
      LocalVariables localVariables1 = new LocalVariables(1922);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LSHR lSHR0 = new LSHR();
      LocalVariables localVariables0 = new LocalVariables(1);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = new LocalVariables(1);
      localVariables2.merge(localVariables1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("zG)g");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack1 = new OperandStack(1, objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.getClone();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.clone();
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitIFNULL((IFNULL) null);
      I2D i2D0 = new I2D();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DLOAD dLOAD0 = new DLOAD(234);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(dLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("+zy(\"TM{;Y%v`");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      operandStack0.clone();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2L d2L0 = new D2L();
      F2I f2I0 = new F2I();
      F2I f2I1 = new F2I();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE(iF_ICMPLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLE constraint violated: The value at the stack top is not of type 'int', but of type '+zy(\"TM{'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(1878);
      Character.getName(1878);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("ARABIC LETTER BEH WITH SMALL V");
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("ARABIC LETTER BEH WITH SMALL V");
      frame0.toString();
      ARETURN aRETURN0 = new ARETURN();
      OperandStack operandStack1 = new OperandStack(5, objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack1);
      Frame frame2 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame2);
      D2L d2L0 = new D2L();
      Boolean boolean0 = new Boolean("}Cr9l[y");
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      ASTORE aSTORE0 = new ASTORE(2767);
      LSTORE lSTORE0 = new LSTORE(167);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      instConstraintVisitor0.visitJSR((JSR) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(46);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("Current method has return type of '");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      DALOAD dALOAD0 = new DALOAD();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.STRING);
      Frame.setThis(uninitializedObjectType1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      operandStack0.push(uninitializedObjectType1);
      byteArray0[0] = (byte) (-109);
      Boolean boolean0 = new Boolean(false);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor1.setFrame(frame1);
      operandStack0.clone();
      ARETURN aRETURN1 = new ARETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitIFNULL((IFNULL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1930);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1930, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      Frame frame1 = new Frame(1930, 1930);
      IASTORE iASTORE0 = new IASTORE();
      L2D l2D0 = new L2D();
      DNEG dNEG0 = new DNEG();
      InstructionList instructionList0 = new InstructionList(iASTORE0);
      SALOAD sALOAD0 = (SALOAD)InstructionConstants.SALOAD;
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) sALOAD0);
      l2D0.toString();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BASTORE bASTORE0 = new BASTORE();
      LSHR lSHR0 = new LSHR();
      LocalVariables localVariables0 = new LocalVariables(254);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      String string0 = localVariables0.toString();
      ObjectType objectType0 = new ObjectType(string0);
      OperandStack operandStack0 = new OperandStack(254, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FLOAD fLOAD0 = new FLOAD(254);
      fLOAD0.setIndex(254);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      FALOAD fALOAD0 = new FALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT((IFGT) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // 31: <unknown object>
         // 32: <unknown object>
         // 33: <unknown object>
         // 34: <unknown object>
         // 35: <unknown object>
         // 36: <unknown object>
         // 37: <unknown object>
         // 38: <unknown object>
         // 39: <unknown object>
         // 40: <unknown object>
         // 41: <unknown object>
         // 42: <unknown object>
         // 43: <unknown object>
         // 44: <unknown object>
         // 45: <unknown object>
         // 46: <unknown object>
         // 47: <unknown object>
         // 48: <unknown object>
         // 49: <unknown object>
         // 50: <unknown object>
         // 51: <unknown object>
         // 52: <unknown object>
         // 53: <unknown object>
         // 54: <unknown object>
         // 55: <unknown object>
         // 56: <unknown object>
         // 57: <unknown object>
         // 58: <unknown object>
         // 59: <unknown object>
         // 60: <unknown object>
         // 61: <unknown object>
         // 62: <unknown object>
         // 63: <unknown object>
         // 64: <unknown object>
         // 65: <unknown object>
         // 66: <unknown object>
         // 67: <unknown object>
         // 68: <unknown object>
         // 69: <unknown object>
         // 70: <unknown object>
         // 71: <unknown object>
         // 72: <unknown object>
         // 73: <unknown object>
         // 74: <unknown object>
         // 75: <unknown object>
         // 76: <unknown object>
         // 77: <unknown object>
         // 78: <unknown object>
         // 79: <unknown object>
         // 80: <unknown object>
         // 81: <unknown object>
         // 82: <unknown object>
         // 83: <unknown object>
         // 84: <unknown object>
         // 85: <unknown object>
         // 86: <unknown object>
         // 87: <unknown object>
         // 88: <unknown object>
         // 89: <unknown object>
         // 90: <unknown object>
         // 91: <unknown object>
         // 92: <unknown object>
         // 93: <unknown object>
         // 94: <unknown object>
         // 95: <unknown object>
         // 96: <unknown object>
         // 97: <unknown object>
         // 98: <unknown object>
         // 99: <unknown object>
         // 100: <unknown object>
         // 101: <unknown object>
         // 102: <unknown object>
         // 103: <unknown object>
         // 104: <unknown object>
         // 105: <unknown object>
         // 106: <unknown object>
         // 107: <unknown object>
         // 108: <unknown object>
         // 109: <unknown object>
         // 110: <unknown object>
         // 111: <unknown object>
         // 112: <unknown object>
         // 113: <unknown object>
         // 114: <unknown object>
         // 115: <unknown object>
         // 116: <unknown object>
         // 117: <unknown object>
         // 118: <unknown object>
         // 119: <unknown object>
         // 120: <unknown object>
         // 121: <unknown object>
         // 122: <unknown object>
         // 123: <unknown object>
         // 124: <unknown object>
         // 125: <unknown object>
         // 126: <unknown object>
         // 127: <unknown object>
         // 128: <unknown object>
         // 129: <unknown object>
         // 130: <unknown object>
         // 131: <unknown object>
         // 132: <unknown object>
         // 133: <unknown object>
         // 134: <unknown object>
         // 135: <unknown object>
         // 136: <unknown object>
         // 137: <unknown object>
         // 138: <unknown object>
         // 139: <unknown object>
         // 140: <unknown object>
         // 141: <unknown object>
         // 142: <unknown object>
         // 143: <unknown object>
         // 144: <unknown object>
         // 145: <unknown object>
         // 146: <unknown object>
         // 147: <unknown object>
         // 148: <unknown object>
         // 149: <unknown object>
         // 150: <unknown object>
         // 151: <unknown object>
         // 152: <unknown object>
         // 153: <unknown object>
         // 154: <unknown object>
         // 155: <unknown object>
         // 156: <unknown object>
         // 157: <unknown object>
         // 158: <unknown object>
         // 159: <unknown object>
         // 160: <unknown object>
         // 161: <unknown object>
         // 162: <unknown object>
         // 163: <unknown object>
         // 164: <unknown object>
         // 165: <unknown object>
         // 166: <unknown object>
         // 167: <unknown object>
         // 168: <unknown object>
         // 169: <unknown object>
         // 170: <unknown object>
         // 171: <unknown object>
         // 172: <unknown object>
         // 173: <unknown object>
         // 174: <unknown object>
         // 175: <unknown object>
         // 176: <unknown object>
         // 177: <unknown object>
         // 178: <unknown object>
         // 179: <unknown object>
         // 180: <unknown object>
         // 181: <unknown object>
         // 182: <unknown object>
         // 183: <unknown object>
         // 184: <unknown object>
         // 185: <unknown object>
         // 186: <unknown object>
         // 187: <unknown object>
         // 188: <unknown object>
         // 189: <unknown object>
         // 190: <unknown object>
         // 191: <unknown object>
         // 192: <unknown object>
         // 193: <unknown object>
         // 194: <unknown object>
         // 195: <unknown object>
         // 196: <unknown object>
         // 197: <unknown object>
         // 198: <unknown object>
         // 199: <unknown object>
         // 200: <unknown object>
         // 201: <unknown object>
         // 202: <unknown object>
         // 203: <unknown object>
         // 204: <unknown object>
         // 205: <unknown object>
         // 206: <unknown object>
         // 207: <unknown object>
         // 208: <unknown object>
         // 209: <unknown object>
         // 210: <unknown object>
         // 211: <unknown object>
         // 212: <unknown object>
         // 213: <unknown object>
         // 214: <unknown object>
         // 215: <unknown object>
         // 216: <unknown object>
         // 217: <unknown object>
         // 218: <unknown object>
         // 219: <unknown object>
         // 220: <unknown object>
         // 221: <unknown object>
         // 222: <unknown object>
         // 223: <unknown object>
         // 224: <unknown object>
         // 225: <unknown object>
         // 226: <unknown object>
         // 227: <unknown object>
         // 228: <unknown object>
         // 229: <unknown object>
         // 230: <unknown object>
         // 231: <unknown object>
         // 232: <unknown object>
         // 233: <unknown object>
         // 234: <unknown object>
         // 235: <unknown object>
         // 236: <unknown object>
         // 237: <unknown object>
         // 238: <unknown object>
         // 239: <unknown object>
         // 240: <unknown object>
         // 241: <unknown object>
         // 242: <unknown object>
         // 243: <unknown object>
         // 244: <unknown object>
         // 245: <unknown object>
         // 246: <unknown object>
         // 247: <unknown object>
         // 248: <unknown object>
         // 249: <unknown object>
         // 250: <unknown object>
         // 251: <unknown object>
         // 252: <unknown object>
         // 253: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3098;
      LocalVariables localVariables0 = new LocalVariables(3098);
      ObjectType objectType0 = ObjectType.getInstance("m24v@%>@/;");
      OperandStack operandStack0 = new OperandStack(3098, objectType0);
      operandStack0.equals(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      OperandStack operandStack1 = new OperandStack(3098, objectType0);
      AASTORE aASTORE0 = new AASTORE();
      NEW nEW0 = new NEW(3098);
      OperandStack operandStack2 = new OperandStack(3098, objectType0);
      operandStack2.clone();
      L2I l2I0 = new L2I();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type 'm24v@%>@.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1894);
      Character.getName(1894);
      ObjectType objectType0 = ObjectType.getInstance("ARABIC LETTER MEEM WITH DOT BELOW");
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'ARABIC LETTER MEEM WITH DOT BELOW'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1894);
      Character.getName(1894);
      ObjectType objectType0 = new ObjectType("ARABIC LETTER MEEM WITH DOT BELOW");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ARETURN aRETURN1 = new ARETURN();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.toString();
      D2F d2F0 = new D2F();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'ARABIC LETTER MEEM WITH DOT BELOW'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1926);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("~F)g");
      OperandStack operandStack0 = new OperandStack(1926, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      Frame frame1 = new Frame(1926, 1926);
      frame1.toString();
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 4712);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPNE constraint violated: The value at the stack top is not of type 'int', but of type '~F)g'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(1878);
      Character.getName(1878);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("ARABIC LETTER BEH WITH SMALL V");
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      ObjectType.getInstance("3lS=Ye&UpA#\"Pl}G7");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.toString();
      frame0.equals("ARABIC LETTER BEH WITH SMALL V");
      ARETURN aRETURN0 = new ARETURN();
      operandStack0.getClone();
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame frame2 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame2);
      D2L d2L0 = new D2L();
      Boolean boolean0 = new Boolean("5zg");
      ARETURN aRETURN1 = (ARETURN)InstructionConstants.ARETURN;
      ASTORE aSTORE0 = (ASTORE)InstructionConstants.ASTORE_1;
      instConstraintVisitor0.visitLocalVariableInstruction(aSTORE0);
      SWAP sWAP0 = new SWAP();
      sWAP0.toString();
      instConstraintVisitor0.visitSWAP(sWAP0);
      assertEquals("swap", sWAP0.getName());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1937);
      ObjectType objectType0 = new ObjectType("' of size '");
      ObjectType objectType1 = ObjectType.getInstance("' of size '");
      OperandStack operandStack0 = new OperandStack(1937, objectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      ARETURN aRETURN2 = new ARETURN();
      operandStack0.push(objectType0);
      int int0 = Long.BYTES;
      ObjectType.getInstance("-D*s`xM >d");
      Locale locale0 = Locale.US;
      operandStack0.getClone();
      DSTORE dSTORE0 = new DSTORE(1937);
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      ConstantClass constantClass0 = new ConstantClass(8);
      LREM lREM0 = new LREM();
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(1937);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadClass(iNVOKESTATIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1782);
      ObjectType objectType0 = new ObjectType(",E@Suv/Ri{M}B?y");
      ObjectType.getInstance("' of size '");
      OperandStack operandStack0 = new OperandStack(1782, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      frame0.equals(localVariables0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      ARETURN aRETURN2 = new ARETURN();
      operandStack0.push(objectType0);
      int int0 = Character.SIZE;
      ObjectType.getInstance("-D*s`xM >d");
      Locale locale0 = Locale.US;
      OperandStack operandStack1 = new OperandStack(16);
      DSTORE dSTORE0 = new DSTORE(16);
      DUP2 dUP2_0 = new DUP2();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FALOAD fALOAD0 = new FALOAD();
      BasicType basicType0 = Type.LONG;
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      ObjectType.getInstance("-D*s`xM >d");
      Locale locale1 = Locale.PRC;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      DSTORE dSTORE1 = new DSTORE(16);
      instConstraintVisitor0.visitDUP_X1((DUP_X1) null);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(1);
      INVOKEDYNAMIC iNVOKEDYNAMIC1 = new INVOKEDYNAMIC(1782);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("+zy(\"TM{;Y%v`");
      LocalVariables localVariables0 = new LocalVariables(497);
      OperandStack operandStack0 = new OperandStack(497, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(497);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack2 = new OperandStack(100);
      Frame frame1 = new Frame(localVariables1, operandStack2);
      BasicType basicType0 = Type.FLOAT;
      operandStack2.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      ObjectType objectType1 = ObjectType.getInstance("+zy(\"TM{;Y%v`");
      OperandStack operandStack3 = new OperandStack(100, objectType1);
      AASTORE aASTORE0 = new AASTORE();
      ObjectType.getInstance("ACC_SUPER flag\t\t");
      localVariables0.clone();
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(5);
      ASTORE aSTORE0 = new ASTORE(177);
      CHECKCAST cHECKCAST0 = new CHECKCAST(1851);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction CHECKCAST constraint violated: The 'objectref' is not of a ReferenceType but of type float.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("+zy(\"TM{;Y%v`");
      LocalVariables localVariables0 = new LocalVariables(497);
      OperandStack operandStack0 = new OperandStack(497, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(497);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack2 = new OperandStack(100);
      Frame frame1 = new Frame(localVariables1, operandStack2);
      BasicType basicType0 = Type.FLOAT;
      operandStack2.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      ObjectType objectType1 = ObjectType.getInstance("+zy(\"TM{;Y%v`");
      OperandStack operandStack3 = new OperandStack(100, objectType1);
      AASTORE aASTORE0 = new AASTORE();
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      ASTORE aSTORE0 = new ASTORE(100);
      LSTORE lSTORE0 = new LSTORE(134);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(aSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ASTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'float'; Instruction expects a ReferenceType or a ReturnadressType.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(491);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(126, 126);
      OperandStack operandStack0 = new OperandStack(126);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      BasicType basicType0 = Type.FLOAT;
      operandStack0.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      f2D0.produceStack(constantPoolGen0);
      F2D f2D1 = new F2D();
      ASTORE aSTORE0 = new ASTORE(126);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitASTORE(aSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ASTORE constraint violated: The 'objectref' is not of a ReferenceType or of ReturnaddressType but of float.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(497);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(497);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      BasicType basicType0 = Type.FLOAT;
      operandStack0.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      F2D f2D0 = new F2D();
      F2D f2D1 = new F2D();
      instConstraintVisitor0.visitF2D(f2D0);
      localVariables1.clone();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type float.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("+zy(\"TM{;Y%v`");
      LocalVariables localVariables0 = new LocalVariables(497);
      OperandStack operandStack0 = new OperandStack(497, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(497);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack2 = new OperandStack(100);
      Frame frame1 = new Frame(localVariables1, operandStack2);
      BasicType basicType0 = Type.FLOAT;
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      FALOAD fALOAD0 = new FALOAD();
      operandStack0.push(basicType0);
      Locale locale0 = Locale.KOREAN;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      F2I f2I0 = new F2I();
      instConstraintVisitor0.visitF2I(f2I0);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(2166, (short)76);
      mULTIANEWARRAY0.setIndex(100);
      DUP_X2 dUP_X2_0 = new DUP_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1901);
      ObjectType objectType0 = new ObjectType("Stack next-to-top must be of type double[] but is '");
      ObjectType objectType1 = ObjectType.getInstance("Stack next-to-top must be of type double[] but is '");
      OperandStack operandStack0 = new OperandStack(1901, objectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ARETURN aRETURN0 = new ARETURN();
      FALOAD fALOAD0 = new FALOAD();
      operandStack0.push(objectType0);
      int int0 = Long.BYTES;
      Locale locale0 = Locale.US;
      operandStack0.getClone();
      constantPoolGen0.addLong(1901);
      DSTORE dSTORE0 = new DSTORE(1836);
      dSTORE0.setIndex(2056);
      dSTORE0.consumeStack(constantPoolGen0);
      DNEG dNEG0 = new DNEG();
      SASTORE sASTORE0 = new SASTORE();
      SASTORE sASTORE1 = new SASTORE();
      PUTFIELD pUTFIELD0 = new PUTFIELD(1901);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTFIELD(pUTFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1782);
      ObjectType objectType0 = new ObjectType(",E@Suv/Ri{M}B?y");
      ObjectType.getInstance("' of size '");
      OperandStack operandStack0 = new OperandStack(1782, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      frame0.equals(localVariables0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      operandStack0.push(objectType0);
      int int0 = Character.SIZE;
      ObjectType objectType1 = new ObjectType("' of size '");
      OperandStack operandStack1 = new OperandStack(16);
      DSTORE dSTORE0 = new DSTORE(16);
      DUP2 dUP2_0 = new DUP2();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FALOAD fALOAD0 = new FALOAD();
      BasicType basicType0 = Type.LONG;
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      operandStack0.push(returnaddressType0);
      ObjectType.getInstance("-D*s`xM >d");
      Locale locale0 = Locale.PRC;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      DSTORE dSTORE1 = new DSTORE(16);
      dSTORE0.consumeStack(constantPoolGen0);
      DNEG dNEG0 = new DNEG();
      dNEG0.consumeStack(constantPoolGen0);
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARETURN(aRETURN1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARETURN constraint violated: The 'objectref' at the stack top is not of a ReferenceType but of type '<return address>'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("+zy(\"TM{;Y%v`");
      Class<LDC2_W>[] classArray0 = (Class<LDC2_W>[]) Array.newInstance(Class.class, 7);
      Class<LDC2_W> class0 = LDC2_W.class;
      classArray0[0] = class0;
      Class<LDC2_W> class1 = LDC2_W.class;
      classArray0[1] = class1;
      Class<LDC2_W> class2 = LDC2_W.class;
      classArray0[2] = class2;
      Class<LDC2_W> class3 = LDC2_W.class;
      classArray0[3] = class3;
      Class<LDC2_W> class4 = LDC2_W.class;
      classArray0[4] = class4;
      Class<LDC2_W> class5 = LDC2_W.class;
      classArray0[5] = class5;
      classArray0[6] = class0;
      Type.getTypes(classArray0);
      LocalVariables localVariables0 = new LocalVariables(497);
      OperandStack operandStack0 = new OperandStack(497, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(497);
      Frame frame0 = new Frame(126, 126);
      OperandStack operandStack2 = new OperandStack(126);
      Frame frame1 = new Frame(localVariables1, operandStack2);
      BasicType basicType0 = Type.FLOAT;
      operandStack2.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      ObjectType.getInstance("+zy(\"TM{;Y%v`");
      OperandStack operandStack3 = new OperandStack(497, basicType0.CLASS);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MONITOREXIT constraint violated: The stack top should be of a ReferenceType, but is 'float'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("+zy(\"TM{;Y%v`");
      LocalVariables localVariables0 = new LocalVariables(497);
      OperandStack operandStack0 = new OperandStack(497, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(497);
      Frame frame0 = new Frame(126, 126);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      BasicType basicType0 = Type.FLOAT;
      operandStack0.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      ObjectType objectType1 = ObjectType.getInstance("+zy(\"TM{;Y%v`");
      OperandStack operandStack2 = new OperandStack(126, objectType1);
      AASTORE aASTORE0 = new AASTORE();
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      ASTORE aSTORE0 = new ASTORE(126);
      LSTORE lSTORE0 = new LSTORE(126);
      ILOAD iLOAD0 = new ILOAD(207);
      ISTORE iSTORE0 = new ISTORE(47);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack next-to-top is not of type 'float', but of type '+zy(\"TM{'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(491);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(491);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame0 = new Frame(126, 126);
      OperandStack operandStack1 = new OperandStack(126);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      BasicType basicType0 = Type.FLOAT;
      operandStack1.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      f2D0.produceStack(constantPoolGen0);
      F2D f2D1 = new F2D();
      instConstraintVisitor0.visitF2D(f2D1);
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNONNULL constraint violated: The value at the stack top is not of a ReferenceType, but of type 'float'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("+zy(\"TM{;Y%v`");
      LocalVariables localVariables0 = new LocalVariables(487);
      OperandStack operandStack0 = new OperandStack(487);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(487);
      Frame frame0 = new Frame(101, 101);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      BasicType basicType0 = Type.FLOAT;
      operandStack0.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      ObjectType objectType1 = ObjectType.getInstance("+zy(\"TM{;Y%v`");
      OperandStack operandStack2 = new OperandStack(101, objectType1);
      AASTORE aASTORE0 = new AASTORE();
      LRETURN lRETURN0 = new LRETURN();
      ASTORE aSTORE0 = new ASTORE(101);
      LSTORE lSTORE0 = new LSTORE(111);
      int int0 = 207;
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      FASTORE fASTORE0 = new FASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1929);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(3);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      BasicType basicType0 = Type.FLOAT;
      operandStack1.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      ARETURN aRETURN0 = new ARETURN();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Long.BYTES;
      ObjectType.getInstance("?1;D<Ubsm!X=D;Oej");
      Locale locale0 = Locale.US;
      operandStack0.getClone();
      DSTORE dSTORE0 = new DSTORE(4711);
      DUP2 dUP2_0 = new DUP2();
      ARETURN aRETURN1 = new ARETURN();
      DALOAD dALOAD0 = new DALOAD();
      ARETURN aRETURN2 = new ARETURN();
      FRETURN fRETURN0 = new FRETURN();
      instConstraintVisitor0.visitFRETURN(fRETURN0);
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type 'float'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("+zS(\"T|{;Y%v`");
      LocalVariables localVariables0 = new LocalVariables(497);
      OperandStack operandStack0 = new OperandStack(497, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(497);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack2 = new OperandStack(100);
      Frame frame1 = new Frame(localVariables1, operandStack2);
      BasicType basicType0 = Type.FLOAT;
      frame1.toString();
      ARETURN aRETURN0 = new ARETURN();
      FALOAD fALOAD0 = new FALOAD();
      operandStack0.push(basicType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      F2I f2I0 = new F2I();
      instConstraintVisitor0.visitF2I(f2I0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Long.BYTES;
      ObjectType.getInstance("m&8");
      instConstraintVisitor0.visitF2L((F2L) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BASTORE bASTORE0 = new BASTORE();
      LocalVariables localVariables0 = new LocalVariables(1919);
      OperandStack operandStack0 = new OperandStack(1870);
      OperandStack operandStack1 = new OperandStack(1919);
      operandStack1.getClone();
      BasicType basicType0 = Type.DOUBLE;
      operandStack1.push(basicType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      String string0 = frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      operandStack1.getClone();
      ACONST_NULL aCONST_NULL1 = new ACONST_NULL();
      MockFile mockFile0 = new MockFile(string0);
      instConstraintVisitor0.setFrame(frame0);
      POP2 pOP2_0 = new POP2();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      D2I d2I0 = new D2I();
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("+zy(\"TM{;Y%v`");
      LocalVariables localVariables0 = new LocalVariables(497);
      OperandStack operandStack0 = new OperandStack(497, objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(497);
      Frame frame0 = new Frame(134, 134);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      BasicType basicType0 = Type.FLOAT;
      operandStack0.push(basicType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      ObjectType objectType1 = ObjectType.getInstance("+zy(\"TM{;Y%v`");
      OperandStack operandStack2 = new OperandStack(134, objectType1);
      AASTORE aASTORE0 = new AASTORE();
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      ASTORE aSTORE0 = new ASTORE(134);
      LSTORE lSTORE0 = new LSTORE(134);
      ILOAD iLOAD0 = new ILOAD(171);
      ISTORE iSTORE0 = new ISTORE(47);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      FSUB fSUB0 = new FSUB();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ATHROW constraint violated: The 'objectref' is not of an (initialized) ObjectType but of type float.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
