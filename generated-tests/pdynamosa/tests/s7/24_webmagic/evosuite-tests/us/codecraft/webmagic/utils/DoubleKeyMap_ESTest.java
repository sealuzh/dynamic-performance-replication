/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 15:47:21 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Integer>();
      Map<Integer, HashMap<String, Object>> map0 = doubleKeyMap0.newMap();
      HashMap<HashMap<String, Map<Object, String>>, Map<String, Object>> hashMap0 = new HashMap<HashMap<String, Map<Object, String>>, Map<String, Object>>();
      DoubleKeyMap<HashMap<String, Map<Object, String>>, String, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Map<Object, String>>, String, Object>(hashMap0);
      HashMap<String, Map<Object, String>> hashMap1 = new HashMap<String, Map<Object, String>>();
      doubleKeyMap1.put(hashMap1, "us.codecraft.webmagic.utils.DoubleKeyMap", (Object) map0);
      doubleKeyMap1.remove(hashMap1, "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>();
      HashMap<Map<Object, String>, Map<Object, HashMap<String, Integer>>> hashMap0 = new HashMap<Map<Object, String>, Map<Object, HashMap<String, Integer>>>();
      DoubleKeyMap<String, HashMap<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Object, Object>, String>();
      Map<Object, HashMap<String, Integer>> map0 = doubleKeyMap1.newMap();
      Map<Object, String> map1 = doubleKeyMap0.newMap();
      hashMap0.put(map1, map0);
      DoubleKeyMap<Map<Object, String>, Object, HashMap<String, Integer>> doubleKeyMap2 = new DoubleKeyMap<Map<Object, String>, Object, HashMap<String, Integer>>(hashMap0, class0);
      Map<Object, HashMap<String, Integer>> map2 = doubleKeyMap2.remove(map1);
      assertTrue(map2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Integer>();
      DoubleKeyMap<Map<Object, String>, Map<Object, String>, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, String>, Map<Object, String>, Integer>((Map<Map<Object, String>, Map<Map<Object, String>, Integer>>) null);
      Map<Map<Object, String>, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Map<Object, String>, Object, Object>(map0, class0);
      Object object0 = doubleKeyMap2.remove((Map<Object, String>) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Integer>();
      HashMap<Object, Map<Map<Object, String>, Object>> hashMap0 = new HashMap<Object, Map<Map<Object, String>, Object>>();
      DoubleKeyMap<Object, Map<Object, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, String>, Object>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Map<Object, String>) hashMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
      Map<Integer, Object> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<Object, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, String>>>();
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>(hashMap0, class0);
      Object object0 = new Object();
      Map<Object, HashMap<Object, String>> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(map0);
      Object object0 = doubleKeyMap1.put(integer0, (Object) "TrGzB4>KM6`Y/>", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<String, String>>();
      Map<HashMap<Object, Integer>, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, Integer>, Integer, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, Integer, String>(map0);
      Map<Integer, Map<Object, Integer>> map1 = doubleKeyMap1.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Integer>(map1, class0);
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap2.put(integer0, (Object) doubleKeyMap1, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      String string0 = doubleKeyMap0.put((Integer) null, (Integer) null, "ST,8E(");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Map<Integer, Map<Object, String>>> hashMap0 = new HashMap<String, Map<Integer, Map<Object, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Object, String>>(hashMap0, class0);
      Map<Object, String> map0 = doubleKeyMap0.get("", (Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, Integer, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, Object>>(class0);
      HashMap<Integer, Object> hashMap0 = doubleKeyMap0.get((Integer) null, integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<String, String>, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, String>, Map<Object, String>>();
      Map<HashMap<String, String>, Map<Object, String>> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Map<Integer, Object>> hashMap0 = new HashMap<Integer, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(hashMap0, class0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, integer0, (Object) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Map<Object, Integer> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, HashMap<String, Map<Object, String>>, HashMap<String, Map<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, HashMap<String, Map<Object, String>>, HashMap<String, Map<Object, String>>>();
      HashMap<Object, Map<Object, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, String>>>();
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>(hashMap0);
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      HashMap<String, Map<Object, String>> hashMap1 = new HashMap<String, Map<Object, String>>();
      doubleKeyMap0.put(map0, hashMap1, hashMap1);
      HashMap<String, Map<Object, String>> hashMap2 = doubleKeyMap0.remove(map0, hashMap1);
      assertSame(hashMap2, hashMap1);
      assertNotNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, HashMap<String, Map<Object, String>>, HashMap<String, Map<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, HashMap<String, Map<Object, String>>, HashMap<String, Map<Object, String>>>();
      HashMap<Object, Map<Object, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, String>>>();
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>(hashMap0);
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      HashMap<String, Map<Object, String>> hashMap1 = new HashMap<String, Map<Object, String>>();
      HashMap<String, Map<Object, String>> hashMap2 = doubleKeyMap0.put(map0, hashMap1, hashMap1);
      HashMap<String, Map<Object, String>> hashMap3 = doubleKeyMap0.remove(map0, hashMap2);
      assertNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Integer>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Integer integer0 = new Integer(2760);
      doubleKeyMap1.put((Object) doubleKeyMap0, "", (Object) integer0);
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, "6O", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Integer>();
      HashMap<HashMap<Integer, Integer>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Integer, Integer>, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Integer>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, String>(hashMap0, class0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      String string0 = doubleKeyMap1.get(hashMap1, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Integer>();
      DoubleKeyMap<Object, String, HashMap<Integer, Map<Object, String>>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Integer, Map<Object, String>>>();
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      doubleKeyMap1.put((Object) doubleKeyMap0, "", hashMap0);
      HashMap<Integer, Map<Object, String>> hashMap1 = doubleKeyMap1.get((Object) doubleKeyMap0, "/4(_, {ID");
      assertNull(hashMap1);
  }
}
