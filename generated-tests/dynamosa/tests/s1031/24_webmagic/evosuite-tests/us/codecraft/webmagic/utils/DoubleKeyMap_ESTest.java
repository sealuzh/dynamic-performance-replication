/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 02:15:46 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>>();
      DoubleKeyMap<Integer, String, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Map<Object, Integer>>();
      Map<Object, Integer> map0 = doubleKeyMap1.newMap();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(map0, hashMap0, hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap2 = doubleKeyMap0.remove((Map<Object, Integer>) hashMap1, hashMap1);
      assertSame(hashMap2, hashMap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>>();
      DoubleKeyMap<Integer, String, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Map<Object, Integer>>();
      Map<Object, Integer> map0 = doubleKeyMap1.newMap();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(map0, hashMap0, hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap2 = doubleKeyMap0.remove((Map<Object, Integer>) hashMap0, hashMap1);
      assertSame(hashMap2, hashMap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, String>>((Map<String, Map<String, Map<Object, String>>>) null);
      DoubleKeyMap<HashMap<Integer, String>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, String>, Integer, Integer>((Map<HashMap<Integer, String>, Map<Integer, Integer>>) null);
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put("B:KL2I?O*p8fJ1Nb", "", map0);
      Map<String, Map<Object, String>> map1 = doubleKeyMap0.remove("B:KL2I?O*p8fJ1Nb");
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      doubleKeyMap0.put((Map<Object, Integer>) hashMap0, hashMap1, "L*dxntBr");
      Map<HashMap<Object, Object>, String> map0 = doubleKeyMap0.get((Map<Object, Integer>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Map<String, HashMap<Integer, Map<Object, Integer>>>> hashMap0 = new HashMap<Integer, Map<String, HashMap<Integer, Map<Object, Integer>>>>();
      DoubleKeyMap<Integer, String, HashMap<Integer, Map<Object, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, HashMap<Integer, Map<Object, Integer>>>(hashMap0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(map0);
      Object object0 = doubleKeyMap2.remove("", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.remove((Map<Object, Integer>) null, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, String, Integer>();
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(hashMap0);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, ")e8p =*p H}9R-");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Integer>, Object>((Map<String, Map<Map<Object, Integer>, Object>>) null);
      Map<Map<Object, Integer>, Object> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      DoubleKeyMap<Object, Object, Map<Map<Object, Integer>, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Map<Object, Integer>, Object>>();
      Map<Object, Map<Map<Object, Integer>, Object>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, String>>((Map<String, Map<String, Map<Object, String>>>) null);
      Map<Object, String> map0 = doubleKeyMap0.put("wrong proto type map ", "B:KL2I?O*p8fJ1Nb", (Map<Object, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, String, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, Integer>>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, String, Map<Object, Integer>>();
      Map<Object, Integer> map1 = doubleKeyMap1.put(")}VQZmuwBn,xc~p1", (String) null, map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<String, Object, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<Object, Integer>>();
      DoubleKeyMap<Integer, String, Map<Object, Integer>> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Map<Object, Integer>>((Map<Integer, Map<String, Map<Object, Integer>>>) null);
      Map<Object, Integer> map0 = doubleKeyMap2.newMap();
      Map<Object, Integer> map1 = doubleKeyMap1.put("", (Object) doubleKeyMap0, map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, String, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, Integer>>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, String, Map<Object, Integer>>();
      Map<Object, Integer> map1 = doubleKeyMap1.put((String) null, "", map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, String, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, Integer>>();
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, (Object) integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0, class0);
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(map0);
      String string0 = doubleKeyMap1.get((Object) "", (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, String, String>();
      String string0 = doubleKeyMap0.get((Map<Object, Integer>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Object, HashMap<Object, Map<Object, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Object, HashMap<Object, Map<Object, Integer>>>();
      Map<Object, HashMap<Object, Map<Object, Integer>>> map0 = doubleKeyMap0.get((Map<Object, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(map0);
      Map<String, Integer> map1 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      Integer integer0 = new Integer(49);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) map0, (Object) integer0, (Object) map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put((Map<Object, Integer>) hashMap0, hashMap0, hashMap0);
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.remove((Map<Object, Integer>) hashMap0, (HashMap<Object, Integer>) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put((Map<Object, Integer>) hashMap0, hashMap0, hashMap0);
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.put((Map<Object, Integer>) hashMap0, hashMap0, hashMap0);
      assertSame(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Map<String, Map<Object, String>>> hashMap0 = new HashMap<String, Map<String, Map<Object, String>>>();
      DoubleKeyMap<String, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, String>>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.put("", "", (Map<Object, String>) hashMap1);
      doubleKeyMap0.get("", "x7MAJ*VgfR0RK$");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Object>, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<Object, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, Integer>>((Map<String, Map<Object, Map<Object, Integer>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
