/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 07:39:05 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 10L);
      JSONObject.quote(".");
      JSONObject.valueToString(jSONObject1);
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove((String) null);
      jSONObject0.optLong(".");
      Double double0 = new Double(10L);
      JSONObject.valueToString(double0);
      try { 
        jSONObject0.getJSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 59;
      JSONObject.valueToString((Object) null, 59, 59);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("9nyqI'", true);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("9nyqI'", (Collection) linkedList0);
      jSONObject0.optString("null");
      JSONObject jSONObject2 = jSONObject1.put("null", (-20L));
      JSONObject jSONObject3 = jSONObject2.putOpt("", (Object) null);
      String string0 = "6{M/JB?<'LY!xmGz'{";
      linkedList0.toArray();
      jSONObject0.accumulate("6{M/JB?<'LY!xmGz'{", jSONObject1);
      StringWriter stringWriter0 = new StringWriter(59);
      // Undeclared exception!
      jSONObject3.write(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      jSONArray0.put((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = JSONObject.valueToString(hashMap0, 8192, 8192);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":[],\"java.lang.String@0000000007\":\"java.lang.Class@0000000008\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      // Undeclared exception!
      jSONObject0.toString(3153, 3153);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.put("?hG#%MmAwY4O*f$", 0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("null");
      assertEquals(0L, long0);
      
      jSONObject0.optLong("null", (-648L));
      JSONObject jSONObject1 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertNotNull(string0);
      
      String string1 = JSONObject.doubleToString((-648L));
      assertEquals("-648", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      
      long long0 = jSONObject1.optLong(",\n", 954L);
      assertEquals(954L, long0);
      
      JSONObject.getNames((Object) null);
      String string1 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ".";
      jSONObject0.has(".");
      JSONObject.quote(".");
      jSONObject0.optBoolean("\".\"");
      String string1 = ",:]}/\\\"[{;=#";
      jSONObject0.optLong("] is not a JSONArray.", 0L);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "] is not a JSONArray.");
      JSONObject.doubleToString((-1992.6));
      stringWriter1.append((CharSequence) "-1992.6", 0, 0);
      String string2 = "V@";
      JSONTokener jSONTokener0 = new JSONTokener("V@");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of V@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROK90RSZ", 0L);
      jSONObject0.optInt("ROK90RSZ");
      JSONObject.valueToString(jSONObject1, 0, (-3650));
      jSONObject1.getLong("ROK90RSZ");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      Short short0 = new Short((short) (-1495));
      JSONObject.valueToString(jSONObject0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      Float.max(1477.7966F, (-1820.597F));
      JSONObject.valueToString(float0, 1253, 43);
      JSONObject jSONObject0 = new JSONObject();
      Float.max(43, 1253);
      Short short0 = new Short((short)1539);
      JSONObject.valueToString(short0, 1253, 43);
      Byte.toUnsignedLong((byte)110);
      JSONObject jSONObject1 = jSONObject0.accumulate("Kd+[_6Pd?s14>", "java.lang.Short@0000000003");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      jSONObject1.optDouble("?", (-2677.5932));
      String string0 = null;
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.optJSONArray((String) null);
      jSONObject0.toString(43);
      try { 
        jSONObject1.getJSONObject("Kd+[_6Pd?s14>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Kd+[_6Pd?s14>\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONArray.";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optString("] is not a JSONArray.");
      jSONObject1.optDouble("");
      jSONObject1.keys();
      jSONObject0.optString("o36?<gt_Qdh`I");
      int int0 = 1005;
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject1.accumulate("] is not a JSONArray.", (Object) null);
      JSONObject jSONObject4 = jSONObject3.accumulate("o36?<gt_Qdh`I", "o36?<gt_Qdh`I");
      jSONObject4.remove("U}O");
      try { 
        jSONObject3.getDouble("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = JSONObject.quote("J`x/IR63z{;;xZB");
      assertEquals("\"J`x/IR63z{;;xZB\"", string0);
      
      Long long0 = new Long((-680L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "\"J`x/IR63z{;;xZB\"";
      stringArray0[2] = "\"J`x/IR63z{;;xZB\"";
      stringArray0[3] = "\"J`x/IR63z{;;xZB\"";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "\"J`x/IR63z{;;xZB\"");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" iz{9m7X.X5)");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of  iz{9m7X.X5)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("<El%@1'$Qj", jSONArray0);
      try { 
        jSONObject1.getBoolean("<El%@1'$Qj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<El%@1'$Qj\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1508.081056);
      assertEquals("1508.081056", string0);
      
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("1508.081056", 1060);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.has("1508.081056");
      Float float0 = new Float((float) 1060);
      Float.sum((-780.94F), 0.0F);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("istrim", "sp");
      jSONObject1.optInt("qNX:dy8+~.r0M36");
      jSONObject0.toString(1190);
      jSONObject0.optString("{\"java.lang.String@0000000004\": [\"java.lang.String@0000000004\"]}", "n(");
      jSONObject0.opt("wheel.json.JSONObject");
      try { 
        jSONObject1.getDouble("n(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "va";
      JSONObject.valueToString(object0);
      try { 
        jSONObject0.put((String) null, 2198.7781167044823);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
      
      jSONObject0.accumulate("", iterator0);
      try { 
        jSONObject0.get("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONTokener", (-1030.2222757976522));
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      long long0 = jSONObject1.optLong("wheel.json.JSONTokener", 794L);
      assertEquals(794L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "{\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      assertEquals(1, stringArray0.length);
      
      String string0 = JSONObject.quote("Expected a ':' after a key");
      assertEquals("\"Expected a ':' after a key\"", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 2295.759405461);
      double double0 = jSONObject1.getDouble("");
      assertEquals(2295.759405461, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "-";
      String string1 = "hKGc\"8xOOH";
      try { 
        jSONObject0.getJSONObject("hKGc\"8xOOH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hKGc\\\"8xOOH\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = null;
      jSONObject0.optLong((String) null, 2130L);
      try { 
        jSONObject0.accumulate((String) null, "\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = 1477.7966F;
      Float float1 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "isvalueOf";
      boolean boolean0 = new Boolean("isvalueOf");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.toString(92);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = 1477.7966F;
      Float float1 = new Float(1477.7966F);
      Float.max(1477.7966F, (-1820.597F));
      JSONObject.valueToString(float1, 1253, 43);
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = (byte)110;
      Float.max(43, 1253);
      Short short0 = new Short((short)1539);
      JSONObject.valueToString(short0, 1253, 43);
      Byte byte1 = new Byte((byte)110);
      Byte.toUnsignedLong((byte)110);
      jSONObject0.accumulate("java.lang.Float@0000000001", byte1);
      JSONObject.getNames(jSONObject0);
      String string0 = " of ";
      jSONObject0.optDouble(" of ", (double) 43);
      jSONObject0.optJSONArray((String) null);
      jSONObject0.toString((-161));
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", (Object) "JSONArray initial value should be a string or collection or array.");
      try { 
        jSONObject0.getJSONObject("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("2", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      JSONObject.valueToString(jSONObject0);
      JSONObject.valueToString(jSONObject1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".";
      stringArray0[1] = "wheel.json.JSONObject@0000000001";
      stringArray0[2] = "getequals";
      stringArray0[3] = "\t";
      stringArray0[4] = "getfloatToIntBits";
      stringArray0[5] = "wheel.json.JSONObject@0000000001";
      stringArray0[6] = ".";
      stringArray0[7] = "isvalueOf";
      stringArray0[8] = "wheel.json.JSONObject@0000000001";
      JSONObject jSONObject2 = new JSONObject("%/n@&9O&HJAq*-$", stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ROK90RSZ", 2399);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("ROK90RSZ", (Collection) linkedList0);
      Integer integer0 = new Integer(891);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject1.length());
      
      String string0 = JSONObject.quote("ROK90RSZ");
      assertEquals("\"ROK90RSZ\"", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, (-2093064), (-2093064));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject.quote("JCx/IR63z{;;xZB");
      Long long0 = new Long((-680L));
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject();
      long long1 = new Integer(1349);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames((Object) "\"JCx/IR63z{;;xZB\"");
      Short short0 = new Short((short) (-2490));
      JSONObject jSONObject2 = jSONObject1.putOpt((String) null, short0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONArray jSONArray0 = new JSONArray();
      String string1 = "";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1Aa#}i5h;/");
      jSONObject0.toString((-2094), (-2094));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(1520, 1520);
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove("%/n@&9O&HJAq*-$");
      jSONObject0.optLong((String) null);
      Double double0 = new Double(1520);
      JSONObject.valueToString(object0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("EK;?gfKjFrFzU9Y6I", "%/n@&9O&HJAq*-$");
      jSONObject0.keys();
      hashMap0.put("{", "null");
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(0);
      jSONObject0.optString("EK;?gfKjFrFzU9Y6I", (String) null);
      JSONObject jSONObject1 = new JSONObject((Object) "{");
      jSONObject1.opt((String) null);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"U6UO");
      JSONObject.valueToString("\"U6UO", 338, 338);
      int int0 = (-3181);
      jSONObject0.optInt("\"U6UO", (-3181));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("2228.40", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("2228.40");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2228.40\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "wheel.json.JSONObject@0000000001");
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "toS";
      Boolean.compare(false, true);
      Boolean.logicalOr(true, true);
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "8-9dCDPB=";
      stringArray0[4] = "Lg@3l0e>";
      stringArray0[5] = "jAUN(H?,@KW|=\"v`!S";
      stringArray0[6] = "eb?\u0000w(o^~l+5motV^";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      boolean boolean1 = jSONObject0.isNull("");
      assertTrue(boolean1);
      
      String[] stringArray1 = JSONObject.getNames((Object) "eb?\u0000w(o^~l+5motV^");
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("JSONObject[");
      jSONObject0.optBoolean((String) null);
      JSONObject.valueToString(jSONObject0, (-468), (-468));
      JSONObject jSONObject1 = new JSONObject();
      Float.max((-468), (-468));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("{}", "\"JSONObject[\"");
      jSONObject1.keys();
      hashMap0.put(",\n", (String) null);
      jSONObject0.optInt("");
      jSONObject0.toString((-3332));
      jSONObject1.optString(">hm9aoLO", "<\u0006H-Yg84 $,GyS");
      jSONObject0.opt(">hm9aoLO");
      JSONObject jSONObject2 = jSONObject0.put("Expected a ':' after a key", false);
      String string0 = "\\u";
      try { 
        jSONObject2.getDouble(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long((-1L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      Long long0 = new Long((-680L));
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject(long0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"J`x/IR63z{;;xZB\"");
      jSONObject0.write(stringWriter1);
      jSONObject0.optDouble("0w\";wWY", (double) 1349);
      jSONObject0.toString(1822);
      Object object0 = JSONObject.NULL;
      jSONObject0.optBoolean("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", true);
      Object object1 = JSONObject.NULL;
      JSONObject.getNames((Object) stringWriter1);
      String string0 = "SrdC";
      jSONObject0.optJSONObject("SrdC");
      Short short0 = new Short((short)32);
      Byte byte0 = new Byte((byte)116);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("kW]7g/#[r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of kW]7g/#[r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      Float.max(1477.7966F, (-1820.597F));
      String string0 = JSONObject.valueToString(float0, 1253, 43);
      JSONObject jSONObject0 = new JSONObject();
      Float.max(43, 1253);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.lang.Float@0000000001", "java.lang.Float@0000000001");
      jSONObject0.keys();
      int int0 = jSONObject0.optInt(",\n");
      assertEquals(0, int0);
      
      String string1 = jSONObject0.toString(1253);
      assertEquals("{}", string1);
      
      String string2 = jSONObject0.optString("java.lang.Float@0000000001", "jo$i");
      assertFalse(string2.equals((Object)string0));
      
      jSONObject0.opt("*4{^d-Ix85_Yl");
      boolean boolean0 = jSONObject0.isNull("9NvGyS+$fmv]$Uj7_q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", (-1.0));
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
      
      JSONObject.valueToString("null");
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.String@0000000001\"");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      long long0 = jSONObject1.optLong("null");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("hsw%4F/v(T");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of hsw%4F/v(T
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{|}T=z2$v");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {|}T=z2$v
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", 0.0);
      jSONObject0.getDouble("false");
      try { 
        jSONObject0.getDouble(";lF!aR:wA-{UKt~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";lF!aR:wA-{UKt~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer((-1599));
      String string0 = JSONObject.valueToString(linkedList0, (-1), (-1));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("dx.", 0L);
      jSONObject0.toString((-461), 18);
      JSONObject.quote("dx.");
      JSONObject.valueToString(jSONObject1);
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove((String) null);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toString();
      jSONObject1.toString(0, 0);
      try { 
        jSONObject2.getJSONArray("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      JSONObject.valueToString(jSONObject1, 908, (-3663));
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.quote("wheel.json.JSONObject@0000000001");
      JSONObject.getNames(jSONObject2);
      jSONObject2.opt("'j");
      jSONObject1.optString("I1X|Q*&Wna)t5JlF1");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("get", "get");
      jSONObject1.toString(2445, 700);
      jSONObject1.putOpt("get", jSONObject0);
      Short short0 = new Short((short) (-1495));
      Object object0 = new Object();
      jSONObject0.getJSONObject("get");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optJSONObject("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
      Object object1 = jSONObject1.opt("false");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("e`|PLwe?K%;z}*9Wl", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      Long long0 = new Long((-680L));
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject(long0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"J`x/IR63z{;;xZB\"");
      jSONObject0.write(stringWriter1);
      Short short0 = new Short((short)60);
      JSONObject.valueToString("\"J`x/IR63z{;;xZB\"", 32, 1349);
      Byte byte0 = new Byte((byte)107);
      Byte.toUnsignedLong((byte)93);
      JSONObject jSONObject1 = new JSONObject((Object) "X]?~6erK^EO");
      JSONObject.getNames(jSONObject1);
      jSONObject0.optDouble("E|,", (double) (byte)93);
      jSONObject1.optJSONArray((String) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((byte)93);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>(1349, (byte)93);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "JSONArray[";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of JSONArray[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("2228.480", (Collection) linkedList0);
      boolean boolean0 = jSONObject1.isNull("2228.480");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(2692.152505539015);
      hashMap0.put((Double) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "r*m=2hW0#6G47WD";
      int int0 = (-812);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-812), 2448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject.doubleToString(318.535260009);
      JSONObject jSONObject0 = new JSONObject((Object) "318.535260009");
      jSONObject0.put("9I", (Object) "9I");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1649, 1649);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("ggmt", "ggmt");
      JSONObject.getNames((Object) jSONObject0);
      String string0 = jSONObject1.optString("ggmt");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put(",\n", ",\n");
      jSONObject0.keys();
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      hashMap0.put("^!,3psy*[yFWj/", "");
      jSONObject1.optInt("000");
      jSONObject1.toString(0);
      jSONObject1.optString("^!,3psy*[yFWj/", "");
      Object object0 = jSONObject1.opt("wheel.json.JSONObject");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optDouble("", (-1490.0));
      JSONObject.valueToString((Object) null, 0, 0);
      try { 
        jSONObject0.getDouble("B?eD{Rt,g;_>`tHW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B?eD{Rt,g;_>`tHW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.accumulate("ggmt", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("ggmt");
      assertTrue(boolean1);
      
      Float float0 = new Float(1.0);
      JSONObject jSONObject2 = new JSONObject(float0);
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(1520);
      JSONObject.valueToString(object0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(",+Q88 ;J!^w", "null");
      hashMap0.put("EK;?gfKjFrFzU9Y6I", "%/n@&9O&HJAq*-$");
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Object) "{");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("fo", (int) (byte)0);
      String string0 = "Gg[Sle\\Hj!AL6";
      Float float0 = new Float((float) 1060);
      Float float1 = new Float((-477.051665));
      hashMap0.put("Gg[SleHj!AL6", float1);
      String string1 = "$5BPnM3_uo";
      jSONObject0.optDouble("$5BPnM3_uo");
      jSONObject0.names();
      try { 
        jSONObject0.getBoolean("Gg[SleHj!AL6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Gg[SleHj!AL6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("ROdK90RZ", 0L);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK90RZ");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("\"o6+E'C", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("\"o6+E'C");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getaddLast", 0);
      jSONObject0.optDouble("getaddLast");
      JSONObject jSONObject1 = jSONObject0.accumulate("QNV7", "QNV7");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("] is not a JSONObject.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "eL.Cn~e<Sqy#Up*^{}i";
      jSONObject0.optInt("eL.Cn~e<Sqy#Up*^{}i", 74);
      String string1 = "9('^9`U";
      Float float0 = new Float((float) 74);
      JSONObject jSONObject1 = jSONObject0.append("9('^9`U", float0);
      jSONObject1.has("");
      Float float1 = new Float(731.2997F);
      Float.sum(0.0F, 2077.3F);
      hashMap0.put("eL.Cn~e<Sqy#Up*^{}i", float1);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>(linkedList1);
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super JSONObject>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("tAg8HyagZ`P*4ADT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tAg8HyagZ`P*4ADT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("ROdK9RZ", 908L);
      int int0 = 1520;
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(1520, 1520);
      int int1 = (-3663);
      jSONObject0.toString((-3663), (-3663));
      jSONObject0.toString();
      try { 
        jSONObject0.get("M~oH/1w<Qp@`jv.;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M~oH/1w<Qp@`jv.;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.put("{}", (Object) "{}");
      jSONObject0.remove("] is not a JSONArray.");
      try { 
        jSONObject0.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      assertEquals(2, jSONObject0.length());
      
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)70);
      JSONObject.valueToString(byte0);
      jSONObject0.put("java.lang.Byte@0000000002", (Object) byte0);
      jSONObject0.getInt("java.lang.Byte@0000000002");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "ap");
      assertEquals(1, stringArray0.length);
      
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put((JSONObject) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      String string1 = jSONObject0.optString("ap");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "get";
      jSONObject0.accumulate("get", "get");
      Short short0 = new Short((short) (-1495));
      Object object0 = new Object();
      try { 
        jSONObject0.append("get", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[get] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",\n", 0L);
      JSONObject.getNames(jSONObject0);
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("isvalueOf", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("isvalueOf");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1545.2F);
      JSONObject jSONObject1 = new JSONObject(float0);
      jSONObject1.names();
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("in", (Object) "*%");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("UKEhfZl,(Z", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(Double.NaN);
      Double.sum((-249.736), 0.0);
      try { 
        jSONObject1.putOpt("] is not a JSONObject.", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = Boolean.valueOf("ggmt");
      Boolean.compare(false, false);
      jSONObject0.accumulate("ggmt", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("ggmt");
      assertFalse(boolean1);
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.quote("nu");
      Long long0 = new Long((-680L));
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject((Object) "\"nu\"");
      stringWriter0.append((CharSequence) "nu");
      jSONObject0.write(stringWriter0);
      String string0 = "xz[qq#Bo@";
      jSONObject0.optDouble("xz[qq#Bo@", 505.19);
      JSONObject.valueToString("nu", 1349, 127);
      String string1 = "] is not a Boolean.";
      try { 
        jSONObject0.getDouble("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      Long long0 = new Long((-680L));
      int int0 = 1349;
      StringWriter stringWriter0 = new StringWriter(1349);
      String string0 = "' and instead saw '";
      String string1 = "R?!*y";
      String[] stringArray0 = new String[16];
      stringArray0[0] = "\"J`x/IR63z{;;xZB\"";
      stringArray0[1] = ")&/:";
      stringArray0[2] = "' and instead saw '";
      stringArray0[3] = "' and instead saw '";
      stringArray0[4] = "R?!*y";
      stringArray0[5] = "J`x/IR63z{;;xZB";
      stringArray0[6] = "R?!*y";
      stringArray0[7] = "] is not a JSONObject.";
      JSONObject jSONObject0 = new JSONObject("R?!*y", stringArray0);
      try { 
        jSONObject0.getLong(")&/:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")&/:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("s");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float((-802.440039050683));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONArray("");
      String string0 = "getsubstring";
      Float.min(63.9F, (-1035.0162F));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("getsubstring", (Collection) linkedList0);
      String string1 = "gD)";
      linkedList0.add((JSONArray) null);
      jSONObject1.optBoolean("getsubstring", true);
      Short short0 = new Short((short)92);
      jSONObject1.append("gD)", short0);
      JSONObject jSONObject2 = jSONObject0.put("", 1245.80424495);
      JSONObject jSONObject3 = jSONObject0.putOpt("", "");
      jSONObject2.toString();
      JSONObject.doubleToString(0.0);
      jSONObject2.optJSONObject("7ro:y;?<");
      JSONObject.testValidity(jSONObject3);
      jSONObject3.optBoolean("0");
      String string2 = "Missing value";
      try { 
        jSONObject2.getJSONArray("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(83);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject.quote("JCx/IR63z{;;xZB");
      Long long0 = new Long((-103L));
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("JCx/IR63z{;;xZB", "JCx/IR63z{;;xZB");
      int int0 = new Integer(1349);
      jSONObject0.toString(8);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject.getNames(object1);
      JSONObject.testValidity(object0);
      jSONObject0.optJSONObject("JCx/IR63z{;;xZB");
      Short short0 = new Short((short)32);
      Byte byte0 = new Byte((byte)116);
      JSONObject jSONObject1 = jSONObject0.accumulate("get", byte0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", true);
      int int0 = 3297;
      short short0 = (short) (-1495);
      jSONObject0.remove("Bad value from toJSONString: ");
      String string1 = "Bad value from toJSONString: ";
      jSONObject1.optLong("Bad value from toJSONString: ");
      Double double0 = new Double(0.0);
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject0.getJSONObject("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(10);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.containsAll(linkedList1);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject.doubleToString(3622.111501729189);
      JSONTokener jSONTokener0 = new JSONTokener("U6t+p4l`FXG_/rp");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of U6t+p4l`FXG_/rp
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "'B/^");
      JSONObject jSONObject0 = new JSONObject("'B/^", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) "{}");
      jSONObject1.names();
      try { 
        jSONObject1.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "m\"x");
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.accumulate("m\"x", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("m\"x");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.valueToString("Expecteda ':'after a Iey", 102, 102);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(939.0F);
      JSONObject jSONObject1 = jSONObject0.put("SKAQvt|4^e%pN>N$O?}", (Object) float0);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.optString("SKAQvt|4^e%pN>N$O?}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("dx.");
      JSONObject jSONObject1 = jSONObject0.put("dx.", 0L);
      jSONObject1.get("dx.");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.append("s5u", (Object) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("&G_", 1062L);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      long long0 = jSONObject0.getLong("&G_");
      assertEquals(1062L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(1520, 1520);
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove("%/n@&9O&HJAq*-$");
      jSONObject0.optLong((String) null);
      Double double0 = new Double(1520);
      JSONObject.valueToString(object0);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject@0000000001");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("_JS|g%5#>VB5", 2760.8677238493124);
      double double0 = jSONObject0.optDouble("_JS|g%5#>VB5");
      assertEquals(2760.8677238493124, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JSONObject[";
      jSONObject0.put("JSONObject[", (-1402L));
      String string1 = "isequals";
      jSONObject0.optInt("isequals", 46);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "'B/^0");
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      jSONObject0.put("'B/^0", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("u-ajd_c|pi", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("get", 0.0);
      String string0 = "get";
      jSONObject0.accumulate("get", "get");
      short short0 = (short) (-1495);
      try { 
        jSONObject0.getBoolean("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("ggmt", "ggmt");
      boolean boolean0 = new Boolean("ggmt");
      jSONObject0.accumulate("ggmt", "ggmt");
      JSONObject jSONObject2 = jSONObject1.accumulate("ggmt", jSONObject0);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(2);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("o8");
      String string0 = JSONObject.valueToString(boolean0, 108, 108);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("2228.480", (Collection) linkedList0);
      boolean boolean0 = jSONObject1.isNull("2228.480");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "get";
      jSONObject0.accumulate("get", "get");
      short short0 = (short) (-1495);
      try { 
        jSONObject0.getBoolean("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("toU", "toU");
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("toU", jSONObject1);
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("getjoin", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      jSONObject1.put("getjoin", object0);
      jSONObject1.isNull("getjoin");
      try { 
        jSONObject1.getBoolean("getjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjoin\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long(2253L);
      String string0 = JSONObject.valueToString(long0, (-2828), (-2828));
      Long.sum((-2828), (-2828));
      Long long1 = new Long(1L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "J`x/IR63z{;;xZB";
      stringArray0[1] = "'j";
      stringArray0[2] = "J`x/IR63z{;;xZB";
      stringArray0[0] = "java.lang.Long@0000000001";
      stringArray0[4] = "java.lang.Long@0000000001";
      stringArray0[5] = "'j";
      JSONObject jSONObject0 = new JSONObject(long1, stringArray0);
      String string1 = jSONObject0.optString("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONTokener", (-1030.2222757976522));
      jSONObject0.toString();
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      jSONObject1.optDouble("wheel.json.JSONTokener", 1358.447);
      jSONObject1.optString("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}", "Q2$Mlh*_:");
      try { 
        jSONObject0.getLong("2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{}");
      jSONObject1.optInt((String) null, 27);
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, (-803), (-803));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float(929.01F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("IXs;%$/A`1; =<7Y&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      JSONObject.quote(".");
      JSONObject.valueToString(jSONObject1);
      jSONObject1.optDouble("\".\"", (double) 0L);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 13, 13);
      try { 
        jSONObject1.getDouble("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{k@Zj>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {k@Zj>
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Double double0 = new Double((-2415.6768611148223));
      Double.max((-2415.6768611148223), (-30.3));
      hashMap0.put((Float) null, double0);
      Float float0 = new Float((-1.0));
      Double double1 = new Double((-1.0));
      Float.isFinite((-1.0F));
      Double.sum((-1.0), (-1.0));
      hashMap0.put(float0, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("isreplaceAll", (Collection) linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-3904), (-3904));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      jSONObject0.put("+6dY13%ZCoy#)EXB^", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getsplit", "getsplit");
      JSONObject jSONObject2 = jSONObject1.accumulate("getsplit", jSONObject0);
      jSONObject2.accumulate("getsplit", "getsplit");
      long long0 = jSONObject0.optLong("getsplit");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("==:wu6:'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"==:wu6:'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-35));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("0-fQ%6", object0);
      jSONObject1.getJSONArray("0-fQ%6");
      double double0 = jSONObject1.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("JSONObject[");
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
      
      String string0 = JSONObject.valueToString(jSONObject0, (-468), (-468));
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = new JSONObject();
      Float.max((-468), (-468));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject3.optJSONArray((String) null);
      jSONObject0.optJSONObject(stringArray0[0]);
      Short short0 = new Short((short)34);
      String string1 = JSONObject.quote("tr");
      assertEquals("\"tr\"", string1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ".";
      jSONObject0.has(".");
      jSONObject0.put(".", 0L);
      JSONObject.quote("");
      jSONObject0.toString();
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove((String) null);
      jSONObject0.optLong(".");
      Double double0 = new Double(0L);
      JSONObject.valueToString(double0);
      try { 
        jSONObject0.getJSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      hashMap0.put("n=", double0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getBoolean("0.00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0.00\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 348);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Float float0 = new Float(3675.94F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = "%Tr\\x(&waXg[0So~@";
      int int0 = (-558);
      JSONObject jSONObject1 = jSONObject0.put("%Trx(&waXg[0So~@", (-558));
      jSONObject1.getInt("%Trx(&waXg[0So~@");
      String string1 = "get";
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject0.getJSONObject("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("2228.40", (Collection) linkedList0);
      jSONObject0.isNull("2228.40");
      JSONObject.doubleToString(0.0);
      Long long0 = Long.getLong("Jd/va>X7~p", (-193L));
      JSONObject jSONObject1 = jSONObject0.putOpt("2228.40", long0);
      long long1 = jSONObject1.getLong("2228.40");
      assertEquals((-193L), long1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("ROdK90RZ", (-1064L));
      String string0 = JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK90RZ");
      String string1 = JSONObject.valueToString("wheel.json.JSONObject@0000000001", 91, (-48561817));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Double double0 = new Double((-1163.89810913145));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", true);
      Short short0 = new Short((short) (-1495));
      String string0 = JSONObject.quote("95\":au$B5uG]");
      assertEquals("\"95\\\":au$B5uG]\"", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[10];
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.append("G!od[}ALl.~ln", jSONObject0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("G!od[}ALl.~ln");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", (-83L));
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("toU", "toU");
      try { 
        jSONObject0.getDouble("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toU\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{}");
      try { 
        jSONObject1.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{";
      Boolean boolean0 = new Boolean("{");
      JSONObject.valueToString(boolean0);
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("l]a8m]%C.hHIDK&UV", true);
      String string0 = JSONObject.quote("Expected '");
      assertEquals("\"Expected '\"", string0);
      
      boolean boolean0 = jSONObject0.optBoolean("l]a8m]%C.hHIDK&UV");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("000", (Object) "000");
      jSONObject0.getInt("000");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject.quote("JCx/IR63z{;;xZB");
      Long long0 = new Long(2561L);
      StringWriter stringWriter0 = new StringWriter(8);
      JSONObject jSONObject0 = new JSONObject((Object) "JCx/IR63z{;;xZB");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "JCx/IR63z{;;xZB");
      stringWriter1.append((CharSequence) "JCx/IR63z{;;xZB");
      jSONObject0.write(stringWriter1);
      String string0 = "0w\";wWY";
      jSONObject0.optDouble("0w\";wWY", (-935.06984526));
      int int0 = 13;
      JSONObject.valueToString("JCx/IR63z{;;xZB", 8, 13);
      String string1 = "";
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("getsubstring");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsubstring\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("n[s2jjTu1", "n[s2jjTu1");
      jSONObject1.keys();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(3);
      jSONArray0.write(stringWriter0);
      jSONObject1.toJSONArray(jSONArray0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject1.put("IV_^Jus[FS)?Il", (Map) hashMap0);
      JSONObject.getNames((Object) "O`Lr)#.wE`(cK;:");
      jSONObject0.accumulate("O`Lr)#.wE`(cK;:", "O`Lr)#.wE`(cK;:");
      jSONObject1.opt("n[s2jjTu1");
      JSONObject jSONObject2 = jSONObject1.put("n[s2jjTu1", (-1.0));
      String string0 = "\\u";
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)92);
      linkedList0.add(short0);
      jSONObject2.put(string0, (Collection) linkedList0);
      JSONObject.valueToString((Object) null, 804, 804);
      HashMap<Float, Byte> hashMap1 = new HashMap<Float, Byte>();
      JSONObject jSONObject3 = jSONObject1.put("com", (Map) hashMap1);
      assertSame(jSONObject3, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject1 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("wheel.json.JSONTokener", (String) null);
      Integer integer0 = new Integer(61);
      jSONObject0.toString(61);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject.getNames((Object) integer0);
      jSONObject1.optJSONObject("");
      Short short0 = new Short((short)13);
      try { 
        jSONObject1.getJSONObject("nCyvSS,&,M%Y:2/?+F+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nCyvSS,&,M%Y:2/?+F+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      Float.max(1477.7966F, (-1820.597F));
      JSONObject.valueToString(float0, 1253, 43);
      JSONObject jSONObject0 = new JSONObject();
      Float.max(43, 1253);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.lang.Float@0000000001", "java.lang.Float@0000000001");
      jSONObject0.keys();
      hashMap0.put((String) null, (String) null);
      jSONObject0.optInt(",\n");
      jSONObject0.toString(1253);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject.testValidity((Object) null);
      jSONObject0.optJSONObject("qejua7\"I4CGS?,s");
      Short short0 = new Short((short)117);
      JSONObject jSONObject1 = jSONObject0.accumulate("qejua7\"I4CGS?,s", short0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ha", false);
      boolean boolean0 = jSONObject1.getBoolean("ha");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.toString((-3663), (-3663));
      jSONObject0.toString();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",\n";
      JSONObject jSONObject1 = jSONObject0.put(",\n", 0L);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("] is not a number.", (double) 0L);
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(102);
      JSONObject jSONObject1 = new JSONObject();
      Short short0 = new Short((short) (-1261));
      Double double0 = new Double(102);
      jSONObject0.putOpt("A", hashMap0);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = JSONObject.quote("JCx/IR63z{;;xZB");
      assertEquals("\"JCx/IR63z{;;xZB\"", string0);
      
      Long long0 = new Long((-103L));
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("JCx/IR63z{;;xZB", "JCx/IR63z{;;xZB");
      int int0 = jSONObject0.optInt("get", 1349);
      assertEquals(1349, int0);
      
      Float float0 = new Float((float) (-103L));
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>(66);
      Float float1 = new Float((float) 1349);
      Float.sum((-103L), (-933.0F));
      hashMap1.put("] is not a Boolean.", float1);
      jSONObject0.opt("get");
      String[] stringArray0 = JSONObject.getNames((Object) "Gg[SleHj!AL6");
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject.doubleToString(0.4287464374776621);
      JSONObject jSONObject0 = new JSONObject((Object) "0.4287464374776621");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      jSONObject0.toString((-4033));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Integer integer0 = new Integer((-136));
      hashMap0.put((Float) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-2091));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(":ZFbG YWE", 32);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]rXBzfegGc0FF@c:", (Map) null);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject();
      long long1 = jSONObject1.optLong(".hoxf5==MA[p&}", 3795L);
      assertEquals(3795L, long1);
      
      int int0 = jSONObject1.optInt("wa", 123);
      assertEquals(123, int0);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      
      jSONObject1.toJSONArray((JSONArray) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject1.optBoolean("b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JSONObject[";
      JSONObject.quote("JSONObject[");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "\"JSONObject[\"");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      jSONObject0.keys();
      hashMap0.put(".", "JSONObject[");
      jSONObject0.optInt((String) null);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "wheel.json.JSONObject@0000000001");
      jSONObject1.remove("wheel.json.JSONObject@0000000001");
      String string0 = "getjoin";
      try { 
        jSONObject1.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 57);
      jSONObject0.keys();
      try { 
        jSONObject0.get("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "0";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.accumulate(stringArray0[0], stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "t:Tjq}");
      // Undeclared exception!
      jSONObject0.toString(4121);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getInt("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Float.max(445.0586F, 1323.9F);
      Short short0 = new Short((short)1396);
      JSONObject.valueToString("", (-1475), (-2210));
      Byte byte0 = new Byte((byte)110);
      Byte.toUnsignedLong((byte)110);
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject(object1);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble("bH.8i-A+!!>- ' b!ll", (-1.0));
      jSONObject0.optJSONArray("] is not a JSONArray.");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) "] is not a JSONArray.");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>(998, 445.0586F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject1.put("|2]f'pm[)yGH2", (Map) hashMap0);
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      jSONObject2.put("bH.8i-A+!!>- ' b!ll", (-1.0));
      assertEquals(1, jSONObject0.length());
      
      Byte byte1 = new Byte((byte)10);
      String[] stringArray2 = JSONObject.getNames((Object) byte1);
      assertEquals(5, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 777, 777);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      jSONObject0.put("s", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("s");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optString("] is not a JSONArray.");
      jSONObject1.optDouble("");
      jSONObject1.keys();
      jSONObject0.optString("o36?<gt_Qdh`I");
      jSONObject1.put("A JSONArray text must start with '['", 1005);
      JSONObject jSONObject2 = jSONObject1.accumulate("] is not a JSONArray.", (Object) null);
      jSONObject2.accumulate("o36?<gt_Qdh`I", "o36?<gt_Qdh`I");
      jSONObject2.getDouble("A JSONArray text must start with '['");
      jSONObject0.toString(1005);
      try { 
        jSONObject0.getString("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Float float0 = new Float(56.5F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-2157), (-2157));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      StringWriter stringWriter0 = new StringWriter(8);
      StringWriter stringWriter1 = stringWriter0.append('X');
      byte byte0 = (byte)47;
      Byte byte1 = new Byte((byte)47);
      JSONObject.numberToString(byte1);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "java.lang.Byte@0000000004", (int) (byte)47, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "get";
      stringArray0[1] = "0";
      jSONObject0.remove("0");
      jSONObject0.put("mer", (double) (short) (-1495));
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString("0");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add(jSONArray0);
      jSONObject0.optBoolean("", true);
      Short short0 = new Short((short)92);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.append("", jSONObject1);
      jSONObject2.put("NFy%-^Udm*5A-", 0.0);
      Double double0 = new Double(0.0);
      jSONObject0.putOpt("is", double0);
      jSONObject0.toString();
      JSONObject.doubleToString((short)92);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("'DdHKYk8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'DdHKYk8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "get";
      stringArray0[1] = "0";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(101);
      Short short0 = new Short((short) (-1495));
      JSONObject jSONObject2 = jSONObject0.append("gethighestOneBit", (Object) null);
      jSONObject2.optJSONArray("ro");
      String string1 = jSONObject1.toString(101);
      assertEquals("{}", string1);
      
      jSONObject0.optJSONObject("Expected a ',' or ']'");
      int int0 = jSONObject1.optInt("gethighestOneBit");
      assertEquals(0, int0);
      
      String string2 = JSONObject.quote("C&Z)#");
      assertEquals("\"C&Z)#\"", string2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Float float0 = new Float((-802.440039050683));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      jSONObject0.optLong("/THt@R(E}YJH?q|I", (-1605L));
      assertEquals(3, jSONObject0.length());
      
      JSONObject.getNames((Object) "{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      String string0 = JSONObject.quote("pa");
      assertEquals("\"pa\"", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optDouble("", (-1490.0));
      jSONObject0.optDouble("", 0.0);
      jSONObject0.optJSONArray("");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) "");
      HashMap<JSONObject, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<JSONObject, Object>((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("dx.", 0L);
      JSONObject.quote("dx.");
      JSONObject.valueToString(jSONObject1);
      JSONObject.quote("dx.");
      jSONObject0.putOpt("%/n@&9O&HJAq*-$", "\"dx.\"");
      jSONObject1.has("dx.");
      assertEquals(2, jSONObject1.length());
      
      String string0 = JSONObject.doubleToString(0L);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", 0.0);
      jSONObject1.optString("] is not a JSONArray.");
      jSONObject1.optDouble("java.lang.Double@0000000003");
      jSONObject1.keys();
      jSONObject0.optString("o36?<gt_Qdh`I");
      jSONObject1.put("A JSONArray text must start with '['", 1005);
      JSONObject jSONObject2 = jSONObject1.accumulate("] is not a JSONArray.", (Object) null);
      jSONObject2.accumulate("o36?<gt_Qdh`I", "o36?<gt_Qdh`I");
      jSONObject2.getDouble("A JSONArray text must start with '['");
      jSONObject0.toString(1005);
      try { 
        jSONObject0.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject1 = jSONObject0.put("get", (Map) hashMap0);
      jSONObject1.optLong("\f", (-83L));
      jSONObject0.accumulate("get", "get");
      Short short0 = new Short((short) (-1495));
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.append("get", object0);
      try { 
        jSONObject2.getJSONObject("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "wheel.json.JSONObject@0000000001");
      try { 
        jSONObject0.getJSONArray("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "wheel.json.JSONObject@0000000001");
      Object object0 = jSONObject1.get("wheel.json.JSONObject@0000000001");
      assertTrue(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject.doubleToString(1508.081056);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("' and instead saw '", "1508.081056");
      Integer integer0 = new Integer((-3289));
      jSONObject0.toString(38);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      jSONObject0.optJSONObject("iIPo,qou{+kdA");
      Byte byte0 = new Byte((byte)9);
      Long long0 = Long.valueOf((-615L));
      JSONObject jSONObject1 = new JSONObject(long0);
      Object object2 = new Object();
      jSONObject1.accumulate("c#oei.}qqet:x g\")", object2);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0);
      Object object0 = new Object();
      jSONObject0.put("0.00", object0);
      try { 
        jSONObject0.getJSONArray("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optInt("", 0);
      jSONObject0.optDouble((String) null);
      int int0 = new Integer((-289));
      try { 
        jSONObject0.get("put");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"put\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject.doubleToString(1508.081056);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("1508.081056", 1060);
      Float float0 = new Float((float) 1060);
      hashMap0.put("Gg[Sle%Hj!AL6", float0);
      jSONObject0.optDouble("1508.081056");
      jSONObject0.put("isformat", false);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject.doubleToString(1508.081056);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("1508.081056", 1060);
      Float float0 = new Float((float) 1060);
      hashMap0.put("Gg[SleHj!AL6", float0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = jSONObject0.put("Gg[SleHj!AL6", (Map) hashMap1);
      jSONObject1.optDouble("", (double) 1060);
      jSONObject0.optString("", "XBWyu@6");
      jSONObject0.remove("Expected '");
      JSONObject jSONObject2 = jSONObject0.put("XBWyu@6", 92);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1.0);
      Double.sum(1.0, 1.0);
      JSONObject.getNames((Object) double0);
      JSONObject.getNames((Object) jSONObject0);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 12, 12);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(1520);
      String string0 = JSONObject.quote("%/n@&9O&HJAq*-$");
      assertEquals("\"%/n@&9O&HJAq*-$\"", string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("EK;?gfKjFrFzU9Y6I", "%/n@&9O&HJAq*-$");
      hashMap0.put("{", "\"%/n@&9O&HJAq*-\\$\"");
      JSONObject jSONObject0 = new JSONObject((Object) "{");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("<S?R", true);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("toS", "toS");
      try { 
        jSONObject0.getBoolean("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("2228.40", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "2228.40");
      StringWriter stringWriter2 = stringWriter1.append('8');
      stringWriter2.write("2228.40");
      jSONObject0.write(stringWriter2);
      Long long0 = new Long(0L);
      try { 
        jSONObject1.append((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.putOpt("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String string0 = JSONObject.valueToString("0");
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.String@0000000001\"");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("`9w/jLFA", (-520));
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(jSONObject1);
      Float float0 = new Float(3074.84951666766);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("J]/;^c4%3`._F7.a,");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("true");
      linkedList0.removeFirst();
      jSONObject0.put("J]/;^c4%3`._F7.a,", (Collection) linkedList0);
      jSONObject0.optDouble("true");
      String string0 = "DZjQ7RGP";
      jSONObject0.append("DZjQ7RGP", (Object) null);
      try { 
        jSONObject0.getBoolean("_f,Zu$v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_f,Zu$v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p";
      stringArray0[1] = "p";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)0);
      jSONObject0.optDouble("`mXB^j_.n{`$", (double) (byte)0);
      jSONObject0.optLong("p", (long) (byte)0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) boolean0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>((byte)0, 3510.096F);
      jSONObject0.put("[]", (Map) hashMap0);
      Byte byte1 = new Byte((byte)0);
      String[] stringArray1 = JSONObject.getNames((Object) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-289));
      JSONObject jSONObject1 = jSONObject0.put("-289", (long) (-289));
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      int int0 = 1520;
      jSONObject1.getLong("ROdK9RZ");
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(1520, 1520);
      int int1 = (-3663);
      jSONObject0.toString((-3663), (-3663));
      jSONObject0.toString();
      try { 
        jSONObject0.get("M~oH/1w<Qp@`jv.;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M~oH/1w<Qp@`jv.;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      float float0 = 1477.7966F;
      Float float1 = new Float(1477.7966F);
      Float.max(1477.7966F, (-1820.597F));
      JSONObject.valueToString(float1, 1253, 43);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Float@0000000001";
      stringArray0[1] = "PXu?\"6}:rxA4@c2zn=b";
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      jSONObject0.optDouble("PXu?\"6}:rxA4@c2zn=b", (double) 43);
      Object object0 = null;
      JSONObject.valueToString(jSONObject0, 5091, 2457);
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      String string0 = ",\n";
      int int0 = (-3663);
      jSONObject1.toString((-3663), (-3663));
      jSONObject0.toString();
      String string1 = "h1DsthVZ\"Y1";
      try { 
        jSONObject1.get("h1DsthVZ\"Y1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"h1DsthVZ\\\"Y1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      Long long0 = new Long((-680L));
      StringWriter stringWriter0 = new StringWriter(1332);
      JSONObject jSONObject0 = new JSONObject(long0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"J`x/IR63z{;;xZB\"");
      jSONObject0.write(stringWriter1);
      jSONObject0.optDouble("J`x/IR63z{;;xZB");
      jSONObject0.remove("%/n@&9O&HJAq*-$");
      jSONObject0.optLong("%/n@&9O&HJAq*-$");
      Double double0 = new Double(0.0);
      JSONObject.valueToString("%/n@&9O&HJAq*-$");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK90RZ", 0L);
      JSONObject.valueToString(jSONObject0);
      jSONObject1.remove("wheel.json.JSONObject@0000000001");
      jSONObject1.optString("ROdK90RZ", "getreplaceAll");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte byte0 = (byte)65;
      Byte byte1 = new Byte((byte)65);
      JSONObject.numberToString(byte1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.Byte@0000000001";
      stringArray0[1] = "java.lang.Byte@0000000001";
      stringArray0[2] = "java.lang.Byte@0000000001";
      stringArray0[3] = "java.lang.Byte@0000000001";
      String string0 = "2&l6l;!p2<j$qy*UD2S";
      stringArray0[4] = "2&l6l;!p2<j$qy*UD2S";
      stringArray0[5] = "false";
      stringArray0[6] = "java.lang.Byte@0000000001";
      stringArray0[7] = "{";
      stringArray0[8] = "java.lang.Byte@0000000001";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.write(writer0);
      String string1 = "w=";
      Map<String, Object> map0 = null;
      JSONObject jSONObject1 = jSONObject0.put("w=", (Map) null);
      Integer integer0 = new Integer((byte)65);
      Integer integer1 = Integer.getInteger("gOXO`HJX\"D)h", integer0);
      try { 
        jSONObject1.accumulate((String) null, integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      jSONObject0.put("2228.480", (Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("2228.480");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      Long long0 = new Long((-680L));
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject((Object) "J`x/IR63z{;;xZB");
      stringWriter0.append((CharSequence) "\"J`x/IR63z{;;xZB\"");
      jSONObject0.write(stringWriter0);
      String string0 = "0w\";wWY";
      String string1 = "s{'e_l^mBur";
      Boolean boolean0 = new Boolean("J`x/IR63z{;;xZB");
      JSONObject.valueToString(boolean0, 1516, 13);
      String string2 = "] is not a Boolean.";
      try { 
        jSONObject0.getDouble("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Integer integer0 = new Integer((-124622348));
      String string0 = JSONObject.valueToString(integer0, (-124622348), (-124622348));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Float float0 = new Float((-371.3321F));
      JSONObject.valueToString(float0);
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Float@0000000001";
      stringArray0[1] = "java.lang.Float@0000000001";
      stringArray0[2] = "java.lang.Float@0000000001";
      stringArray0[3] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001", (Object) null);
      try { 
        jSONObject1.getInt("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("ROdK9RZ", 908L);
      int int0 = 1520;
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(1520, 1520);
      int int1 = (-3663);
      jSONObject0.toString((-3663), (-3663));
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("JSONObject[");
      jSONObject0.optBoolean((String) null);
      JSONObject.quote((String) null);
      JSONObject jSONObject1 = new JSONObject();
      Float.max((-468), (-468));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONTokener jSONTokener0 = new JSONTokener("\"\"");
      jSONTokener0.back();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Boolean.logicalOr(true, true);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNull(jSONArray2);
      
      double double0 = jSONObject0.optDouble((String) null, (-1366.4591113123392));
      assertEquals((-1366.4591113123392), double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("JSONObject[");
      jSONObject0.optBoolean((String) null);
      int int0 = (-468);
      JSONObject.valueToString(jSONObject0, (-468), (-468));
      JSONObject jSONObject1 = new JSONObject();
      Float.max((-468), (-468));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      String string0 = "<K@";
      String string1 = "lo";
      try { 
        jSONObject0.getJSONObject("lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt("getlongBitsToDouble", object0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("[", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (-62164681));
      jSONObject0.put(":ZFbG YWE", 32);
      long long0 = jSONObject1.optLong("wheel.json.JSONObject");
      assertEquals((-62164681L), long0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("get", "get");
      try { 
        jSONObject0.append("get", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[get] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong((-24668172), (long) (-24668172));
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray2);
      
      String string0 = JSONObject.doubleToString((-24668172L));
      assertEquals("-2.4668172E7", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("'B/^0", 1L);
      JSONObject.quote("'B/^0");
      JSONObject.valueToString("\"'B/^0\"");
      JSONObject.quote("fl");
      String string0 = "";
      jSONObject0.optLong("");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p";
      stringArray0[1] = "`mXB^j_.n{`$";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)0);
      double double0 = jSONObject0.optDouble("`mXB^j_.n{`$", (double) (byte)0);
      assertEquals(0.0, double0, 0.01);
      
      jSONObject0.optLong("`mXB^j_.n{`$", (long) (byte)0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) boolean0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>((byte)0, 3510.096F);
      jSONObject0.put("H$t`P=Wj/bd", (Map) hashMap0);
      Byte byte1 = new Byte((byte)0);
      String[] stringArray1 = JSONObject.getNames((Object) byte1);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) "{}");
      try { 
        jSONObject1.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null);
      jSONObject0.remove((String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("A1o0TR");
      Double double0 = new Double(0L);
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("j", "wheel.json.JSONException");
      jSONObject0.keys();
      hashMap0.put("{", "false");
      jSONObject0.optInt((String) null);
      jSONObject1.toString(445);
      jSONObject0.optString("\"java.lang.Object@0000000004\"", "tp%");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.doubleToString((-2525.0344004485));
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.put("] is not a JSONArray.", 1.0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("~:]L?;$1A+^/m=n19", "~:]L?;$1A+^/m=n19");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1470, 1470);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject.quote(".");
      jSONObject0.optBoolean("\".\"");
      jSONObject0.optLong(",:]}/\"[{;=#", 0L);
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ",:]}/\"[{;=#");
      stringWriter0.append((CharSequence) ".", 0, 0);
      jSONObject0.write(stringWriter1);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("has", false);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put(".@,1Y{=Psc,ibG", (Collection) linkedList0);
      Byte byte0 = new Byte((byte)6);
      jSONObject1.append(".@,1Y{=Psc,ibG", byte0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "'B/^";
      String[] stringArray0 = JSONObject.getNames((Object) "'B/^");
      JSONObject jSONObject0 = new JSONObject("'B/^", stringArray0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2334));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)102);
      jSONObject0.put("", (Object) byte0);
      jSONObject0.remove("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("cle", (Collection) linkedList0);
      jSONObject1.isNull("cle");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject2 = jSONObject0.put("e GF(*y,F&II)lX~", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("e GF(*y,F&II)lX~");
      assertNotSame(jSONObject0, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("C", (Object) hashMap0);
      Byte byte0 = new Byte((byte) (-7));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("0-fQ%6", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1, (byte) (-7), (byte) (-7));
      jSONObject2.put("{\n\"java.lang.String@0000000002\": {},\n\"java.lang.String@0000000006\": []\n}", (long) (byte) (-7));
      double double0 = jSONObject0.getDouble("{\n\"java.lang.String@0000000002\": {},\n\"java.lang.String@0000000006\": []\n}");
      assertEquals((-7.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      Float.max(1477.7966F, (-1820.597F));
      JSONObject.valueToString(float0, 1253, 43);
      JSONObject jSONObject0 = new JSONObject();
      Float.max(43, 1253);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.lang.Float@0000000001", "java.lang.Float@0000000001");
      jSONObject0.keys();
      hashMap0.put((String) null, (String) null);
      jSONObject0.optInt(",\n");
      jSONObject0.toString(1253);
      jSONObject0.optString(":", "jo$i");
      Object object0 = jSONObject0.opt("*4{^d-Ix85_Yl");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      Float.max(1477.7966F, (-1820.597F));
      JSONObject.valueToString(float0, 1253, 43);
      JSONObject jSONObject0 = new JSONObject();
      Float.max(43, 1253);
      Short short0 = new Short((short)1539);
      JSONObject.valueToString(short0, 1253, 43);
      Byte byte0 = new Byte((byte)110);
      Byte.toUnsignedLong((byte)110);
      JSONObject jSONObject1 = new JSONObject((Object) "java.lang.Float@0000000001");
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble(" of ", (double) 43);
      jSONObject1.optDouble("java.lang.Float@0000000001", (double) 1253);
      jSONObject0.optString((String) null, "java.lang.Float@0000000001");
      jSONObject0.put("gF|:;O.:&+8g", false);
      jSONObject1.remove("Us;nx");
      JSONObject jSONObject2 = jSONObject0.put("isrotateLeft", (-1628));
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "|5.;6)n\\0Jd^P\\ $";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      String string1 = "] is not a number.";
      Double double0 = new Double(1041.16);
      jSONObject0.putOpt("'", double0);
      try { 
        jSONObject0.get("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject.doubleToString(1508.081056);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 1060;
      jSONObject0.optInt("1508.081056", 1060);
      jSONObject0.append("", "");
      jSONObject0.has("1508.081056");
      Float float0 = new Float((float) 1060);
      Float.sum((-780.94F), 0.0F);
      hashMap0.put("", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super JSONObject>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put(",\n", ",\n");
      jSONObject0.keys();
      hashMap0.put("^!,3psy*[yFWj/", "");
      jSONObject1.optInt("000");
      jSONObject1.toString(0);
      jSONObject1.optString("^!,3psy*[yFWj/", "");
      jSONObject1.opt("wheel.json.JSONObject");
      try { 
        jSONObject0.getString("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      jSONObject0.put("&9fd-v.C!.B$XE(<DM[", (Map) hashMap0);
      jSONObject0.optJSONObject("&9fd-v.C!.B$XE(<DM[");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getsubList");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "|5.;6)n\\0Jd^P\\ $";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|5.;6)n\u0000Jd^P $");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |5.;6)n\u0000Jd^P $
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      int int0 = 1060;
      String string0 = "&=C,< )";
      jSONObject1.optInt("&=C,< )", 1060);
      jSONObject0.append("&=C,< )", (Object) null);
      String string1 = null;
      jSONObject0.has((String) null);
      Float float0 = new Float((float) 1060);
      Float.sum(1060, 1060);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put("&=C,< )", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super JSONObject>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("dx.", 0L);
      JSONObject.quote((String) null);
      JSONObject.valueToString(jSONObject1);
      JSONObject.quote("dx.");
      jSONObject0.optLong("dx.");
      jSONObject0.accumulate("isputOpt", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Expected '");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = "x0$o2v=hC5";
      long long0 = 2055L;
      Long long1 = new Long(2055L);
      JSONObject.numberToString(long1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "java.lang.Long@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(70);
      Float float0 = new Float(0.0);
      JSONObject.numberToString(float0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Float@0000000002");
      jSONObject0.write(stringWriter1);
      try { 
        jSONObject0.getBoolean("w7~QB3c,</xDEjo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w7~QB3c,<\\/xDEjo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      int int0 = 1253;
      Float.max(1477.7966F, (-1820.597F));
      JSONObject.valueToString(float0, 1253, 43);
      JSONObject jSONObject0 = new JSONObject();
      Float.max(43, 1253);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.lang.Float@0000000001", "java.lang.Float@0000000001");
      String string0 = null;
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Aav|#X_$h;/");
      jSONObject0.append("Aav|#X_$h;/", "Aav|#X_$h;/");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("false", "false");
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.getBoolean("false");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Float.max((-1820.597F), 0.0F);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 456, 43);
      JSONObject jSONObject0 = new JSONObject();
      Float.max(0.0F, 0.0F);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("\"java.lang.Object@0000000001\"", ",\n");
      jSONObject0.keys();
      hashMap0.put("\"java.lang.Object@0000000001\"", "Sn%$Zp");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject1.optInt("'");
      assertEquals(0, int0);
      
      String string0 = jSONObject0.toString(43);
      assertEquals("{}", string0);
      
      String string1 = jSONObject1.optString("] is not a Boolean.", ",\n");
      assertEquals(",\n", string1);
      
      jSONObject0.opt("{}");
      long long0 = jSONObject1.optLong("] is not a Boolean.", (long) 43);
      assertEquals(43L, long0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      float float0 = 1477.7966F;
      Float float1 = new Float(1477.7966F);
      Float.max(1477.7966F, (-1820.597F));
      JSONObject.valueToString(float1, 1253, 43);
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = (byte)110;
      Float.max(43, 1253);
      Short short0 = new Short((short)1539);
      JSONObject.valueToString(short0, 1253, 43);
      Byte byte1 = new Byte((byte)110);
      Byte.toUnsignedLong((byte)110);
      JSONObject jSONObject1 = new JSONObject((Object) "java.lang.Float@0000000001");
      JSONObject.getNames(jSONObject0);
      String string0 = " of ";
      jSONObject0.optDouble(" of ", (double) 43);
      jSONObject0.optJSONArray((String) null);
      jSONObject0.toString((-161));
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, 1045L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Float float0 = new Float(728.1667F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optLong("=yV");
      jSONObject0.put("put", 48);
      assertEquals(9, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(728.1667F);
      assertEquals("728.1666870117188", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "wheel.json.JSONObject@0000000001");
      try { 
        jSONObject1.getInt("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(1520);
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(",+Q88 ;J!^w", "null");
      hashMap0.put("EK;?gfKjFrFzU9Y6I", "%/n@&9O&HJAq*-$");
      hashMap0.put("{", "null");
      JSONObject jSONObject0 = new JSONObject((Object) "{");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(3153, 2);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      Long long0 = new Long((-680L));
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject(long0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"J`x/IR63z{;;xZB\"");
      jSONObject0.write(stringWriter1);
      jSONObject0.optDouble("0w\";wWY", (double) 1349);
      int int0 = 13;
      JSONObject.valueToString("J`x/IR63z{;;xZB", 1349, 13);
      String string0 = "] is not a Boolean.";
      try { 
        jSONObject0.getDouble("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Long long0 = new Long((-3553L));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("uoz", (-3553L));
      JSONObject.getNames(jSONObject1);
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject2);
      String string1 = jSONObject0.getString("uoz");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(boolean0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("2228.480", jSONArray0);
      Float float0 = new Float(0.0);
      jSONObject1.accumulate("getjoin", float0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1254.450044951));
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", (Object) float0);
      jSONObject0.optLong((String) null);
      JSONObject.getNames(jSONObject0);
      jSONObject1.optJSONArray((String) null);
      jSONObject1.optDouble("wheel.json.JSONObject$1");
      Short short0 = new Short((short)350);
      JSONObject.valueToString(short0);
      jSONObject1.names();
      jSONObject0.optJSONArray("-538.8248991371230");
      jSONObject0.optString((String) null);
      JSONObject jSONObject2 = jSONObject0.put("-538.8248991371230", (Object) "-538.8248991371230");
      JSONObject.quote("");
      jSONObject0.optString("\"ww6w4yNUu(TRRm+");
      try { 
        jSONObject2.getInt("java.lang.Short@0000000005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000005\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1.0);
      jSONObject0.put("JSONObject[", (Collection) null);
      JSONObject jSONObject1 = new JSONObject(double0);
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject$Null", 0L);
      String string0 = JSONObject.valueToString(jSONObject1);
      jSONObject0.optInt("wheel.json.JSONObject@0000000004");
      String string1 = jSONObject2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("getjoin", object0);
      boolean boolean0 = jSONObject0.isNull("getjoin");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = (-2891.923);
      jSONObject0.optBoolean("1", false);
      Float float0 = new Float((-2891.923));
      jSONObject0.optBoolean("1");
      JSONObject.numberToString(float0);
      JSONObject jSONObject1 = new JSONObject(float0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      long long0 = (-680L);
      Long long1 = new Long((-680L));
      int int0 = 1349;
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject(long1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"J`x/IR63z{;;xZB\"");
      jSONObject0.write(stringWriter1);
      String string0 = "0w\";wWY";
      String string1 = "getsplit";
      try { 
        jSONObject0.getLong("getsplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsplit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("{;ai6M\"XnJa)4.'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{;ai6M\\\"XnJa)4.'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "wheel.json.JSONObject@0000000001");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject1.put("wheel.json.JSONObject@0000000001", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("wheel.json.JSONObject@0000000001");
      Object object0 = jSONObject1.get("wheel.json.JSONObject@0000000001");
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Double double0 = Double.valueOf((-4900.2404748926265));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      Long long0 = new Long((-680L));
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(long0);
      stringWriter0.append((CharSequence) "\"J`x/IR63z{;;xZB\"");
      Double double0 = new Double((-1.0));
      Integer integer0 = new Integer(7);
      JSONObject.valueToString(integer0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("J`x/IR63z{;;xZB", "XWH&W");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("java.lang.Integer@0000000004", "0'");
      Long long1 = new Long(1168L);
      JSONObject jSONObject1 = new JSONObject(long1);
      try { 
        jSONObject1.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "wheel.json.JSONObject@0000000001");
      try { 
        jSONObject1.getLong("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONObject.quote("JCx/IR63z{;;xZB");
      Long long0 = new Long((-103L));
      StringWriter stringWriter0 = new StringWriter(1349);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("JCx/IR63z{;;xZB", "JCx/IR63z{;;xZB");
      Integer integer0 = new Integer(1349);
      jSONObject0.toString(8);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject.getNames(object1);
      jSONObject0.optJSONObject("JCx/IR63z{;;xZB");
      Short short0 = new Short((short)32);
      JSONObject jSONObject1 = jSONObject0.putOpt("nCyvSS,&,M%Y:2/?+F+", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      JSONObject.quote("ro");
      Short short0 = new Short((short)212);
      JSONObject.valueToString(short0);
      jSONObject1.optDouble("ro");
      jSONObject0.remove("getoptLong");
      jSONObject0.optLong("%/n@&9O&HJAq*-$");
      try { 
        jSONObject1.getJSONArray("o/oC}<}s|Y%KDd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o/oC}<}s|Y%KDd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Object object0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject.quote("JSONObject[");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      String string1 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"JSONObject[\"");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Jp)HM*pk&)AzfS:#HY$", 0, 0);
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Jp)HM*pk&)AzfS:#HY$", 0, 0);
      jSONObject0.write(stringWriter1);
      assertEquals("{}", stringWriter1.toString());
      
      JSONObject.valueToString("JSONObject[", 2803, 2803);
      jSONObject0.optInt((String) null, 1210);
      jSONObject0.names();
      jSONObject0.toString();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("getaddFirst");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("J`x/IR63z{;;xZB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of J`x/IR63z{;;xZB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONObject.doubleToString(1508.081056);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("1508.081056", 1060);
      Float float0 = new Float((float) 1060);
      hashMap0.put("Gg[SleHj!AL6", float0);
      jSONObject0.optDouble("1508.081056");
      jSONObject0.names();
      String string0 = "isformat";
      try { 
        jSONObject0.getBoolean("isformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isformat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a number.");
      assertEquals("\"] is not a number.\"", string0);
  }
}
