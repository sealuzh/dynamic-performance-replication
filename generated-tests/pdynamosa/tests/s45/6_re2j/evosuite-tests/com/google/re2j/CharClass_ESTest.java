/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:17:56 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5117;
      intArray0[1] = 1472;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {5117, 1472}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      CharClass charClass3 = charClass2.appendRange(1114111, 65);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      
      int[][] intArray2 = new int[7][1];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray1;
      intArray2[4] = intArray0;
      intArray2[5] = intArray1;
      intArray2[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = CharClass.charClassToString((int[]) null, 0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = CharClass.charClassToString(intArray0, (-1854));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendNegatedClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass3);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass5 = charClass4.appendFoldedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass2));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 2302;
      CharClass charClass1 = charClass0.appendRange(3673, 2302);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[1];
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      intArray0[0] = 3673;
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1190));
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("[0x0-0x10ffff]", string0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 91);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendRange((-1190), (-1190));
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      int int0 = (-1363);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1363));
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-742);
      intArray0[1] = 2470;
      intArray0[2] = 0;
      intArray0[3] = (-2054);
      intArray0[4] = 0;
      intArray0[5] = 64;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {(-742), 2470, 0, (-2054), 0, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(10716, 0);
      assertArrayEquals(new int[] {(-742), 2470, 0, (-2054), 0, 64}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-742), 2470, 0, (-2054), 0, 64}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 240;
      int int1 = 91;
      intArray0[2] = 91;
      intArray0[3] = (-1118);
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass1);
      
      int int2 = 1979;
      intArray0[4] = 1979;
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 269;
      intArray0[2] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 12335;
      intArray0[7] = 10714;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 269, (-1), 0, (-1), 0, 12335, 10714}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 269, (-1), 0, (-1), 0, 1, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 269, (-1), 0, (-1), 0, (-1), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      intArray0[1] = 2;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[0][2];
      CharClass charClass3 = charClass1.appendTable(intArray1);
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendFoldedRange(0, (-2167));
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendTable(intArray1);
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass1.appendFoldedRange(2, 64);
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass7.appendClassWithSign(intArray0, 2);
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass8);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass4.cleanClass();
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass3.appendTable(intArray1);
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass4);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass10);
      
      CharClass charClass11 = charClass4.appendLiteral((-2040), 2);
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass11);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass7);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass11);
      
      CharClass charClass12 = charClass1.appendTableWithSign(intArray1, 2);
      assertArrayEquals(new int[] {64, 2}, intArray0);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass3);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass12);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(65, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
      assertEquals("[0x41 0x61]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(4145, 4145);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(64, 3448);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(892, 892);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-16);
      int int0 = 240;
      intArray0[1] = 240;
      intArray0[3] = (-1118);
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-8498);
      intArray1[1] = 119974;
      intArray1[2] = (-8498);
      intArray1[3] = (-1158);
      intArray1[4] = (-1114);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][7];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 569;
      intArray1[3] = 0;
      intArray1[4] = 1952;
      intArray1[5] = (-652);
      intArray1[6] = 65855;
      intArray1[7] = 578;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 43;
      intArray2[4] = 0;
      intArray2[5] = 1952;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 65855;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 0;
      intArray4[1] = 65855;
      intArray4[2] = 1952;
      intArray4[3] = 578;
      intArray4[4] = (-652);
      intArray4[5] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray5[2] = 1952;
      intArray5[3] = 578;
      intArray5[4] = 569;
      intArray5[5] = 65855;
      intArray5[6] = 43;
      intArray5[7] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 578;
      intArray6[1] = (-733);
      intArray6[2] = 0;
      intArray6[3] = (-652);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      
      intArray7[0] = 0;
      intArray7[1] = 0;
      intArray7[2] = 5741;
      intArray7[3] = (-733);
      intArray7[4] = 43;
      intArray7[5] = 0;
      intArray7[6] = 569;
      intArray0[6] = intArray7;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-557));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[6];
      int int0 = (-1549);
      intArray1[0] = (-1549);
      int int1 = (-2841);
      intArray1[1] = (-2841);
      int int2 = (-219);
      intArray1[2] = (-219);
      int int3 = (-2353);
      intArray1[3] = (-2353);
      int int4 = (-1145);
      intArray1[4] = (-1145);
      int int5 = 66639;
      intArray1[5] = 66639;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2841);
      intArray3[1] = 66639;
      intArray3[2] = (-1145);
      intArray3[3] = (-1549);
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3253;
      intArray0[1] = 514;
      intArray0[2] = 2482;
      intArray0[3] = 69819;
      intArray0[4] = 1509;
      intArray0[5] = 702;
      intArray0[6] = 4362;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      intArray0[1] = 93;
      int[][] intArray1 = new int[8][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1);
      intArray2[1] = 66640;
      intArray2[2] = 1615;
      intArray2[3] = 1199;
      intArray2[4] = 93;
      intArray2[5] = 1615;
      intArray2[6] = 93;
      intArray2[7] = (-1313470);
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass1);
      
      intArray0[2] = 410;
      intArray0[3] = (-3538);
      intArray0[4] = 1296;
      intArray0[5] = 161;
      intArray0[6] = 3644;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 161);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][1];
      int[] intArray1 = new int[5];
      intArray1[0] = 43808;
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      intArray1[1] = 979;
      intArray1[2] = 2510;
      intArray1[3] = (-771);
      intArray1[4] = 4;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2510;
      intArray2[1] = 2510;
      intArray2[2] = 4;
      intArray2[3] = 137;
      intArray2[4] = 43808;
      intArray2[5] = 4;
      intArray2[6] = 120126;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 1226);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, (-2054));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1400;
      intArray0[1] = 0;
      intArray0[2] = 19893;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1400, 0, 19893, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertArrayEquals(new int[] {1400, 0, 19893, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
      assertEquals("[0x578-0x0 0x4db5-0x0]", string0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-105));
      assertArrayEquals(new int[] {0, 1399, 1, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[9][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 19893;
      intArray3[1] = 1400;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = (-105);
      intArray3[5] = 19893;
      intArray3[6] = 0;
      intArray3[7] = (-105);
      intArray1[6] = intArray3;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass4.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7191;
      intArray0[1] = 65;
      intArray0[2] = (-1694);
      intArray0[3] = (-1219);
      intArray0[4] = 260;
      intArray0[5] = 6;
      intArray0[6] = 1114111;
      intArray0[7] = (-624);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7191, 65, (-1694), (-1219), 260, 6, 1114111, (-624)}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[7][7];
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 7191;
      intArray2[1] = 65;
      intArray2[2] = (-1219);
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-624);
      intArray3[1] = 6;
      intArray3[2] = 65;
      intArray3[3] = (-624);
      intArray3[4] = 65;
      intArray3[5] = 1114111;
      intArray3[6] = (-2889);
      intArray1[6] = intArray3;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertArrayEquals(new int[] {7191, 65, (-1694), (-1219), 260, 6, 1114111, (-624)}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(6, 6);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertArrayEquals(new int[] {7191, 65, (-1694), (-1219), 260, 6, 1114111, (-624)}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertArrayEquals(new int[] {7191, 65, (-1694), (-1219), 260, 6, 1114111, (-624)}, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass3);
      
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertArrayEquals(new int[] {7191, 65, (-1694), (-1219), 260, 6, 1114111, (-624)}, intArray0);
      assertArrayEquals(new int[] {}, intArray4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray4.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendRange((-624), 65);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertArrayEquals(new int[] {7191, 65, (-1694), (-1219), 260, 6, 1114111, (-624)}, intArray0);
      assertArrayEquals(new int[] {}, intArray4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray4.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.negateClass();
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertArrayEquals(new int[] {7191, 65, (-1694), (-1219), 260, 6, 1114111, (-624)}, intArray0);
      assertArrayEquals(new int[] {}, intArray4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray4.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2722;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2722, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(6940, (-2004));
      assertArrayEquals(new int[] {2722, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral((-2443), 3123);
      assertArrayEquals(new int[] {2722, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 0;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 156;
      CharClass charClass1 = charClass0.appendFoldedRange(156, 156);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 156;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {156, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      
      intArray0[1] = 156;
      intArray0[2] = 156;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 156);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 2470;
      intArray0[2] = 0;
      intArray0[3] = (-2054);
      intArray0[4] = 0;
      intArray0[5] = 64;
      CharClass charClass1 = charClass0.appendLiteral(10716, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 2470, 0, (-2054), 0, 64}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2004);
      int int1 = 0;
      // Undeclared exception!
      charClass0.appendFoldedRange(1503, 3123);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(127, 127);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[4];
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      
      intArray0[2] = 127;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 127, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      intArray0[3] = 127;
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, (-1961));
      assertArrayEquals(new int[] {0, 0, 127, 127}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      String string1 = CharClass.charClassToString(intArray0, (-1712));
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new int[] {0, 0, 127, 127}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string1);
      assertEquals("[]", string1);
      
      CharClass charClass5 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 127, 127}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass5);
      
      int[][] intArray1 = new int[0][6];
      CharClass charClass6 = charClass4.appendTableWithSign(intArray1, (-1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedRange(66639, 66639);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 434;
      intArray1[2] = (-434);
      intArray1[3] = (-570);
      intArray1[4] = (-2);
      intArray1[5] = 2;
      intArray1[6] = (-2);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-570);
      intArray3[1] = (-570);
      intArray3[2] = (-2);
      intArray3[3] = 0;
      intArray3[4] = (-2);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 2093;
      intArray4[1] = (-2);
      intArray4[2] = 0;
      intArray4[3] = 2;
      intArray4[4] = (-2);
      intArray4[5] = (-2);
      intArray4[6] = 434;
      intArray4[7] = (-2);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 6678;
      intArray5[1] = 0;
      intArray5[2] = (-2);
      intArray5[3] = 434;
      intArray5[4] = (-2);
      intArray5[5] = (-434);
      intArray5[6] = 4756;
      intArray5[7] = 2;
      intArray0[4] = intArray5;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass0.cleanClass();
      int[][] intArray1 = new int[0][2];
      CharClass charClass2 = charClass1.appendTable(intArray1);
      CharClass charClass3 = charClass2.appendFoldedRange(0, (-2167));
      CharClass charClass4 = charClass2.appendTable(intArray1);
      charClass0.appendRange(1047, 1047);
      charClass3.appendFoldedClass(intArray0);
      charClass4.cleanClass();
      CharClass charClass5 = charClass1.appendRange(0, (-2167));
      assertSame(charClass5, charClass0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2510;
      intArray0[1] = (-472);
      intArray0[2] = (-305);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(0, 0);
      int[] intArray1 = new int[6];
      intArray1[0] = (-305);
      intArray1[1] = 4;
      intArray1[2] = (-305);
      intArray1[3] = (-306);
      intArray1[4] = 2510;
      intArray1[5] = (-472);
      int int0 = (-2196);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray1, (-2196));
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.appendFoldedRange(2510, 0);
      charClass4.appendNegatedClass(intArray1);
      // Undeclared exception!
      try { 
        charClass3.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 183;
      intArray0[1] = 2003;
      int int0 = 120405;
      intArray0[2] = 120405;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      CharClass charClass1 = new CharClass(intArray0);
      CharClass charClass2 = charClass1.appendRange(128549, 10222);
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-1029);
      intArray0[2] = (-170);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 43042;
      intArray0[6] = (-287);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[6][4];
      intArray1[0] = intArray0;
      charClass0.appendFoldedRange((-1999), 64);
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange((-2449), (-1585));
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      charClass0.appendTableWithSign(intArray1, 6067);
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3136;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2325;
      intArray0[6] = (-454);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = (-454);
      intArray2[2] = 3136;
      intArray2[3] = 0;
      intArray1[1] = intArray2;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 2325);
      CharClass charClass2 = charClass1.appendLiteral(0, 0);
      // Undeclared exception!
      try { 
        charClass2.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1190));
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      charClass0.toString();
      charClass2.appendClassWithSign(intArray0, 91);
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      charClass3.appendClassWithSign(intArray0, (-1190));
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-244);
      intArray0[2] = (-490);
      intArray0[3] = 31;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendRange((-244), (-1651));
      CharClass charClass3 = charClass2.cleanClass();
      String string0 = charClass3.toString();
      assertArrayEquals(new int[] {1, (-244), (-490), 1114111}, intArray0);
      assertEquals("[0xfffffe16-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = (-742);
      intArray0[1] = 2470;
      intArray0[2] = 0;
      intArray0[3] = (-2054);
      intArray0[4] = 0;
      intArray0[5] = 64;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      charClass1.appendFoldedRange(1212, 0);
      CharClass charClass2 = charClass1.appendLiteral(10716, 0);
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      charClass3.toArray();
      CharClass charClass4 = charClass1.cleanClass();
      assertSame(charClass4, charClass0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(66640, 66640);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      intArray0[1] = 2;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass0.cleanClass();
      int[][] intArray1 = new int[0][2];
      CharClass charClass3 = charClass1.appendTable(intArray1);
      CharClass charClass4 = charClass3.appendFoldedRange((-28), (-2167));
      charClass3.appendTable(intArray1);
      charClass4.appendClass(intArray0);
      CharClass charClass5 = charClass4.appendFoldedRange(3866, 1494);
      charClass4.appendClassWithSign(intArray0, (-28));
      charClass3.appendTable(intArray1);
      charClass2.appendLiteral(4958, (-28));
      CharClass charClass6 = charClass5.appendNegatedTable(intArray1);
      assertSame(charClass6, charClass3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass();
      int int0 = (-804);
      CharClass.charClassToString(intArray0, (-804));
      int[][] intArray1 = new int[0][2];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 11745);
      charClass1.negateClass();
      // Undeclared exception!
      charClass1.appendFoldedRange(1122, 11745);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[5];
      intArray1[0] = 29978;
      intArray1[1] = 3526;
      intArray1[2] = 40980;
      intArray1[3] = 2236;
      intArray1[4] = 10190;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 10190;
      intArray2[1] = 10190;
      intArray2[2] = 2236;
      intArray2[3] = 29978;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 398;
      intArray0[1] = 269;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 2901;
      intArray0[5] = 1452;
      intArray0[6] = 12335;
      intArray0[7] = 10714;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {398, 269, (-1), 0, 2901, 1452, 12335, 10714}, intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-468);
      intArray0[2] = (-1714);
      intArray0[3] = (-1212);
      intArray0[4] = (-2);
      intArray0[5] = 0;
      intArray0[6] = (-1602);
      intArray0[7] = 247;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[1][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 92);
      CharClass charClass3 = charClass2.appendClass(intArray0);
      CharClass charClass4 = charClass3.appendLiteral((-1714), (-1714));
      CharClass charClass5 = charClass4.appendFoldedRange(0, (-1212));
      charClass5.cleanClass();
      assertArrayEquals(new int[] {(-1714), 247, (-1714), (-1212), (-2), 0, 0, (-468)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-79);
      int int0 = 65;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(0, (-1149));
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      charClass1.cleanClass();
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass2.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[22];
      intArray0[0] = 6686;
      intArray0[1] = (-17754263);
      intArray0[2] = (-439);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendFoldedRange(6686, 7204);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 543;
      intArray0[1] = 0;
      intArray0[2] = 998;
      intArray0[3] = (-1293);
      intArray0[4] = 0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      intArray0[5] = (-1396);
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      charClass2.negateClass();
      CharClass charClass3 = charClass0.appendFoldedRange(0, (-1293));
      CharClass.charClassToString(intArray0, 0);
      charClass3.appendFoldedClass(intArray0);
      charClass2.appendRange((-1293), 0);
      charClass2.appendClassWithSign(intArray0, 4056);
      CharClass charClass4 = charClass1.negateClass();
      charClass0.appendLiteral(65913, 0);
      CharClass charClass5 = charClass0.appendLiteral((-1293), 0);
      int[][] intArray1 = new int[0][3];
      charClass5.appendTable(intArray1);
      int[] intArray2 = charClass4.toArray();
      assertEquals(4, intArray2.length);
      assertArrayEquals(new int[] {65913, 65913, (-1293), (-1293)}, intArray2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendFoldedRange((-91), 93);
      CharClass charClass3 = charClass2.cleanClass();
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = (-3056);
      CharClass charClass1 = charClass0.appendLiteral(66600, (-3056));
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, 66600);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      int[][] intArray1 = new int[8][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 616;
      intArray0[1] = (-2960);
      intArray0[2] = 176;
      intArray0[3] = 0;
      intArray0[4] = 74;
      intArray0[5] = 2599;
      intArray0[6] = 2756;
      intArray0[7] = 2698;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      CharClass charClass2 = charClass1.negateClass();
      charClass0.toString();
      charClass2.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.negateClass();
      charClass4.cleanClass();
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 176);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2722;
      intArray0[1] = (-2443);
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[5][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[4];
      intArray2[0] = (-2443);
      intArray2[1] = 3296;
      intArray2[2] = 2599;
      intArray2[3] = 0;
      intArray1[4] = intArray2;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 2722);
      CharClass charClass2 = charClass1.appendRange((-2443), 176);
      CharClass charClass3 = charClass2.appendLiteral((-880), 2722);
      // Undeclared exception!
      try { 
        charClass3.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
