/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:27:18 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-228.686628);
      doubleArray0[2] = 4.0E-7;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 968.1690022237025;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0E-7, mnStrategy0, 0.0);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3794.987776, 1581);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.2, 2.2, 2.2, 2.2, 1.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-6.491951838120088);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[5];
      mnStrategy0.setGradientStepTolerance(24845.604199999998);
      mnUserParameterState0.setLimits(0, (-6.491951838120088), 0.0);
      mnStrategy0.setGradientNCycles(0);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[1] = (-0.5021696787759163);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.clone();
      mnUserParameterState0.add((String) null, (-2.0));
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientStepTolerance((-726.361736096887));
      int[] intArray0 = new int[2];
      mnStrategy0.setGradientStepTolerance((-0.5021696787759163));
      mnUserParameterState0.setLimits(0, 0.0, (-0.5021696787759163));
      mnStrategy0.setGradientNCycles((-715827883));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 968.1690022237025, mnStrategy0, 8.915481241309565E42);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1105.8895637325), (-715827883));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.2, 2.2, 2.2, 2.2, 1.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-6.491951838120088);
      doubleArray0[1] = (-228.686628);
      doubleArray0[4] = 1.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[5];
      mnStrategy0.setGradientStepTolerance(24867.104921744096);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-707.452134739403), 1);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 2432.9304881999997;
      doubleArray0[0] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 3401.100868839847);
      double[] doubleArray1 = mnUserParameterState0.params();
      mnUserParameterState0.clone();
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3.456337510284592), 15);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1254.2485658, 4737);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      double double0 = 968.1690022237025;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, (-1890.1904491329808));
      int int0 = 0;
      mnUserParameterState0.setLimits(0, 4.0E-7, (-2571.5321));
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 2432.9304881999997, 6208.6134, (-2483.56042)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6208.6134;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 6208.6134);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        mnUserParameters1.fix("org.freehep.math.minuit.MnFunctionCross");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.999770472945731, 5.999770472945731, 5.999770472945731, 5.999770472945731, (-2190.8474319080674)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 5.999770472945731;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add((String) null, 5.999770472945731);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientStepTolerance((-741.0079732614847));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0, 6);
      int int0 = 0;
      mnStrategy0.setGradientStepTolerance((-5.668942711212877));
      mnUserParameterState0.name(0);
      mnUserParameterState0.setLimits(0, 0.0, 5.999770472945731);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3.7644764747976794E-17), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-2483.56042);
      doubleArray0[2] = (-2483.56042);
      doubleArray0[3] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      int[] intArray0 = new int[0];
      mnUserParameterState0.clone();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3040.1621079827755, 6208.6134, 0.5, 0.0, 0.5).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 0.0);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1138.0095573159103, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.5;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.776845616949148;
      doubleArray0[3] = (-2666.33596);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      double[] doubleArray1 = mnUserParameterState0.params();
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.838329121321024, (-2485.955067309), 1548.1315030484545, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 0.776845616949148);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 5, 44);
      double[] doubleArray2 = new double[5];
      // Undeclared exception!
      try { 
        mnUserParameterState0.setUpperLimit((-2125067326), 0.776845616949148);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 2432.9304881999997, 6208.6134, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.5;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(3);
      mnUserParameters1.clone();
      mnStrategy0.setLowStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 3);
      double[] doubleArray1 = mnUserParameterState0.params();
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0, 0);
      // Undeclared exception!
      try { 
        mnUserParameterState0.int2ext((-982827478), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.2, 2.2, 2.2, 2.2, 1.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-6.491951838120088);
      doubleArray0[1] = (-228.686628);
      doubleArray0[3] = 1.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 1.0);
      int[] intArray0 = new int[5];
      mnStrategy0.setGradientStepTolerance(24845.604199999998);
      mnUserParameterState0.setLimits(0, (-6.491951838120088), (-228.686628));
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0.5, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 0.5;
      doubleArray0[1] = (-1992.300889506888);
      doubleArray0[2] = (-1992.300889506888);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy((-8));
      mnStrategy0.setGradientTolerance(1.0E-6);
      mnStrategy0.setGradientNCycles((-1));
      mnStrategy0.setLowStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      mnUserParameterState0.toString();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3040.1621079827755, (-1992.300889506888), (-1992.300889506888), (-1992.300889506888), 1.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy1 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1992.300889506888), mnStrategy1, 0.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1138.0095573159103, 15);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 2432.9304881999997).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 6208.6134;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setLowStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0);
      double[] doubleArray1 = mnUserParameterState0.params();
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0, 0);
      int int0 = 609;
      // Undeclared exception!
      try { 
        mnUserParameterState0.int2ext(609, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 609, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.999770472945731, 136.152784, 136.152784, (-0.8438777932368874), 5.999770472945731).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-0.8438777932368874);
      doubleArray0[4] = 968.1690022237025;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientStepTolerance((-726.255));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[5];
      mnUserParameterState0.add("", (-0.8438777932368874));
      mnStrategy0.setGradientStepTolerance((-0.8438777932368874));
      mnStrategy0.setGradientNCycles((-715827920));
      mnStrategy0.setHessianStepTolerance(968.1690022237025);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-726.255), (-1084));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-5.144962124723907E-14);
      doubleArray0[1] = (-1920.8);
      doubleArray0[2] = 2595.777097412;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(1000681);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1920.8), mnStrategy0, 0.5);
      int[] intArray0 = new int[0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-1491.24);
      doubleArray1[2] = (-5.144962124723907E-14);
      doubleArray1[3] = 522.28886;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.5;
      doubleArray1[6] = 2595.777097412;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0.5, 1000681);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-2190.8474319080674);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.999770472945731, (-2.0), (-0.5021696787759163), (-0.5021696787759163), (-2190.8474319080674)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-0.5021696787759163);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add((String) null, (-2.0));
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientStepTolerance((-741.0079732614847));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      mnStrategy0.setGradientStepTolerance((-5.722277423879593));
      mnUserParameterState0.name(0);
      mnUserParameterState0.setLimits(0, 0.0, (-0.5021696787759163));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3.7644764747976794E-17), (-2098));
      mnStrategy0.setGradientNCycles((-715827883));
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.5021696787759163), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 2432.9304881999997, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 2432.9304881999997;
      doubleArray0[3] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 3401.100868839847);
      double[] doubleArray1 = mnUserParameterState0.params();
      mnUserParameterState0.clone();
      int[] intArray0 = new int[0];
      double[] doubleArray2 = mnUserParameters1.params();
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.825545673903415, 15);
      mnStrategy0.setGradientTolerance(56.9152095263);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1254.2485658, 4737);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2432.9304881999997, 15);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray0, 3401.100868839847, 4737);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 1.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.2, 2.2, 2.2, 2.2, 1.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-6.491951838120088);
      doubleArray0[1] = (-228.686628);
      doubleArray0[4] = 1.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[5];
      int int0 = 0;
      mnStrategy0.setGradientStepTolerance(24867.104921744096);
      mnUserParameterState0.setLimits(0, 0.0, (-228.686628));
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-707.452134739403), 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-6.491951838120088);
      doubleArray0[1] = (-228.686628);
      doubleArray0[2] = (-228.686628);
      doubleArray0[4] = 968.1690022237025;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-228.686628), mnStrategy0, 0.0);
      int[] intArray0 = new int[5];
      mnUserParameterState0.setLimits(0, (-6.491951838120088), (-228.686628));
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-4976.51094);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-6.491951838120088);
      doubleArray1[4] = (double) 1581;
      doubleArray1[5] = (double) 1581;
      doubleArray1[6] = 3794.987776;
      doubleArray1[7] = (-396.244323835848);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-4976.51094), 0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 1581.0, (-830));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.999770472945731, 136.152784, 136.152784, (-0.8438777932368874)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-0.8438777932368874);
      doubleArray0[4] = 968.1690022237025;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add((String) null, 136.152784);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientStepTolerance((-726.255));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[5];
      mnUserParameterState0.add("", (-0.8438777932368874));
      mnStrategy0.setGradientStepTolerance((-6.491951838120088));
      mnUserParameterState0.setLimits(0, 0.0, (-0.8438777932368874));
      mnStrategy0.setGradientNCycles((-715827920));
      mnStrategy0.setHessianStepTolerance(968.1690022237025);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-726.255), (-1084));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.0, 136.152784, 136.152784, 0.02, 136.152784).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-201.4771193586675);
      doubleArray0[2] = (-201.4771193586675);
      doubleArray0[4] = 968.1690022237025;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      double double0 = 0.5;
      mnUserParameterState0.add("", 0.5, (-201.4771193586675));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-201.4771193586675), mnStrategy0, 0.0);
      int[] intArray0 = new int[5];
      mnUserParameterState0.setLimits(0, 0.0, (-201.4771193586675));
      mnStrategy0.setGradientNCycles((-1445));
      mnUserParameterState0.setLimits("", (-201.4771193586675), (-2299.4529));
      double[] doubleArray1 = new double[9];
      double double1 = 4.0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0, 1581);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.999770472945731, (-2.0), (-0.5021696787759163), 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-0.5021696787759163);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add((String) null, (-2.0));
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientStepTolerance((-726.255));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      mnUserParameterState0.setPrecision((-6.491951838120088));
      mnStrategy0.setHessianGradientNCycles(0);
      mnStrategy0.setGradientStepTolerance(5.046730303183265E-12);
      mnUserParameterState0.setLimits(0, 0.0, (-0.5021696787759163));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2.0), (-630));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.999770472945731, 5.999770472945731, (-0.5021696787759163), 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-0.5021696787759163);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add((String) null, 5.999770472945731);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientStepTolerance((-726.255));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setGradientStepTolerance(5.046730303183265E-12);
      mnStrategy0.setGradientStepTolerance((-6.491951838120088));
      mnUserParameterState0.toString();
      mnUserParameterState0.setLimits(0, 0.0, (-0.5021696787759163));
      mnStrategy0.setGradientNCycles((-715827883));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.5021696787759163), 0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnUserParameterState0.setUpperLimit((String) null, 5.999770472945731);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2443.0, (-887376894));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (-0.5021696787759163);
      doubleArray0[2] = 968.6524093481067;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add((String) null, 6.571687297422655);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientStepTolerance((-726.255));
      mnStrategy0.setHessianG2Tolerance((-1057.95304980462));
      int[] intArray0 = new int[4];
      mnStrategy0.setGradientStepTolerance((-6.491951838120088));
      mnUserParameterState0.setLimits(0, (-0.5021696787759163), 0.0);
      mnUserParameterState0.setLowerLimit((String) null, 6.571687297422655);
      mnStrategy0.setGradientNCycles(0);
      mnStrategy0.setGradientStepTolerance(841.1835293601528);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.1, mnStrategy0, 968.6524093481067);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 6.571687297422655, (-1426));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.999770472945731, (-2.0), (-0.5021696787759163), (-0.5021696787759163), (-2190.8474319080674)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-0.5021696787759163);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add((String) null, (-2.0));
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientStepTolerance((-726.255));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianGradientNCycles(12);
      mnUserParameterState0.ext2int(0, 0.3);
      mnStrategy0.setGradientStepTolerance(5.046730303183265E-12);
      mnStrategy0.setGradientStepTolerance((-6.491951838120088));
      mnUserParameterState0.setPrecision(3663.852526);
      mnUserParameterState0.toString();
      mnUserParameterState0.setLimits(0, 0.0, (-0.5021696787759163));
      mnStrategy0.setGradientNCycles((-715827883));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.5021696787759163), 0);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-573.0), (-715827883));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }
}
