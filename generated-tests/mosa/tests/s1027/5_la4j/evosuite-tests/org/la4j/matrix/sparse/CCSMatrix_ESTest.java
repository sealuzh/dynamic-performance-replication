/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:19:47 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.setRow(578, (double) 578);
      cCSMatrix0.setAll(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[16] = (double) 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(3, 3, doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(3, cCSMatrix0.columns());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3, 11.0);
      assertEquals(0.3333333333333333, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(26, 26);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(26, 26);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '27' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(13, 48, 13);
      Matrix matrix0 = cCSMatrix0.power(13);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      CCSMatrix.block(matrix0, cCSMatrix0, matrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) 3;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(3, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2689, 2689, (double) 0, (Random) mockRandom0);
      Integer integer0 = new Integer(2689);
      cCSMatrix0.minInColumn(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("ExR<SKW''u()OvennA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(17);
          CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(17, 2314.4489509);
          cCSMatrix1.getRow(17);
          assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
          
          cCSMatrix0.columnMajorIterator();
          assertEquals(17, cCSMatrix0.rows());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray0 = new double[6][7];
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2689;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(2689);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2689
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.setRow(0, (-1056.5045748883));
      cCSMatrix0.setAll((-1056.5045748883));
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(939, 2669);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(7, vectorFunction0);
      cCSMatrix0.setAll((-1365.3241220414666));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1573, 2663, 2663);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(2663, vectorProcedure0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1573, (double)2663, (double)2663, (double)1573, (double)1573).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(1573, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.manhattanNorm();
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.zero(13, 32, 13);
          MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
          cCSMatrix0.each(matrixProcedure0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2073, 2453.2750442);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(420, 420);
      cCSMatrix0.copyOfShape(0, 420);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 2655);
      cCSMatrix0.copyOfShape(3, 3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.blankOfColumns(0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1519), 1, (double) (-1519), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(13, 13);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix0.toDenseMatrix();
      CCSMatrix.zero(1728, 13);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 3);
      CCSMatrix cCSMatrix1 = new CCSMatrix(3, 3);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2677, (-438.62418076401));
      cCSMatrix0.copyOfShape(32, 2677);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(2667, 2667, (double) 9, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.blankOfRows(626);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.manhattanNorm();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2013);
      cCSMatrix1.removeFirstRow();
      cCSMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(17);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.nonZeroAt(17, 0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(2676, 17);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2348);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(662, 662);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2689, 0.75);
      cCSMatrix0.toBinary();
      cCSMatrix0.maxInColumn(7);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 2689;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2689;
      doubleArray0[5] = (double) 2689;
      doubleArray0[6] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 2689, doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[5];
      doubleArray0[6] = (double) 2689;
      CCSMatrix cCSMatrix1 = new CCSMatrix(2682, 2764, 0, doubleArray0, intArray0, intArray0);
      cCSMatrix0.maxInColumn(2682);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2638, 2638, 2638);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      int int1 = 2689;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2689, 2689, (double) 0, (Random) mockRandom0);
      cCSMatrix0.setRow(0, (double) 0);
      Integer integer0 = new Integer(int1);
      cCSMatrix0.minInColumn(int0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int1, int1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix.random(2689, 2689, (double) 0, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix.randomSymmetric(66, 0.8, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix.diagonal(32, 32);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) 831;
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = (double) 1544;
      doubleArray0[5] = (double) 1544;
      int[] intArray0 = new int[7];
      doubleArray0[1] = (double) 17;
      intArray0[1] = 1544;
      intArray0[2] = 17;
      intArray0[3] = 1544;
      intArray0[4] = 3162;
      intArray0[5] = 17;
      intArray0[6] = 1544;
      CCSMatrix cCSMatrix0 = new CCSMatrix(831, 1544, 3162, doubleArray0, intArray0, intArray0);
      cCSMatrix0.iterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 19;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double double0 = (-1.0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(19, (-1.0));
      int int1 = 2666;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(19, 2666);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      int int2 = 7;
      double double1 = (-1096.88367);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, (double)int1, (double)int1, (double)int0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(int2, vectorFunction0);
      int int3 = 4;
      int int4 = 7;
      long long0 = 1060L;
      MockRandom mockRandom0 = new MockRandom(long0);
      ColumnMajorSparseMatrix.random(int3, int4, double1, (Random) mockRandom0);
      CCSMatrix.zero(int0, int0, int2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(2650);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2650
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(48);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2039, (-1.3562269144485795));
      cCSMatrix1.minInColumn(4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2648);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(columnMajorSparseMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int0 = 2671;
      cCSMatrix1.nonZeroIteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2689;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2689;
      doubleArray0[5] = (double) 2689;
      doubleArray0[6] = (double) 0;
      CCSMatrix.from1DArray(0, 2689, doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2689, 2689, (double) 0, (Random) mockRandom0);
      int[] intArray0 = new int[5];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2689, 2689, (double) 0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2370, 4294.5132);
      cCSMatrix1.toDenseMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3364, 2689);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.eachInColumn(2689, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(13, 13);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 37);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(37, 37);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 2689;
      doubleArray0[4] = (double) 2689;
      doubleArray0[5] = (double) 2689;
      doubleArray0[4] = (double) 2689;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2689);
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[5];
      doubleArray0[6] = (double) 2689;
      cCSMatrix0.maxInColumn(2682);
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix.diagonal(2682, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 355;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 355);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 356
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2689;
      doubleArray0[4] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2689;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 2689, doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.random(2689, 2689, (double) 0, (Random) mockRandom0);
      mockRandom0.nextInt();
      mockRandom0.nextDouble();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(17, (-1.0));
      Matrix matrix0 = cCSMatrix0.copyOfShape(17, 2666);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3374, 2689);
      cCSMatrix0.minInColumn(2689);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2669, 0.75);
      cCSMatrix0.toDenseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1374.44, (double)2669, 0.75, (double)7).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(7, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(939, 2669);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-961.6), 0.0, (double)7, (-915.540869327), (-961.6)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(7, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1000, 13);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, int0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2689, 2689);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2669);
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, sparseMatrix0, cCSMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2689, 2689, (double) 0, (Random) mockRandom0);
      Integer integer0 = new Integer(2689);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      mockRandom0.nextGaussian();
      cCSMatrix0.updateAt(0, 0, matrixFunction0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(39, 2669);
      Matrix matrix0 = cCSMatrix0.rotate();
      cCSMatrix0.insert(matrix0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(5, 39);
      cCSMatrix1.spliterator();
      cCSMatrix1.toDenseMatrix();
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.minInColumn(39);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(28, (-10.331313));
      cCSMatrix0.copyOfShape(28, 2649);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(3367);
      CCSMatrix.random(28, 3367, 0.5, (Random) mockRandom1);
  }
}
