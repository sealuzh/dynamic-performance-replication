/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:41:45 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedInputStream;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.token = 0;
      char char0 = jSONReaderScanner0.charAt(50);
      assertEquals('\u001A', char0);
      
      int int0 = jSONReaderScanner0.indexOf('\u001A', 604);
      assertEquals(604, int0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.bytesValue();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-390);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed str", (-390));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-3523));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3523
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      int int0 = jSONReaderScanner0.indexOf('y', 68);
      assertEquals((-1), int0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.arrayCopy(0, charArray0, 0, 0);
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error, expect ");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[0];
      int int0 = (-1940);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.np = (-1940);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TkF~{'n1\"EZ<6|=UG", (-491));
      jSONReaderScanner0.putChar('?');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$VALUES");
      char char0 = 'Y';
      jSONReaderScanner0.putChar('Y');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tD(5A'RTeP");
      jSONReaderScanner0.close();
      assertEquals('t', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.sub_chars(21, 21);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'Q';
      charArray0[2] = ' ';
      charArray0[3] = '?';
      charArray0[4] = 'd';
      charArray0[5] = 'k';
      charArray0[6] = '|';
      charArray0[7] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1479, (-3286));
      jSONReaderScanner0.stringVal();
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(1479, 0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals('0', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal stat, textLength is zero");
      char char0 = 'j';
      jSONReaderScanner0.scanUUID('j');
      jSONReaderScanner0.subString(832, 832);
      jSONReaderScanner0.bytesValue();
      int int0 = (-1);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-1), 2112, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DiR<");
      jSONReaderScanner0.subString(3, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(3678080, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 65536;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65536);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65536);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('2', 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65536
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(");
      SymbolTable symbolTable0 = new SymbolTable(657);
      String string0 = jSONReaderScanner0.addSymbol(73, 1, (-1600), symbolTable0);
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 93;
      int int1 = 512;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xZC", 512);
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - x, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.eofPos = 0;
      jSONReaderScanner0.charAt(0);
      jSONReaderScanner0.token = 0;
      jSONReaderScanner0.matchStat = 26;
      charArray0[0] = '\u001A';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.isBlankInput();
      int int0 = 68;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(68, charArray0, 68, 68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 48;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xZC", 48);
      char char0 = '*';
      jSONReaderScanner0.indexOf('*', 48);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(65279);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - x, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hj%lyy(YXDW:hH");
      jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("KmpH#x8@#", 7610);
      jSONReaderScanner0.putChar('?');
      jSONReaderScanner0.numberString();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5");
      assertEquals('5', jSONReaderScanner0.getCurrent());
      
      char char0 = jSONReaderScanner0.next();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5");
      jSONReaderScanner0.scanNumber();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pp");
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 'y';
      jSONReaderScanner0.nextIdent();
      charArray0[2] = '2';
      jSONReaderScanner0.scanUUID('f');
      charArray0[3] = 'x';
      charArray0[4] = 'y';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.np = 1209;
      jSONReaderScanner0.scanDouble('y');
      char char0 = jSONReaderScanner0.charAt(83);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2Jj-T#>ml'57");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.indexOf('@', 7610);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("MGfs&;Q=yy*v%<7");
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanUUID('Y');
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanDouble('9');
      jSONReaderScanner0.charAt(1209);
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "TkF~{'n1\"EZ<6|=UG";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TkF~{'n1\"EZ<6|=UG", (-511));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("HKS xO(O`6yaC\"V-", 4547);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.numberString();
      SymbolTable symbolTable0 = new SymbolTable(4547);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier :  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Yex?QzBJb ", 455);
      jSONReaderScanner0.nextIdent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanUUID('3');
      jSONReaderScanner0.putChar('C');
      jSONReaderScanner0.numberString();
      SymbolTable symbolTable0 = new SymbolTable(68);
      jSONReaderScanner0.isBlankInput();
      assertEquals('?', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "TkF~{'n1\"EZ<6|=UG";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TkF~{'n1\"EZ<6|=UG", (-491));
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tD(5A'RTeP");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tD(5A'RTeP");
      jSONReaderScanner0.hasSpecial = true;
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, textLength is zero");
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.putChar('-');
      jSONReaderScanner0.numberString();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" state, text", (-1856));
      jSONReaderScanner1.isBlankInput();
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, textLength is zero");
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.putChar('\\');
      int int0 = Calendar.WEEK_OF_YEAR;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("STd;3");
      jSONReaderScanner0.putChar('_');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.next();
      char[] charArray0 = new char[4];
      charArray0[0] = '\u001A';
      charArray0[1] = '\u001A';
      charArray0[2] = '\u001A';
      charArray0[3] = '\u001A';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 4, 0);
      jSONReaderScanner1.isEOF();
      jSONReaderScanner0.putChar('\u001A');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableCheckSpe`ialCha");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.next();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.charAt(1530);
      jSONReaderScanner0.next();
      jSONReaderScanner0.isEOF();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2492);
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-41);
      char[] charArray0 = new char[20];
      charArray0[0] = '\u001A';
      charArray0[1] = 'i';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 14, (byte) (-65));
      jSONReaderScanner1.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableCheckSpe`ialCha");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.next();
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArray0;
      jSONReaderScanner0.lexError("DisableCheckSpe`ialCha", objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jSONReaderScanner0.bp = 3467;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B]gQFm^#");
      jSONReaderScanner0.nextIdent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
