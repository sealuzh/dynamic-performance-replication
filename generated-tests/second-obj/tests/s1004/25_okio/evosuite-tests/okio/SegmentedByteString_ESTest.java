/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:27:11 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(2433L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf((byte[]) null, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)1);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      String string0 = segmentedByteString0.hex();
      assertEquals("0100", string0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.internalArray();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Tj#jrKO*=%Rj83ZW");
      mockFileOutputStream0.getChannel();
      byteString0.rangeEquals((int) (byte)0, byteString0, 8189, 275);
      // Undeclared exception!
      try { 
        byteString0.substring(37, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)0);
      buffer1.require((byte)0);
      boolean boolean0 = segmentedByteString0.rangeEquals((-1513), (byte[]) null, (int) (byte)0, (-962));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)0);
      buffer0.snapshot();
      ByteString.encodeUtf8("5@`pNyY0f.");
      ByteString byteString0 = buffer1.snapshot();
      byte[] byteArray0 = new byte[0];
      byteString0.toAsciiLowercase();
      assertEquals(2, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.base64();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = byteString0.getByte(1);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte) (-87));
      ByteString byteString0 = buffer0.snapshot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Tj#jrKO*=%Rj83ZW");
      mockFileOutputStream0.write((int) (byte) (-87));
      byteString0.write(mockFileOutputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, (long) (byte) (-87));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-47);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.hex();
      byteString0.hashCode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.hashCode();
      MockFile mockFile0 = new MockFile("v'[che(kd6|f");
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)0);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      segmentedByteString0.write(buffer1);
      segmentedByteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals((int) (byte)0, (byte[]) null, 315, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.hex();
      byteString0.hashCode();
      boolean boolean0 = byteString0.startsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)0);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      buffer0.readShort();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.asByteBuffer();
      assertEquals(2L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(2, byteString0.size());
      
      byteString0.hmacSha256(byteString0);
      boolean boolean0 = byteString0.equals(buffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte) (-22));
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-22);
      segmentedByteString0.startsWith(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((int) (byte) (-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      byteString0.sha1();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1895L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1895
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.toAsciiUppercase();
      boolean boolean0 = byteString0.equals(buffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.rangeEquals((-3940), (ByteString) null, 8189, 275);
      // Undeclared exception!
      try { 
        byteString0.substring(37, 318);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(2)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteString byteString0 = buffer1.snapshot();
      HashingSource.hmacSha1(buffer1, byteString0);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString byteString1 = buffer1.snapshot((int) (byte)0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = buffer1.snapshot();
      byteString0.utf8();
      byteString0.equals(byteString1);
      // Undeclared exception!
      try { 
        byteString0.getByte(444);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=444 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = buffer1.snapshot();
      byteString1.base64Url();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      byteString1.utf8();
      buffer1.snapshot();
      ByteString byteString2 = realBufferedSource0.buffer.snapshot();
      byteString1.equals(byteString2);
      byteString0.getByte((byte)0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pipe pipe0 = new Pipe(2433L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.utf8();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = new Buffer();
      boolean boolean0 = realBufferedSource0.closed;
      byteString0.equals(byteString0);
      Charset.defaultCharset();
      byteString0.rangeEquals(8, (byte[]) null, (-1), (-4482));
      // Undeclared exception!
      try { 
        byteString0.substring((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(605);
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(1, byteString0.size());
      
      String string0 = byteString0.hex();
      assertEquals("5d", string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      byteString0.md5();
      buffer2.writeShortLe((-611));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource1.buffer;
      realBufferedSource0.buffer.readByte();
      byteString0.sha256();
      buffer0.writeHexadecimalUnsignedLong(0L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = buffer1.snapshot();
      byteString0.utf8();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000");
      byteString1.hex();
      ByteString byteString2 = byteString0.md5();
      Buffer buffer2 = realBufferedSource0.buffer.writeShortLe(1559);
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer buffer4 = realBufferedSource0.buffer;
      byteString0.rangeEquals(57, byteString1, 57, 1559);
      byte byte0 = ObjectStreamConstants.TC_MAX;
      byteString1.sha256();
      ByteString byteString3 = buffer2.snapshot();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.endsWith(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      realBufferedSource0.buffer.readUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.sha1(buffer3);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(hashingSource0);
      realBufferedSource2.indexOfElement(byteString2);
      byteString0.startsWith(byteString2);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(hashingSource0);
      RealBufferedSource realBufferedSource4 = new RealBufferedSource(buffer3);
      ByteString byteString4 = byteString3.substring((int) (byte)0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean1 = byteString3.equals(byteString0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(boolean1 == boolean0);
      
      byteString3.hmacSha1(byteString4);
      assertFalse(byteString3.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)0);
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = buffer1.snapshot();
      byteString0.utf8();
      Buffer buffer2 = new Buffer();
      byteString1.utf8();
      ByteString byteString2 = byteString0.md5();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      boolean boolean1 = byteString1.startsWith(byteString1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      boolean boolean2 = byteString2.rangeEquals(1548, byteString1, (int) (byte)0, (int) (byte)0);
      assertFalse(boolean2 == boolean1);
      
      byteString0.utf8 = "s.limit == s.pos";
      ByteString.decodeBase64("\u0000\u0000");
      byteString0.base64();
      byteString2.toString();
      byteString1.sha1();
      assertTrue(byteString1.equals((Object)byteString0));
  }
}
