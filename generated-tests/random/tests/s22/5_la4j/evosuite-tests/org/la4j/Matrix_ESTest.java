/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 07:14:58 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 9;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(9, mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      mockRandom0.nextBoolean();
      matrix0.each(matrixProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      int int1 = 531;
      int int2 = 7;
      // Undeclared exception!
      try { 
        matrix0.insertColumn(7, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(827, 827);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 827;
      doubleArray0[1] = (double) 827;
      doubleArray0[2] = (double) 827;
      doubleArray0[3] = (double) 827;
      doubleArray0[4] = 4451.5721288924815;
      doubleArray0[5] = (double) 827;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(827, 827, doubleArray0);
      boolean boolean0 = rowMajorSparseMatrix0.equals((Matrix) denseMatrix0, (-1169.394341629013));
      assertFalse(boolean0);
      assertEquals(827, denseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        denseMatrix0.equals((Matrix) rowMajorSparseMatrix0, 457.7143060693394);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2669, 2669);
      int int0 = 17;
      Vector vector0 = Vector.zero(2669);
      // Undeclared exception!
      matrix0.insertColumn(17, vector0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      ooPlaceOuterProduct0.ensureApplicableTo(sparseVector0, sparseVector0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.sum();
      matrix0.rank();
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.removeColumn(1084);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = (double) 1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(1, 1, doubleArray0);
      sparseMatrix0.columnMajorIterator();
      sparseMatrix0.determinant();
      sparseMatrix0.blankOfRows(1);
      // Undeclared exception!
      try { 
        sparseMatrix0.slice((-2146166172), (-669), (-2146153935), 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2146166172' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 222;
      int int1 = 247;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(222, 247, 231);
      Matrix matrix0 = sparseMatrix0.blankOfShape(2, 2);
      matrix0.blankOfRows(222);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = sparseMatrix0.transformRow(2, vectorFunction0);
      // Undeclared exception!
      matrix1.equals((Object) sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(3886, 0.0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 926, (-4136), 1021, 914, 926, 896);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 1021, 914
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(37);
      denseVector0.sum();
      Matrix matrix0 = denseVector0.toRowMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      denseVector0.fold(vectorAccumulator0);
      int int0 = 11;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateColumn(11, vectorFunction0);
      denseVector0.blank();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      denseVector0.toArray();
      // Undeclared exception!
      try { 
        matrix0.foldRow((-850), vectorAccumulator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1887.14041);
      doubleArray1[1] = (-3725.124607515299);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-3725.124607515299);
      doubleArray2[1] = (-1887.14041);
      doubleArray2[2] = (-3725.124607515299);
      doubleArray2[3] = (-1887.14041);
      doubleArray2[4] = (-111.010435435839);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-3725.124607515299);
      doubleArray3[1] = (-1887.14041);
      doubleArray3[2] = (-3725.124607515299);
      doubleArray3[3] = (-1887.14041);
      doubleArray3[4] = (-3725.124607515299);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-111.010435435839);
      doubleArray4[1] = (-1887.14041);
      doubleArray4[2] = (-111.010435435839);
      doubleArray4[3] = (-3725.124607515299);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-1887.14041);
      doubleArray5[1] = (-1887.14041);
      doubleArray5[2] = (-1887.14041);
      doubleArray5[3] = (-111.010435435839);
      doubleArray5[4] = 577.279;
      doubleArray5[5] = (-1887.14041);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-1887.14041);
      doubleArray6[1] = 577.279;
      doubleArray6[2] = 577.279;
      doubleArray6[3] = (-111.010435435839);
      doubleArray6[4] = (-3725.124607515299);
      doubleArray0[5] = doubleArray6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, (-4993), (-4993), 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -4993, -4993
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 658;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(658, 658);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.updateRow(13, vectorFunction0);
      // Undeclared exception!
      denseMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.determinant();
      // Undeclared exception!
      try { 
        denseMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 157;
      Matrix matrix0 = Matrix.zero(157, 1341);
      DenseVector denseVector0 = DenseVector.constant(157, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        matrix0.insertRow(2, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 157. Should be: 1341.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 827.0;
      doubleArray0[1] = (double) 579;
      Matrix matrix0 = Matrix.from1DArray(579, 579, doubleArray0);
      int int0 = 8;
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.setRow(8, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 6. Should be: 579.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = null;
      int int0 = (-1137);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("%%MatrixMarket vector coordinate real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(7);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(1.0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, 0, 2, 2, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2 rows and 7 cols at 0, 2 in a 7x7 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 16;
      int int1 = 14;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(16, 16, 14);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = columnMajorSparseMatrix0.transformRow(14, vectorFunction0);
      int int2 = 4;
      int int3 = 1895;
      // Undeclared exception!
      try { 
        matrix0.swapColumns(4, 1895);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1896
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Matrix matrix1 = Matrix.block(matrix0, matrix0, matrix0, matrix0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 2599, 2599);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2599 rows and 2599 cols at 0, 0 in a 1x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1401;
      doubleArray0[1] = (-976.9876);
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1401, 2444, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeColumn((-660));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2443
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(9, 0);
      MockRandom mockRandom0 = new MockRandom(9);
      DenseVector denseVector0 = DenseVector.random(1, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(17, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17);
      rowMajorSparseMatrix0.columns();
      Matrix matrix0 = rowMajorSparseMatrix0.removeFirstRow();
      matrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 17);
      int int0 = 632;
      int int1 = (-1853);
      Matrix matrix1 = matrix0.multiply((Matrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix1.forEach((Consumer<? super Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(48);
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      matrix0.euclideanNorm();
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(48, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..47
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 528;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(528);
      sparseMatrix0.getColumn(528);
      int int1 = (-2687);
      sparseMatrix0.equals((Object) null);
      // Undeclared exception!
      try { 
        sparseMatrix0.mkString((NumberFormat) null, "org.la4j.decomposition.SingularValueDecompositor", "coordinate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 827.0;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 827.0;
      doubleArray4[2] = 1529.4;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1529.4;
      doubleArray5[1] = 1529.4;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 987.0440116;
      doubleArray5[4] = 827.0;
      doubleArray5[5] = 827.0;
      doubleArray5[6] = 827.0;
      doubleArray5[7] = 827.0;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 987.0440116;
      doubleArray0[6] = doubleArray7;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      sparseMatrix0.swapColumns(10, 10);
      assertEquals(0.42857142857142855, sparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      assertEquals(0.16666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      String string0 = matrix0.toCSV(numberFormat0);
      assertEquals("1, 0, 0, 0, 0, 0\n0, 1, 0, 0, 0, 0\n0, 0, 1, 0, 0, 0\n0, 0, 0, 1, 0, 0\n0, 0, 0, 0, 1, 0\n0, 0, 0, 0, 0, 1\n", string0);
      
      boolean boolean0 = matrix0.equals((Matrix) rowMajorSparseMatrix0, 2545.10674039916);
      assertTrue(boolean0);
      assertFalse(matrix0.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(19);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.determinant();
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = matrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, (-1936221503), 1836, 3731, (-1936221503));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 3731x-1936221503
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 67;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(67);
      DecimalFormat decimalFormat0 = new DecimalFormat("pjD1}z)dHCsP1n*~u#M");
      decimalFormat0.format((-787.964597251));
      sparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      sparseMatrix0.swapRows((-1853), (-1853));
      // Undeclared exception!
      sparseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 6;
      ooPlaceMatricesSubtraction0.partiallyApply((DenseMatrix) null);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(6, 6);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      int int1 = (-3311);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, (-3311), (-1), (-1), 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1x6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(8);
      sparseMatrix0.rank();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(150, (-396), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 150x-396
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldColumns(vectorAccumulator0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      // Undeclared exception!
      try { 
        denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 2301;
      Matrix matrix0 = Matrix.constant(2301, 2301, 2545.10674039916);
      String string0 = "0$RXNSy&|bdl";
      // Undeclared exception!
      matrix0.sum();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-730.5735342265);
      doubleArray0[1] = 957.114;
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (-2256.6438);
      doubleArray0[5] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.toMatrixMarket();
      Matrix matrix1 = matrix0.copy();
      DenseVector.unit(204);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 204, 617, 204, 204, 204, 204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 204, 204
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(2157, 2157);
      int[] intArray0 = new int[7];
      intArray0[0] = 2157;
      intArray0[1] = 2157;
      intArray0[2] = 2157;
      intArray0[3] = 2157;
      intArray0[4] = 2157;
      intArray0[5] = 2157;
      intArray0[6] = 2157;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3234.198177);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-3234.198177);
      doubleArray2[2] = (-3234.198177);
      doubleArray2[3] = (-3234.198177);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 961.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-3234.198177);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-3234.198177);
      doubleArray3[5] = (-3234.198177);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-3234.198177);
      doubleArray4[1] = 961.0;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 961.0;
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = (-3234.198177);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = 827.0;
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 961.0;
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = 1.0;
      doubleArray5[7] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-346.592804772);
      doubleArray6[1] = 827.0;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 961.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-346.592804772);
      doubleArray7[1] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (-1.0);
      doubleArray8[1] = 827.0;
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = matrix0.multiply((-1.0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 5);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, 4);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      Locale locale0 = new Locale("QN-]PH)g", "QN-]PH)g");
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      String string0 = matrix0.mkString(numberFormat0);
      assertEquals("0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 403;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(403);
      columnMajorSparseMatrix0.nonZeroIteratorOfRow((-4639));
      columnMajorSparseMatrix0.sliceTopLeft(2, 5);
      Matrix matrix0 = columnMajorSparseMatrix0.add((-809.41));
      // Undeclared exception!
      matrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 10;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(10, mockRandom0);
      DenseMatrix.randomSymmetric(10, mockRandom0);
      int int1 = (-1212);
      Matrix matrix0 = denseMatrix0.copyOfRows(10);
      matrix0.insert((Matrix) denseMatrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-1212));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1212.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(382, 382);
      // Undeclared exception!
      try { 
        denseMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("2*?sUn'N)rRK+EiE@l");
      matrix0.toCSV((NumberFormat) choiceFormat0);
      matrix0.toCSV();
      matrix0.transform((MatrixFunction) null);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray((-1), (-1), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(6, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, (-2865.22178677975));
      sparseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 827.0;
      doubleArray0[1] = (-396.8);
      doubleArray0[2] = 1.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.hashCode();
      int int0 = 0;
      // Undeclared exception!
      try { 
        DenseVector.constant((-2989), (-1169.394341629013));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 48;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(48, 48);
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      String string0 = denseMatrix0.toCSV();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string0);
      // Undeclared exception!
      ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 17;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(17, (-2188.002832898));
      Matrix matrix0 = rowMajorSparseMatrix0.removeFirstRow();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      matrix0.toString();
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      double double0 = 1.0;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 1.0);
      int int1 = (-2031);
      Vector vector0 = denseMatrix0.getColumn(10);
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow((-2031), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 3052.136995;
      doubleArray2[1] = 207.308611;
      doubleArray2[2] = (-966.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 3052.136995;
      doubleArray3[1] = (-966.0);
      doubleArray3[2] = 207.308611;
      doubleArray3[3] = 207.308611;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 207.308611;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-966.0);
      doubleArray5[1] = (-248.2);
      doubleArray5[2] = (-966.0);
      doubleArray5[3] = 3052.136995;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 3052.136995;
      doubleArray6[1] = (-966.0);
      doubleArray6[2] = 3052.136995;
      doubleArray6[3] = (-248.2);
      doubleArray0[5] = doubleArray6;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceTopLeft((-2021161079), (-2021161079));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-2021161079][0..-2021161079].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector.zero(13);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.setColumn(14, (double) 14);
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1821, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      rowMajorSparseMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 535;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(535);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      sparseMatrix0.toColumnVector();
      int[] intArray0 = new int[3];
      intArray0[0] = 535;
      intArray0[1] = 535;
      intArray0[2] = 535;
      // Undeclared exception!
      try { 
        sparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '535' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.constant(14, 14);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      Matrix matrix1 = matrix0.sliceBottomRight(14, (-1491));
      assertEquals(0, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(37, 37);
      Matrix matrix0 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertColumn(37, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 14;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(14, 14);
      int int1 = 550;
      double double0 = (-144.5255147445);
      int int2 = 2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2, 550);
      int int3 = 22;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 2, (-958), 22, 22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 2, -958
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-732.690423);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2.0;
      doubleArray1[6] = 1722.22;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      int[] intArray0 = new int[6];
      intArray0[0] = (-29);
      intArray0[1] = 358;
      intArray0[2] = 5;
      intArray0[3] = (-3197);
      intArray0[4] = 361;
      intArray0[5] = (-376);
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-29' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      Matrix matrix0 = Matrix.identity(861);
      // Undeclared exception!
      try { 
        matrix0.removeRow(3018);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..860
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1276, 1276);
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 9;
      doubleArray1[1] = (double) 1276;
      doubleArray1[2] = (double) 1276;
      doubleArray1[3] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 9;
      doubleArray2[2] = (double) 1276;
      doubleArray2[3] = (double) 1276;
      doubleArray2[4] = (double) 9;
      doubleArray2[5] = (double) 1276;
      doubleArray2[6] = (double) 1276;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 9;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 9;
      doubleArray4[1] = (double) 1276;
      doubleArray4[2] = (double) 1276;
      doubleArray4[3] = (-1169.394341629013);
      doubleArray4[4] = (double) 9;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 1276;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (-1169.394341629013);
      doubleArray6[1] = (-1169.394341629013);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-1169.394341629013);
      doubleArray7[1] = (-1169.394341629013);
      doubleArray0[6] = doubleArray7;
      DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.maxInRow(9);
      // Undeclared exception!
      denseMatrix0.divide(1276);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 48;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(48);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.zero(1000);
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(377);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      denseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(2361, 1, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1421.0;
      doubleArray1[1] = (-786.53755127);
      doubleArray1[2] = 2030.084013653674;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1421.0;
      doubleArray2[1] = 2030.084013653674;
      doubleArray2[2] = (-786.53755127);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1421.0;
      doubleArray3[1] = 1421.0;
      doubleArray3[2] = (-786.53755127);
      doubleArray3[3] = 2030.084013653674;
      doubleArray3[4] = 2030.084013653674;
      doubleArray3[5] = 1421.0;
      doubleArray3[6] = 1421.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 1421.0;
      doubleArray4[1] = 2030.084013653674;
      doubleArray4[2] = 2030.084013653674;
      doubleArray4[3] = (-786.53755127);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 2030.084013653674;
      doubleArray5[1] = 1421.0;
      doubleArray5[2] = (-786.53755127);
      doubleArray5[3] = (-786.53755127);
      doubleArray5[4] = 2030.084013653674;
      doubleArray5[5] = 2030.084013653674;
      doubleArray5[6] = 2030.084013653674;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.transformRow(3347, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1;
      Matrix matrix0 = Matrix.constant(1, 1, 0.0);
      matrix0.rank();
      MockRandom mockRandom0 = new MockRandom((-956L));
      // Undeclared exception!
      try { 
        mockRandom0.ints((-2540L), 39, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      assertSame(denseMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4, 4);
      double double0 = denseMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        denseMatrix0.transformColumn((-5391), (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2953);
      int int0 = 3;
      // Undeclared exception!
      matrix0.setColumn(3, (double) 3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = 594L;
      MockRandom mockRandom0 = new MockRandom(594L);
      Matrix matrix0 = Matrix.random(2831, 2, mockRandom0);
      int int0 = (-2307);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        matrix0.updateColumn((-2307), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1015.1558382767);
      doubleArray1[1] = (-1460.7584);
      doubleArray1[2] = (-565.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1460.7584);
      doubleArray2[1] = (-565.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1015.1558382767);
      doubleArray3[1] = (-1015.1558382767);
      doubleArray3[2] = (-1460.7584);
      doubleArray3[3] = (-1015.1558382767);
      doubleArray3[4] = (-1460.7584);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1015.1558382767);
      doubleArray4[1] = (-1460.7584);
      doubleArray4[2] = (-565.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-1460.7584);
      doubleArray5[1] = (-1015.1558382767);
      doubleArray5[2] = (-1460.7584);
      doubleArray0[4] = doubleArray5;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.non(matrixPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1869);
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1869;
      doubleArray1[1] = (double) 1869;
      doubleArray1[2] = (double) 1869;
      doubleArray1[3] = 208.0;
      doubleArray1[4] = (double) 1869;
      doubleArray1[5] = (double) 1869;
      doubleArray1[6] = (double) 1869;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-3187.073706372948);
      doubleArray4[1] = (double) 1869;
      doubleArray4[2] = (double) 1869;
      doubleArray4[3] = 100.0;
      doubleArray4[4] = (double) 1869;
      doubleArray4[5] = 208.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 1869;
      doubleArray5[1] = 100.0;
      doubleArray5[2] = (-3187.073706372948);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-3187.073706372948);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (double) 1869;
      doubleArray7[1] = (double) 1869;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-3187.073706372948);
      doubleArray7[4] = 2727.0;
      doubleArray7[5] = (double) 1869;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 2727.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 1.0;
      doubleArray8[3] = 208.0;
      doubleArray8[4] = 208.0;
      doubleArray8[5] = (double) 1869;
      doubleArray8[6] = 100.0;
      doubleArray8[7] = 2727.0;
      doubleArray8[8] = (double) 1869;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 3420;
      int int1 = 5;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(3420, Integer.MAX_VALUE, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 806;
      DenseVector denseVector0 = DenseVector.zero(806);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.iteratorOfRow(1718);
      denseVector0.multiply(matrix0);
      // Undeclared exception!
      try { 
        matrix0.minInRow(2147482738);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("      ");
      assertEquals(0, denseMatrix0.columns());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(37, vectorFunction0);
      assertEquals(1, matrix0.rows());
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 227;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 227;
      doubleArray0[4] = (double) 32;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(32, 227, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.product();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 4;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(4);
      Matrix matrix0 = sparseMatrix0.copy();
      Matrix matrix1 = Matrix.unit(4, 4);
      matrix1.copyOfColumns(4);
      int int1 = 1792;
      Matrix matrix2 = Matrix.unit(4, 1792);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.update(matrixFunction0);
      // Undeclared exception!
      matrix0.multiply(matrix2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(3);
      ooPlaceMatricesMultiplication0.partiallyApply(denseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3, 0.0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      int int0 = 7;
      // Undeclared exception!
      try { 
        matrix0.get(3, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-232.8833893682668);
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-232.8833893682668);
      doubleArray3[1] = (-232.8833893682668);
      doubleArray3[2] = (-232.8833893682668);
      doubleArray3[3] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-232.8833893682668);
      doubleArray4[1] = (-232.8833893682668);
      doubleArray4[2] = (-232.8833893682668);
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (-232.8833893682668);
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray4[7] = (-232.8833893682668);
      doubleArray4[8] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (-232.8833893682668);
      doubleArray5[3] = (-606.4646107288538);
      doubleArray5[4] = (-605.3918075675828);
      doubleArray5[5] = (-232.8833893682668);
      doubleArray5[6] = 5888.763;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-232.8833893682668);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-232.8833893682668);
      doubleArray6[3] = (double) 0;
      doubleArray6[4] = (-232.8833893682668);
      doubleArray6[5] = 1.0;
      doubleArray6[6] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = (-605.3918075675828);
      doubleArray7[2] = (-232.8833893682668);
      doubleArray7[3] = (-232.8833893682668);
      doubleArray7[4] = (-605.3918075675828);
      doubleArray7[5] = (-232.8833893682668);
      doubleArray7[6] = (-606.4646107288538);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = (double) 0;
      doubleArray8[1] = (-232.8833893682668);
      doubleArray8[2] = (-232.8833893682668);
      doubleArray8[3] = 3257.61;
      doubleArray8[4] = 5888.763;
      doubleArray8[5] = (-1.0);
      doubleArray8[6] = (double) 0;
      doubleArray8[7] = 1.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = 1.0;
      doubleArray9[1] = 5888.763;
      doubleArray9[2] = (-606.4646107288538);
      doubleArray9[3] = (-1.0);
      doubleArray9[4] = 1079.5695;
      doubleArray9[5] = (-605.3918075675828);
      doubleArray9[6] = 3257.61;
      doubleArray9[7] = 0.0;
      doubleArray0[8] = doubleArray9;
      Matrix.from2DArray(doubleArray0);
      String string0 = matrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix array real general\n0 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2140.88879;
      doubleArray1[1] = 393.34981019;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 4618.8292188419;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2140.88879;
      doubleArray2[2] = 4618.8292188419;
      doubleArray2[3] = 2140.88879;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2140.88879;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.removeFirstRow();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      int int1 = 988;
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.QR;
      columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      columnMajorSparseMatrix0.iteratorOfRow(988);
      columnMajorSparseMatrix0.copyOfColumns(6);
      Matrix matrix0 = columnMajorSparseMatrix0.divide(6);
      Double double0 = new Double((-674.0));
      matrix0.equals((Object) double0);
      columnMajorSparseMatrix0.determinant();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (double) 988;
      doubleArray1[2] = (double) 6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = (double) 988;
      doubleArray2[2] = (double) 988;
      doubleArray2[3] = (double) 988;
      doubleArray2[4] = (double) 6;
      doubleArray2[5] = (double) 6;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 6;
      doubleArray0[2] = doubleArray3;
      Matrix.from2DArray(doubleArray0);
      matrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.set(988, 6, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '988' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(17);
      mockRandom0.doubles((long) 17);
      Matrix matrix0 = Matrix.randomSymmetric(17, mockRandom0);
      Matrix matrix1 = matrix0.copyOfRows(32);
      matrix1.blankOfColumns(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(17, 8, 8);
      sparseMatrix0.columnMajorIterator();
      mockRandom0.doubles((-751.77179016), 1.0);
      matrix0.equals((Object) sparseMatrix0);
      // Undeclared exception!
      try { 
        sparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(Integer.MAX_VALUE, 2147482738);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.setSeed(13);
      DenseMatrix denseMatrix0 = DenseMatrix.random(13, 13, mockRandom0);
      mockRandom0.nextInt();
      mockRandom0.nextInt(13);
      Matrix matrix0 = denseMatrix0.removeFirstColumn();
      assertEquals(12, matrix0.columns());
      
      denseMatrix0.iteratorOfColumn((-3297));
      denseMatrix0.rowMajorIterator();
      Matrix matrix1 = denseMatrix0.rotate();
      assertEquals(13, matrix1.rows());
      assertNotSame(matrix1, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.rotate();
      matrix1.infinityNorm();
      matrix0.shuffle();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      // Undeclared exception!
      Matrix.random(821, 1271, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 2868;
      Matrix matrix0 = Matrix.diagonal(2868, 7.105427357601004E-13);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        matrix0.updateRow(2868, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 131;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(131, 0.0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      matrix0.mkString("@}*>1fi6\"I Yo}Dk", "org.la4j.linear.SeidelSolver");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-909.53706717);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-909.53706717);
      doubleArray3[2] = (-909.53706717);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-909.53706717);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1170.6200624761411);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-1170.6200624761411);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (-1170.6200624761411);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-1170.6200624761411);
      doubleArray8[1] = (-909.53706717);
      doubleArray8[2] = (-1170.6200624761411);
      doubleArray8[3] = (-1170.6200624761411);
      doubleArray8[4] = (-909.53706717);
      doubleArray8[5] = (-909.53706717);
      doubleArray8[6] = 0.0;
      doubleArray8[7] = 0.0;
      doubleArray8[8] = (-909.53706717);
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(8, denseMatrix0.rows());
      
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      matrix0.add((Matrix) denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.divide((-907.0));
      matrix0.blankOfShape(1448, 1448);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRows(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateRow((-1133), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1133
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 1835;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1835, 1835, 1835);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInRow(2163);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 849;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(849);
      int int1 = 1053;
      Matrix matrix0 = Matrix.zero(849, 1053);
      int int2 = 1601;
      int int3 = 8;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 1601, 849, 32, Integer.MAX_VALUE, 8, 2567);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 32, 2147483647
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(704, 703);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.insertRow(704, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..703
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      Matrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1766, 1766, 1766);
      // Undeclared exception!
      denseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 421.357;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1401, 2444, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeColumn(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2444
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.removeLastColumn();
      denseMatrix0.rows();
      double double0 = matrix0.norm();
      assertEquals(0, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 513.9108;
      doubleArray1[1] = (-103.4425608578169);
      doubleArray1[2] = 486.0;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 486.0;
      doubleArray2[1] = (-103.4425608578169);
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-103.4425608578169);
      doubleArray2[4] = (-103.4425608578169);
      doubleArray2[5] = 513.9108;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = 340.4;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 513.9108;
      doubleArray3[3] = 513.9108;
      doubleArray3[4] = 340.4;
      doubleArray3[5] = 486.0;
      doubleArray3[6] = 340.4;
      doubleArray3[7] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 513.9108;
      doubleArray4[1] = 513.9108;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix1 = DenseMatrix.identity(392);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(", ");
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix1, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.multiply(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 5 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1953;
      int int1 = 5292;
      long long0 = 1000L;
      DenseMatrix.fromCSV("8");
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(5292, (-1507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 5292x-1507
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1170.6200624761411);
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 9.689847970114592E-11;
      doubleArray3[3] = 9.689847970114592E-11;
      doubleArray3[4] = 1421.0;
      doubleArray3[5] = (-1230.151599205528);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1421.0;
      doubleArray4[1] = (-1230.151599205528);
      doubleArray4[2] = (-1230.151599205528);
      doubleArray4[3] = (-1230.151599205528);
      doubleArray4[4] = (-1170.6200624761411);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-1230.151599205528);
      doubleArray5[1] = (-1230.151599205528);
      doubleArray5[2] = (-1170.6200624761411);
      doubleArray5[3] = (-1230.151599205528);
      doubleArray5[4] = 9.689847970114592E-11;
      doubleArray5[5] = 1421.0;
      doubleArray5[6] = Double.POSITIVE_INFINITY;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 1421.0;
      doubleArray6[1] = (-1170.6200624761411);
      doubleArray6[2] = 9.689847970114592E-11;
      doubleArray6[3] = 1421.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 2.0;
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [4..7][4..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(905, (-1.0));
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(18, (-5116));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-5116' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 4380;
      ColumnMajorSparseMatrix.zero(4380, 17);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(319, (-1386), 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 319x-1386
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(8, 8);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(973, 973);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.maxInColumn(973);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '973' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-328.9089131);
      doubleArray1[1] = 8.881784197001252E-14;
      doubleArray1[2] = 4.9E-324;
      doubleArray1[3] = 100.0;
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = sparseMatrix0.divide((-328.9089131));
      assertEquals(4, matrix0.columns());
      assertEquals((-0.30403554302463204), matrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Matrix.identity(6);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4746.33085826);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(6, 6, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 698.1216;
      doubleArray2[1] = 2271.317060423007;
      doubleArray2[2] = 2903.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2903.0;
      doubleArray3[1] = 2271.317060423007;
      doubleArray3[2] = 2271.317060423007;
      doubleArray3[3] = 2271.317060423007;
      doubleArray3[4] = 2271.317060423007;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 2271.317060423007;
      doubleArray4[2] = (-1531.69848);
      doubleArray4[3] = 2903.0;
      doubleArray0[3] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      
      DenseMatrix denseMatrix0 = DenseMatrix.block(matrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Matrix matrix1 = denseMatrix0.add((-1531.69848));
      denseMatrix0.setRow(Integer.MAX_VALUE, 698.1216);
      assertTrue(matrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(denseMatrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 1880;
      Matrix matrix0 = Matrix.unit(1880, 1880);
      // Undeclared exception!
      matrix0.norm();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-966.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2545.10674039916;
      doubleArray2[1] = (-966.0);
      doubleArray2[2] = (-966.0);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-966.0);
      doubleArray2[5] = 8.881784197001252E-14;
      doubleArray2[6] = (-966.0);
      doubleArray2[7] = (-1170.6200624761411);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 2545.10674039916;
      doubleArray3[2] = (-1170.6200624761411);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 8.881784197001252E-14;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 8.881784197001252E-14;
      doubleArray4[4] = 8.881784197001252E-14;
      doubleArray4[5] = (-1170.6200624761411);
      doubleArray4[6] = 8.881784197001252E-14;
      doubleArray4[7] = (-966.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1170.6200624761411);
      doubleArray5[1] = (-1170.6200624761411);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-1170.6200624761411);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (-1170.6200624761411);
      doubleArray6[1] = 2545.10674039916;
      doubleArray6[2] = 2545.10674039916;
      doubleArray6[3] = (-1170.6200624761411);
      doubleArray6[4] = 2545.10674039916;
      doubleArray6[5] = (-966.0);
      doubleArray6[6] = 8.881784197001252E-14;
      doubleArray6[7] = (-1170.6200624761411);
      doubleArray6[8] = (-966.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 2545.10674039916;
      doubleArray7[1] = (-966.0);
      doubleArray7[2] = 2545.10674039916;
      doubleArray7[3] = 2545.10674039916;
      doubleArray7[4] = 2545.10674039916;
      doubleArray7[5] = 2545.10674039916;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (-1170.6200624761411);
      doubleArray8[1] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 8.881784197001252E-14;
      doubleArray9[1] = 8.881784197001252E-14;
      doubleArray9[2] = 8.881784197001252E-14;
      doubleArray9[3] = 8.881784197001252E-14;
      doubleArray9[4] = 0.0;
      doubleArray9[5] = (-966.0);
      doubleArray9[6] = 2545.10674039916;
      doubleArray0[8] = doubleArray9;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      sparseMatrix0.multiplyByItsTranspose();
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(9, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 928;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(928, 928);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 928;
      doubleArray0[1] = (double) 928;
      doubleArray0[2] = (double) 928;
      doubleArray0[3] = (double) 928;
      doubleArray0[4] = (double) 928;
      doubleArray0[5] = (double) 928;
      doubleArray0[6] = (double) 928;
      doubleArray0[7] = (double) 928;
      doubleArray0[8] = (double) 928;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Matrix matrix1 = columnMajorSparseMatrix0.kroneckerProduct(matrix0);
      columnMajorSparseMatrix0.trace();
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 8352 rows and 0 cols at 0, 0 in a 9x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 1842;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1842, 1842);
      // Undeclared exception!
      denseMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-402.424);
      doubleArray1[2] = 4013.1203;
      doubleArray1[3] = (-529.326977635);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 8.000000000000002;
      doubleArray1[6] = 1459.075;
      doubleArray1[7] = 4.440892098500626E-14;
      doubleArray1[8] = (-1169.6197092);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 4013.1203;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 8.000000000000002;
      doubleArray2[3] = (-529.326977635);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 5.081649612985066E-11;
      doubleArray3[1] = 4013.1203;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 4013.1203;
      doubleArray4[2] = (-529.326977635);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 1459.075;
      doubleArray4[5] = 100.0;
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = 4013.1203;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-529.326977635);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-402.424);
      doubleArray5[3] = (-6124.666089);
      doubleArray5[4] = (-402.424);
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = (-1.0);
      doubleArray0[4] = doubleArray5;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "E3t'_kXEmE#2=QkT/&";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("E3t'_kXEmE#2=QkT/&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(9, 9, (-760.4));
      denseMatrix0.max();
      Matrix matrix0 = denseMatrix0.removeFirstColumn();
      matrix0.blank();
      matrix0.iteratorOfColumn(9);
      matrix0.copyOfShape(48, 450);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow(450, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1799);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1799, 0.0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, sparseMatrix0);
      // Undeclared exception!
      matrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-83);
      int int1 = 1489;
      // Undeclared exception!
      try { 
        Matrix.zero((-83), 1489);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1855, 1855);
      matrix0.max();
      matrix0.columnMajorIterator();
      matrix0.blankOfShape(1237, 1237);
      // Undeclared exception!
      matrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2140.88879;
      doubleArray1[1] = 393.34981019;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 4618.8292188419;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2140.88879;
      doubleArray2[2] = 4618.8292188419;
      doubleArray2[3] = 2140.88879;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2140.88879;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.removeFirstRow();
      assertEquals(0.75, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-15.3741471);
      doubleArray2[1] = 100.0;
      doubleArray2[2] = (-3042.189508);
      doubleArray2[3] = 1531.4449041345479;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-15.3741471);
      doubleArray3[1] = (-3042.189508);
      doubleArray3[2] = 100.0;
      doubleArray3[3] = 1531.4449041345479;
      doubleArray3[4] = 1531.4449041345479;
      doubleArray3[5] = 1531.4449041345479;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 1531.4449041345479;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-15.3741471);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-3042.189508);
      doubleArray4[6] = (-3042.189508);
      doubleArray4[7] = 100.0;
      doubleArray4[8] = 100.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-3042.189508);
      doubleArray5[1] = (-3042.189508);
      doubleArray5[2] = (-15.3741471);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (-15.3741471);
      doubleArray0[5] = doubleArray6;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix1 = sparseMatrix0.toSparseMatrix();
      assertEquals(6, sparseMatrix1.rows());
      assertEquals(Double.NaN, sparseMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(8, 8, (double[]) null);
      DenseMatrix denseMatrix1 = DenseMatrix.unit(1227, 34);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-1206);
      int int1 = (-3127);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3127);
      doubleArray0[1] = (double) (-1206);
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray((-1206), (-3127), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1206x-3127
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1, 6);
      ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Matrix.from1DArray(0, 0, doubleArray0);
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("1u(Z'qGW~PA`E\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"1u(Z'qGW~PA`E\"\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket(" 19p!2`iT2cSl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      Matrix matrix0 = Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-1952257860), (-1952257860), 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1952257860x-1952257860
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1544.6631798579203;
      doubleArray0[1] = 1544.6631798579203;
      doubleArray0[2] = 2576.6407200660665;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1615.919);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.euclideanNorm();
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2513, 2513);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      double[] doubleArray0 = new double[0];
      DenseMatrix.from1DArray(2513, 2513, doubleArray0);
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      int int0 = (-258);
      Integer integer0 = new Integer((-258));
      linkedList0.add(integer0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.shuffle();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      matrix0.insert(matrix1);
      matrix1.multiply((Vector) denseVector0);
      matrix0.minInColumn((-258));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-258)).when(matrixAccumulator0).accumulate();
      matrix0.fold(matrixAccumulator0);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-676));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = (-2396);
      // Undeclared exception!
      try { 
        DenseMatrix.diagonal((-2396), (-2396));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1370L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(8, 8, mockRandom0);
      mockRandom0.longs();
      denseMatrix0.toRowVector();
      Matrix matrix0 = denseMatrix0.blankOfRows(8);
      matrix0.max();
      matrix0.subtract((-1169.394341629013));
      matrix0.copyOfColumns(8);
      Matrix matrix1 = matrix0.power(10);
      matrix1.columns();
      Matrix matrix2 = matrix1.transpose();
      Matrix.randomSymmetric(8, mockRandom0);
      denseMatrix0.iterator();
      matrix2.power(10);
      matrix2.kroneckerProduct(matrix0);
      // Undeclared exception!
      try { 
        matrix2.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply((DenseMatrix) null, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 6);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(6, 2);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(6, 6, mockRandom0);
      ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      double double0 = 7.105427357601004E-13;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
