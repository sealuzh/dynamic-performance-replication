/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 12:41:33 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.BitSet;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("fil");
      assertEquals((-2549439702993642060L), long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Type[] typeArray0 = new Type[5];
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      RuntimeException runtimeException0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Insets insets0 = new Insets(20, 790, 47, 48);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-4314), 40, (-1473), 40, 40, (-1.0), 40, (-2741), insets0, 40, 48);
      boolean boolean0 = TypeUtils.isHibernateInitialized(gridBagConstraints0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Field[] fieldArray0 = new Field[1];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "org.springframework.security.core.context.SecurityContextImpl", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, treeMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(8);
      linkedHashMap0.put("getDeclaringClass", "getDeclaringClass");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("C;RInqK", "C;RInqK");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("kotlin.ranges.LongRange", ".+y3]=eL(;*x");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("getName", "getName");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Properties> class0 = Properties.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig0);
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) timeUnit0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("nQwwnTx02z");
      Type[] typeArray0 = new Type[5];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@67e12cdf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = TypeUtils.cast((Object) null, class0, (ParserConfig) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "!", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals("class java.math.BigDecimal", class1.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("EMPTY_THROWABLE_ARRAY");
      assertEquals("EMPTY_THROWABLE_ARRAY", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, parserConfig0.propertyNamingStrategy);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<InterruptedException> class0 = InterruptedException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockThread mockThread0 = new MockThread(")/");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass(")/", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<VerifyError> class0 = VerifyError.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("clazz is null", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. clazz is null
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[byte", classLoader0, true);
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Point> class0 = Point.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Point point0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(point0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.DateFormatSymbols@17f3ada4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DecimalFormat@67580
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("[5AC=:q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedHashSet<NumberDeserializer> linkedHashSet0 = new LinkedHashSet<NumberDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("e~<");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(indexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IndexOutOfBoundsException: e~<
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WeakHashMap<SecurityException, SQLException> weakHashMap0 = new WeakHashMap<SecurityException, SQLException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Constructor<LinkedHashSet<BigDecimal>>[] constructorArray0 = (Constructor<LinkedHashSet<BigDecimal>>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64(":ckDp[LF;`");
      assertEquals(7696006545752519953L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("-ELlo_&j>TdC");
      assertEquals((-2077116877070959406L), long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("[byte");
      assertEquals(1799674776991613264L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getClass(type0);
      assertEquals("class [B", class1.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "cEKwx7", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 6);
      Class<Short> class0 = Short.class;
      classArray0[0] = class0;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertFalse(parserConfig0.fieldBased);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class class1 = (Class)TypeUtils.unwrapOptional(type0);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Rectangle> class0 = Rectangle.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, parserConfig0.propertyNamingStrategy);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Double> class0 = Double.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      weakHashMap0.put("country", "}nV|d\"}^L%");
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", linkedHashMap0);
      Type[] typeArray0 = new Type[1];
      Class<Boolean> class0 = Boolean.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLClientInfoException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("WriteClassName", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.OneToMany", classLoader0, true);
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockThread mockThread0 = new MockThread("/J");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.parser.Feature", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Language", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[", (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("[D");
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Long> class0 = Long.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentHashMap0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("iFu");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("can not cast to short, value : ", "iFu", 127, mockNullPointerException0);
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(sQLTimeoutException0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = TypeUtils.castToJavaBean(map0, class1, (ParserConfig) null);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Hse", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"@type\":\"org.evosuite.runtime.mock.java.lang.MockIllegalAccessException\",\"stackTrace\":[{\"ClassName\":\"sun.reflect.GeneratedConstructorAccessor75\",\"NativeMethod\":false,\"lineNumber\":-1,\"methodName\":\"newInstance\"},{\"ClassName\":\"<evosuite>\",\"NativeMethod\":false,\"fileName\":\"<evosuite>\",\"lineNumber\":-1,\"methodName\":\"<evosuite>\"},{\"ClassName\":\"<evosuite>\",\"NativeMethod\":false,\"fileName\":\"<evosuite>\",\"lineNumber\":-1,\"methodName\":\"<evosuite>\"}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) map0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TimeDeserializer timeDeserializer0 = TypeUtils.cast((Object) null, (Type) class1, (ParserConfig) null);
      assertNull(timeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "fillInStackTrace", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Character
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("~5OQX&cZI");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("_+aWt}:N{`?1$");
      assertEquals("_+AWT}:N{`?1$", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Language", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((short)1);
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.castToJavaBean((Object) short0, class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      Class<BigDecimal> class0 = BigDecimal.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) optionalCodec0, class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.lang.Double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      Class<Double> class0 = Double.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      Class<Float> class0 = Float.class;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "kotlin.ranges.CharRange");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jdk8DateCodec0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("getgetClass", "getgetClass");
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransientConnectionException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLTransientConnectionException: getgetClass
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      Class<Long> class0 = Long.TYPE;
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.deserializer.TimeDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) uUID0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 00000000-0100-4000-8200-000003000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-355));
      Class<Byte> class0 = Byte.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.StringIndexOutOfBoundsException: String index out of range: -355
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("can not create ASMParser", negativeArraySizeException0);
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransientConnectionException0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLTransientConnectionException: can not create ASMParser
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedHashMap<SQLTransientConnectionException, SQLSyntaxErrorException> linkedHashMap0 = new LinkedHashMap<SQLTransientConnectionException, SQLSyntaxErrorException>();
      Class<IllegalStateException> class0 = IllegalStateException.class;
      IllegalStateException illegalStateException0 = TypeUtils.castToJavaBean((Object) linkedHashMap0, class0);
      assertNull(illegalStateException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation dataTruncation0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Boolean> class1 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = new Integer((-3181));
      Boolean boolean0 = TypeUtils.castToBoolean(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("}nV|d\"}^L%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : }nV|d\"}^L%
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("qk.");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NegativeArraySizeException: qk.
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("tl+KE`MMFmv39#");
      assertArrayEquals(new byte[] {(byte) (-74), (byte)95, (byte) (-118), (byte) (-1), (byte) (-1), (byte) (-52), (byte)48, (byte)89, (byte) (-81), (byte) (-33)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TreeMap<SimpleDateFormat, DecimalFormatSymbols> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormatSymbols>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Point point0 = new Point();
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Point[x=0,y=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Integer integer0 = TypeUtils.castToInt(double0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("@?iuA#3=iM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@?iuA#3=iM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong((-6586085717218287427L));
      Long long0 = TypeUtils.castToLong(atomicLong0);
      assertEquals((-6586085717218287427L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(map0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {CTT=Asia/Shanghai, SST=Pacific/Guadalcanal, PLT=Asia/Karachi, EST=-05:00, JST=Asia/Tokyo, AST=America/Anchorage, IET=America/Indiana/Indianapolis, VST=Asia/Ho_Chi_Minh, BET=America/Sao_Paulo, PST=America/Los_Angeles, NET=Asia/Yerevan, CST=America/Chicago, MST=-07:00, MIT=Pacific/Apia, CAT=Africa/Harare, AGT=America/Argentina/Buenos_Aires, BST=Asia/Dhaka, ART=Africa/Cairo, NST=Pacific/Auckland, AET=Australia/Sydney, EAT=Africa/Addis_Ababa, PNT=America/Phoenix, ECT=Europe/Paris, CNT=America/St_Johns, IST=Asia/Kolkata, PRT=America/Puerto_Rico, ACT=Australia/Darwin, HST=-10:00}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("${!7zcYj5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("getConstructors");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getConstructors
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Short short0 = new Short((short)13);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(short0);
      assertEquals(13000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BitSet bitSet0 = new BitSet(240);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(bitSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Date date0 = Date.valueOf(localDate0);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(date0);
      assertEquals(0, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("T%Q\"mp+<t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : T%Q\"mp+<t
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong((-1835L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1835
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      Time time0 = TypeUtils.castToSqlTime(calendar0);
      assertEquals("20:21:21", time0.toString());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-599));
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Timestamp timestamp0 = Timestamp.valueOf(localDateTime0);
      Time time0 = TypeUtils.castToSqlTime(timestamp0);
      assertEquals("20:11:22", time0.toString());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate("null");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("-ELlo_&j>TdC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -ELlo_&j>TdC
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(5764610843043954687L);
      Date date0 = TypeUtils.castToSqlDate(bigDecimal0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = TypeUtils.castToSqlDate(mockGregorianCalendar0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1897), (-1629670203), (-1897));
      java.util.Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = TypeUtils.castToSqlDate(date0);
      assertNotNull(date1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) dimension0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Dimension[width=0,height=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("-{p^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -{p^
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer((-1746));
      java.util.Date date0 = TypeUtils.castToDate(integer0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Class<MockCalendar> class0 = MockCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) boolean0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : true
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      java.util.Date date0 = TypeUtils.castToDate(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("can not cast to double, value : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Byte byte0 = new Byte((byte)14);
      Double double0 = TypeUtils.castToDouble(byte0);
      assertEquals(14.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("java.java.sql.SQLNonTransientException");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(353);
      Float float0 = TypeUtils.castToFloat(atomicInteger0);
      assertEquals(353.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Float float0 = new Float(0.0);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(propertyProcessableDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError("getConstructors");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(instantiationError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = TypeUtils.castToBigDecimal(bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException((String) null);
      Class<Short> class0 = Short.class;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Short short0 = TypeUtils.castToShort(bigInteger0);
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("EMPTY_THROWABLE_ARRAY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"EMPTY_THROWABLE_ARRAY\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("listContext");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : listContext
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("k^Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k^Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer(1863);
      Byte byte0 = TypeUtils.castToByte(integer0);
      assertEquals((byte)71, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      String string0 = TypeUtils.castToString(bufferCapabilities0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      //  // Unstable assertion: assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 0, (Throwable) null);
      Class<UUID> class0 = UUID.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) dataTruncation0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
