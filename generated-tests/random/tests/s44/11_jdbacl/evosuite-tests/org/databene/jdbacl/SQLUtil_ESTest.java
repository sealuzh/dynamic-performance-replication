/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:25:22 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
      
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexi^y");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "yLXE.%y", true, (String[]) null);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter indexi^y", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      File file0 = MockFile.createTempFile("eHf|", "delete");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = 'M';
      charArray0[2] = ',';
      charArray0[3] = ':';
      charArray0[4] = '2';
      charArray0[5] = ']';
      charArray0[6] = ';';
      charArray0[7] = '%';
      charArray0[8] = 'K';
      mockPrintWriter0.println(charArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.renderValue(dBPrimaryKeyConstraint2);
      assertEquals("CONSTRAINT \"alter indexi^y\" PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom((-459411890));
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("2KL<^~5=VoO4cZ");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBTable dBTable0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Q2B7A>/sUf=Qi0y)z", (DBTable) null, (-984), "Q2B7A>/sUf=Qi0y)z");
      defaultDBColumn0.setDefaultValue("Q2B7A>/sUf=Qi0y)z");
      boolean boolean0 = true;
      defaultDBColumn0.setNullable(true);
      Integer integer0 = new Integer((-984));
      defaultDBColumn0.equals(integer0);
      defaultDBColumn0.isEquivalent((DBObject) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDDL("Q2B7A>/sUf=Qi0y)z");
      SQLUtil.removeComments("os.arch");
      SQLUtil.isDML("os.arch");
      boolean boolean1 = false;
      String string0 = "CLOB";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "os.arch";
      stringArray0[1] = "Q2B7A>/sUf=Qi0y)z";
      stringArray0[2] = "os.arch";
      stringArray0[3] = "CLOB";
      stringArray0[4] = "CLOB";
      stringArray0[5] = "CLOB";
      stringArray0[6] = "os.arch";
      stringArray0[7] = "CLOB";
      stringArray0[8] = "CLOB";
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "Q2B7A>/sUf=Qi0y)z Q2B7A>/SUF=QI0Y)Z DEFAULT Q2B7A>/sUf=Qi0y)z NULL", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "derby.__rt.database.classpath";
      stringArray0[1] = "derby.__rt.database.classpath";
      stringArray0[2] = "derby.__rt.database.classpath";
      stringArray0[3] = "derby.__rt.database.classpath";
      stringArray0[4] = "derby.__rt.database.classpath";
      SQLUtil.renderColumnListWithTableName("derby.__rt.database.classpath", stringArray0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1879919952), "callcall");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Bao}k.D&IePHvSn[;k", defaultDBTable0, dBDataType0, integer0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      DBColumn dBColumn0 = defaultDBTable0.getColumn("Bao}k.D&IePHvSn[;k");
      linkedList0.add(dBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "`-1q[C9UM<'YDp(";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(`-1q[C9UM<'YDp()", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select[axz]y]", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("execute[axz]y],smzr3", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("eO taOjA[ 3p", dBTable0, 122, "(`-1q[C9UM<'YDp()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"`-1q[C9UM<'YDp(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "EXPAND";
      SQLUtil.isQuery("EXPAND");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isDDL("delete");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete", (DBSchema) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("EXPAND", true, defaultDBTable0, "EXPAND");
      dBCheckConstraint0.setTable(defaultDBTable0);
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)2;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("F^KW", (DBTable) null, 188, "F^KW");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      linkedList0.offerLast(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("F^KW", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(763L);
      String string0 = SQLUtil.normalize("_%)!>%m9e", true);
      assertEquals("_ %) ! > % m9e ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoon");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("deleteon");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "renameto}7pg";
      stringArray0[1] = "s";
      String string0 = "42Y95";
      stringArray0[2] = "42Y95";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SQLUtil.mutatesDataOrStructure("LI^V75$FM_w.3e#W");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("42Y95", defaultDBTable0, 21, "(renameto}7pg, s, 42Y95)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"renameto}7pg\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "Zyd?F]b:'t";
      stringArray0[0] = "Zyd?F]b:'t";
      stringArray0[1] = "73{PTJ,U'6j8i?L >H";
      stringArray0[2] = "73{PTJ,U'6j8i?L >H";
      String string1 = "SELECT * FROM ";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "73{PTJ,U'6j8i?L >H");
      SQLUtil.leftJoin("73{PTJ,U'6j8i?L >H", stringArray0, "SELECT * FROM ", "call", stringArray0);
      SQLUtil.isQuery("SELECT * FROM ");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isQuery("[axz");
      SQLUtil.mutatesDataOrStructure("drop materialized view");
      SQLUtil.removeComments("\n/* distinct */");
      DBSchema dBSchema0 = new DBSchema("[axz");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("p-+", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "XTg";
      dBSchema0.getTables(true);
      stringArray0[1] = "[axz";
      stringArray0[2] = "drop materialized view";
      stringArray0[3] = "\n/* distinct */";
      stringArray0[4] = "[axz";
      stringArray0[5] = "[axz";
      stringArray0[6] = "[axz";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0m&/@27hjK o,");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("0m&/@27hjK o,", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      defaultDBTable0.setDoc("0m&/@27hjK o,");
      String string0 = "`9$.#";
      MockFileWriter mockFileWriter0 = new MockFileWriter("`9$.#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "()");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, printWriter0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(67108864L);
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '4';
      charArray0[2] = ';';
      int int0 = 34;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(32, charArray0, 32, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      SQLUtil.normalize("QEae=[:\"2cIl", false);
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("inner", true, "org.h2.message.DbException", "J1Q$buZ/UsQ+}/=C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "create table";
      SQLUtil.normalize("create table", false);
      SQLUtil.isProcedureCall("create table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table");
      defaultDBTable0.setDoc("create table");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create table");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string1 = "-- ERROR: checksum mismatch page: ";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("-- ERROR: checksum mismatch page: ", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("$1(\"oy(Y9|", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("create table");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'create table' not found in table '$1(\"oy(Y9|'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("PAGI8ih|[^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PAGI8ih|[^", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PAGI8ih|[^";
      stringArray0[1] = "PAGI8ih|[^";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PAGI8ih|[^", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT PAGI8ih|[^ PRIMARY KEY (PAGI8ih|[^, PAGI8ih|[^)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "setNCharacterStream(int, Reader, long)");
      SQLUtil.substituteMarkers("deleteuq36(j=z,bx]c[k)", "deleteuq36(j=z,bx]c[k)", "deleteuq36(j=z,bx]c[k)");
      SQLUtil.normalize("deleteuq36(j=z,bx]c[k)", false);
      System.setCurrentTimeMillis((-1L));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "deleteuq36(j=z,bx]c[k)";
      stringArray0[1] = "setNCharacterStream(int, Reader, long)";
      stringArray0[2] = "'deleteuq36(j=z,bx]c[k)'";
      stringArray0[3] = "setNCharacterStream(int, Reader, long)";
      stringArray0[4] = "setNCharacterStream(int, Reader, long)";
      stringArray0[5] = "deleteuq36 (j = z, bx ] c [ k)";
      stringArray0[6] = "deleteuq36(j=z,bx]c[k)";
      stringArray0[7] = "deleteuq36 (j = z, bx ] c [ k)";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "deleteuq36 (j = z, bx ] c [ k)", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "u~@m(";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("u~@m(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: u~@m(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesDataOrStructure("select into");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-128);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte) (-99);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      boolean boolean0 = SQLUtil.isProcedureCall("[AXz]Y],SMZR3");
      assertFalse(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("[AXz]Y],SMZR3", "update", (VersionNumber) null);
      defaultDatabase0.getTable("*9gXH", false);
      DBDataType dBDataType0 = DBDataType.getInstance(2221, "[AXz]Y],SMZR3");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*9gXH", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("[AXz]Y],SMZR3", (DBTable) null, dBDataType0, integer0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("*9gXH, [AXz]Y],SMZR3", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.normalize("4+zIsV=UH/;z?b&D<@", false);
      System.setCurrentTimeMillis(4669L);
      StringBuilder stringBuilder0 = new StringBuilder("SYS_IDX_");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) "4+zIsV=UH/;z?b&D<@", 46, 46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 46, end 46, s.length() 18
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.substituteMarkers("o:T'/AHn7m%", "o:T'/AHn7m%", "o:T'/AHn7m%");
      DBSchema dBSchema0 = new DBSchema("drop materialized viewn!6ten'l0wrudf2&");
      DBTrigger dBTrigger0 = new DBTrigger(" ADD ", dBSchema0);
      dBTrigger0.setWhenClause("UNIQUE ");
      dBTrigger0.setBaseObjectType("BLOB");
      dBSchema0.addTrigger(dBTrigger0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("truncatefjjrrf;bk", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = "n!6ten'l0wru";
      dBSchema0.getTable("n!6ten'l0wru");
      DBDataType dBDataType0 = DBDataType.getInstance((-596), "drop materialized view");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewn!6ten'l0wrudf2&", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ADD ";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("rundll32");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rundll32", dBSchema0);
      int int0 = 5;
      String string0 = "exec7d50ygswgxm:%";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rundll32");
      DBDataType dBDataType0 = DBDataType.getInstance(5, "exec7d50ygswgxm:%");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.util.ExactUTF8InputStreamReader", defaultDBTable0, dBDataType0, integer0, integer1);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.h2.util.ExactUTF8InputStreamReader", true, defaultDBTable0, "rundll32");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, 2676, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.isDDL("");
      PipedReader pipedReader0 = new PipedReader(97);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("KH%");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!q%PP^x~";
      stringArray0[1] = "KH%";
      stringArray0[2] = "!q%PP^x~";
      stringArray0[3] = "!q%PP^x~";
      stringArray0[4] = "!q%PP^x~";
      stringArray0[5] = "KH%";
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("KH%", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      String string0 = "<E2go1AMA?!Nv";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("<E2go1AMA?!Nv", stringBuilder0);
      int int0 = (-1250);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1250), (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1250
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.isProcedureCall("create tableauji $qxl$ym");
      SQLUtil.substituteMarkers("create tableauji $qxl$ym", "org.firebirdsql.jdbc.InternalTransactionCoordinator$LocalTransactionCoordinator", (Object) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.firebirdsql.jdbc.InternalTransactionCoordinator$LocalTransactionCoordinator";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("(org.firebirdsql.jdbc.InternalTransactionCoordinator$LocalTransactionCoordinator)", false);
      SQLUtil.isProcedureCall("(org.firebirdsql.jdbc.InternalTransactionCoordinator$LocalTransactionCoordinator)");
      String string0 = "' not found in class ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" SALT '");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create table ", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance(" or ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",\n    ");
      DBDataType dBDataType0 = DBDataType.getInstance(2527, "2vL)39");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vDcNJtpd", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PipedReader pipedReader0 = new PipedReader(2527);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.normalize("39bhmg4I jKN4s>]J", true);
      TableContainer tableContainer0 = new TableContainer("minRecSize", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("BLOB");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("39bhmg4I jKN4s>]J", (DBTable) null, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder("39bhmg4I jKN4s > ] J");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("39bhmg4I jKN4s > ] J", stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("'X3o:r3%0eEjG", stringBuilder2);
      // Undeclared exception!
      try { 
        stringBuilder3.insert(582, 582);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 582
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "call";
      stringArray0[1] = "call";
      stringArray0[2] = "call";
      stringArray0[3] = "call";
      stringArray0[4] = "call";
      stringArray0[5] = "call";
      stringArray0[6] = "drop table";
      SQLUtil.innerJoin("call", stringArray0, "call", "select", stringArray0);
      SQLUtil.mutatesDataOrStructure("call");
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "call", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = null;
      DBSchema dBSchema0 = new DBSchema((String) null);
      dBSchema0.getTable("rename$jlw");
      defaultDBTable0.addReferrer((DBTable) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8000005b-00d0-fd77-3ed8-000a0a0b1900");
      String[] stringArray0 = new String[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop indexwdncnj.7rn6b3c~", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop indexwdncnj.7rn6b3c~\" FOREIGN KEY () REFERENCES 8000005b-00d0-fd77-3ed8-000a0a0b1900()", string0);
      
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM 8000005b-00d0-fd77-3ed8-000a0a0b1900 WHERE ", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("insert7d50ygswgxm:%");
      String string0 = "16q6cSZr5.&K.eM<t";
      SQLUtil.isQuery("16q6cSZr5.&K.eM<t");
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(vector0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("DATE ", "WW", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("16q6cSZr5.&K.eM<t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '16q6cSZr5.&K.eM<t'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("rundll32");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rundll32", dBSchema0);
      int int0 = 5;
      String string0 = "exec7d50ygswgxm:%";
      DBDataType dBDataType0 = DBDataType.getInstance(5, "exec7d50ygswgxm:%");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.util.ExactUTF8InputStreamReader", defaultDBTable0, dBDataType0, integer0, integer1);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, "rundll32");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, 2676, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("pJ_?>`}");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pJ_?>`}";
      stringArray0[1] = "pJ_?>`}";
      stringArray0[2] = "pJ_?>`}";
      stringArray0[3] = "pJ_?>`}";
      stringArray0[4] = "pJ_?>`}";
      stringArray0[5] = "pJ_?>`}";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "pJ_?>`}", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DBDataType dBDataType0 = DBDataType.getInstance((-2545), "H`DAY9R=8L>Q7`9h");
      Integer integer0 = new Integer(1083);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("H`DAY9R=8L>Q7`9h", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("pJ_?>`}", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DBDataType dBDataType1 = DBDataType.getInstance(1083, "CONSTRAINT pJ_?>`} ");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("c^%I<i6b\"", defaultDBTable0, dBDataType1);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("pJ_?>`}");
      dBColumnArray0[3] = dBColumn0;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("+M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '+M' not found in table 'pJ_?>`}'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.isQuery("7d50yGSwgxM:%");
      SQLUtil.mutatesDataOrStructure("7d50yGSwgxM:%");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7d50yGSwgxM:%");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.isDML("Q$/|t&Z;\"8|33Wl|");
      DBSchema dBSchema0 = new DBSchema("Q$/|t&Z;\"8|33Wl|");
      dBSchema0.getTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[0] = "5O";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "5O";
      stringArray0[6] = "5O";
      stringArray0[7] = "5O";
      stringArray0[8] = "";
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "5O", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "with UUID ";
      SQLUtil.isQuery("with UUID ");
      SQLUtil.removeComments("UNIQUE ");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "UNIQUE ");
      String[] stringArray0 = new String[0];
      SQLUtil.join((String) null, (String) null, stringArray0, "create tablecreate tableb{wrx!j^h", "43X37.U", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      VersionNumber versionNumber0 = VersionNumber.valueOf("with UUID ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.apa", "create unique index\"!5j", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("create tablecreate tableb{wrx!j^h as 43X37.U on ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'create tablecreate tableb{wrx!j^h as 43X37.U on '
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[1];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "-*XIg}o|<r");
      stringArray0[0] = "-*XIg}o|<r";
      SQLUtil.renderColumnListWithTableName("-*XIg}o|<r", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "h_z2roWaPa!Fr,1>sX", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter table", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d", dBTable0, 127, "select");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "$YKmea$ cbR", dBUniqueIndex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("KH%");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!q%PP^x~";
      stringArray0[1] = "KH%";
      stringArray0[2] = "!q%PP^x~";
      stringArray0[3] = "!q%PP^x~";
      stringArray0[4] = "!q%PP^x~";
      stringArray0[5] = "KH%";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "KH%", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("!q%PP^x~", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!q%PP^x~", dBTable0, (DBDataType) null);
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("KH%.!q%PP^x~", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(4728);
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = 'q';
      charArray0[2] = '';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      assertEquals("7q and null", stringBuilder1.toString());
      assertEquals("7q and null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "create table ";
      stringArray0[1] = "create table ";
      stringArray0[2] = "create table ";
      stringArray0[3] = "create table ";
      stringArray0[4] = "create table ";
      SQLUtil.leftJoin("create table ", stringArray0, "create table ", "wQBh`z>eu$-", stringArray0);
      SQLUtil.mutatesDataOrStructure("create table ");
      StringBuilder stringBuilder0 = new StringBuilder("t>n/wF@)$NiPUc[j'A:");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringBuilder stringBuilder2 = new StringBuilder(stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(90023, 1.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 90023
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "!]vVN%DCA)TS$Wv", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("!]vVN%DCA)TS$Wv", true, dBPrimaryKeyConstraint0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT !]vVN%DCA)TS$Wv PRIMARY KEY ()", string0);
      
      dBUniqueIndex0.addColumnName("!]vVN%DCA)TS$Wv");
      dBUniqueIndex0.setOwner(defaultDBTable0);
      dBUniqueIndex0.setDoc("!]vVN%DCA)TS$Wv");
      String string1 = SQLUtil.typeAndName(dBUniqueIndex0);
      assertNotNull(string1);
      assertEquals("index !]vVN%DCA)TS$Wv", string1);
      
      String[] stringArray1 = new String[2];
      stringArray1[0] = ".L1N{]._ZG";
      stringArray1[1] = "!]vVN%DCA)TS$Wv";
      String string2 = SQLUtil.renderColumnListWithTableName(".L1N{]._ZG", stringArray1);
      assertEquals(".L1N{]._ZG..L1N{]._ZG, .L1N{]._ZG.!]vVN%DCA)TS$Wv", string2);
      
      boolean boolean0 = SQLUtil.isDDL("B{WRx!J^H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.normalize("create tablera; |vkt~<v>=bt", false);
      DBColumn dBColumn0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("CONSTRAINT ", stringBuilder0);
      int int0 = (-2163);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2163), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2163
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("PRIMARY KEY ", stringArray0, "Ic&okJ.rw^", "PRIMARY KEY ", stringArray0);
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable("PRIMARY KEY ");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "left join Ic&okJ.rw^ as PRIMARY KEY  on ";
      stringArray1[1] = "Ic&okJ.rw^";
      stringArray1[2] = null;
      stringArray1[3] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, (DBTable) null, stringArray1, (DBTable) null, stringArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.removeComments("D$,a mk YV@");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "D$,a mk YV@";
      stringArray0[1] = "D$,a mk YV@";
      SQLUtil.renderColumnNames(stringArray0);
      DBSchema dBSchema0 = new DBSchema("exec");
      dBSchema0.getTable("D$,a mk YV@");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer((-2428));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, (DBDataType) null, integer0, (Integer) null);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "Unknown constraint type: ";
      String[] stringArray0 = null;
      String string1 = "BM";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Unknown constraint type: ", (String[]) null, "BM", "}U^ccH8V ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      String string0 = "- ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- ", (DBSchema) null);
      String string1 = "A,xC";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("A,xC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.removeComments("D$,a mk YV@");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "D$,a mk YV@";
      stringArray0[1] = "D$,a mk YV@";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isQuery("^");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-463115800), 20.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -463115800
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("char_length");
      tableContainer0.setName("alter table7d50ygswgxm:%");
      tableContainer0.getTable("alter table7d50ygswgxm:%");
      DBDataType dBDataType0 = DBDataType.getInstance(79, "alter table7d50ygswgxm:%");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table7d50ygswgxm:%", (DBTable) null, dBDataType0);
      defaultDBColumn0.isEquivalent((DBObject) null);
      SQLUtil.typeAndName(defaultDBColumn0);
      SQLUtil.normalize("G+Co5mFECkvL'", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "G+Co5mFECkvL'";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "G+Co5mFECkvL' = 'G+Co5mFECkvL''", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Character character0 = new Character('L');
      SQLUtil.renderValue(character0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'L'";
      stringArray0[1] = "'L'";
      stringArray0[2] = "'L'";
      stringArray0[3] = "'L'";
      stringArray0[4] = "'L'";
      SQLUtil.renderColumnNames(stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromBaseTable fromBaseTable0 = new FromBaseTable();
      fromBaseTable0.getTableDescriptor();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTriggerDescriptors((TableDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Character character0 = Character.valueOf('\'');
      String string0 = SQLUtil.substituteMarkers("create materialized view", "org.apache.derby.impl.sql.catalog.XPLAINStatementTimingsDescriptor", character0);
      assertEquals("create materialized view", string0);
      
      String string1 = SQLUtil.normalize("CASCADE", false);
      assertEquals("CASCADE", string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "drop tableselectto}7pg");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("callcreate tableexec", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("i7", false, "j,67Bm@.Z{Pu~:tgs", "i7");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "i7");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i7");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "j,67Bm@.Z{Pu~:tgs");
      TableContainer tableContainer0 = new TableContainer("j,67Bm@.Z{Pu~:tgs", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("j,67Bm@.Z{Pu~:tgs");
      dBCheckConstraint0.setTable((DBTable) null);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      assertEquals("i7j,67Bm@.Z{Pu~:tgsCONSTRAINT i7 ", stringBuilder1.toString());
      assertEquals("i7j,67Bm@.Z{Pu~:tgsCONSTRAINT i7 ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.normalize("to}7PG", true);
      String string0 = "6>";
      SQLUtil.isDDL("6>");
      SQLUtil.normalize("to}7PG", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("t  o } 7PG");
      String string1 = "6Zi6XR$ ]c~XV";
      DBDataType dBDataType0 = DBDataType.getInstance(925, "6Zi6XR$ ]c~XV");
      DBDataType.getInstance(925, "6>");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("t  o } 7PG", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("to}7PG");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "execute";
      stringArray0[1] = "exec";
      stringArray0[2] = "exec";
      stringArray0[3] = "exec";
      stringArray0[4] = "exec";
      stringArray0[5] = "exec";
      String string0 = SQLUtil.renderColumnListWithTableName("exec", stringArray0);
      assertEquals("exec.execute, exec.exec, exec.exec, exec.exec, exec.exec, exec.exec", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "create table ", versionNumber0);
      String string0 = SQLUtil.typeAndName(defaultDatabase0);
      assertEquals("database null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "selectt";
      stringArray0[1] = "selectt";
      String string0 = SQLUtil.join("selectt", "selectt", stringArray0, "sR`2=6c/", "42939", stringArray0);
      assertEquals("selectt join sR`2=6c/ as 42939 on selectt.selectt = 42939.selectt and selectt.selectt = 42939.selectt", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[1];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "-*XIg}o|<r");
      stringArray0[0] = "-*XIg}o|<r";
      SQLUtil.renderColumnListWithTableName("-*XIg}o|<r", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "h_z2roWaPa!Fr,1>sX", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter table", false, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("-*XIg}o|<r");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d", defaultDBTable1, 127, "select");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.normalize("-*XIg}o|<r", false);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "$YKmea$ cbR", dBUniqueIndex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.raw.log.LogToFile");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.store.raw.log.LogToFile", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("data_encrypt_lgorithm_version", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueIndex0.isIdentical(defaultDBTable0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, ".", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "/u)|)Fq005g mnk";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/u)|)Fq005g mnk");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
