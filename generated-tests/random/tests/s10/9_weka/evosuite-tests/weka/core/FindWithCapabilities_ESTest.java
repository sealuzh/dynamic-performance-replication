/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:38:33 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ChebyshevDistance;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "\"(-jTLJms-@";
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.setClassIndex(" '0}U\"q)@@wq*C4");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not-nominal-class");
      Random.setNextRandom(2389);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "aKKS7}>.&JE]_VKF";
      stringArray0[1] = "<qA";
      stringArray0[2] = "-packages";
      stringArray0[3] = "hJr\"DY3JykO@8VS,t5y";
      stringArray0[4] = "-superclass";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[5] = "z";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      vector0.add("J?Cz1n=7c5jUD5N`N");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.m_Misses.listIterator();
      capabilities0.enableAllClassDependencies();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.m_Misses.add("J?Cz1n=7c5jUD5N`N");
      vector0.addAll(0, (Collection<? extends String>) findWithCapabilities0.m_Misses);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.trimToSize();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Misses.add("SUa:");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_CLASS;
      vector0.clear();
      findWithCapabilities0.enableNot(capabilities_Capability3);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("J?Cz1n=7c5jUD5N`N");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability3);
      findWithCapabilities0.setFilename("t");
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      Random.setNextRandom(3599);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\tMust handle missing attribute values.";
      stringArray0[1] = "c";
      stringArray0[2] = "^jpH;%- Q7W&=L";
      findWithCapabilities0.find();
      stringArray0[3] = "<pre> ";
      stringArray0[4] = "-unary-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#OEQ1");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      findWithCapabilities0.m_Superclass = "N";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability0);
      SingleIndex singleIndex0 = new SingleIndex("N");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        singleIndex0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Upper limit has not been specified
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "j|\"`ka0Wb%R";
      stringArray0[1] = "\">";
      stringArray0[2] = "org.pentaho.packageManagement.DefaultPackage";
      stringArray0[3] = "-not-no-class";
      stringArray0[4] = "zburv]U`-j\"";
      stringArray0[5] = "D{.r.9Ql6N)";
      stringArray0[6] = "<!-- globalinfo-start -->";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.disableDependency(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-num-instances");
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-string-atts");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.find();
      findWithCapabilities0.disableNot(capabilities_Capability2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-string-atts");
      findWithCapabilities0.setClassIndex("aKKS7}>.&JE]_VKF");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("-string-atts");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "the");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("the");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities1;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("the", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H#X";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      vector0.add("H#X");
      vector0.add("-not-relational-class");
      vector0.add("H#X");
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "-not-relational-class";
      stringArray1[1] = "-not-relational-class";
      stringArray1[2] = "H#X";
      stringArray1[3] = "H#X";
      stringArray1[4] = "H#X";
      stringArray1[5] = "\tMust handle nominal classes.";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.m_Upper = 1242;
      findWithCapabilities0.m_Packages = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      singleIndex0.setSingleIndex("/Gr~nS&h0Uy;4zsDCq");
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "kFv7B672LN].h {";
      stringArray0[1] = "Unu3)gJ\"0q";
      stringArray0[2] = "4t.^/XRno3flG";
      stringArray0[3] = "0z_QFS4";
      stringArray0[4] = "8034";
      stringArray0[5] = "ZxT1_^%(kJ";
      stringArray0[6] = "-not-nominal-class";
      FindWithCapabilities.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      String[] stringArray0 = new String[2];
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      stringArray0[0] = "-t <file>";
      stringArray0[1] = "-missing-att-values";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      String[] stringArray1 = new String[0];
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability4);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.m_ClassIndex = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getClassIndex();
      // Undeclared exception!
      try { 
        vector0.remove(116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 116
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|%(`U@!?*A~Li";
      stringArray0[1] = "-date-atts";
      stringArray0[2] = "Y";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.m_Capabilities;
      capabilities0.m_InstancesTest = true;
      findWithCapabilities0.m_NotCapabilities = capabilities1;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      capabilities0.createMessage("8034");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.disable(capabilities_Capability2);
      Random.setNextRandom(0);
      try { 
        Capabilities.main(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'tr5ytxfH'6mzk,2U";
      stringArray0[1] = "kc6~T";
      stringArray0[2] = "\nSet of instances created from scratch:\n";
      stringArray0[3] = "-date <num>";
      stringArray0[4] = "RGxd~U8%oUSZ_";
      stringArray0[5] = "-relational-atts";
      stringArray0[6] = "-date-class";
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      stringArray0[7] = "SI'%5*`'sKdw(6-";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Vz#sj|vO^uKo*@RS$e";
      stringArray0[1] = "N{";
      stringArray0[2] = "numeric-atts";
      stringArray0[3] = "http://www.cs.waikato.ac.nz/ml/weka/packageMetaDataMirror.txt";
      stringArray0[4] = "5 * log(5): ";
      findWithCapabilities0.getOptions();
      stringArray0[5] = "http.proxyUser";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability1);
      stringArray0[6] = "oB%u0k[&q\"#NEs";
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.toString();
      capabilities0.getOtherCapabilities();
      String string0 = "*lbO4M'Oh>&<Zv-!i.x";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-170.84448);
      doubleArray0[1] = (-170.84448);
      doubleArray0[2] = (-170.84448);
      doubleArray0[3] = (-170.84448);
      doubleArray0[4] = (-170.84448);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-170.84448), doubleArray0);
      String string1 = "|<nXxO67-FFH2c\\/]&";
      StringReader stringReader0 = new StringReader("oB%u0k[&q\"#NEs");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[oB], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      System.setCurrentTimeMillis((-1L));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      String string0 = capabilities1.toSource("]X[ZG");
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      capabilities0.or(capabilities2);
      capabilities0.enableDependency(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      String string1 = findWithCapabilities0.getFilename();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",";
      stringArray0[1] = "-not-string-atts";
      stringArray0[2] = ",";
      stringArray0[3] = "?r[ru!~s.IC~3=w";
      stringArray0[4] = "1>`ap2.|\"8PW'v=#d@2";
      stringArray0[5] = "tGKAMCOAP";
      stringArray0[6] = "{8%nfKQZt$//22UN";
      stringArray0[7] = "Y~}~]!F&cQR%9z'eCJ";
      stringArray0[8] = "\nTrain: ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Random.setNextRandom((-1962));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      capabilities0.setOwner(findWithCapabilities0);
      stringArray0[0] = "weka/core/Capabilities.props";
      capabilities0.m_AttributeTest = false;
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-string-atts";
      stringArray0[1] = "`[R";
      stringArray0[2] = "!En*4c*";
      FindWithCapabilities.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "num-instances";
      stringArray0[1] = "B-)x(W?B$*003|mX";
      stringArray0[2] = "Missing";
      stringArray0[3] = "kc";
      stringArray0[4] = "i_Vk1H3LeW{XL\"";
      stringArray0[5] = "~>euO,Mr6J|-z 2[X";
      stringArray0[6] = "-not-missing-class-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      stringArray0[0] = "r<dOh  ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "-class-type <num>";
      stringArray0[2] = "-c";
      stringArray0[3] = "string";
      stringArray0[4] = ",r6";
      stringArray0[5] = " because it requires ";
      stringArray0[6] = "Phw2X;l";
      stringArray0[7] = "?p/Gu78w";
      stringArray0[8] = "!2'm\"?op*$810qub";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      System.setCurrentTimeMillis((-741L));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~Uash1  YrqK";
      stringArray0[1] = "class-index";
      stringArray0[2] = "-not-numeric-atts";
      stringArray0[3] = "-not-date-atts";
      stringArray0[4] = "&%tt^3zX-&mP;";
      stringArray0[5] = "W]m+ ^d`rM A";
      stringArray0[6] = "u4 9L";
      stringArray0[7] = ")";
      FindWithCapabilities.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Phw2X;l";
      stringArray0[1] = "XMnZdieZ8bc-hQ(";
      stringArray0[2] = ";fPGa*]B";
      stringArray0[3] = "-not-numeric-atts";
      stringArray0[4] = "-t <file>";
      stringArray0[5] = "HoN&Bo`";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tMust handle date classes.";
      stringArray0[1] = "-not-relational-atts";
      stringArray0[2] = "J(2lva5biuUA!g}]kNP";
      stringArray0[3] = "UG+kfV7E2M";
      stringArray0[4] = ":?d1E}VND4A{OzR";
      stringArray0[5] = "gH}`QAi`zk^1";
      stringArray0[6] = "p%eNe<seV-jR";
      stringArray0[7] = "z(<y0#kLI2]q/";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      System.setCurrentTimeMillis(0L);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Indices from sort (ints): ";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      stringArray0[1] = "FX<_W~b)5_bff:)U(";
      stringArray0[2] = "b=(@7N)[[7IU!j'f\"@";
      stringArray0[3] = "test_set";
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      stringArray0[4] = "v`gG4cc%.icvw(U_";
      stringArray0[5] = "-no-class";
      stringArray0[6] = "MinimumNumberInstancesTest";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray1 = new String[0];
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      capabilities0.m_MinimumNumberInstancesTest = false;
      capabilities0.enableAllAttributes();
      capabilities0.enableAllAttributes();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.getHandler();
      boolean boolean1 = findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(",{");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(610L);
      TestInstances testInstances0 = new TestInstances();
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat(2000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2000
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "not-string-class");
      stringArray0[0] = "Cdh";
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      stringArray0[1] = "}4)RY@]<z#d>(2NP";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.m_Superclass = "+1? ";
      stringArray0[2] = "Bv";
      stringArray0[3] = "-not-binary-class";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "M0Kkw-iM.";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Random.setNextRandom(1);
      Random.setNextRandom(1);
      findWithCapabilities0.getHandler();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Unary attributes";
      stringArray1[1] = "\tMust handle nominal classes.";
      stringArray1[2] = "first-last";
      stringArray1[3] = "-unary-atts";
      stringArray1[4] = "8[&/>^re";
      String[] stringArray2 = findWithCapabilities0.getOptions();
      stringArray1[5] = "-num-instances <num>";
      try { 
        findWithCapabilities0.setOptions(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Sztt7O]m83j[$V";
      stringArray0[1] = "-only-multiinstance";
      stringArray0[2] = "I-B(9>}";
      stringArray0[3] = "Invalid class index: ";
      stringArray0[4] = "-numeric-class";
      stringArray0[5] = "lZg";
      stringArray0[6] = "yyHx'-PdpirrI5]8g\"";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "s";
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      capabilities0.m_Test = false;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("s");
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability4);
      assertEquals("s", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Packages = vector0;
      vector0.listIterator();
      vector0.remove((Object) null);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.setFilename(";xnc('k80;5bCl");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      assertEquals(";xnc('k80;5bCl", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-nominal-class";
      stringArray0[1] = "Copy with position set to \"second\": ";
      stringArray0[2] = "";
      stringArray0[3] = "PackageURL";
      stringArray0[4] = "weka.core.Instances";
      stringArray0[5] = "AaXgG^xzCu!* ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "\tThe class type, see constants in weka.core.Attribute\n\t(default 1=nominal).";
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-not-numeric-class";
      stringArray0[1] = "[";
      stringArray0[2] = "\t03pK";
      stringArray0[3] = "XL?Iox'@1iE6rDfw";
      stringArray0[4] = "=LNI{Fe6C+-C3nDz:@";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=LNI{Fe6C+-C3nDz:@");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Random.setNextRandom(10000);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "GL7cJbk(9X}1e;s=7&";
      stringArray0[1] = "-packages";
      stringArray0[2] = "-numeric-atts";
      stringArray0[3] = "IUmK|r_";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UKVQM";
      stringArray0[1] = "false";
      stringArray0[2] = "-binary-class";
      stringArray0[3] = "Relational";
      FindWithCapabilities.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Some packages no longer exist at the repository. Refreshing cache...", arrayList0, 3);
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      // Undeclared exception!
      try { 
        sparseInstance0.setClassValue(0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom((-1681));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.assign(findWithCapabilities0.m_Capabilities);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getHandler();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(6, stringArray0.length);
      
      Random.setNextRandom((-1681));
      findWithCapabilities0.getRevision();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getFilename();
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertNotSame(vector1, vector0);
      assertTrue(vector1.equals((Object)vector0));
      
      findWithCapabilities0.setCapabilities(capabilities0);
      assertNotSame(capabilities0, capabilities1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-117);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("I29E7O");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "5.0.1";
      stringArray0[1] = "not-nominal-class";
      stringArray0[2] = "+zcmLYHX#jk=w";
      stringArray0[3] = "-unary-atts";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      String[] stringArray1 = new String[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray1[0] = "OblvEI?~6";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setFilename("\tThe index of the class attribute, -1 for none.\n\t'first' and 'last' are also valid.\n\tOnly in conjunction with option '-t'.");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities2.getMatches();
      findWithCapabilities1.m_Packages = vector0;
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      Random.setNextRandom((-2021521678));
      Random.setNextRandom((-2021521678));
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertEquals(12, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "a%CIde?9)m|f";
      stringArray0[1] = "oI]n:0evhm%oBL-eVU";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a%CIde?9)m|f");
      stringArray0[2] = "B$X/LsW)";
      stringArray0[3] = "-noprolog";
      stringArray0[4] = "";
      stringArray0[5] = "-missing-class-values";
      stringArray0[6] = "])]AHt";
      stringArray0[7] = "T%{";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      Enumeration enumeration1 = findWithCapabilities0.listOptions();
      assertNotSame(enumeration1, enumeration0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.m_Superclass = "2/<~?L^*WX";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.handles(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F|S#;5");
      capabilities0.capabilities();
      capabilities0.m_InstancesTest = true;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_Superclass = "F|S#;5";
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      FindWithCapabilities.main(stringArray0);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "W#2";
      stringArray0[1] = "Number of classes: ";
      stringArray0[2] = "Q'R|JUh8;h}z-sUN";
      stringArray0[3] = "u~}Q";
      stringArray0[4] = "-not-unary-class";
      stringArray0[5] = "l~\"7Uq3||Iu";
      stringArray0[6] = "Copy with position set to \"second\": ";
      stringArray0[7] = "Copy with position set to \"second\": ";
      stringArray0[8] = "\n\n";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = ":}mYC?(k";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("8034");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      capabilities0.disableAllAttributes();
      findWithCapabilities0.m_Capabilities = capabilities0;
      Random.setNextRandom(1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "-packages";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = ":}mYC?(k";
      stringArray0[5] = "8034";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = ":}mYC?(k";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("-packages");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector0 = new Vector<String>();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("2%CA`nZf?vJ`A`~wv;");
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities1;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.m_Filename = "";
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.getRevision();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "numeric-class");
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability3);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.disableAllAttributeDependencies();
      findWithCapabilities0.find();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-class-type <num>");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "-class-type <num>";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "-class-type <num>";
      stringArray0[5] = "";
      stringArray0[6] = "-class-type <num>";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "(h~";
      stringArray1[2] = "2$`:>S?kPaA";
      stringArray1[3] = "mI_{&}5XznVE8";
      FindWithCapabilities.main(stringArray1);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      ClassDiscovery.m_Cache = null;
      findWithCapabilities0.m_NotCapabilities = capabilities1;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      capabilities1.setMinimumNumberInstances(0);
      findWithCapabilities0.setFilename("Value of position for copy: ");
      findWithCapabilities0.find();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/core/Capabilities.props";
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      capabilities1.m_Owner = null;
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "Value of position for copy: ";
      capabilities0.getOtherCapabilities();
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "&Ae1OYW-_Pp8zNVMgE";
      findWithCapabilities0.getRevision();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "8034");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Random.setNextRandom(691);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(691);
      findWithCapabilities0.m_Superclass = "&Ae1OYW-_Pp8zNVMgE";
      findWithCapabilities1.getHandler();
      findWithCapabilities0.getMisses();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Random.setNextRandom((-2679));
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ySGbhmS*d<,";
      stringArray0[1] = "Unable to install ";
      stringArray0[2] = "\tMust handle unary attributes.";
      stringArray0[3] = "-date-class";
      stringArray0[4] = "GbtISB~u/U 0[E";
      stringArray0[5] = "i{T{R\"1gY0dy}*s?hgc";
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Packages = vector0;
      stringArray0[6] = " because it requires ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      singleIndex0.m_SelectedIndex = (-2503);
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) chebyshevDistance0);
      Predicate<Object> predicate1 = predicate0.negate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      vector0.removeIf(predicate3);
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.m_Superclass = "vN4PJkC^YeA}-`Ct2";
      findWithCapabilities0.setFilename("/{gVyh");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.handles(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      assertEquals("/{gVyh", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      String string0 = "Fetching meta data for ";
      stringArray0[0] = "Fetching meta data for ";
      String string1 = "*c N*";
      stringArray0[1] = "*c N*";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      // Undeclared exception!
      try { 
        TestInstances.forCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-99);
      byteArray0[0] = (byte) (-99);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-1);
      findWithCapabilities0.find();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L524A/Cz";
      stringArray0[1] = "I\"P93";
      stringArray0[2] = "-relational-class";
      stringArray0[3] = "i2Y4LMwJn^R,4px";
      stringArray0[4] = "])]AHt";
      stringArray0[5] = "X*seXI$Ymcl%S+rnX";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
