/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:20:15 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte)76;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 48, (-1725));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.setBit(99, 99);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (int) (byte) (-99), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lreturn
         // 1:    ifgt\t\t#12069
         // 4:    lmul
         // 5:    freturn
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      Utility.printArray(objectArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "{org.evosuite.runtime.mock.java.io.MockPrintStream@43d7f6bd, , org.evosuite.runtime.mock.java.io.MockPrintStream@43d7f6bd, , , org.evosuite.runtime.mock.java.io.MockPrintStream@43d7f6bd, org.evosuite.runtime.mock.java.io.MockPrintStream@43d7f6bd}");
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, (int) (byte)84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.isSet(77, 77);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)6;
      ConstantPool constantPool0 = null;
      int int0 = 1611;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1611, 1611);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.compactClassName("@IZ", "18qsL^j\"}=UrW^", true);
      try { 
        Utility.typeOfSignature("@IZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @IZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("XR<Xd0.dSF'a\"8]WRR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XR<Xd0.dSF'a\"8]WRR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 32;
      int int1 = 9;
      Utility.setBit(32, 9);
      String string0 = "%zj}SSg> wF6bLpp.";
      Utility.decode("%zj}SSg> wF6bLpp.", false);
      try { 
        Utility.typeOfSignature("%zj}SSg> wF6bLpp.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %zj}SSg> wF6bLpp.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'";
      stringArray0[1] = "'";
      Utility.methodTypeToSignature("'", stringArray0);
      Utility.compactClassName("(L';L';)L';");
      Utility.methodSignatureArgumentTypes("(L';L';)L';", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-84);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)6;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("(", "(", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)6;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)16;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)49;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (-1106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format((-1422), 183, false, 'C');
      String string1 = Utility.compactClassName("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC-1422", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC-1422", false);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)27;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-60));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      String string2 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-62), 239);
      assertEquals("0:    aload_2\n1:    impdep2\n2:    monitorenter\n3:    iflt\t\t#12231\n6:    f2i\n7:    iload_1\n", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool0);
      String string3 = Utility.format((byte)27, 124, false, '1');
      assertEquals("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111127", string3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (-3255));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)54;
      Utility.toHexString(byteArray0);
      String string0 = "QKZp&]?\":";
      try { 
        Utility.typeOfSignature("QKZp&]?\":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QKZp&]?\":
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.convertString(" TCJ_X^}Swt(+8T|pv");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "--orMhmpg$O";
      stringArray0[1] = " TCJ_X^}Swt(+8T|pv";
      String string0 = "? super ";
      stringArray0[2] = "? super ";
      stringArray0[3] = "=E$*(=Q]U[]7";
      stringArray0[4] = " TCJ_X^}Swt(+8T|pv";
      stringArray0[5] = " TCJ_X^}Swt(+8T|pv";
      stringArray0[6] = " TCJ_X^}Swt(+8T|pv";
      Utility.methodTypeToSignature("=E$*(=Q]U[]7", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[{J&<e ?O F'7<$", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [{J&<e ?O F'7<$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      Utility.replace("{java.lang.Object@3e72f639, java.lang.Object@20bba265, java.lang.Object@2bfe0660, java.lang.Object@5e46ab09}", "{java.lang.Object@3e72f639, java.lang.Object@20bba265, java.lang.Object@2bfe0660, java.lang.Object@5e46ab09}", "double");
      Utility.convertString("double");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)121;
      byteArray0[3] = (byte) (-34);
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte) (-73);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(41);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("double");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)25, (int) (byte)25, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)115;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)89, (int) (byte)115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)84;
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)68;
      byte byte1 = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 796, 156, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.compactClassName("^^:wI}");
      Utility.getSignature("^^:wI}");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)17;
      byteArray0[0] = (byte)18;
      byteArray0[5] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte)46;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)39, (int) (byte)46, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)9;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)9, (byte) (-111));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 202, (-3045));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)45;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2347, (int) (byte) (-61), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("<<JqN");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("]U9f]$JH(T.JJY");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(959);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantClass constantClass0 = new ConstantClass((byte)104);
      constantArray0[3] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[4] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((-2423.725159));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[5] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.isJavaIdentifierPart('b');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 961, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte)33;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, 2730, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifeq\t\t#-27907
         // 3:    f2d
         // 4:    dup
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, 560, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.generic.Type$3", false);
      assertEquals(28, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-55);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureReturnType("$3f$c9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$3f$c9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, 183, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      Utility.convertString("=[");
      Utility.methodSignatureReturnType("Invalid type: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 49, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-89);
      byteArray0[0] = (byte) (-89);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte) (-89));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      Utility.methodTypeToSignature("\r", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)36;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)36, 666);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      Utility.convertString("=[");
      Utility.methodSignatureReturnType("Invalid type: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-23);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 49, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.searchOpcode("private");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "private";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int0 = 47;
      Utility.isSet((short) (-1), 47);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-64);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, (-2787));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup2_x1", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 206, (-1612));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-38);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-41);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-41), (-643));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1799, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)9;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte) (-87));
      Utility.encode(byteArray0, true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("6:    lstore_3\n7:    lsub\n8:    lconst_0\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6:    lstore_3
         // 7:    lsub
         // 8:    lconst_0
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("_C7b[Ub", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Invalid signature: `";
      Utility.methodTypeToSignature("multianewarray", stringArray0);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 181;
      Utility.format(181, 175, true, 't');
      Utility.clearBit(2, 175);
      Utility.searchOpcode("181tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      try { 
        Utility.typeOfSignature("181tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 181tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.compactClassName("^^:wI}");
      Utility.getSignature("^^:wI}");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)17;
      byteArray0[0] = (byte)20;
      byteArray0[5] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4653. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.signatureToString("V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 92);
      assertEquals("0:    <illegal opcode>\n1:    iastore\n2:    frem\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=T/EID1A6d;:]];");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =T/EID1A6d;:]];
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3G_/rtNE_$T&TT>X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3G_/rtNE_$T&TT>X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("rsPS}V)K(", "float", true);
      Utility.printArray(objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName("{java.lang.Object@2ecd995f, java.lang.Object@1508f08c, java.lang.Object@7117503, java.lang.Object@6f8cbbe3, java.lang.Object@2dc9d02c, java.lang.Object@7f97c989, java.lang.Object@73a20215, java.lang.Object@79fbfc21, java.lang.Object@1ad00b82}", "areturn", true);
      Utility.classOrInterface((-2758));
      byte[] byteArray0 = Utility.decode("rsPS}V)K(", false);
      Utility.getSignature("{java.lang.Object@2ecd995f, java.lang.Object@1508f08c, java.lang.Object@7117503, java.lang.Object@6f8cbbe3, java.lang.Object@2dc9d02c, java.lang.Object@7f97c989, java.lang.Object@73a20215, java.lang.Object@79fbfc21, java.lang.Object@1ad00b82}");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1489, 6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)110;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)110, (int) (byte)110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.compactClassName("wide", false);
      Utility.getSignature("wide");
      Utility.accessToString(72, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("static volatile", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Lwide;";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-74);
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-66);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17988. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)69;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.convertString("org.apache.bcel.classfile.Utility$1");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, (int) (byte)69, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1821, 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.accessToString(9, false);
      Utility.format(29, 6, false, '!');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1685), 173, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.clearBit(8, 8);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("<Pp6|l]k", (-1841), true, '_');
      Utility.classOrInterface(552);
      Utility.convertString(">");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte)48;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, 80, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)67;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-493), (int) (byte) (-49));
      assertEquals("0:    i2c\n1:    nop\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    iconst_0\n5:    <illegal opcode>\n6:    fstore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.searchOpcode("Exceptions: ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte) (-107);
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString(207);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)65, (byte) (-95));
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2055, (byte) (-76));
      constantArray0[5] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20992. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      Utility.fillup("{java.lang.Object@64c8bb18, java.lang.Object@4ca20b9f, java.lang.Object@39027b53, java.lang.Object@4ae4b7ed, java.lang.Object@6bd5c5d2, java.lang.Object@3777d5c4, java.lang.Object@1d85f89a}", 218, false, 'i');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)47;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("{java.lang.Object@64c8bb18, java.lang.Object@4ca20b9f, java.lang.Object@39027b53, java.lang.Object@4ae4b7ed, java.lang.Object@6bd5c5d2, java.lang.Object@3777d5c4, java.lang.Object@1d85f89a}");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(210, (-643));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-26), (-3));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, 5152);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)71;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 547, 547);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = ";2N";
      try { 
        Utility.typeOfSignature(";2N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;2N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)94;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-23);
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte)94;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-82);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-145), (int) (byte) (-82));
      assertEquals("0:    iload_3\n1:    freturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "A^De/mj9^Zjk.5KG0";
      try { 
        Utility.typeOfSignature("A^De/mj9^Zjk.5KG0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A^De/mj9^Zjk.5KG0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      Utility.replace("{java.lang.Object@3c6948e7, java.lang.Object@8f39e7c, java.lang.Object@69a2f547, java.lang.Object@26605af1}", "{java.lang.Object@3c6948e7, java.lang.Object@8f39e7c, java.lang.Object@69a2f547, java.lang.Object@26605af1}", "double");
      Utility.convertString("double");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte) (-73);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(41);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("double");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)25, (int) (byte)25, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)76;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 221, (int) (byte) (-61), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.typeOfSignature("*Ji");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.format((byte)11, (byte)11, true, ';');
      MockFile mockFile0 = new MockFile("`1'dSdA@J`QB}x6/");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.fillup("$lr>xP+Z", 243, false, 'y');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1326, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)28;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-67);
      Utility.equals(byteArray0, byteArray0);
      Utility.fillup("5:6=\u0002DR.4 =M?L1Mw", (-1347), true, 'p');
      try { 
        Utility.methodSignatureArgumentTypes("(O;(c>-b,{F-@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O;(c>-b,{F-@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodTypeToSignature("p|`h!UvwWbanbhnXc", (String[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Utility.toHexString(byteArray0);
      char char0 = 'W';
      Utility.fillup("<illegal opcode>", (byte)0, false, 'W');
      ConstantPool constantPool0 = null;
      int int0 = (-575);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-575), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      String string0 = "8K]A!r_O1+";
      try { 
        Utility.typeOfSignature("8K]A!r_O1+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8K]A!r_O1+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-103);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(244, 239);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(244, (byte) (-103));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 35, 252);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 479;
      Utility.classOrInterface(479);
      byte[] byteArray0 = Utility.decode("class", false);
      File file0 = MockFile.createTempFile("class", "org.apache.bcel.classfile.Utility$JavaReader");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 479, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("if_icmpeq", false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)105;
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)27;
      byteArray0[2] = (byte)27;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, 18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-43);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-26), (byte)23);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(3656, (byte) (-33));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-461), (-763), true);
      try { 
        Utility.typeOfSignature("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    fload\t\t%213\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    fload\t\t%213
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.isJavaIdentifierPart('0');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.getSignature("3V-x*d$rt@x!G/q<)'");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1384, (int) (byte)97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('x');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)57;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-59), (-1600));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 50493. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)10;
      byte byte0 = (byte)91;
      byteArray0[2] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)61;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (-1235));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.classOrInterface(1924);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-125);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2242, 40);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      Utility.replace("{java.lang.Object@32ced02d, java.lang.Object@69caf96f, java.lang.Object@5db153d5, java.lang.Object@11898be6}", "{java.lang.Object@32ced02d, java.lang.Object@69caf96f, java.lang.Object@5db153d5, java.lang.Object@11898be6}", "{java.lang.Object@32ced02d, java.lang.Object@69caf96f, java.lang.Object@5db153d5, java.lang.Object@11898be6}");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-19);
      Utility.encode(byteArray0, false);
      Utility.fillup("voX", (byte) (-106), false, '|');
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-19), (int) (byte)9, false);
      String string0 = "|pyri>(%`0<|AD";
      String string1 = "newarray";
      String string2 = "\t\t#";
      boolean boolean0 = true;
      int int0 = 82;
      File file0 = MockFile.createTempFile("0:    fcmpg\n1:    lconst_0\n2:    ixor\n3:    <illegal opcode>\n4:    astore_1\n5:    dup2_x1\n6:    <illegal opcode>\n", "voX");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "voX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"voX\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.replace("arraylength", "arraylength", "getfield");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "Illegally nested brackets:";
      boolean boolean0 = true;
      Utility.signatureToString("Illegally nested brackets:", true);
      Utility.setBit(380, 380);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      int int0 = 3685;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3685, (byte) (-70));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.setBit(59, 59);
      Utility.accessToString((-3411), false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "public protected static synchronized transient interface synthetic annotation enum";
      objectArray0[1] = (Object) "public protected static synchronized transient interface synthetic annotation enum";
      objectArray0[2] = (Object) "public protected static synchronized transient interface synthetic annotation enum";
      objectArray0[3] = (Object) "public protected static synchronized transient interface synthetic annotation enum";
      objectArray0[4] = (Object) "public protected static synchronized transient interface synthetic annotation enum";
      Utility.printArray(objectArray0, false, true);
      Utility.fillup("#At5 ZDLra0`7>k!S", (-3411), true, 'G');
      try { 
        Utility.typeOfSignature("#At5 ZDLra0`7>k!S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #At5 ZDLra0`7>k!S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P/#Fb");
      Utility.getSignature("static");
      Utility.fillup("?s9", 2183, true, 'l');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    dload_2
         // 2:    impdep1
         // 3:    dup2
         // 4:    astore_0
         // 5:    lastore
         // 6:    astore_2
         // 7:    fconst_2
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, true);
      Utility.convertString("athrow");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "42Z");
      byte byte0 = (byte) (-33);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface((-1025));
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), (int) (byte)45, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"8oHUf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"8oHUf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface((byte)65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 203, (int) (byte)67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (-923));
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.compactClassName("^^:wI}");
      Utility.getSignature("^^:wI}");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4653. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.typeOfSignature("Dont call getValueLong() on a non LONG ElementValue");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("KiPT6Ndk3P9E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KiPT6Ndk3P9E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "23%";
      try { 
        Utility.typeOfSignature("23%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 23%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.typeOfSignature("Z3uT");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("S{", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)60;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(67, 61);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-4057), 1758);
      assertEquals("0:    istore\t\t%144\n2:    <illegal opcode>\n3:    istore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool0.accept(emptyVisitor0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("HKNE[~`j`!wM1m.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HKNE[~`j`!wM1m.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.clearBit(897, 18);
      Utility.compactClassName("'@", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-36);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-36), 18, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)81;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 165, (int) (byte) (-121), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = null;
      int int0 = 2088;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2088, 169, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("xNcwKEF;_7!");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      String string0 = constantUtf8_1.toString();
      assertEquals("CONSTANT_Utf8[1](\"xNcwKEF;_7!\")", string0);
      
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1800), (int) (byte)50);
      assertEquals("0:    aaload\n", string1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-30);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, (int) (byte)122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)69;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2f
         // 1:    <illegal opcode>
         // 2:    nop
         // 3:    athrow
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(103, false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)36;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 486, 86, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.typeOfSignature("S2-yck");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("char", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jqSPj\"zt|d8XR:#v0");
      Utility.accessToString(61, false);
      Utility.isJavaIdentifierPart('s');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)31;
      byte byte0 = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)77;
      Utility.encode(byteArray0, false);
      Utility.clearBit((byte)111, (byte) (-84));
      String string0 = "[]";
      try { 
        Utility.methodSignatureReturnType("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "CONSTANT_String";
      Utility.methodSignatureReturnType("CONSTANT_String", true);
      try { 
        Utility.methodSignatureReturnType("5\"?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5\"?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.searchOpcode("LD.s<Zc@yn06JkZOJ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "multianewarray");
      String string0 = "@4K=(1$>#r_[%%[($;";
      Utility.compactClassName("@4K=(1$>#r_[%%[($;");
      try { 
        Utility.methodSignatureReturnType("LD.s<Zc@yn06JkZOJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LD.s<Zc@yn06JkZOJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = Utility.setBit(57, 1174);
      assertEquals(4194361, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte)92;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte)45, true);
      assertEquals("0:    aload_3\n1:    lstore_2\n2:    astore_2\n3:    impdep2\n4:    astore_1\n5:    fastore\n6:    fcmpl\n7:    f2l\n8:    dup2\n", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.convertString("ifle");
      Utility.convertString("ifle");
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.isSet(170, 196);
      Utility.isSet((-1626), 170);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-108);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2, (int) (byte) (-67), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 50873. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) constantArray0, true);
      try { 
        Utility.methodSignatureReturnType("iload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iload_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("long");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger(169);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1962), (int) (byte) (-49), false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    laload\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-18);
      byteArray0[2] = (byte)49;
      byteArray0[4] = (byte)4;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-95));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)49, 212);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-18), 1934, false);
      assertEquals("0:    if_icmplt\t\t#8241\n3:    nop\n4:    iconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.accessToString(766, true);
      String string0 = Utility.format(766, 5204, true, '2');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-59), 12);
      Constant constant0 = constantInterfaceMethodref0.copy();
      constantArray0[0] = constant0;
      Constant constant1 = constant0.copy();
      constantArray0[1] = constant1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-927), 2);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.convertString("impdep1");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)53;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.compactClassName("[", "UHHW9=K|8EBuH", false);
      Utility.replace("\t\t<", "[", "Unreachable default case reached!");
      Utility.classOrInterface(58);
      Utility.searchOpcode("aRq`a<J");
      try { 
        Utility.typeOfSignature("Hj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "Op%*>6hjm?@M$Qgm";
      Utility.convertString("Op%*>6hjm?@M$Qgm");
      try { 
        Utility.methodSignatureReturnType("Op%*>6hjm?@M$Qgm", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Op%*>6hjm?@M$Qgm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      Utility.classOrInterface(1233);
      Utility.compactClassName("java.lang.Object@1d1ac403", "java.lang.Object@1d1ac403", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat(1233);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Object[] objectArray1 = new Object[0];
      Utility.printArray(objectArray1, false, false);
      try { 
        Utility.methodSignatureReturnType("impdep1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":D*|qW},k1E_4?M .");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :D*|qW},k1E_4?M .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.setBit(4323, 4323);
      String string0 = "java.lang.$0UI7!' AKkQ45";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode("java.lang.$0UI7!' AKkQ45", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-374), (-374));
      Utility.searchOpcode("Q#p%}R9LcU2h\"");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) "Q#p%}R9LcU2h\"";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2223), (byte)67);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Eua-pv,czmx.~B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eua-pv,czmx.~B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      stringArray0[2] = "t }>OsZJ#Z;_2/n^Y<M";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("(", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "RKo\"NHB3(b'Og0]p";
      try { 
        Utility.typeOfSignature("RKo\"NHB3(b'Og0]p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RKo\"NHB3(b'Og0]p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "Exceptions: ";
      Utility.searchOpcode("Exceptions: ");
      try { 
        Utility.methodSignatureReturnType("Exceptions: ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("java.lang.Object@10cb0b1a, java.lang.Object@2a9cb088, java.lang.Object@c6f9ee7, java.lang.Object@91b2289, java.lang.Object@41406b6b, java.lang.Object@e979b3b");
      Utility.convertString("");
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("if_icmple", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "if_icmple";
      stringArray0[1] = "if_icmple";
      stringArray0[2] = "\r";
      stringArray0[3] = "if_icmple";
      stringArray0[4] = "if_icmple";
      stringArray0[5] = "if_icmple";
      stringArray0[6] = "if_icmple";
      stringArray0[7] = "if_icmple";
      Utility.methodTypeToSignature("if_icmple", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2889), 68);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger(68);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "P \\,btW?tr<pzD2u_B";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("P ,btW?tr<pzD2u_B", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("P ,btW?tr<pzD2u_B", (String[]) null);
      try { 
        Utility.typeOfSignature("P ,btW?tr<pzD2u_B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P ,btW?tr<pzD2u_B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(381, true);
      byte[] byteArray0 = Utility.decode("public protected static final volatile native", false);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public protected static final volatile native";
      objectArray0[2] = (Object) "public protected static final volatile native";
      objectArray0[3] = (Object) "public protected static final volatile native";
      objectArray0[4] = (Object) "public protected static final volatile native";
      objectArray0[5] = (Object) "public protected static final volatile native";
      objectArray0[6] = (Object) "public protected static final volatile native";
      Utility.printArray(objectArray0, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.setBit(381, 381);
      try { 
        Utility.typeOfMethodSignature("java.lang.Object@74893167, public protected static final volatile native, public protected static final volatile native, public protected static final volatile native, public protected static final volatile native, public protected static final volatile native, public protected static final volatile native");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@74893167, public protected static final volatile native, public protected static final volatile native, public protected static final volatile native, public protected static final volatile native, public protected static final volatile native, public protected static final volatile native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-61);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2708), (int) (byte)46, false);
      assertEquals("0:    iand\n1:    iaload\n2:    monitorexit\n", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 85;
      Utility.classOrInterface(85);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = (Object) "class";
      Utility.printArray(objectArray0, true, false);
      Utility.getSignature("{java.lang.Object@767bfca5, class, class}");
      Object[] objectArray1 = new Object[6];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[1] = (Object) "class";
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) "L{java/lang/Object@767bfca5,;";
      objectArray1[4] = (Object) "{java.lang.Object@767bfca5, class, class}";
      objectArray1[5] = (Object) "{java.lang.Object@767bfca5, class, class}";
      Utility.printArray(objectArray1, true, true);
      Utility.printArray(objectArray1, false);
      String string0 = "OWC\"1Iaa!*+=";
      Utility.decode("OWC\"1Iaa!*+=", false);
      try { 
        Utility.typeOfSignature("OWC\"1Iaa!*+=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OWC\"1Iaa!*+=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.searchOpcode("void");
      boolean boolean0 = Utility.isSet(1139, (short) (-1));
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("java.lang.:-?C", true);
      assertEquals(":-?C", string0);
      
      short short0 = Utility.searchOpcode("double");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)80;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-303), (int) (byte)53);
      assertEquals("0:    <illegal opcode>\n1:    saload\n2:    ishr\n3:    lastore\n", string1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(177, false);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "i2d";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i2d");
      Utility.clearBit(2843, 2843);
      Utility.convertString("CUJ0uN");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{0:    <il");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType("RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "I)CC{VGIi!KB";
      Utility.typeOfSignature("I)CC{VGIi!KB");
      Utility.classOrInterface((-275));
      Utility.fillup("interface", (byte)10, false, '{');
      try { 
        Utility.typeOfMethodSignature("aload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 361;
      Utility.isSet(361, 361);
      String string0 = "Jt7";
      Utility.methodSignatureReturnType("Jt7");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("Jt7");
      try { 
        Utility.typeOfMethodSignature("{@XvFp_a![(at6#YX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {@XvFp_a![(at6#YX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 199, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "void";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "?Y[9&|t^=\"|[zn{|4";
      // Undeclared exception!
      try { 
        Utility.getSignature("?Y[9&|t^=\"|[zn{|4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[9&|t^=\"|[zn{|4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "n[b&3uV>9";
      stringArray0[1] = "\tdefault = ";
      stringArray0[2] = "n[b&3uV>9";
      stringArray0[3] = "n[b&3uV>9";
      stringArray0[4] = "n[b&3uV>9";
      stringArray0[5] = "n[b&3uV>9";
      stringArray0[6] = "n[b&3uV>9";
      stringArray0[7] = "n[b&3uV>9";
      stringArray0[8] = "n[b&3uV>9";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("n[b&3uV>9", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[b&3uV>9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.methodTypeToSignature("v^#k`N*@]u(\"N", (String[]) null);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)124;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)124, 89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = false;
      Utility.decode("yPQ~j<,o@cH", false);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("yPQ~j<,o@cH", (String[]) null);
      String string0 = "\t\t%";
      Utility.getSignature("\t\t%");
      String string1 = "!-vZZP";
      try { 
        Utility.typeOfSignature("!-vZZP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -vZZP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpeq\t\t#-690", string0);
      
      String string1 = Utility.accessToString(8, true);
      assertEquals("static", string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format(672, 75, true, '-');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)52;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1520, 8192);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Utility.compactClassName("Um`vQ C4", "p'HMTXQNI<", true);
      assertEquals("Um`vQ C4", string0);
      
      byte byte0 = Utility.typeOfSignature("T-$}ji&s4>mRWE");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "Nr{H}d";
      Utility.compactClassName("Nr{H}d");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^LG?,V");
      Utility.isJavaIdentifierPart('0');
      String string1 = "9!\"Rhf";
      try { 
        Utility.typeOfSignature("9!\"Rhf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9!\"Rhf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      try { 
        Utility.decode("$ {Um%x?L", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "+[}[^]6jn$H^[";
      Utility.typeOfSignature("+[}[^]6jn$H^[");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.replace("eL-LRTHhzj@2T0d|", ",iy", "eL-LRTHhzj@2T0d|");
      Utility.compactClassName("eL-LRTHhzj@2T0d|", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "eL-LRTHhzj@2T0d|";
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("&M6M>UpdC4O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &M6M>UpdC4O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)50;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 255, (int) (byte)108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20588. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)4;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)49, 212);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-18), 1934, false);
      assertEquals("0:    fstore_1\n1:    lload_2\n2:    <illegal opcode>\n3:    daload\n4:    iconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte) (-51);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "The filter must not be null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The filter must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The filter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "Xr(dz[0";
      try { 
        Utility.methodSignatureReturnType("Xr(dz[0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xr(dz[0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.accessToString(8);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C'xj");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-80);
      byteArray0[8] = (byte)60;
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3766, (int) (byte)60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "->@6NPAf_!t2@VTkI'>";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "->@6NPAf_!t2@VTkI'>";
      stringArray0[1] = "->@6NPAf_!t2@VTkI'>";
      stringArray0[2] = "\t\t<";
      stringArray0[3] = "->@6NPAf_!t2@VTkI'>";
      stringArray0[4] = "->@6NPAf_!t2@VTkI'>";
      stringArray0[5] = "->@6NPAf_!t2@VTkI'>";
      stringArray0[6] = "->@6NPAf_!t2@VTkI'>";
      stringArray0[7] = "->@6NPAf_!t2@VTkI'>";
      Utility.methodTypeToSignature("->@6NPAf_!t2@VTkI'>", stringArray0);
      Utility.clearBit((-1841839336), (-1841839336));
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("lmul", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lmul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.getSignature(" <C$zhX");
      String string0 = "bM(Jz@";
      int int0 = 84;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      char char0 = 'n';
      Utility.fillup("bM(Jz@", 84, false, 'n');
      Utility.getSignature("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnbM(Jz@");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.typeOfSignature("L<C$zhX;");
      Utility.compactClassName("Mj3/2V%jjf&h", "FyGFP/Y]", false);
      Utility.encode(byteArray0, false);
      int int1 = (-1635531804);
      Utility.classOrInterface((-1635531804));
      try { 
        Utility.methodSignatureArgumentTypes("Mj3.2V%jjf&h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mj3.2V%jjf&h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "),*I*9TS,='N/;_!";
      try { 
        Utility.typeOfSignature("),*I*9TS,='N/;_!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ),*I*9TS,='N/;_!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.accessToString((-2174));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "private transient native interface abstract synthetic annotation enum";
      objectArray0[1] = (Object) "private transient native interface abstract synthetic annotation enum";
      objectArray0[2] = (Object) "private transient native interface abstract synthetic annotation enum";
      objectArray0[3] = (Object) "private transient native interface abstract synthetic annotation enum";
      objectArray0[4] = (Object) "private transient native interface abstract synthetic annotation enum";
      objectArray0[5] = (Object) "private transient native interface abstract synthetic annotation enum";
      objectArray0[6] = (Object) "private transient native interface abstract synthetic annotation enum";
      Utility.printArray(objectArray0, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DfR~q]/RZWA}qt");
      String string0 = "UQwg8ObzWd(-f^~";
      // Undeclared exception!
      try { 
        Utility.signatureToString("UQwg8ObzWd(-f^~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UQwg8ObzWd(-f^~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("5)f$Ji281`rmPTe/g");
      boolean boolean0 = false;
      Utility.compactClassName("5)f$Ji281`rmPTe/g", false);
      Utility.clearBit(2, (-1));
      try { 
        Utility.typeOfSignature("5)f$Ji281`rmPTe/g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5)f$Ji281`rmPTe/g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = ",_vuq#$";
      try { 
        Utility.decode(",_vuq#$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", low = ");
      String string0 = Utility.fillup(", low = ", 2013, true, 'Y');
      Utility.accessToString(600, true);
      Utility.accessToString((-1508), true);
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "%9$XZ5cN";
      try { 
        Utility.decode("%9$XZ5cN", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.replace("z?P", "z?P", "imul");
      int int0 = 19;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(19);
      Utility.searchOpcode("checkcast");
      String string0 = "Xd%n(0";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Xd%n(0");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "imul";
      stringArray0[1] = "imul";
      stringArray0[2] = "+Z>'xljQ#%vZ=";
      stringArray0[3] = "Xd%n(0";
      stringArray0[4] = "o-K=x4<T[";
      stringArray0[5] = "Xd%n(0";
      stringArray0[6] = "checkcast";
      stringArray0[7] = "o-K=x4<T[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("o-K=x4<T[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-1);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(141, 183);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-90), (int) (byte)71);
      assertEquals("0:    fcmpl\n1:    if_acmpne\t\t#1096\n4:    lload_2\n5:    impdep2\n", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmple\t\t#-27907
         // 3:    l2i
         // 4:    dup
         // 5:    lload_1
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Utility.classOrInterface(76);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong(495L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1094, 62);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref((byte) (-122), (-2401));
      constantArray0[2] = (Constant) constantMethodref2;
      ConstantClass constantClass0 = new ConstantClass((byte)112);
      constantArray0[3] = (Constant) constantClass0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)112);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[4] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2f", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("/wI4k%wD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /wI4k%wD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "(class_index = ";
      try { 
        Utility.typeOfMethodSignature("(class_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (class_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "Y\"{";
      Utility.searchOpcode("Y\"{");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-43);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("Y\"{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y\"{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto");
      String string0 = "Tys:$p}p4eJoIB~Dy>";
      boolean boolean0 = false;
      Utility.decode("Tys:$p}p4eJoIB~Dy>", false);
      try { 
        Utility.methodSignatureArgumentTypes("Tys:$p}p4eJoIB~Dy>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Tys:$p}p4eJoIB~Dy>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantPool1.constantToString((Constant) constantFloat0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.isSet(62, (-821));
      Utility.format((-821), (-2146), false, 'T');
      Utility.accessToString((-2146), true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-821";
      stringArray0[1] = "-821";
      stringArray0[2] = "private protected static final transient native abstract synthetic annotation enum";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.methodTypeToSignature("-821", stringArray0);
      Utility.setBit((-2146), (-821));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, 2330, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("void", "invokevirtual", true);
      String string0 = "'RP]";
      try { 
        Utility.typeOfSignature("'RP]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'RP]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "byte");
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)40;
      byteArray0[2] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "YDAtz+<[}f{A-";
      try { 
        Utility.typeOfSignature("YDAtz+<[}f{A-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YDAtz+<[}f{A-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "W@F*LeuuQxPDh";
      stringArray0[1] = "W@F*LeuuQxPDh";
      stringArray0[2] = "W@F*LeuuQxPDh";
      stringArray0[3] = "W@F*LeuuQxPDh";
      String string0 = "[DC;!#z{[0+4XwUd";
      stringArray0[4] = "[DC;!#z{[0+4XwUd";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("W@F*LeuuQxPDh", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [DC;!#z{[0+4XwUd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, 1381, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = Utility.clearBit((-1158), 231);
      assertEquals((-1158), int0);
      
      String string0 = Utility.format((-1158), (-1158), true, 'i');
      assertEquals("-1158", string0);
      
      int int1 = Utility.clearBit((-1158), 239);
      assertEquals((-33926), int1);
      
      byte byte0 = Utility.typeOfSignature("VycL/");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-39);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (-158));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.convertString("q'^lYW/jiO/1[");
      assertEquals("q\\'^lYW/jiO/1[", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureReturnType("V", true);
      Utility.getSignature("void");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-53), 199);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) constantArray0, true);
      try { 
        Utility.methodSignatureReturnType("dload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = ":<cv%L";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char char0 = '6';
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.fillup(":<cv%L", 2734, false, '6');
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signaturecv%L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "Wuck";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Wuck", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wuck'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Utility.signatureToString("Dont call getValueDouble() on a non DOUBLE ElementValue", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Dont call getValueDouble() on a non DOUBLE ElementValue";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "double";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "double";
      objectArray0[5] = (Object) "double";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "Num?EZ'/P";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Num?EZ'/P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Num?EZ'/P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.compactClassName("getstatic");
      Utility.replace("getstatic", "getstatic", "getstatic");
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("getstatic", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.decode("($f5=UYCjpZ", false);
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "breakpoint");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("($f5=UYCjpZ", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$f5=UYCjpZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)46;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, 5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4ccclidK";
      stringArray0[1] = "4ccclidK";
      stringArray0[2] = "4ccclidK";
      stringArray0[3] = "4ccclidK";
      stringArray0[4] = "4ccclidK";
      stringArray0[5] = "4ccclidK";
      stringArray0[6] = "4ccclidK";
      stringArray0[7] = "4ccclidK";
      stringArray0[8] = "4ccclidK";
      Utility.methodTypeToSignature("4ccclidK", stringArray0);
      try { 
        Utility.typeOfSignature("4ccclidK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4ccclidK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.compactClassName("{null, null, null}", false);
      Utility.convertString(")\n");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "'", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.convertString("4'");
      Utility.isJavaIdentifierPart('\'');
      boolean boolean0 = false;
      int int0 = (-272);
      int int1 = 124;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteSequence0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 40
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "Fl#7C[";
      Utility.fillup("Fl#7C[", 13, false, 't');
      Utility.searchOpcode("tttttttFl#7C[");
      Utility.typeOfSignature("Fl#7C[");
      Utility.signatureToString("Fl#7C[", true);
      Utility.accessToString((int) (byte)6, false);
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(46, 1);
      String string0 = "K$2Mz6?";
      try { 
        Utility.methodSignatureReturnType("K$2Mz6?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K$2Mz6?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ddiv", string0);
      
      int int0 = Utility.setBit((byte)90, (byte)111);
      assertEquals(32858, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantClass constantClass0 = new ConstantClass(39);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantFloat constantFloat0 = new ConstantFloat((-2868.441F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("p56i]X");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifnull\t\t#813", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-94);
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariableTypeTable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Utility.signatureToString("Zx_JAc{KM};E(Ih", false);
      int int0 = Utility.clearBit(1421, 1421);
      assertEquals(1421, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((-854), 1421, true, 'p');
      String string0 = Utility.accessToString(96, true);
      assertEquals("volatile", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)102;
      byte byte0 = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-19);
      byte byte1 = (byte)87;
      byteArray0[4] = (byte)87;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "`%yj\\;=Lg[gnz";
      try { 
        Utility.typeOfSignature("`%yj;=Lg[gnz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `%yj;=Lg[gnz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.isSet(2786, (-1492));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7H");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodTypeToSignature("j'*tt*tPPFC=t]c9", (String[]) null);
      Utility.clearBit((-1492), 2786);
      Utility.compactClassName("j'*tt*tPPFC=t]c9", "j'*tt*tPPFC=t]c9", false);
      try { 
        Utility.methodSignatureArgumentTypes("return");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.accessToString(19);
      String string0 = "Qee5}c";
      try { 
        Utility.methodSignatureReturnType("Qee5}c", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qee5}c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Utility.signatureToString("StackMapTable", false);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = true;
      Utility.compactClassName("=+n*", "=+n*", true);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("=+n*", stringArray0);
      Utility.fillup("()L=+n*;", 1826, true, ';');
      Utility.convertString("org.apache.bcel.classfile.Constant$1");
      Utility.accessToString(1826);
      Utility.compactClassName("()L=+n*;");
      String string0 = "Invalid type: ";
      int int0 = (-3148);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Constant[] constantArray0 = new Constant[6];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char char0 = '0';
      Utility.isJavaIdentifierPart('0');
      Utility.convertString("\"");
      int int0 = (-968);
      int int1 = (-481);
      Utility.format((-968), (-481), true, '0');
      String string0 = "__V/mH{";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("__V/mH{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `__V/mH{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("multianewarray", false);
      int int0 = (-1170);
      Utility.classOrInterface((-1170));
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)69;
      byte byte0 = (byte)35;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-116);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-93);
      byteArray1[1] = (byte) (-93);
      Utility.equals(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.decode("{}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "?h/M3j7Xb\\\\Ia";
      try { 
        Utility.typeOfSignature("?h/M3j7Xb\\Ia");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?h/M3j7Xb\\Ia
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DAA3i5O");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "void";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "void");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-i5:ZE;V[`er");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.printArray(objectArray0);
      int int0 = (-385);
      Utility.accessToString((-385));
      try { 
        Utility.methodSignatureArgumentTypes("public private protected static final synchronized volatile interface abstract strictfp synthetic annotation enum", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static final synchronized volatile interface abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "G$}u;;Q?^xbk";
      try { 
        Utility.typeOfSignature("G$}u;;Q?^xbk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G$}u;;Q?^xbk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "\n     ";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\n     ";
      stringArray0[1] = "\n     ";
      stringArray0[2] = "\n     ";
      stringArray0[3] = "\n     ";
      stringArray0[4] = "\n     ";
      stringArray0[5] = "\n     ";
      Utility.methodTypeToSignature("\n     ", stringArray0);
      try { 
        Utility.decode("iy `Z)EJ'G.^l{", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.getSignature("<");
      Utility.getSignature("L<;");
      Utility.clearBit(196, 196);
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GG'");
      try { 
        Utility.methodSignatureReturnType("GG'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GG''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)92;
      byteArray0[0] = (byte)92;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "$5c";
      objectArray0[1] = (Object) (byte)92;
      objectArray0[2] = (Object) (byte)92;
      objectArray0[3] = (Object) (byte)92;
      objectArray0[4] = (Object) "$5c";
      objectArray0[5] = (Object) "$5c";
      objectArray0[6] = (Object) (byte)92;
      boolean boolean1 = true;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature("$5c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $5c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "true";
      String string1 = "if_icmple";
      Utility.replace("true", "@1!RI_j", "if_icmple");
      Utility.replace("true", "if_acmpne", "I/5VY");
      String string2 = "PMGClass";
      try { 
        Utility.methodSignatureReturnType("PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.RQ2&");
      Utility.setBit(13, 184);
      Utility.methodSignatureReturnType("Invalid type: ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-50);
      byte byte0 = (byte)97;
      byteArray0[7] = (byte)97;
      Constant[] constantArray0 = new Constant[8];
      DataInput dataInput0 = null;
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bo<cnXak(VD.rA!f9");
      byte byte0 = Utility.typeOfSignature("Bo<cnXak(VD.rA!f9");
      assertEquals((byte)8, byte0);
      
      int int0 = Utility.clearBit((byte)8, (byte)8);
      assertEquals(8, int0);
      
      String string0 = Utility.methodSignatureReturnType("Bo<cnXak(VD.rA!f9");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.replace("monitorenter", "eiCKY/7GrX]1Rp55jd ", "hqx7xF=={b!/Cy;g< ");
      Utility.classOrInterface((-4768));
      int int0 = 597;
      Utility.isSet(597, (-4768));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "monitorenter";
      objectArray0[3] = (Object) "hqx7xF=={b!/Cy;g< ";
      objectArray0[4] = (Object) "monitorenter";
      objectArray0[5] = (Object) "monitorenter";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "hqx7xF=={b!/Cy;g< ";
      Utility.printArray(objectArray0, true);
      boolean boolean0 = true;
      Utility.fillup("hqx7xF=={b!/Cy;g< ", (-4768), true, '0');
      Utility.convertString("monitorenter");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("MFdSeSEWlM#\nf/-IK", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MFdSeSEWlM#
         // f/-IK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(101);
      Utility.setBit(58, 1);
      Utility.methodSignatureReturnType("F1QS0`6A!wKc^LW_", false);
      Utility.format((-3468), 1, false, ' ');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "public protected synchronized volatile";
      stringArray0[1] = "float";
      stringArray0[2] = "uFBeoT)}T";
      stringArray0[3] = "uFBeoT)}T";
      stringArray0[4] = "-3468";
      stringArray0[5] = "uFBeoT)}T";
      stringArray0[6] = "uFBeoT)}T";
      Utility.methodTypeToSignature("uFBeoT)}T", stringArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("uFBeoT)}T", "uFBeoT)}T");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // uFBeoT)}T
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)29;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$7dU$3a7$3f$H$b4$j", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "putstatic", "putstatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "hqx7xF=={b!/Cy;g< ";
      Utility.replace("monitorenter", "eiCKY/7GrX]1Rp55jd ", "hqx7xF=={b!/Cy;g< ");
      Utility.classOrInterface((-4768));
      int int0 = 597;
      int int1 = 32;
      Utility.isSet(597, 32);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "monitorenter";
      objectArray0[3] = (Object) "eiCKY/7GrX]1Rp55jd ";
      objectArray0[4] = (Object) "monitorenter";
      objectArray0[5] = (Object) "monitorenter";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "hqx7xF=={b!/Cy;g< ";
      Utility.printArray(objectArray0, true);
      boolean boolean0 = true;
      char char0 = '0';
      Utility.fillup("hqx7xF=={b!/Cy;g< ", (-4768), true, '0');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "%r*)O41 *", "class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i");
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName(")fJV'?-:Wl4m4$Q2", false);
      Utility.accessToString(4);
      int int0 = 8;
      Utility.clearBit((byte)97, 8);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("9L<;Pjm<zI", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9L<;Pjm<zI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "\\r";
      boolean boolean0 = true;
      char char0 = 'p';
      Utility.fillup("\r", 74, true, 'p');
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("InnerClass(", false);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.readDouble();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 40
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.searchOpcode(",'<*QV20%?|");
      String string0 = Utility.accessToString((int) (short) (-1), true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "public private protected static final volatile transient native abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) ",'<*QV20%?|";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) ",'<*QV20%?|";
      Object object1 = new Object();
      objectArray0[4] = object1;
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.replace("/K#p7$T@E26dB", "/K#p7$T@E26dB", "/K#p7$T@E26dB");
      try { 
        Utility.methodSignatureArgumentTypes("lGR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lGR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.searchOpcode("UyXW96=p<2Ys");
      String string0 = "boolean";
      Utility.replace("boolean", "dreturn", "UyXW96=p<2Ys");
      // Undeclared exception!
      try { 
        Utility.signatureToString("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "~4Q";
      Utility.getSignature("~4Q");
      try { 
        Utility.decode("org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.searchOpcode("");
      String string0 = "boolean";
      Utility.replace("boolean", "dreturn", "");
      Utility.accessToString((int) (short) (-1));
      try { 
        Utility.methodSignatureReturnType("boolean", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(608, 1734);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(48);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("compiled from\t\t", false);
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.compactClassName(":-?C");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ":-?C";
      Utility.printArray(objectArray0, false, true);
      Utility.format(68, 3, false, '(');
      URI uRI0 = MockURI.create("(68");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      try { 
        Utility.typeOfSignature("fstore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-s/";
      stringArray0[1] = "-s/";
      stringArray0[2] = "-s/";
      stringArray0[3] = "-s/";
      stringArray0[4] = "-s/";
      stringArray0[5] = "-s/";
      Utility.methodTypeToSignature("-s/", stringArray0);
      try { 
        Utility.methodSignatureReturnType("Y;)yZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `yZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = true;
      char char0 = 'Z';
      Utility.format((-278), (-278), true, 'Z');
      String string0 = "Kma^C3\\fO6=";
      try { 
        Utility.typeOfMethodSignature("Kma^C3\fO6=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kma^C3\fO6=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.classOrInterface(27);
      boolean boolean0 = false;
      Utility.fillup("!&P", 27, false, 'b');
      Utility.isJavaIdentifierPart('b');
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)96;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        constantPool0.getConstant(27, (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 27. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.convertString("D0f");
      try { 
        Utility.methodSignatureArgumentTypes("D0f", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D0f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = Utility.compactClassName("? extends ", true);
      assertEquals("? extends ", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)61;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-20), (int) (byte)61, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-20);
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{-20}", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("07 45 ec 4a 48 3d", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2583), (-942));
      assertEquals("0:    iconst_4\n1:    fstore_2\n2:    <illegal opcode>\n3:    dstore_3\n4:    dstore_1\n5:    istore_2\n", string3);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)32;
      byteArray0[0] = (byte) (-1);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(141, 183);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-90), (int) (byte)71);
      assertEquals("0:    impdep2\n1:    if_acmpne\t\t#1608\n4:    lload_2\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Utility.accessToString(95);
          Utility.setBit(95, 15);
          byte[] byteArray0 = new byte[4];
          byteArray0[0] = (byte)70;
          byteArray0[1] = (byte) (-79);
          byteArray0[2] = (byte) (-3);
          byteArray0[3] = (byte)9;
          Utility.toHexString(byteArray0);
          Utility.searchOpcode("if_icmplt");
          Utility.clearBit((-2554), 95);
          String[] stringArray0 = new String[6];
          stringArray0[0] = "if_icmplt";
          stringArray0[1] = "if_icmplt";
          stringArray0[2] = "if_icmplt";
          stringArray0[3] = "public private protected static final volatile";
          stringArray0[4] = "if_icmplt";
          stringArray0[5] = "public private protected static final volatile";
          Utility.methodTypeToSignature("public private protected static final volatile", stringArray0);
          Utility.getSignature("if_icmplt");
          Utility.fillup("<init>", (short)161, false, 'T');
          Utility.equals(byteArray0, byteArray0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor119.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\u0000";
      stringArray0[1] = "if_acmpeq";
      stringArray0[2] = "if_acmpeq";
      stringArray0[3] = "if_acmpeq";
      Utility.methodTypeToSignature("if_acmpeq", stringArray0);
      int int0 = 1957;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000");
      Utility.fillup("\u0000", 1957, false, '%');
      Utility.methodSignatureToString("(L\u0000;Lif_acmpeq;Lif_acmpeq;Lif_acmpeq;)Lif_acmpeq;", "lcmp", "iL3}u<`=is)\"}Z?1");
      Utility.printArray((Object[]) stringArray0, false);
      Utility.clearBit((-2140), (-2140));
      Utility.isSet(1957, (-2140));
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 38, (-2140), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      objectArray0[7] = object7;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      String string0 = "if_icmpge";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{\"java.lang.Object@78b367aa\", \"java.lang.Object@573e1f67\", \"java.lang.Object@538c7cb0\", \"java.lang.Object@3dbaf156\", \"java.lang.Object@5ed74f7c\", \"java.lang.Object@7935b6e6\", \"java.lang.Object@49ec3c8c\", \"java.lang.Object@233644a6\"}", "{\"java.lang.Object@78b367aa\", \"java.lang.Object@573e1f67\", \"java.lang.Object@538c7cb0\", \"java.lang.Object@3dbaf156\", \"java.lang.Object@5ed74f7c\", \"java.lang.Object@7935b6e6\", \"java.lang.Object@49ec3c8c\", \"java.lang.Object@233644a6\"}", "if_icmpge", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\"java.lang.Object@78b367aa\", \"java.lang.Object@573e1f67\", \"java.lang.Object@538c7cb0\", \"java.lang.Object@3dbaf156\", \"java.lang.Object@5ed74f7c\", \"java.lang.Object@7935b6e6\", \"java.lang.Object@49ec3c8c\", \"java.lang.Object@233644a6\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('Y');
      String string0 = "p67&m-";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("p67&m-", "p67&m-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // p67&m-
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = "W";
      try { 
        Utility.typeOfSignature("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("dstore_0");
      PrintStream printStream0 = mockPrintStream0.append('M');
      mockPrintStream0.close();
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "dstore_0";
      objectArray0[3] = (Object) mockPrintStream1;
      objectArray0[4] = (Object) printStream0;
      mockPrintStream0.append('m');
      objectArray0[5] = (Object) "dstore_0";
      objectArray0[6] = (Object) "dstore_0";
      objectArray0[7] = (Object) mockPrintStream1;
      objectArray0[8] = (Object) printStream0;
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore_0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
