/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:58:22 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BorderLayout;
import java.awt.event.InputEvent;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.util.Calendar;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Random;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.accessibility.AccessibleContext;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.ScrollPaneConstants;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyleConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.PlainText;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.M5P;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.EuclideanDistance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      instances0.delete();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      try { 
        Evaluation.evaluateModel((Classifier) classificationViaRegression0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.ClassificationViaRegression:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.M5P)
         // 
         // Options specific to classifier weka.classifiers.trees.M5P:
         // 
         // -N
         // \tUse unpruned tree/rules
         // -U
         // \tUse unsmoothed predictions
         // -R
         // \tBuild regression tree/rule rather than a model tree/rule
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf
         // \t(default 4)
         // -L
         // \tSave instances at the nodes in
         // \tthe tree (for visualization purposes)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, false);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      assertEquals(1, costMatrix0.numColumns());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.m_Unclassified;
      TimeZone.getAvailableIDs();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      M5P m5P0 = new M5P();
      textDirectoryLoader0.listOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.getClassPriors();
      DecisionTable decisionTable0 = new DecisionTable();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(30);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      evaluation0.numFalseNegatives(3172);
      evaluation0.rootMeanSquaredError();
      evaluation0.areaUnderPRC(8);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.BayesNet:
         // 
         // -D
         // \tDo not use ADTree data structure
         // 
         // -B <BIF file>
         // \tBIF file to compare with
         // 
         // -Q weka.classifiers.bayes.net.search.SearchAlgorithm
         // \tSearch algorithm
         // 
         // -E weka.classifiers.bayes.net.estimate.SimpleEstimator
         // \tEstimator algorithm
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Evaluation.makeOptionString(naiveBayes0, true);
      String[] stringArray0 = new String[27];
      stringArray0[7] = "Vi(qj3`mV]555*4";
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@relation";
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(374.0504129, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) null, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L}Z&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.buildClassifier(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.KBRelativeInformation();
      evaluation0.falsePositiveRate((-1));
      evaluation0.toSummaryString();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      evaluation0.weightedFalseNegativeRate();
      DecisionTable decisionTable0 = new DecisionTable();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      evaluation0.KBInformation();
      evaluation0.fMeasure(61);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(1);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.numTrueNegatives(1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.weightedFMeasure();
      evaluation0.m_SumSqrPredicted = Double.NaN;
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      evaluation0.precision((-408));
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = evaluation0.m_SumSqrClass;
      evaluation0.weightedTrueNegativeRate();
      Evaluation.main(stringArray0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getStructure();
      evaluation0.SFMeanPriorEntropy();
      int int0 = Calendar.MARCH;
      evaluation0.weightedFalseNegativeRate();
      DecisionTable decisionTable0 = new DecisionTable();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.relativeAbsoluteError();
      evaluation0.numFalsePositives(494);
      evaluation0.makeDistribution(Double.NaN);
      evaluation0.toClassDetailsString();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.compactify();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.getStructure();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalseNegativeRate();
      String string0 = XML.ATT_INDEX;
      evaluation0.weightedTruePositiveRate();
      evaluation0.addNumericTrainClass(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedAreaUnderROC();
      textDirectoryLoader0.getRevision();
      evaluation0.toMatrixString(",");
      evaluation0.SFPriorEntropy();
      evaluation0.totalCost();
      evaluation0.trueNegativeRate(10021);
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        Evaluation.handleCostOption(".m", (-2047));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L}Z&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) inputMappedClassifier0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5P m5P0 = new M5P();
      textDirectoryLoader0.listOptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      JSONLoader jSONLoader0 = new JSONLoader();
      gaussianProcesses0.getOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.weightedFMeasure();
      evaluation0.weightedAreaUnderROC();
      evaluation0.areaUnderROC(1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      evaluation0.SFMeanPriorEntropy();
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = XML.ATT_INDEX;
      evaluation0.pctIncorrect();
      evaluation0.recall(3);
      double[] doubleArray0 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-479));
      evaluation0.toSummaryString("@data", true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(92);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalseNegativeRate();
      textDirectoryLoader0.listOptions();
      evaluation0.SFMeanSchemeEntropy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      textDirectoryLoader0.setCharSet("@data");
      evaluation0.numFalseNegatives(1939);
      evaluation0.toMatrixString("\nGrowing and pruning a new rule ...");
      evaluation0.errorRate();
      evaluation0.SFSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1310.7302429042168, 1371.7999645);
      evaluation0.incorrect();
      PlainText plainText0 = new PlainText();
      File file0 = plainText0.getOutputFile();
      try { 
        textDirectoryLoader0.setDirectory(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '.' not found
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      textDirectoryLoader0.getStructure();
      evaluation0.weightedFalseNegativeRate();
      DecisionTable decisionTable0 = new DecisionTable();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      TextDirectoryLoader.main(stringArray0);
      Enumeration enumeration0 = new WordTokenizer();
      evaluation0.KBInformation();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      M5P m5P0 = new M5P();
      textDirectoryLoader0.listOptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      JSONLoader jSONLoader0 = new JSONLoader();
      textDirectoryLoader0.getOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      evaluation0.precision(1);
      evaluation0.areaUnderPRC(2);
      DecisionTable decisionTable0 = new DecisionTable();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.getDiscardPredictions();
      Evaluation.handleCostOption((String) null, 1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.iterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.numInstances();
      evaluation0.SFEntropyGain();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getOptions();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      evaluation0.weightedFMeasure();
      evaluation0.m_SumSqrPredicted = Double.NaN;
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      double double1 = KStarConstants.INITIAL_STEP;
      evaluation0.areaUnderPRC((-1994981129));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient((-408));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      evaluation0.weightedFMeasure();
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      double double1 = evaluation0.m_TotalCoverage;
      evaluation0.areaUnderPRC(15);
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = null;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      textDirectoryLoader0.listOptions();
      int int0 = 107;
      instances0.deleteWithMissing(107);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3257.6529414470033;
      doubleArray0[1] = (double) 107;
      SparseInstance sparseInstance0 = new SparseInstance(107.0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      double double1 = NimbusStyle.LARGE_SCALE;
      evaluation0.m_SumSqrPredicted = 1.15;
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      textDirectoryLoader0.setOptions(stringArray0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.relativeAbsoluteError();
      evaluation0.setDiscardPredictions(true);
      evaluation0.getDiscardPredictions();
      try { 
        Evaluation.handleCostOption("b\t q", (-2279));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      textDirectoryLoader0.listOptions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(mockRandom0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      evaluation0.SFMeanEntropyGain();
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.numInstances();
      evaluation0.KBMeanInformation();
      MockRandom mockRandom0 = new MockRandom(478);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.equals(naiveBayesMultinomialText0);
      evaluation0.getHeader();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = NimbusStyle.MINI_KEY;
      evaluation0.toMatrixString("maxBoostingIterationsTipText");
      SGD sGD0 = new SGD();
      Evaluation.getGlobalInfo(sGD0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      double double1 = evaluation0.m_SumPriorSqrErr;
      textDirectoryLoader0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      double double2 = evaluation0.m_TotalCoverage;
      double double3 = evaluation0.m_SumKBInfo;
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.rootRelativeSquaredError();
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L}Z&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TreeSet<BinarySparseInstance> treeSet0 = new TreeSet<BinarySparseInstance>();
      inputMappedClassifier0.buildClassifier(instances0);
      instances0.addAll((Collection<? extends Instance>) treeSet0);
      evaluation0.toCumulativeMarginDistributionString();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.setDiscardPredictions(false);
      evaluation0.toSummaryString("z;U-g", false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      textDirectoryLoader0.getRevision();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.precision(906);
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.weightedTrueNegativeRate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      System.setCurrentTimeMillis((-1L));
      evaluation0.numInstances();
      double[] doubleArray0 = new double[1];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      textDirectoryLoader0.listOptions();
      evaluation0.toCumulativeMarginDistributionString();
      double double1 = evaluation0.m_Incorrect;
      evaluation0.unweightedMacroFmeasure();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      evaluation0.avgCost();
      evaluation0.kappa();
      evaluation0.toMatrixString();
      evaluation0.toSummaryString();
      evaluation0.kappa();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(1991);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.sizeOfPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.m_Unclassified = 1000.0;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = gaussianProcesses0.getOptions();
      MockRandom mockRandom0 = new MockRandom(2);
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, 2, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UnaryOperator.identity();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "Use heuristic that avoids cross-validating the number of Logit-Boost iterations at every node. When fitting the logistic regression functions at a node, LMT has to determine the number of LogitBoost iterations to run. Originally, this number was cross-validated at every node in the tree. To save time, this heuristic cross-validates the number only once and then uses that number at every node in the tree. Usually this does not decrease accuracy but improves runtime considerably.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getStructure();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalseNegativeRate();
      String string0 = XML.ATT_INDEX;
      evaluation0.pctIncorrect();
      evaluation0.makeDistribution(Double.NaN);
      evaluation0.errorRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      KDTree kDTree0 = new KDTree(instances0);
      AllFilter allFilter0 = new AllFilter();
      allFilter0.getRevision();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.m_Unclassified = 1000.0;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = gaussianProcesses0.getOptions();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.toClassDetailsString("^6FtyhNtIXM,=7]7\"u");
      evaluation0.areaUnderROC(101);
      M5P m5P0 = new M5P();
      evaluation0.equals(m5P0);
      evaluation0.incorrect();
      double double0 = evaluation0.m_WithClass;
      double double1 = evaluation0.m_SumSqrClass;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.areaUnderPRC((-1994981129));
      Evaluation.main(stringArray0);
      evaluation0.falsePositiveRate((-2725));
      evaluation0.priorEntropy();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.toSummaryString();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.weightedAreaUnderPRC();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      instances0.listIterator();
      evaluation0.KBMeanInformation();
      stringArray0[2] = "getEstimatorType";
      MockRandom mockRandom0 = new MockRandom(523L);
      mockRandom0.nextGaussian();
      try { 
        evaluation0.crossValidateModel("@relation", instances0, 1448, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      IBk iBk0 = new IBk(342);
      IBk iBk1 = new IBk(2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1880));
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.m_SumPredicted = (-1936.46272);
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toMatrixString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getStructure();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalseNegativeRate();
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.pctIncorrect();
      evaluation0.recall(5);
      evaluation0.falseNegativeRate(3102);
      org.evosuite.runtime.Random.setNextRandom(3102);
      evaluation0.setNumericPriorsFromBuffer();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassIndex(1);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      Function<DecisionTable, SparseInstance> function0 = (Function<DecisionTable, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super DecisionTable, ? extends Instance>) function0);
      decisionTable1.setUseIBk(true);
      instances0.replaceAll(unaryOperator0);
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(489);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.weightedFalsePositiveRate();
      evaluation0.numFalsePositives(3);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator((ConditionalDensityEstimator) null, binarySparseInstance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.weightedFMeasure();
      evaluation0.m_SumSqrPredicted = Double.NaN;
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      evaluation0.areaUnderROC(1332);
      evaluation0.equals("selectionModel");
      evaluation0.incorrect();
      double double0 = evaluation0.m_WithClass;
      double double1 = evaluation0.m_SumSqrClass;
      evaluation0.areaUnderPRC((-1994981129));
      Evaluation.main(stringArray0);
      evaluation0.falsePositiveRate((-1994981129));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numFalsePositives(1332);
      evaluation0.pctUnclassified();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedAreaUnderROC();
      evaluation0.correct();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      double double1 = evaluation0.m_MissingClass;
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      instances0.deleteWithMissing(111);
      evaluation0.precision(117);
      evaluation0.m_ClassNames = stringArray0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      double double2 = evaluation0.m_SumSqrClass;
      evaluation0.meanPriorAbsoluteError();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.SFMeanEntropyGain();
      evaluation0.toSummaryString(false);
      evaluation0.areaUnderROC(0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      evaluation0.unweightedMicroFmeasure();
      double double3 = KStarConstants.FLOOR1;
      evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      evaluation0.SFMeanPriorEntropy();
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'B';
      charArray0[2] = 'x';
      charArray0[3] = 'G';
      charArray0[4] = '%';
      charArray0[5] = '}';
      evaluation0.num2ShortID(0, charArray0, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.weightedFMeasure();
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.listOptions();
      evaluation0.precision(3441);
      evaluation0.weightedTrueNegativeRate();
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      evaluation0.SFMeanPriorEntropy();
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'v';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = '7';
      evaluation0.num2ShortID(476, charArray0, 50);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      double double1 = evaluation0.m_SumPriorEntropy;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      evaluation0.m_MissingClass = 254.555109544079;
      evaluation0.equals(votedPerceptron0);
      double double2 = evaluation0.m_WithClass;
      double double3 = evaluation0.m_SumSqrErr;
      double double4 = evaluation0.m_SumSqrErr;
      evaluation0.toSummaryString();
      evaluation0.toMatrixString(".bsi");
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      instances0.deleteWithMissing(107);
      evaluation0.areaUnderROC(6);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      evaluation0.m_ClassNames = stringArray0;
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.falsePositiveRate(6);
      evaluation0.SFMeanEntropyGain();
      evaluation0.useNoPriors();
      evaluation0.SFMeanEntropyGain();
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "setMomentum");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      evaluation0.addNumericTrainClass((-832.0), (-832.0));
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFEntropyGain();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getOptions();
      MockRandom mockRandom0 = new MockRandom();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      String string0 = ScrollPaneConstants.LOWER_LEADING_CORNER;
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.listOptions();
      double double0 = evaluation0.m_SumSqrClass;
      double double1 = KStarConstants.EPSILON;
      boolean boolean0 = evaluation0.m_NoPriors;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      System.setCurrentTimeMillis(1L);
      evaluation0.numInstances();
      String string1 = AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED;
      double double2 = evaluation0.m_SumPriorEntropy;
      evaluation0.equals(textDirectoryLoader0);
      evaluation0.KBInformation();
      double double3 = evaluation0.m_MinTarget;
      evaluation0.priorEntropy();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      boolean boolean0 = evaluation0.m_NoPriors;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom(1380L);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.toString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      evaluation0.unweightedMacroFmeasure();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.ints((long) 2, (-2), (-1));
      evaluation0.useNoPriors();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.SFSchemeEntropy();
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.addNumericTrainClass((-8.574567851546854E-4), (-1));
      evaluation0.SFPriorEntropy();
      evaluation0.areaUnderPRC(2);
      evaluation0.rootRelativeSquaredError();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      String string0 = ScrollPaneConstants.LOWER_LEADING_CORNER;
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      textDirectoryLoader0.listOptions();
      double double0 = evaluation0.m_SumSqrClass;
      double double1 = KStarConstants.EPSILON;
      boolean boolean1 = evaluation0.m_NoPriors;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      System.setCurrentTimeMillis(1L);
      evaluation0.numInstances();
      String string1 = AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED;
      double double2 = evaluation0.m_SumPriorEntropy;
      evaluation0.equals(textDirectoryLoader0);
      evaluation0.KBInformation();
      evaluation0.matthewsCorrelationCoefficient(42);
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      evaluation0.useNoPriors();
      evaluation0.m_SumSqrPredicted = 0.0;
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      evaluation0.precision((-408));
      double double1 = evaluation0.m_SumSqrClass;
      double double2 = evaluation0.m_Incorrect;
      evaluation0.priorEntropy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      double double3 = evaluation0.m_TotalCost;
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-69);
      evaluation0.precision(339);
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.areaUnderPRC((-408));
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.relativeAbsoluteError();
      MockRandom mockRandom0 = new MockRandom();
      double double4 = NimbusStyle.MINI_SCALE;
      textDirectoryLoader0.setOptions(stringArray0);
      evaluation0.pctIncorrect();
      evaluation0.SFMeanPriorEntropy();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((byte) (-69));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.m_SumSqrPredicted = 0.0;
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      evaluation0.precision(495);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = KStarConstants.EPSILON;
      evaluation0.weightedTrueNegativeRate();
      DenseInstance denseInstance0 = new DenseInstance(495);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double1 = 4.68309671700184;
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.setNumericPriorsFromBuffer();
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses1, sparseInstance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-17);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.useNoPriors();
      evaluation0.m_SumSqrPredicted = Double.NaN;
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      evaluation0.precision((-408));
      double double0 = evaluation0.m_MissingClass;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.priorEntropy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.areaUnderPRC(1033);
      evaluation0.falsePositiveRate(1069);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.falsePositiveRate(499);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numFalsePositives((-1475));
      evaluation0.pctUnclassified();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTruePositiveRate();
      evaluation0.weightedAreaUnderROC();
      evaluation0.numFalseNegatives(15);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      StyleConstants styleConstants1 = (StyleConstants)AttributeSet.ResolveAttribute;
      SMO sMO0 = new SMO();
      Object[] objectArray0 = new Object[2];
      evaluation0.evaluateModel((Classifier) sMO0, instances0, objectArray0);
      evaluation0.areaUnderROC(0);
      evaluation0.weightedRecall();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      byte byte0 = (byte) (-17);
      evaluation0.useNoPriors();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      textDirectoryLoader0.listOptions();
      double double1 = evaluation0.m_SumSqrClass;
      evaluation0.meanPriorAbsoluteError();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.SFMeanEntropyGain();
      evaluation0.toSummaryString(false);
      evaluation0.areaUnderROC(1);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints();
      textDirectoryLoader0.setOptions(stringArray0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (byte) (-17));
      evaluation0.recall((-1114383320));
      evaluation0.unweightedMicroFmeasure();
      evaluation0.relativeAbsoluteError();
      evaluation0.KBInformation();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      evaluation0.toCumulativeMarginDistributionString();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      double double1 = evaluation0.m_Incorrect;
      evaluation0.unweightedMacroFmeasure();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) attributeSelectedClassifier0, instances0, 4, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      instances0.compactify();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      int[] intArray0 = new int[5];
      evaluation0.SFEntropyGain();
      evaluation0.errorRate();
      double double0 = new Float((double) (-1));
      evaluation0.fMeasure(0);
      testInstances0.setClassType(0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1033.575021);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.areaUnderROC(161);
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      testInstances0.setNoClass(true);
      evaluation0.SFEntropyGain();
      evaluation0.errorRate();
      evaluation0.weightedTruePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-3250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      try { 
        evaluation0.evaluateModelOnce((double) 5, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      instances0.enumerateAttributes();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      MockRandom mockRandom2 = new MockRandom();
      mockRandom1.ints();
      evaluation0.toSummaryString();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.unweightedMacroFmeasure();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints();
      try { 
        evaluation0.crossValidateModel((Classifier) attributeSelectedClassifier0, instances0, 1959, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L37&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.toMatrixString("@data");
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getTechnicalInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.sizeOfPredictedRegions();
      org.evosuite.runtime.Random.setNextRandom(5);
      double double1 = evaluation0.m_MissingClass;
      evaluation0.weightedAreaUnderPRC();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      instances0.compactify();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      String string1 = JOptionPane.SELECTION_VALUES_PROPERTY;
      double double0 = evaluation0.m_MissingClass;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.getGlobalInfo(costSensitiveClassifier1);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient(2);
      evaluation0.addNumericTrainClass(1, 15.0);
      JSONLoader jSONLoader0 = new JSONLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      evaluation0.areaUnderPRC(10);
      Evaluation.getGlobalInfo(votedPerceptron0);
      ZeroR zeroR0 = new ZeroR();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      testInstances0.getRelationalClassFormat();
      zeroR0.buildClassifier(instances0);
      zeroR0.getOptions();
      evaluation0.meanAbsoluteError();
      evaluation0.pctUnclassified();
      Evaluation.getGlobalInfo(zeroR0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance((Instances) null);
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.setDiscardPredictions(false);
      evaluation0.errorRate();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedMatthewsCorrelation();
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.unweightedMacroFmeasure();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.areaUnderPRC(1959);
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "graph");
      double[] doubleArray0 = new double[5];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      InputEvent.getModifiersExText((-2));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      MockRandom mockRandom0 = new MockRandom();
      wrapperSubsetEval0.listOptions();
      Instances instances1 = new Instances(instances0, 2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.resample(mockRandom0);
      evaluation0.updateMargins(doubleArray0, 4, 1453.2800195);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.SFEntropyGain();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      evaluation0.falseNegativeRate(1);
      evaluation0.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArffLoader arffLoader0 = new ArffLoader();
      File file0 = arffLoader0.retrieveFile();
      testInstances1.toString();
      textDirectoryLoader0.setSource(file0);
      textDirectoryLoader0.setSource(file0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d.\"F~LBzu");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      String string0 = AccessibleContext.ACCESSIBLE_INVALIDATE_CHILDREN;
      evaluation0.trueNegativeRate((-2));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalseNegativeRate();
      String string1 = XML.ATT_INDEX;
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L}Z&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TreeSet<BinarySparseInstance> treeSet0 = new TreeSet<BinarySparseInstance>();
      instances0.addAll((Collection<? extends Instance>) treeSet0);
      evaluation0.toCumulativeMarginDistributionString();
      Object[] objectArray0 = new Object[3];
      evaluation0.getClassPriors();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      double double0 = evaluation0.m_SumClass;
      evaluation0.kappa();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1943));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double double0 = KStarConstants.INITIAL_STEP;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double1 = KStarConstants.FLOOR1;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      MockRandom mockRandom0 = new MockRandom(1L);
      evaluation0.sizeOfPredictedRegions();
      String[] stringArray0 = new String[3];
      ZeroR.main(stringArray0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      evaluation0.equals(stringArray0[2]);
      double double2 = evaluation0.m_SumSchemeEntropy;
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getRevision();
      File file0 = arffLoader0.retrieveFile();
      file0.toPath();
      testInstances0.toString();
      textDirectoryLoader0.setSource(file0);
      textDirectoryLoader0.setSource(file0);
      textDirectoryLoader0.listOptions();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = XRFFLoader.FILE_EXTENSION_COMPRESSED;
      double double0 = evaluation0.m_MissingClass;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.confusionMatrix();
      evaluation0.errorRate();
      evaluation0.pctIncorrect();
      MockRandom mockRandom1 = new MockRandom(3);
      try { 
        ASEvaluation.forName(" ", testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      double double1 = NimbusStyle.LARGE_SCALE;
      evaluation0.m_SumSqrPredicted = 1.15;
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      Enumeration enumeration0 = new WordTokenizer();
      textDirectoryLoader0.setOptions(stringArray0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.relativeAbsoluteError();
      evaluation0.setDiscardPredictions(true);
      evaluation0.getDiscardPredictions();
      String string0 = "b\\t q";
      int int0 = (-102);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.retrieveFile();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      evaluation0.trueNegativeRate((-801));
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.numInstances();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      SerializedInstancesLoader.main(testInstances1.DEFAULT_WORDS);
      try { 
        serializedInstancesLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1033.575021);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L37&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      double double0 = evaluation0.m_MissingClass;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.areaUnderROC(5);
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      ZeroR zeroR1 = new ZeroR();
      evaluation0.equals(zeroR1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.FLOOR1;
      textDirectoryLoader0.listOptions();
      evaluation0.toCumulativeMarginDistributionString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " -1       0    \n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance((Instances) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      databaseLoader0.listOptions();
      databaseLoader0.getRevision();
      evaluation0.toSummaryString(false);
      evaluation0.kappa();
      evaluation0.useNoPriors();
      evaluation0.weightedAreaUnderROC();
      evaluation0.rootMeanPriorSquaredError();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // SVMLightLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.useNoPriors();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getRevision();
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.listOptions();
      evaluation0.precision((-136));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.KBRelativeInformation();
      boolean boolean0 = evaluation0.m_NoPriors;
      System.setCurrentTimeMillis((-3181L));
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC(478);
      MockRandom mockRandom1 = new MockRandom(478);
      int int0 = 488;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.equals(naiveBayesMultinomialText0);
      // Undeclared exception!
      try { 
        mockRandom1.ints((long) 488, 1, (-136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      textDirectoryLoader0.getRevision();
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.listOptions();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@relation", "8034");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "numeric";
      stringArray0[1] = "@attribute";
      textDirectoryLoader0.setOptions(stringArray0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.relativeAbsoluteError();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      evaluation0.toSummaryString(true);
      evaluation0.kappa();
      Instances instances2 = new Instances(instances1, 2);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances2, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "graph");
      double[] doubleArray0 = new double[6];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      InputEvent.getModifiersExText((-2));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = new Instances(instances0, 2, 3);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      evaluation0.updateMargins(doubleArray0, 4, 1453.2800195);
      evaluation0.SFEntropyGain();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.ints();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesUpdateable0, instances1, 1, (Random) mockRandom1, (Object[]) wrapperSubsetEval0.TAGS_EVALUATION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalseNegativeRate();
      String string0 = XML.ATT_INDEX;
      SparseInstance sparseInstance0 = new SparseInstance(813);
      textDirectoryLoader0.getStructure();
      instances0.add((Instance) sparseInstance0);
      byte[] byteArray0 = new byte[0];
      String string1 = JTree.SELECTION_MODEL_PROPERTY;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      String[] stringArray0 = new String[1];
      ZeroR.main(stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.rootMeanPriorSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sX#''FHD;HQ:hHsO?j");
      double double0 = evaluation1.m_SumSchemeEntropy;
      evaluation1.useNoPriors();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.useNoPriors();
      textDirectoryLoader0.getRevision();
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.listOptions();
      evaluation0.precision((-136));
      evaluation0.weightedTrueNegativeRate();
      boolean boolean0 = evaluation0.m_NoPriors;
      System.setCurrentTimeMillis((-3181L));
      evaluation0.numInstances();
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC(478);
      MockRandom mockRandom1 = new MockRandom(478);
      int int0 = 488;
      // Undeclared exception!
      try { 
        mockRandom1.ints((long) 488, 1, (-136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1033.575021);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.areaUnderROC(161);
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      instances0.enumerateAttributes();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      instances0.getRevision();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -258143
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L37&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(2736);
      double double0 = evaluation0.m_MaxTarget;
      testInstances0.setRelationalClassFormat(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      zeroR0.getOptions();
      evaluation0.updatePriors(instance0);
      evaluation0.meanAbsoluteError();
      evaluation0.pctUnclassified();
      Evaluation.getGlobalInfo(zeroR0);
      double double1 = evaluation0.m_ConfLevel;
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      evaluation0.equals(instances0);
      evaluation0.avgCost();
      evaluation0.updateStatsForPredictor(0L, instance0);
      double double2 = evaluation0.m_WithClass;
      evaluation0.KBRelativeInformation();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.falseNegativeRate((-1715));
      evaluation0.addNumericTrainClass(0.0, 3362.580681);
      evaluation0.setNumericPriorsFromBuffer();
      MockRandom mockRandom0 = new MockRandom();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setAutoBuild(false);
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      evaluation0.weightedPrecision();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1033.575021);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.areaUnderROC(161);
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      instances0.enumerateAttributes();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation0.equals(evaluation1);
      double double0 = evaluation0.m_SumSchemeEntropy;
      try { 
        Evaluation.handleCostOption(".bsi", 5);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1033.575021);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.areaUnderROC(5);
      evaluation0.areaUnderROC(161);
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.m_WithClass = 0.3;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation0.equals(evaluation1);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation1.toSummaryString();
      evaluation1.SFPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1033.575021);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.areaUnderROC(161);
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      instances0.enumerateAttributes();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation0.equals(evaluation1);
      Evaluation.getGlobalInfo(attributeSelectedClassifier0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = " ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      String string1 = "getValidationThreshold";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getValidationThreshold");
      Evaluation.handleCostOption("", 74);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("-g\n");
      Evaluation evaluation0 = new Evaluation(instances1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TreeSet<BinarySparseInstance> treeSet0 = new TreeSet<BinarySparseInstance>();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      inputMappedClassifier1.buildClassifier(instances1);
      instances1.addAll((Collection<? extends Instance>) instances0);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      String string0 = "getNormalizeDocLength";
      Instances instances0 = testInstances0.generate("getNormalizeDocLength");
      InputEvent.getModifiersExText((-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      boolean boolean0 = evaluation0.m_NoPriors;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom(1380L);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.toString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      textDirectoryLoader0.setSource(file0);
      textDirectoryLoader0.setSource(file0);
      textDirectoryLoader0.listOptions();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZeroR.main(testInstances1.DEFAULT_WORDS);
      testInstances1.setNumRelationalDate(16);
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        evaluation1.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      String string0 = JOptionPane.MESSAGE_TYPE_PROPERTY;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      instances0.compactify();
      Instances instances1 = new Instances(instances0, 2, 3);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      doubleArray0[0] = (double) 6;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 4, 1453.2800195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L37&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(2736);
      double double0 = evaluation0.m_MaxTarget;
      testInstances0.setRelationalClassFormat(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      ZeroR zeroR1 = new ZeroR();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.meanAbsoluteError();
      evaluation0.pctUnclassified();
      Evaluation.getGlobalInfo(zeroR1);
      double double1 = evaluation0.m_ConfLevel;
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      evaluation0.equals(instances0);
      evaluation0.avgCost();
      try { 
        evaluation0.updateStatsForPredictor((-1), instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "graph");
      double[] doubleArray0 = new double[6];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      InputEvent.getModifiersExText((-2));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = new Instances(instances0, 2, 3);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      evaluation0.updateMargins(doubleArray0, 4, 1453.2800195);
      evaluation0.SFEntropyGain();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.pctCorrect();
      evaluation0.weightedAreaUnderROC();
      evaluation0.rootRelativeSquaredError();
      evaluation1.toCumulativeMarginDistributionString();
      org.evosuite.runtime.Random.setNextRandom(3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L37&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2720);
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation2.updatePriors(instance0);
      evaluation0.meanAbsoluteError();
      evaluation1.pctUnclassified();
      Evaluation.getGlobalInfo(attributeSelectedClassifier0);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.KBRelativeInformation();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      evaluation2.equals(optionHandlerJavadoc0);
      evaluation3.avgCost();
      evaluation1.updateStatsForPredictor(Double.NaN, instance0);
      evaluation2.weightedTrueNegativeRate();
      evaluation2.KBRelativeInformation();
      double[] doubleArray0 = null;
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((double[]) null, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      boolean boolean0 = evaluation0.m_NoPriors;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom(1380L);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      String string0 = DefaultEditorKit.writableAction;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      textDirectoryLoader0.setSource(file0);
      textDirectoryLoader0.setSource(file0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      boolean boolean1 = evaluation0.m_CoverageStatisticsAvailable;
      ZeroR.main(testInstances1.DEFAULT_WORDS);
      mockRandom0.ints();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances1, (-2), (Random) mockRandom0, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setMaxK");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(2736);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      ZeroR.main(testInstances0.DEFAULT_WORDS);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      SMO sMO0 = new SMO();
      AbstractClassifier.makeCopy(sMO0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      attributeSelectedClassifier0.getOptions();
      evaluation0.updatePriors(instance0);
      evaluation0.meanAbsoluteError();
      evaluation0.pctUnclassified();
      Evaluation.getGlobalInfo(zeroR0);
      double double0 = evaluation0.m_ConfLevel;
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      evaluation0.equals(instances0);
      double double1 = NimbusStyle.LARGE_SCALE;
      evaluation0.updateStatsForPredictor(0L, instance0);
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      double double2 = evaluation0.m_SumSqrClass;
      evaluation0.areaUnderPRC(2050);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.falsePositiveRate(2);
      evaluation0.toSummaryString();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L37&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(2736);
      double double0 = evaluation0.m_MaxTarget;
      testInstances0.setRelationalClassFormat(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      ZeroR zeroR1 = new ZeroR();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      zeroR1.getOptions();
      evaluation0.updatePriors(instance0);
      evaluation0.meanAbsoluteError();
      evaluation0.pctUnclassified();
      Evaluation.getGlobalInfo(zeroR1);
      double double1 = evaluation0.m_ConfLevel;
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      evaluation0.equals(instances0);
      evaluation0.avgCost();
      evaluation0.updateStatsForPredictor(0L, instance0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.KBRelativeInformation();
      double[] doubleArray0 = new double[3];
      evaluation0.evaluationForSingleInstance(doubleArray0, instance0, false);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Of1L}Z&X%v");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TreeSet<BinarySparseInstance> treeSet0 = new TreeSet<BinarySparseInstance>();
      inputMappedClassifier0.buildClassifier(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Object[] objectArray0 = new Object[1];
      evaluation0.evaluateModel((Classifier) inputMappedClassifier0, instances0, objectArray0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "graph");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      InputEvent.getModifiersExText((-2));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      MockRandom mockRandom0 = new MockRandom();
      wrapperSubsetEval0.listOptions();
      Instances instances1 = new Instances(instances0, 2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.resample(mockRandom0);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.SFEntropyGain();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.m_ComplexityStatisticsAvailable = false;
      Evaluation evaluation1 = new Evaluation(instances1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      evaluation0.SFMeanSchemeEntropy();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TreeSet<BinarySparseInstance> treeSet0 = new TreeSet<BinarySparseInstance>();
      inputMappedClassifier0.buildClassifier(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = BorderLayout.BEFORE_FIRST_LINE;
      Object[] objectArray0 = new Object[1];
      evaluation0.evaluateModel((Classifier) inputMappedClassifier0, instances0, objectArray0);
      Instances instances1 = testInstances0.generate();
      instances0.equalHeaders(instances1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.weightedTruePositiveRate();
  }
}
