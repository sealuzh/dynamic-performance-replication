/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 19:12:18 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.replaceAll("", "");
      String string0 = rE2_0.prefix;
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 0, false);
      RE2.quoteMeta("");
      Machine machine0 = new Machine(rE2_0);
      MachineInput machineInput0 = MachineInput.fromUTF16("", 63, 0);
      machine0.match(machineInput0, 0, 1);
      rE2_0.put(machine0);
      rE2_0.longest = true;
      rE2_0.findAllSubmatchIndex("", 0);
      rE2_0.prefixRune = (-285);
      rE2_0.replaceAll("", "");
      rE2_0.findAllSubmatch("UTF-8", 0);
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8Submatch((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      RE2.quoteMeta("");
      boolean boolean0 = rE2_0.prefixComplete;
      List<String> list0 = rE2_0.findAll("", (-25));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("mL@{R");
      List<String[]> list0 = rE2_0.findAllSubmatch("Carian", 1601);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("urZKr-~,T^X.]'DE");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte) (-116);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8Index(byteArray0);
      String string0 = rE2_0.expr;
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("=G");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-94);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-98));
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)1;
      RE2.compile("h`k>g}94OL");
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 2147483645);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2.quoteMeta("");
      RE2 rE2_0 = RE2.compile("AB{9>");
      boolean boolean0 = rE2_0.match("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2.match("v", "v");
      RE2 rE2_0 = RE2.compileImpl("NBluTntPum", 4, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("LQdE?UAH?5=A");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)42;
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.matchUTF8(byteArray0);
      rE2_0.findSubmatchIndex("UTF-8");
      rE2_0.findSubmatchIndex("LQdE?UAH?5=A");
      rE2_0.findAllIndex("", (byte) (-18));
      String string0 = rE2_0.replaceAllFunc("", (RE2.ReplaceFunc) null, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("v");
      List<int[]> list0 = rE2_0.findAllIndex("/-%wm", 1017);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = new RE2("v");
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("END_TEXT");
      rE2_0.prefix = ",@~^=8.=eiiHqw40s}";
      rE2_0.findSubmatchIndex("J@vxKth\"#|cR5e<c");
      String string0 = "\\uM5Dznc";
      rE2_0.findAllIndex(string0, 233);
      rE2_0.replaceFirst("END_TEXT", "u&i");
      rE2_0.replaceFirst("END_TEXT", "");
      RE2.match(";TW{|mv@", "END_TEXT");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)4;
      rE2_0.findAllUTF8(byteArray0, (byte)0);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)34;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)34);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = new RE2("h1::|LV");
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)57);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.findAllIndex(".+*?()|[]{}^$", 0);
      rE2_0.findIndex("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-54);
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("com.google.re2j.CharGroup");
      int[] intArray0 = rE2_0.findIndex("com.google.re2j.CharGroup");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 25}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.prefixUTF8;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray1, (-4192));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("qs#ZM:2x$D.g`ia?d!");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)57;
      rE2_0.findAll(".+*?()|[]{}^$", (byte)115);
      byteArray0[2] = (byte) (-27);
      rE2_0.replaceAll("qs#ZM:2x$D.g`ia?d!", "qs#ZM:2x$D.g`ia?d!");
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte) (-62);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-794));
      rE2_0.prefix = "qs#ZM:2x$D.g`ia?d!";
      String string0 = rE2_0.toString();
      rE2_0.numberOfCapturingGroups();
      rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-62));
      rE2_0.findIndex("qs#ZM:2x$D.g`ia?d!");
      rE2_0.findSubmatchIndex("");
      String string1 = rE2_0.replaceAllFunc("qs#ZM:2x$D.g`ia?d!", (RE2.ReplaceFunc) null, (byte)0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      Machine machine0 = new Machine(rE2_0);
      MachineInput machineInput0 = MachineInput.fromUTF16("", 212, (-1886));
      machine0.match(machineInput0, 212, (-159));
      rE2_0.put(machine0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)8;
      byteArray0[2] = (byte)8;
      byte byte3 = (byte)96;
      byteArray0[3] = (byte)96;
      byte byte4 = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-95));
      // Undeclared exception!
      try { 
        RE2.quoteMeta((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      rE2_0.findSubmatch("");
      String string1 = "";
      String string2 = "match";
      rE2_0.replaceFirst("", "match");
      byte[] byteArray0 = null;
      rE2_0.replaceFirst("", "");
      int int0 = 659;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.match("", 4, (-441), (-441), (int[]) null, (-441));
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl(":suS/2Vi3", 3456, false);
      rE2_0.toString();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)6;
      rE2_0.findAllUTF8Submatch(byteArray0, 3456);
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)3;
      rE2_0.prefixComplete = false;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      int[] intArray0 = new int[7];
      intArray0[0] = 969;
      intArray0[1] = (int) (byte)117;
      intArray0[2] = 3456;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)117;
      intArray0[5] = (int) (byte)3;
      intArray0[6] = (int) (byte)0;
      // Undeclared exception!
      try { 
        rE2_0.match(":suS/2Vi3", 18, 969, (byte)0, intArray0, (byte)0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("`c\"5]yhFS Uk>", 1259, true);
      RE2 rE2_1 = RE2.compilePOSIX("");
      rE2_0.replaceAll("com.google.re2j.Simplify$1", (String) null);
      rE2_1.findAllIndex("com.google.re2j.Simplify$1", 1259);
      rE2_0.findIndex(".+*?()|[]{}^$");
      rE2_0.match(".+*?()|[]{}^$");
      rE2_0.replaceFirst("unhandled case in Inst.toString", "");
      rE2_0.findAll("", 1259);
      rE2_0.findSubmatch("`c\"5]yhFS Uk>");
      rE2_0.reset();
      rE2_0.findAllSubmatch("", 0);
      rE2_1.match("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-61);
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 343);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2.match("RXY<n", "RXY<n");
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-111);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 2245);
      assertNotNull(list0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.RE2");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-992));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 256, true);
      rE2_0.findSubmatchIndex("");
      rE2_0.find("!I6t*WYw9GBz");
      rE2_0.match("");
      RE2.match("", "");
      rE2_0.longest = true;
      RE2.match("", "");
      rE2_0.numberOfCapturingGroups();
      RE2.quoteMeta("");
      RE2 rE2_1 = RE2.compile("");
      assertEquals("", rE2_1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8(byteArray0);
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatch((String) null, (-4192));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("!d");
      rE2_0.findAllIndex("!d", (-1));
      byte[] byteArray0 = new byte[2];
      RE2.match("BEGIN_TEXT", "BEGIN_TEXT");
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      rE2_0.findAllSubmatch("!d", (-3092));
      rE2_0.findAllSubmatchIndex("IL:*z8:r1}I\"g Zme", (-1434));
      Machine machine0 = rE2_0.get();
      rE2_0.findAllUTF8(byteArray0, (-341));
      Machine machine1 = rE2_0.get();
      assertFalse(machine1.equals((Object)machine0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("v");
      String[] stringArray0 = rE2_0.findSubmatch("v");
      assertNotNull(stringArray0);
      
      rE2_0.reset();
      String string0 = RE2.quoteMeta("v");
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2("ZC-BUh");
      RE2.quoteMeta("'GoE");
      rE2_0.findAllSubmatchIndex("j", 0);
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Index((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2.quoteMeta(".+*?()|[]{}^$");
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 0);
      rE2_0.findAllUTF8(byteArray0, (byte) (-1));
      byte[] byteArray1 = new byte[0];
      rE2_0.findUTF8Submatch(byteArray1);
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray1, (byte) (-1));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 14, false);
      byte[] byteArray0 = new byte[3];
      List<String[]> list0 = rE2_0.findAllSubmatch("}'7r^*", 14);
      assertEquals(8, list0.size());
      
      byteArray0[0] = (byte)1;
      rE2_0.findUTF8Submatch(byteArray0);
      byteArray0[1] = (byte) (-128);
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findSubmatch("");
      List<byte[]> list1 = rE2_0.findAllUTF8(byteArray0, 649);
      assertEquals(2, list1.size());
      assertNotNull(list1);
      
      byteArray0[2] = (byte)0;
      rE2_0.get();
      rE2_0.prefixUTF8 = byteArray0;
      rE2_0.get();
      rE2_0.prefixUTF8 = byteArray0;
      String string0 = RE2.quoteMeta("nop -> ");
      assertEquals("nop -> ", string0);
      
      String string1 = rE2_0.replaceFirst("", "S0 6; 1");
      assertEquals("S0 6; 1", string1);
      
      rE2_0.findAllIndex("", 14);
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      rE2_0.findUTF8(byteArray0);
      rE2_0.match("}'7r^*", 649, 0, 427, intArray0, (byte)0);
      List<int[]> list2 = rE2_0.findAllSubmatchIndex("w 2` |SNeZQmMs", (-1450));
      assertEquals(15, list2.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findAllIndex("", 1433);
      RE2.match("", "");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.findAllUTF8Submatch(byteArray0, (-424));
      rE2_0.findAllSubmatch("", (byte) (-29));
      rE2_0.findAllSubmatchIndex("", (byte) (-29));
      RE2 rE2_1 = RE2.compilePOSIX("");
      Machine machine0 = rE2_1.get();
      rE2_1.findAllUTF8Index(byteArray0, 405);
      rE2_1.findAllUTF8(byteArray0, (byte)0);
      Machine machine1 = rE2_1.get();
      assertFalse(machine1.equals((Object)machine0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2.quoteMeta(".+*?()|[]{}^$");
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[1];
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 0);
      rE2_0.find("");
      rE2_0.get();
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      rE2_0.match(".+*?()|[]{}^$", 0, 0, 0, intArray0, (byte)0);
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("mL@{R");
      List<int[]> list0 = rE2_0.findAllIndex("mL@{R", 721);
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-127);
      rE2_0.findUTF8Submatch(byteArray0);
      List<int[]> list1 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 256);
      assertNull(list1);
      
      String string0 = rE2_0.replaceAll("mL@{R", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-757);
      RE2 rE2_0 = RE2.compileImpl("", (-757), true);
      rE2_0.findSubmatch("");
      String string0 = "zU";
      rE2_0.replaceAll("mL@{R", "zU");
      RE2 rE2_1 = RE2.compilePOSIX("zUmzULzU@zU{zURzU");
      Machine machine0 = rE2_1.get();
      int int1 = 783;
      MachineInput machineInput0 = MachineInput.fromUTF16("mL@{R");
      int int2 = 123;
      // Undeclared exception!
      try { 
        machine0.match(machineInput0, (-4266), 42774);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("(Mu`X)!N3@fg|Z*");
      rE2_0.findSubmatch("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)1;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 14);
      assertNotNull(list0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.match((CharSequence) null, (byte)0, (byte)0, 0, (int[]) null, 1297);
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("(Mu`X)!N3@fg|Z*");
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
      
      rE2_0.reset();
      List<String> list0 = rE2_0.findAll("Idcsp9AZRA\"fz9R3", (-1787));
      assertEquals(16, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = new RE2("$");
      RE2 rE2_1 = RE2.compileImpl("", 881, false);
      RE2 rE2_2 = new RE2("$");
      rE2_0.findSubmatch(".+*?()|[]{}^$");
      rE2_2.findSubmatchIndex("C240<aO[UL+*6CWMN!");
      RE2.quoteMeta(".+*?()|[]{}^$");
      rE2_2.replaceAll("C240<aO[UL+*6CWMN!", ".+*?()|[]{}^$");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)64;
      byte[][] byteArray1 = rE2_1.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("(Mu`X)!N3@fg|Z*");
      rE2_0.findAllSubmatch("(Mu`X)!N3@fg|Z*", 128);
      rE2_0.findSubmatch("");
      RE2 rE2_1 = RE2.compile("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-89);
      rE2_1.findUTF8Index(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-5);
      rE2_0.findUTF8Submatch(byteArray1);
      RE2.quoteMeta("");
      RE2 rE2_2 = RE2.compileImpl("", (-1171), false);
      assertEquals("", rE2_2.toString());
  }
}
