/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:32:44 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.InflaterSource;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-777));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/-VN3v");
      segmentedByteString0.write(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-30));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)0);
      buffer0.readUtf8();
      segmentedByteString0.rangeEquals((-123), byteString0, 31, (-123));
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((-283));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/b-2N3^");
      mockFileOutputStream0.release();
      segmentedByteString0.write(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer0.write(byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.toAsciiUppercase();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte) (-62);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      buffer0.read(realBufferedSink0.buffer, (long) (byte)2);
      HashingSink.hmacSha1(buffer0, byteString0);
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, (byte)2);
      segmentedByteString0.indexOf(byteArray0, (int) (byte) (-62));
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSink0.buffer, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(((RealBufferedSink) bufferedSink0).buffer, 2);
      segmentedByteString0.write(((RealBufferedSink) bufferedSink0).buffer);
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      int int0 = 583;
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      HashingSink.md5(buffer1);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      hashingSink0.flush();
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.getByte(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        segmentedByteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte) (-62);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "out == null");
      Buffer buffer1 = buffer0.write(byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      String string0 = segmentedByteString0.hex();
      assertEquals("0000", string0);
      
      segmentedByteString0.hashCode();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.decodeBase64("o8dEh~O<'kXx|qBv");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o8dEh~O<'kXx|qBv");
      Buffer buffer1 = buffer0.write(byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      String string0 = segmentedByteString0.hex();
      assertEquals("0000", string0);
      
      boolean boolean0 = segmentedByteString0.rangeEquals(661, byteString0, (int) (byte)2, 2179);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-62);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.read(realBufferedSink0.buffer, (long) (byte)2);
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      hashingSink0.flush();
      buffer0.write(byteString0);
      byte[] byteArray1 = segmentedByteString0.internalArray();
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-121)}, byteArray1);
      
      segmentedByteString0.startsWith(byteArray0);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.read(realBufferedSink0.buffer, (long) (byte)2);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(583);
      int int0 = ObjectStreamConstants.baseWireHandle;
      hashingSink0.flush();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, (byte)2);
      ByteString byteString1 = segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.rangeEquals((int) (byte)2, byteString1, 8257536, 0);
      bufferedSink0.writeShortLe(0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(1743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=1743 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-62);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.buffer.read(realBufferedSink0.buffer, (long) (byte)2);
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, (byte)2);
      segmentedByteString0.write(buffer0);
      HashingSink.sha256(hashingSink0);
      segmentedByteString0.asByteBuffer();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[2] = (byte) (-62);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.read(realBufferedSink0.buffer, (long) (byte)2);
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      String string0 = segmentedByteString0.hex();
      assertEquals("c987", string0);
      
      int int1 = segmentedByteString0.size();
      assertEquals(2, int1);
      
      boolean boolean0 = segmentedByteString0.rangeEquals(2, byteArray0, (int) (byte)79, (-1778));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-42);
      byteArray0[3] = (byte)95;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[4] = (byte) (-65);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.buffer.read(realBufferedSink0.buffer, (long) (byte)2);
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, (byte)2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";VSybHuH");
      segmentedByteString0.lastIndexOf(byteArray0, (int) (byte)2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.rangeEquals(743, byteArray0, (-1906), (-2151));
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeUtf8CodePoint(583);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      byteString0.rangeEquals((int) (byte)0, byteArray0, (int) (byte)2, (int) (byte)0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, (byte)2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSink.md5(buffer2);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer2, 0);
      int int1 = segmentedByteString1.hashCode();
      assertTrue(int1 == int0);
      
      int int2 = segmentedByteString0.hashCode();
      assertFalse(int2 == int0);
      
      realBufferedSink0.buffer.indexOfElement((ByteString) segmentedByteString0, (long) 583);
      segmentedByteString0.toAsciiLowercase();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      segmentedByteString0.rangeEquals((int) (byte) (-68), byteArray0, (int) (byte)2, (int) (byte) (-14));
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(((RealBufferedSink) bufferedSink0).buffer, (byte)2);
      boolean boolean0 = segmentedByteString0.equals(segmentedByteString1);
      assertTrue(boolean0);
      
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(realBufferedSink0.buffer, (byte)0);
      SegmentedByteString segmentedByteString3 = new SegmentedByteString(((RealBufferedSink) bufferedSink0).buffer, (byte)0);
      String string0 = segmentedByteString0.base64();
      assertEquals("yYc=", string0);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      hashingSink0.flush();
      int int1 = ObjectStreamConstants.baseWireHandle;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = new Buffer();
      ByteString byteString1 = segmentedByteString0.toAsciiLowercase();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString2 = segmentedByteString0.hmacSha1(byteString1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteString2.indexOf(byteArray0, (int) (byte)2);
      segmentedByteString0.equals(byteString2);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)2;
      byteArray0[3] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.read(realBufferedSink0.buffer, (long) (byte)2);
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      hashingSink0.flush();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      boolean boolean0 = realBufferedSink1.closed;
      segmentedByteString0.toAsciiLowercase();
      byte byte1 = ObjectStreamConstants.TC_STRING;
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.read(realBufferedSink0.buffer, (long) (byte)2);
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString byteString1 = segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.hmacSha1(byteString1);
      byte[] byteArray1 = segmentedByteString0.internalArray();
      boolean boolean0 = segmentedByteString0.startsWith(byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      segmentedByteString0.sha256();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer3 = realBufferedSink0.buffer;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)2;
      segmentedByteString0.startsWith(byteArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ByteString byteString1 = ByteString.EMPTY;
      byte byte0 = ObjectStreamConstants.TC_REFERENCE;
      assertEquals((byte)113, byte0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.read(realBufferedSink0.buffer, (long) (byte)2);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      hashingSink0.flush();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString byteString1 = segmentedByteString0.toAsciiLowercase();
      BufferedSink bufferedSink1 = ((RealBufferedSink) bufferedSink0).buffer.emit();
      byteString1.startsWith(byteArray0);
      HashingSink hashingSink1 = HashingSink.hmacSha256(bufferedSink1, segmentedByteString0);
      HashingSink.sha1(hashingSink1);
      HashingSink.hmacSha1(bufferedSink0, byteString0);
      HashingSink.sha512(hashingSink0);
      byte byte0 = ObjectStreamConstants.TC_LONGSTRING;
      ByteString byteString2 = ByteString.EMPTY;
      byteString2.startsWith((ByteString) segmentedByteString0);
      // Undeclared exception!
      try { 
        byteString1.getByte(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-62);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.read(realBufferedSink0.buffer, (long) (byte)2);
      realBufferedSink0.writeUtf8CodePoint(583);
      hashingSink0.flush();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte byte0 = ObjectStreamConstants.TC_REFERENCE;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, (byte)2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      segmentedByteString0.toAsciiLowercase();
      buffer2.readUtf8CodePoint();
      hashingSink0.hash();
      hashingSink0.hash();
      ByteString byteString1 = ByteString.of(byteArray0, 2, 2);
      byteString1.compareTo((ByteString) segmentedByteString0);
      segmentedByteString0.equals(byteString1);
      realBufferedSink0.writeShortLe((byte)113);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeUtf8CodePoint(583);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      hashingSink0.flush();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      Segment segment0 = new Segment();
      buffer2.head = segment0;
      segmentedByteString0.sha256();
      segmentedByteString0.getByte(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      segmentedByteString0.sha256();
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer2, (byte)2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }
}
