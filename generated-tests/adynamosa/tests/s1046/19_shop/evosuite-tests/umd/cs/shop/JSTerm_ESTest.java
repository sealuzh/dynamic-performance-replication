/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 03:44:30 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<=mW");
      SystemInUtil.addInputLine("(<=mW");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(KisW");
      StringReader stringReader1 = new StringReader("(KisW");
      SystemInUtil.addInputLine("(KisW");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("(KisW");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      SystemInUtil.addInputLine("1qv");
      jSTerm0.add((Object) "1qv");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-3), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars((-1), (-1085530613));
      JSJshopVars.leftBrac = (-3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm0.print();
      JSJshopVars.slash = (-3);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("1qv");
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSSubstitution1.clear();
      jSTerm0.toStr();
      jSTerm3.equals(jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm5);
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm1.call();
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SystemInUtil.addInputLine("[jzZ<7+0Rxm");
      StringReader stringReader0 = new StringReader("YymF.AmLd(>.YlX0d>3");
      stringReader0.markSupported();
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.parseNumbers();
      SystemInUtil.addInputLine(".");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.add((Object) ".");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "[jzZ<7+0Rxm");
      int int0 = (-4088);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<imW");
      SystemInUtil.addInputLine("(<imW");
      SystemInUtil.addInputLine("(<imW");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity((-4));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.clone();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isGround();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.isConstant();
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<imW");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(*4/");
      StringReader stringReader1 = new StringReader("Line ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ym.AmHL(>5YlXhdt3");
      SystemInUtil.addInputLine("ym.AmHL(>5YlXhdt3");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("ym.AmHL");
      SystemInUtil.addInputLine("ym.AmHL");
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.lowerCaseMode(true);
      JSJshopVars.plus = (-3);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.rightPar = (-3);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = (JSTerm)jSTerm2.clone();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.isFunction();
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm0.matches(jSTerm4);
      jSTerm3.ensureCapacity(2);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SystemInUtil.addInputLine("xT};mP>h#vDJ4:ta#");
      StringReader stringReader0 = new StringReader("15.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChar(32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isEval();
      StringReader stringReader1 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isEval();
      jSTerm1.equals(jSTerm2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      jSTerm2.equals(jSTerm0);
      jSTerm0.add((Object) "");
      jSTerm1.isGround();
      streamTokenizer3.whitespaceChars((-4), 32);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm4);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.call();
      jSTerm3.makeFunction();
      jSTerm1.call();
      jSTerm1.addAll((Collection) jSTerm5);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(-t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(33);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSTerm1.remove((Object) "(c");
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.isEval();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      jSTerm0.equals(jSTerm1);
      jSTerm1.add((Object) "7(-t");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      streamTokenizer3.whitespaceChars((-4), (-4));
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.matches(jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.call();
      JSJshopVars.lessT = (-4);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yym.AmL(>YlXhdt3");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      jSTerm0.size();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?<u*O#%U6 ");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(43);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      boolean boolean0 = false;
      streamTokenizer1.slashStarComments(false);
      Object object0 = new Object();
      stringReader0.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("YymF.AmLd(>.YlX0d>3");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.nval = (double) 59;
      jSSubstitution0.iterator();
      streamTokenizer0.parseNumbers();
      jSTerm1.remove((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("15w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.lastElement();
      unaryOperator0.apply("15.0");
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.isFunction();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.isEmpty();
      JSJshopVars.slash = (-2);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar((-2));
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.toStr();
      jSTerm1.add((Object) streamTokenizer0);
      assertEquals("[15.0, Token[n=15.0], line 1]", jSTerm1.toString());
      
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars((-1939), (-1939));
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.matches(jSTerm3, jSSubstitution1);
      jSTerm2.call();
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)oR@SZFW]5L>s;");
      StringReader stringReader1 = new StringReader(">=");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.trimToSize();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm2.parseList(streamTokenizer1);
      Object object0 = new Object();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer1);
      jSTerm5.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.trimToSize();
      jSTerm1.equals(jSTerm2);
      streamTokenizer0.commentChar((-2));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSJshopVars.percent = (-2);
      JSJshopVars.VarCounter = 2;
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm3.equals(jSTerm4);
      streamTokenizer0.slashSlashComments(true);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.isEmpty();
      JSTerm jSTerm7 = new JSTerm();
      jSTerm3.equals(jSTerm4);
      jSTerm3.toStr();
      jSTerm1.matches(jSTerm5);
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(v #97i:>_?{N$dQ");
      stringReader0.mark(47);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      int int0 = (-1431);
      stringReader0.skip(317L);
      streamTokenizer0.ordinaryChar((-1431));
      System.setCurrentTimeMillis((-1431));
      stringReader0.reset();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.toStr();
      jSTerm2.trimToSize();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm2);
      jSTerm0.isEval();
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar((-25));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.standardizerTerm();
      jSTerm0.print();
      jSTerm1.makeEval(false);
      jSTerm2.cloneT();
      jSTerm0.call();
      System.setCurrentTimeMillis((-2));
      // Undeclared exception!
      try { 
        jSTerm1.listIterator(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm2);
      jSTerm0.containsAll(jSTerm1);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar((-25));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.standardizerTerm();
      JSJshopVars.flagLevel = 2;
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.toStr();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.add((Object) jSTerm3);
      jSTerm1.equals((JSPredicateForm) jSTerm2);
      jSTerm2.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm2);
      jSTerm0.containsAll(jSTerm1);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      JSJshopVars.flagLevel = 2;
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm4.matches(jSTerm2, jSSubstitution1);
      System.setCurrentTimeMillis(888L);
      jSTerm4.toStr();
      jSTerm2.standardizerTerm();
      assertEquals("[1.0, [1.0]]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("15w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.isFunction();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      JSJshopVars.slash = (-2);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.toStr();
      jSTerm1.add((Object) streamTokenizer0);
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1, jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.equals(jSTerm2);
      jSTerm0.containsAll(jSTerm1);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      JSJshopVars.flagLevel = 2;
      jSTerm4.applySubstitutionT(jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm3.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm2);
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.standardizerTerm();
      JSJshopVars.flagLevel = 2;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.isFunction();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.add((Object) streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(6, stringBuffer0.length());
      
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      boolean boolean0 = jSTerm2.isFunction();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm2.matches(jSTerm1);
      assertTrue(jSSubstitution6.fail());
      
      jSTerm3.makeVariable();
      jSTerm1.print();
      jSTerm1.makeEval(false);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      JSTerm jSTerm5 = jSTerm3.call();
      assertFalse(jSTerm5.isFunction());
      
      boolean boolean1 = jSTerm2.isGround();
      assertTrue(boolean1 == boolean0);
      
      jSTerm4.isGround();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      jSTerm6.call();
      jSTerm4.cloneT();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("(1.0 )", stringBuffer0.toString());
      
      streamTokenizer0.whitespaceChars(93, 2);
      JSTerm jSTerm3 = (JSTerm)jSTerm2.clone();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      boolean boolean0 = jSTerm3.isFunction();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean1 = jSTerm2.isGround();
      assertTrue(boolean1 == boolean0);
      
      jSTerm0.print();
      jSTerm1.isGround();
      System.setCurrentTimeMillis(0L);
      jSTerm4.isGround();
      System.setCurrentTimeMillis(1932L);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm2.print();
      assertEquals("[1.0]", jSTerm1.toString());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%O%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Eh\"-lW");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.ordinaryChar(41);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.mark(96);
      jSSubstitution0.sort((Comparator) null);
      jSSubstitution0.parallelStream();
      jSTerm0.lastElement();
      jSSubstitution0.add((Object) "1.0");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm0);
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm2.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm1.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      assertTrue(jSTerm2.isConstant());
      
      jSTerm0.matches(jSTerm1);
      jSTerm0.makeVariable();
      jSTerm1.isEval();
      jSTerm2.makeFunction();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm1.print();
      streamTokenizer0.commentChar(1360);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.standardizerTerm();
      JSTerm jSTerm4 = jSTerm0.call();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm0);
      jSTerm3.makeVariable();
      jSTerm4.print();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.matches(jSTerm3);
      jSTerm4.cloneT();
      JSTerm jSTerm6 = jSTerm4.cloneT();
      assertTrue(jSTerm6.equals((Object)jSTerm3));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 0;
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stringReader0.mark(0);
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      streamTokenizer0.wordChars(0, 0);
      jSSubstitution0.add((Object) stringReader0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.add((Object) jSSubstitution1);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSEvaluate.numericValue(jSTerm0);
      streamTokenizer0.wordChars(0, 0);
      jSTerm0.matches(jSTerm0);
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isEval();
      assertTrue(jSTerm0.isFunction());
      
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.standardizerTerm();
      jSTerm0.toStr();
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm3.matches(jSTerm2, jSSubstitution2);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.isGround();
      jSTerm1.isVariable();
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm7 = jSTerm6.applySubstitutionT(jSSubstitution2);
      jSTerm7.cloneT();
      jSTerm4.call();
      assertNotSame(jSTerm0, jSTerm4);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(63);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "1w");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSEvaluate.numericValue(jSTerm0);
      streamTokenizer0.wordChars(63, 63);
      jSTerm0.matches(jSTerm0);
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      jSTerm0.call();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isEval();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.toStr();
      jSTerm0.makeEval(true);
      jSTerm0.equals(jSTerm1);
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StringReader stringReader1 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(46);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      jSSubstitution0.iterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm1);
      jSTerm0.makeEval(true);
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm3.isGround();
      jSTerm1.isEval();
      jSTerm2.equals(jSTerm0);
      jSTerm1.isEval();
      jSTerm3.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm0.standardizerTerm();
      jSTerm2.toStr();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.matches((JSTerm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StringReader stringReader1 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(46);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      jSSubstitution0.iterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm1);
      jSTerm0.makeEval(true);
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm3.isGround();
      jSTerm1.isEval();
      jSTerm0.isGround();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      jSTerm3.removeIf(predicate3);
      jSTerm3.makeFunction();
      jSTerm3.isGround();
      jSTerm2.equals(jSTerm0);
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jSTerm2.equals(jSTerm3);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(40);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      jSSubstitution0.parallelStream();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      streamTokenizer0.wordChars(0, 40);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm0);
      jSTerm0.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.makeVariable();
      jSTerm1.isGround();
      jSTerm0.equals(jSTerm2);
      jSTerm2.isEval();
      jSTerm2.makeVariable();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.standardizerTerm();
      jSTerm0.toStr();
      jSTerm2.isGround();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.equals(jSTerm3);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(2147483645);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm0);
      jSTerm2.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm1.makeVariable();
      jSTerm2.isGround();
      jSTerm2.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.call();
      jSTerm0.makeVariable();
      jSTerm1.makeEval(false);
      JSTerm jSTerm4 = jSTerm2.call();
      jSTerm4.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.isVariable();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.stream();
      jSSubstitution0.parallelStream();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer0.wordChars((-3), 36);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm1.matches(jSTerm0);
      jSTerm0.isEval();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.makeVariable();
      jSTerm1.isGround();
      jSTerm0.equals(jSTerm2);
      jSTerm1.isEval();
      jSTerm0.print();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      boolean boolean0 = jSTerm0.isGround();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm1.isEval();
      assertFalse(jSTerm1.isConstant());
      
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean1 = jSTerm0.isEval();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer0.wordChars(0, 36);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm1.matches(jSTerm0);
      jSTerm0.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.makeVariable();
      jSTerm1.isGround();
      jSTerm0.equals(jSTerm2);
      jSTerm1.isEval();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.toStr();
      jSTerm0.isGround();
      jSTerm1.matches(jSTerm3, jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.equals(jSTerm4);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      streamTokenizer0.wordChars(0, 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm0);
      jSTerm0.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.makeVariable();
      jSTerm2.isGround();
      jSTerm1.print();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isGround();
      jSTerm2.toStr();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSTerm2.isEval();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer0.wordChars(0, 54);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm0.isGround();
      jSTerm2.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.call();
      jSTerm1.makeVariable();
      jSTerm0.makeEval(true);
      jSTerm1.call();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isVariable();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.setSize(154);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      streamTokenizer0.wordChars(0, 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.flagLevel = 62;
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.isGround();
      assertTrue(jSTerm1.isFunction());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm2.makeEval(true);
      JSTerm jSTerm4 = new JSTerm();
      System.setCurrentTimeMillis(684L);
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.isGround();
      jSTerm3.isVariable();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm5));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      streamTokenizer0.wordChars(0, 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      jSTerm1.call();
      jSTerm1.makeVariable();
      jSTerm1.isGround();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.setSize(154);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSJshopVars.whiteSpace = 4000;
      streamTokenizer0.wordChars(0, 36);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.flagLevel = (-3);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      assertTrue(jSTerm2.isConstant());
      
      jSTerm0.makeVariable();
      jSTerm1.makeEval(true);
      JSTerm jSTerm3 = jSTerm1.call();
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean0 = jSTerm2.isGround();
      boolean boolean1 = jSTerm3.isVariable();
      assertFalse(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution3);
      assertTrue(jSTerm5.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm5.isFunction());
      assertNotSame(jSTerm1, jSTerm5);
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.isFunction();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      jSTerm0.print();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.add((Object) jSTerm4);
      System.setCurrentTimeMillis(0L);
      streamTokenizer0.ttype = 93;
      jSTerm3.isGround();
      System.setCurrentTimeMillis(1932L);
      jSTerm0.call();
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StringReader stringReader1 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(46);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      boolean boolean0 = jSTerm0.isVariable();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      jSTerm0.isEval();
      assertTrue(jSTerm0.isFunction());
      
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean1 = jSTerm2.isEval();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      streamTokenizer0.wordChars(0, 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      assertFalse(jSTerm1.isVariable());
      
      jSTerm1.makeVariable();
      jSTerm1.isGround();
      jSTerm2.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.call();
      jSTerm1.makeVariable();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm3.standardizerTerm();
      jSTerm3.toStr();
      assertEquals(10, jSTerm2.capacity());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      streamTokenizer0.wordChars(0, 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.makeVariable();
      jSTerm1.isGround();
      jSTerm2.print();
      jSTerm0.makeFunction();
      jSTerm1.matches(jSTerm2);
      jSTerm1.isGround();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm0.isEval();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.equals(jSTerm3);
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      streamTokenizer0.wordChars(0, 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.makeVariable();
      jSTerm1.isGround();
      jSTerm2.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm2.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(2062);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.wordChars(42, 42);
      jSSubstitution0.add((Object) "1w");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm1.makeVariable();
      jSTerm3.makeEval(true);
      JSTerm jSTerm4 = jSTerm3.call();
      boolean boolean0 = jSTerm4.isGround();
      assertTrue(jSTerm3.isEval());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(2147483645);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm1.equals(jSTerm3);
      jSTerm0.isVariable();
      jSTerm3.makeEval(false);
      jSTerm1.matches(jSTerm3);
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9=}ft|o|xO3BW|\"kK9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      assertFalse(jSTerm0.isConstant());
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSTerm) null);
      assertFalse(jSSubstitution0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.retainAll(jSTerm1);
      stringReader0.read();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("1.0 ", stringBuffer0.toString());
      
      streamTokenizer0.ordinaryChar((-1));
      jSTerm2.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.isVariable();
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm3, jSTerm1);
      assertFalse(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(2062);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.wordChars(42, 42);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm0.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.makeVariable();
      jSTerm2.isGround();
      jSTerm1.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm3.makeVariable();
      jSTerm3.makeEval(true);
      JSTerm jSTerm4 = jSTerm3.call();
      jSTerm3.isGround();
      jSTerm4.isVariable();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm4));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isVariable();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      streamTokenizer0.whitespaceChars(93, 2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isFunction();
      jSTerm2.standarizerPredicateForm();
      jSTerm2.containsAll(jSSubstitution1);
      streamTokenizer0.commentChar(1645);
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.add((Object) jSTerm3);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-1182));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars(1170, 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSSubstitution1.print();
      streamTokenizer1.quoteChar((-2154));
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      jSTerm2.call();
      jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm3);
      jSTerm0.isVariable();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(2147483645);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm2.equals(jSTerm0);
      jSTerm0.isVariable();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm3);
      assertFalse(jSTerm0.isConstant());
      
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      jSTerm0.print();
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      streamTokenizer0.wordChars(0, 36);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.flagLevel = (-3);
      jSTerm1.matches(jSTerm0);
      jSTerm0.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.makeVariable();
      jSTerm1.isGround();
      jSTerm2.print();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm0.makeEval(false);
      jSTerm3.call();
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9=}ft|o|xO3BW|\"kK9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9=}ft|o|xO3BW|\"kK9");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(2062);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(0, 36);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals(1, jSTerm1.size());
      
      jSSubstitution0.print();
      streamTokenizer0.quoteChar(0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.equals(jSTerm1);
      boolean boolean0 = jSTerm1.isVariable();
      assertFalse(boolean0);
      
      jSTerm4.makeEval(false);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution3.fail());
      assertNotSame(jSTerm1, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(6, stringBuffer0.length());
      
      streamTokenizer0.whitespaceChars(93, 2);
      JSTerm jSTerm3 = (JSTerm)jSTerm2.clone();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.isFunction();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      streamTokenizer0.commentChar(60);
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.isGround();
      assertFalse(jSTerm2.isEval());
      
      jSTerm0.print();
      jSTerm1.isGround();
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jSTerm4.isGround();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(1932L);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer1 = jSTerm5.toStr();
      assertEquals("%%% ", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(2062);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(0, 36);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm0);
      jSTerm0.isEval();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.makeVariable();
      jSTerm1.isGround();
      jSTerm0.equals(jSTerm2);
      jSTerm1.isEval();
      jSTerm1.cloneT();
      jSTerm2.isGround();
      jSTerm0.makeVariable();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElement(stringReader0);
      jSSubstitution0.cloneS();
      jSTerm1.clone();
      jSSubstitution0.add((Object) jSTerm1);
      assertEquals("[[%%%]]", jSSubstitution0.toString());
      
      stringReader0.ready();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.print();
      jSTerm2.toStr();
      jSTerm0.isVariable();
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'O';
      charArray0[2] = 'F';
      charArray0[3] = '0';
      charArray0[4] = 'Y';
      stringReader0.read(charArray0);
      jSTerm0.cloneT();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Gg&tc)W*");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.ttype = (-571);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("Ggtc ", stringBuffer0.toString());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("6IgYT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String string0 = "YymF.AmLd(>.YlX0d>3";
      StringReader stringReader0 = new StringReader("YymF.AmLd(>.YlX0d>3");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = (double) 0L;
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "(v g~Qi<Z>_?{$dFQ";
      StringReader stringReader0 = new StringReader("(v g~Qi<Z>_?{$dFQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "(v g~Qi<Z>_?{$dFQ";
      StringReader stringReader0 = new StringReader("(v g~Qi<Z>_?{$dFQ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = 0;
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.ensureCapacity(727);
      jSTerm1.equals(jSTerm0);
      JSJshopVars.greaterT = (-2946);
      jSTerm0.equals(jSTerm1);
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader("4wU$Yt<{mwr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(0L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = (-1366);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.percent = 0;
      JSJshopVars.backquote = 0;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSTerm0.retainAll(jSPredicateForm0);
      JSJshopVars.rightPar = 0;
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = (-1366);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-1265);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-3);
      JSJshopVars.verticalL = (-3);
      JSJshopVars.coma = 0;
      JSJshopVars.whiteSpace = (-3);
      jSTerm0.clone();
      jSTerm0.makeConstant();
      jSTerm0.isGround();
      jSTerm0.isConstant();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = 0;
      jSTerm0.isFunction();
      jSTerm0.makeConstant();
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|)kdxI");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9=}ft|o|xO3BW|\"kK9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(false);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.parallelStream();
      jSPredicateForm0.add((Object) "9=}ft|o|xO3BW|\"kK9");
      jSTerm0.retainAll(jSPredicateForm0);
      stringReader0.read();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int0 = (-1232);
      jSSubstitution0.print();
      streamTokenizer0.quoteChar((-1232));
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(8h\"-lW");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6bDklbHP-!#q3Qy?f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      JSJshopVars.colon = 37;
      jSTerm0.toArray(objectArray0);
      jSTerm0.clear();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.clear();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.clear();
      StringReader stringReader0 = new StringReader("kdf0J[_Vq{wq");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSEvaluate.numericValue(jSTerm2);
      jSTerm0.parallelStream();
      JSJshopVars.apostrophe = 2;
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(false);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.parallelStream();
      jSTerm0.add((Object) streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.retainAll(jSTerm1);
      stringReader0.read();
      jSTerm0.isFunction();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      streamTokenizer0.quoteChar(61);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.call();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.verticalL = (-3);
      int int0 = 0;
      JSJshopVars.coma = 0;
      JSJshopVars.whiteSpace = (-3);
      jSTerm0.clone();
      jSTerm0.makeConstant();
      jSTerm0.isGround();
      jSTerm0.isConstant();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.rightBrac = 1572;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChar(0);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.isVariable();
      jSTerm1.makeEval(true);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      assertTrue(jSTerm1.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-650), (-650));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar((-1264));
      streamTokenizer0.ttype = (-3);
      JSJshopVars.flagLevel = (-3);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9=}ft|o|xO3BW|\"kK9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(false);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.parallelStream();
      jSPredicateForm0.add((Object) "9=}ft|o|xO3BW|\"kK9");
      streamTokenizer0.ordinaryChar(0);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(false);
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.parallelStream();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.equals(jSPredicateForm0);
      streamTokenizer0.wordChars(0, 36);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm0);
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.makeVariable();
      jSTerm2.isGround();
      jSTerm1.equals(jSTerm2);
      jSTerm2.isEval();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSJshopVars.percent = (-2128);
      jSTerm3.sort(comparator1);
      jSTerm1.isGround();
      jSTerm3.makeVariable();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9=}ft|o|xO3BW|\"kK9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(false);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.parallelStream();
      jSPredicateForm0.add((Object) "9=}ft|o|xO3BW|\"kK9");
      jSTerm0.retainAll(jSPredicateForm0);
      stringReader0.read();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm1.isConstant();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.isFunction();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar(2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.add((Object) streamTokenizer0);
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = null;
      StringReader stringReader0 = new StringReader("JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.standarizerPredicateForm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.removeElementAt(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.ensureCapacity(727);
      jSTerm1.equals(jSTerm0);
      JSJshopVars.greaterT = (-2946);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O\"4Bu!;LU_!.V/B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isConstant();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }
}
