/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:42:24 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.ParseException;
import com.pmdesigns.jvc.tools.Token;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[23];
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser("", linkedHashSet0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.getToken(100);
      jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n8D(,[PEC#gW;0|zo~");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.enable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0);
      jVCParser0.ReInit((InputStream) sequenceInputStream0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      jVCParser0.ReInit((Reader) pipedReader0);
      assertEquals(100, jVCParser0.debugColumn);
      
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      JVCParser jVCParser1 = new JVCParser(jVCParser0.token_source);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(100, jVCParser1.debugColumn);
      assertFalse(jVCParser1.equals((Object)jVCParser0));
      assertNotNull(jVCParser1);
      
      String string0 = jVCParser1.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(100, jVCParser1.debugColumn);
      assertFalse(jVCParser0.equals((Object)jVCParser1));
      assertFalse(jVCParser1.equals((Object)jVCParser0));
      assertNotSame(jVCParser0, jVCParser1);
      assertNotSame(jVCParser1, jVCParser0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Token token0 = jVCParser1.getNextToken();
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(100, jVCParser1.debugColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertFalse(jVCParser0.equals((Object)jVCParser1));
      assertFalse(jVCParser1.equals((Object)jVCParser0));
      assertNotSame(jVCParser0, jVCParser1);
      assertNotSame(jVCParser1, jVCParser0);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      jVCParser0.ReInit(jVCParser1.token_source);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(100, jVCParser1.debugColumn);
      assertFalse(jVCParser0.equals((Object)jVCParser1));
      assertFalse(jVCParser1.equals((Object)jVCParser0));
      assertNotSame(jVCParser0, jVCParser1);
      assertNotSame(jVCParser1, jVCParser0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yB:U2p");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      Token token0 = jVCParser0.getToken(100);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(6, token0.endColumn);
      assertEquals(6, token0.beginColumn);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      Token token1 = jVCParser0.getToken(1);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("y", token1.toString());
      
      ParseException parseException0 = jVCParser0.generateParseException();
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(parseException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p{\n");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      String string0 = jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(string0);
      assertEquals("_sb.append(\"p{\\n\");\n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yB:U2p";
      stringArray0[1] = "-debug";
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\");");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      String string0 = jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(string0);
      assertEquals("_sb.append(\"\\\");\");", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      Token token0 = jVCParser0.getToken(2470);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      Token token1 = jVCParser0.getNextToken();
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Al'");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      String string0 = jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(string0);
      assertEquals("_sb.append(\"Al'\");", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[==\"");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[=\"");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[==");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p[[!z<\"");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[\"");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }
}
