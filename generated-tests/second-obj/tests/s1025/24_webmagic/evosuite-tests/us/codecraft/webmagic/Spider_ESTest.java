/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:16:10 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterInputStream;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("S\f");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("S\f", "S\f");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" stop success!");
      spider1.setScheduler(fileCacheQueueScheduler0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_CallerRunsPolicy0);
      spider0.executorService = (ExecutorService) scheduledThreadPoolExecutor0;
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download("S\f", "S\f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.pipeline((Pipeline) null);
      Spider spider2 = spider1.setUUID("page status code error, page {} , code: {}");
      Spider spider3 = spider2.addPipeline((Pipeline) null);
      Spider spider4 = spider3.setExecutorService((ExecutorService) null);
      Spider spider5 = spider4.setPipelines((List<Pipeline>) null);
      spider5.checkIfRunning();
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$Status";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.addPipeline(consolePipeline0);
      // Undeclared exception!
      try { 
        spider1.thread((-554));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("G@(<Rl5tQpVCb@!L");
      Spider spider0 = new Spider(simplePageProcessor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1297);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 229);
      Spider spider2 = spider1.clearPipeline();
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertNull(list0);
      
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      Spider spider4 = spider3.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider5 = spider4.setUUID("G@(<Rl5tQpVCb@!L");
      spider5.getStatus();
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~/8");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request(";;2>ew%i\"T~U\"F9");
      Request request1 = request0.addHeader(", headers=", ", headers=");
      Request request2 = request1.setCharset("us.codecraft.webmagic.monitor.SpiderMonitor");
      Request request3 = request2.setPriority(1013L);
      Request request4 = request3.addCookie("~/8", "_cycle_tried_times");
      requestArray0[0] = request4;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Cg[M4g<E-y");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setScheduler(duplicateRemovedScheduler0);
      spider0.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider2.get("Cg[M4g<E-y");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "G|q>";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("G|q>");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        priorityBlockingQueue0.addAll((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1324, threadFactory0, threadPoolExecutor_AbortPolicy0);
      spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1324);
      Spider spider2 = spider1.thread(1324);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Cg[M4g<E-y");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider2.setScheduler(duplicateRemovedScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("G@(<Rl5tQpVCb@!L");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("G@(<Rl5tQpVCb@!L");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.setScheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.scheduler.PriorityScheduler";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.PriorityScheduler");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) null, (-2511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&/#pbma,~|lK");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init cache scheduler success");
      spider0.scheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1324, threadFactory0, threadPoolExecutor_AbortPolicy0);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1324);
      ThreadGroup threadGroup0 = new ThreadGroup("/ ");
      spider0.addPipeline((Pipeline) null);
      spider0.clearPipeline();
      spider2.sleep(1324);
      Spider.Status.fromValue(1324);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("SqOcNxFwVV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.SqOcNxFwVV
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1324, threadFactory0, threadPoolExecutor_AbortPolicy0);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1324);
      Spider spider3 = spider2.startRequest((List<Request>) null);
      scheduledThreadPoolExecutor0.getPoolSize();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Cg[M4g<E-y");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      spider4.getScheduler();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "cBEI$";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cBEI$");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cBEI$";
      stringArray0[1] = ", statusCode=";
      stringArray0[2] = "cBEI$";
      stringArray0[3] = "cBEI$";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadFactory0, threadPoolExecutor_AbortPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 3);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.pipeline(jsonFilePipeline0);
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider3.setPipelines(linkedList0);
      Spider spider5 = spider4.startRequest((List<Request>) null);
      assertTrue(spider5.isSpawnUrl());
      
      Page page0 = new Page();
      spider5.setSpawnUrl(false);
      assertFalse(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "2u0S";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2u0S");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request((String) null);
      Page page0 = new Page();
      page0.getResultItems();
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      request1.addHeader("_cycle_tried_times", "Q");
      requestArray0[0] = request1;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      requestArray0[1] = request0;
      String string1 = null;
      requestArray0[2] = request1;
      spider2.addRequest(requestArray0);
      spider0.getUUID();
      String[] stringArray0 = new String[2];
      String string2 = "5";
      // Undeclared exception!
      try { 
        priorityScheduler0.pushWhenNoDuplicate((Request) null, spider2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.PriorityScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1324, threadFactory0, threadPoolExecutor_AbortPolicy0);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1324);
      Page page0 = Page.fail();
      Page page1 = page0.setRawText(" stop fail!");
      List<Request> list0 = page1.getTargetRequests();
      spider1.startRequest(list0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("tX21");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider2.setScheduler(duplicateRemovedScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        spider2.get(" stop fail!");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      int int0 = 1324;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1324, threadFactory0, threadPoolExecutor_AbortPolicy0);
      spider1.setUUID("/ ");
      ThreadGroup threadGroup0 = new ThreadGroup("/ ");
      String string0 = "$";
      MockThread mockThread0 = new MockThread(threadGroup0, "$");
      mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2717, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
      spider1.setExecutorService((ExecutorService) null);
      spider1.stop();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor1.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1324, threadFactory0, threadPoolExecutor_AbortPolicy0);
      spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1324);
      ThreadGroup threadGroup0 = new ThreadGroup("/ ");
      String string0 = "$";
      MockThread mockThread0 = new MockThread(threadGroup0, "$");
      mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2717, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      spider1.stop();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Page.fail();
      spider2.isSpawnUrl();
      spider1.getSite();
      Spider.Status.fromValue(1324);
      spider1.addPipeline((Pipeline) null);
      Spider spider3 = new Spider(simplePageProcessor1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cBEI");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.getSpiderListeners();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("/ ");
      Spider spider1 = Spider.create(simplePageProcessor0);
      Locale locale0 = Locale.CANADA_FRENCH;
      spider1.thread(1324);
      MockThread.getDefaultUncaughtExceptionHandler();
      Page page0 = new Page();
      page0.setRawText("/ ");
      spider0.extractAndAddRequests(page0, false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      int int0 = 1324;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1324, threadFactory0, threadPoolExecutor_AbortPolicy0);
      spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1324);
      ThreadGroup threadGroup0 = new ThreadGroup("/ ");
      threadGroup0.setMaxPriority((-938));
      String string0 = "$";
      MockThread mockThread0 = new MockThread(threadGroup0, "$");
      mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2717, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      spider1.stop();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      spider0.runAsync();
      spider2.getThreadAlive();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor1.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1324, threadFactory0, threadPoolExecutor_AbortPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1324);
      ThreadGroup threadGroup0 = new ThreadGroup("/ ");
      threadGroup0.setMaxPriority((-938));
      MockThread mockThread0 = new MockThread(threadGroup0, "$");
      mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2717, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
      Spider spider2 = spider0.setExecutorService(forkJoinPool0);
      spider0.stop();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      spider2.getThreadAlive();
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      spider1.startRequest((List<Request>) null);
      Spider.Status.fromValue(1324);
      FilePipeline filePipeline0 = new FilePipeline("$");
      Spider spider3 = spider1.addPipeline(filePipeline0);
      spider3.getStartTime();
      spider1.isExitWhenComplete();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HTtD:k}aEptfshT");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("HTtD:k}aEptfshT");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("");
      Request request0 = new Request("J>]t|nbfkbV^|,~");
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      Request request2 = request1.setCharset("url:\t");
      boolean boolean0 = true;
      Request request3 = request2.setBinaryContent(true);
      request3.addCookie("_cycle_tried_times", ";JT");
      fileCacheQueueScheduler0.getDuplicateRemover();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.downloader((Downloader) null);
      spider1.stop();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      spider1.getThreadAlive();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }
}
