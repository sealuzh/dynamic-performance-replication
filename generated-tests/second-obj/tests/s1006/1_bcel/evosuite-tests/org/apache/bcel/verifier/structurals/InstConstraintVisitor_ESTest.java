/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:15:31 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.lang.reflect.Array;
import java.util.Iterator;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.ReturnInstruction;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.StackConsumer;
import org.apache.bcel.generic.StackInstruction;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FLOAD fLOAD0 = new FLOAD(3505);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals(4, fLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(lXOR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(2.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      assertEquals("fconst_2", fCONST0.getName());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ICONST iCONST0 = new ICONST(2);
      instConstraintVisitor0.visitICONST(iCONST0);
      assertEquals(1, iCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      D2F d2F0 = new D2F();
      D2L d2L0 = new D2L();
      JSR jSR0 = new JSR((InstructionHandle) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR(jSR0);
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM((IREM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(187, 187);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackConsumer((StackConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setConstantPoolGen((ConstantPoolGen) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      I2S i2S0 = new I2S();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE(0);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDCONST((DCONST) null);
      FSTORE fSTORE0 = new FSTORE(391);
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Frame frame0 = new Frame(876, 876);
      frame0.getClone();
      instConstraintVisitor0.visitLCONST((LCONST) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(2);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals(1, iLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-75));
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals("bipush", bIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LXOR lXOR0 = new LXOR();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      LXOR lXOR1 = new LXOR();
      LALOAD lALOAD0 = new LALOAD();
      ClassLoaderRepository classLoaderRepository1 = new ClassLoaderRepository(classLoader0);
      LDC_W lDC_W0 = new LDC_W(876);
      LDC_W lDC_W1 = new LDC_W(876);
      InstructionList instructionList0 = new InstructionList(lDC_W0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      instructionHandle0.removeAllTargeters();
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO_W(gOTO_W0);
      ILOAD iLOAD0 = new ILOAD(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(iLOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LLOAD lLOAD0 = new LLOAD(1849);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals((short)22, lLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2230);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2230, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      AASTORE aASTORE0 = new AASTORE();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      IALOAD iALOAD0 = new IALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIALOAD(iALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IALOAD constraint violated: The 'index' is not of type int but of type .
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(2204, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = frame0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      ObjectType.getInstance(string0);
      DDIV dDIV0 = new DDIV();
      frame1.getClone();
      Frame frame2 = new Frame(2204, 2204);
      frame2.getClone();
      DDIV dDIV1 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ALOAD aLOAD0 = new ALOAD(190);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals(190, aLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(904);
      ObjectType objectType0 = new ObjectType("k$ KM5K3j");
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      frame0.getClone();
      DCMPL dCMPL0 = new DCMPL();
      ARETURN aRETURN0 = new ARETURN();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.toString(false);
      InstructionList instructionList1 = new InstructionList(aRETURN0);
      I2B i2B0 = new I2B();
      GETSTATIC gETSTATIC0 = new GETSTATIC(815);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type 'k$ KM5K3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("n");
      int int0 = 161;
      OperandStack operandStack0 = new OperandStack(161, objectType0);
      OperandStack operandStack1 = new OperandStack(222, objectType0);
      LocalVariables localVariables0 = new LocalVariables(222);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'n'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 2217;
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      DDIV dDIV0 = new DDIV();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      LocalVariables localVariables0 = new LocalVariables(187);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DDIV dDIV0 = new DDIV();
      MockPrintStream mockPrintStream0 = new MockPrintStream("!Bd");
      mockPrintStream0.print(187);
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      FSTORE fSTORE0 = new FSTORE(835);
      OperandStack operandStack1 = new OperandStack(2217, objectType0);
      LocalVariables localVariables0 = new LocalVariables(94);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      DDIV dDIV0 = new DDIV();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class k$ ~KM5KJ3j: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: k$ ~KM5KJ3j.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame frame1 = frame0.getClone();
      frame0.toString();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      DDIV dDIV0 = new DDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("k$ ~KM5KJ3j");
      FASTORE fASTORE0 = new FASTORE();
      fASTORE0.consumeStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(904);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("k$ KW53j");
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.getClone();
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      operandStack1.pop();
      OperandStack operandStack2 = new OperandStack(904, objectType0);
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      frame1.clone();
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'k$ KW53j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(858);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      frame0.toString();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      DDIV dDIV0 = new DDIV();
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(256, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      D2L d2L0 = new D2L();
      d2L0.getType(constantPoolGen1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      ObjectType objectType0 = new ObjectType("X]2");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      String string0 = File.pathSeparator;
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      I2D i2D0 = (I2D)InstructionConstants.I2D;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 3266L);
      F2I f2I0 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type 'X]2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(129, objectType0);
      LocalVariables localVariables0 = new LocalVariables(129);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(129);
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Cannot consume 2 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 129.
         //  (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("n");
      OperandStack operandStack0 = new OperandStack(161, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5489);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type 'n'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3);
      ObjectType.getInstance("r;lu1q5>ji@=+gyr%Z");
      ObjectType objectType0 = new ObjectType("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(89, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FRETURN fRETURN0 = new FRETURN();
      frame0.equals(fRETURN0);
      instConstraintVisitor0.setFrame(frame0);
      DDIV dDIV0 = new DDIV();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      POP pOP0 = new POP();
      ISHR iSHR0 = new ISHR();
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      I2L i2L0 = new I2L();
      F2I f2I0 = new F2I();
      F2I f2I1 = new F2I();
      LADD lADD0 = new LADD();
      assertEquals(1, lADD0.getLength());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(904);
      ObjectType objectType0 = new ObjectType("k$ KM5K3j");
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.toString();
      Frame frame1 = frame0.getClone();
      DCMPL dCMPL0 = new DCMPL();
      ARETURN aRETURN0 = new ARETURN();
      InstructionList instructionList0 = new InstructionList();
      instConstraintVisitor0.setFrame(frame1);
      ObjectType.getInstance("k$ KM5K3j");
      DDIV dDIV0 = new DDIV();
      instructionList0.getEnd();
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
      assertEquals(0, iFNONNULL0.getIndex());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 2217;
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DDIV dDIV0 = new DDIV();
      DCMPL dCMPL0 = new DCMPL();
      DCMPL dCMPL1 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Exp,cting a ReturnaddressType in local variable ");
      OperandStack operandStack0 = new OperandStack(815, objectType0);
      LocalVariables localVariables0 = new LocalVariables(69);
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Class<LUSHR>[] classArray0 = (Class<LUSHR>[]) Array.newInstance(Class.class, 3);
      Class<LUSHR> class0 = LUSHR.class;
      classArray0[0] = class0;
      Class<LUSHR> class1 = LUSHR.class;
      classArray0[1] = class1;
      Class<LUSHR> class2 = LUSHR.class;
      classArray0[2] = class2;
      Type[] typeArray0 = Type.NO_ARGS;
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      DDIV dDIV0 = new DDIV();
      INEG iNEG0 = new INEG();
      iNEG0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'Exp,cting a ReturnaddressType in local variable '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(849);
      ObjectType objectType0 = ObjectType.getInstance("I{n,/rXej^>3ym}&dZ");
      OperandStack operandStack0 = new OperandStack(661, objectType0);
      String string0 = File.separator;
      OperandStack operandStack1 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = frame0.getClone();
      Frame.getThis();
      frame1.getClone();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame1);
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'I{n,.rXej^>3ym}&dZ'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LAND lAND0 = new LAND();
      DSTORE dSTORE0 = new DSTORE(22);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      InstructionList instructionList0 = new InstructionList(dSTORE0);
      assertEquals(1, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(886);
      localVariables0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("k$ ~K!5KJ3");
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      operandStack0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      DDIV dDIV0 = new DDIV();
      LOR lOR0 = new LOR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      lOR0.consumeStack(constantPoolGen0);
      lOR0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type 'k$ ~K!5KJ3'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("n");
      OperandStack operandStack0 = new OperandStack(161, objectType0);
      OperandStack operandStack1 = new OperandStack(222, objectType0);
      LocalVariables localVariables0 = new LocalVariables(222);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(1855);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'n'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(904);
      ObjectType objectType0 = ObjectType.getInstance("Leaving a constructor that itself did not call a constructor.");
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.toString();
      frame0.getClone();
      DCMPL dCMPL0 = new DCMPL();
      ARETURN aRETURN0 = new ARETURN();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DLOAD dLOAD0 = new DLOAD(904);
      LDIV lDIV0 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type 'Leaving a constructor that itself did not call a constructor.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(0);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEDYNAMIC0);
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("0I{n,/rXej^>3ym}&dZ");
      OperandStack operandStack0 = new OperandStack(166, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      localVariables0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(2230, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      frame0.toString();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DDIV dDIV0 = new DDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("k$ ~KM5KJ3j");
      LDIV lDIV0 = new LDIV();
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2230);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2230, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      AASTORE aASTORE0 = new AASTORE();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DDIV dDIV0 = new DDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      POP pOP0 = new POP();
      ISHR iSHR0 = new ISHR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("array");
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      DDIV dDIV0 = new DDIV();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type 'array'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(876);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("array");
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      operandStack0.toString();
      Frame frame1 = frame0.getClone();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE((IF_ICMPLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      LocalVariables localVariables1 = new LocalVariables(876);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(661, objectType0);
      OperandStack operandStack1 = new OperandStack(661, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      Frame.getThis();
      operandStack1.initializeObject((UninitializedObjectType) null);
      frame0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      DDIV dDIV0 = new DDIV();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(876);
      frame0.getClone();
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(904);
      ObjectType objectType0 = new ObjectType("k$ KM5K3j");
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Pattern.quote("k$ KM5K3j");
      instConstraintVisitor0.setFrame(frame0);
      DDIV dDIV0 = new DDIV();
      OperandStack operandStack1 = operandStack0.getClone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pxA");
      operandStack1.toString();
      Frame frame1 = new Frame(localVariables0, operandStack1);
      frame0.getClone();
      DCMPL dCMPL0 = new DCMPL();
      ARETURN aRETURN0 = new ARETURN();
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'k$ KM5K3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      localVariables0.clone();
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(2178, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DDIV dDIV0 = new DDIV();
      SASTORE sASTORE0 = new SASTORE();
      MockPrintStream mockPrintStream0 = new MockPrintStream("k$ ~KM5KJ3j");
      localVariables0.toString();
      localVariables0.getClone();
      Type.getMethodSignature(objectType0, (Type[]) null);
      operandStack0.getClone();
      L2D l2D0 = new L2D();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeInt(192);
      POP pOP0 = new POP();
      pOP0.dump(dataOutputStream0);
      instConstraintVisitor0.visitPOP(pOP0);
      assertEquals((short)87, pOP0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(876);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      Frame frame2 = new Frame(localVariables0, operandStack0);
      frame2.getClone();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SIPUSH sIPUSH0 = new SIPUSH((short)47);
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("0I{n,/rXej^>3ym}&dZ");
      OperandStack operandStack0 = new OperandStack(96);
      OperandStack operandStack1 = new OperandStack(96, objectType0);
      LocalVariables localVariables0 = new LocalVariables(430);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      DDIV dDIV0 = new DDIV();
      DMUL dMUL0 = new DMUL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      DMUL dMUL1 = new DMUL();
      DMUL dMUL2 = new DMUL();
      dMUL2.getType(constantPoolGen0);
      DMUL dMUL3 = new DMUL();
      SIPUSH sIPUSH0 = new SIPUSH((short)1405);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      dMUL2.produceStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type '0I{n,.rXej^>3ym}&dZ'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(865);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      localVariables0.clone();
      ObjectType objectType0 = new ObjectType("k$ ~KM5KJ3j");
      OperandStack operandStack0 = new OperandStack(865, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = (Frame)frame0.clone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Class '");
      frame0.toString();
      operandStack0.clone();
      Frame frame2 = frame1.getClone();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      instConstraintVisitor0.setFrame(frame2);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is 'k$ ~KM5KJ3j' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      PUTFIELD pUTFIELD0 = new PUTFIELD(282);
      assertNotNull(pUTFIELD0);
      assertEquals("putfield", pUTFIELD0.getName());
      assertEquals(3, pUTFIELD0.getLength());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertEquals(282, pUTFIELD0.getIndex());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("r");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals("r", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(282, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals("r", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(282, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(282);
      assertNotNull(localVariables0);
      assertEquals(282, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals("r", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(282, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(282, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals("r", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(282, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(282, localVariables0.maxLocals());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertNotNull(constantPool0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(256, constantPool0.getLength());
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      assertNotNull(dUP2_X2_0);
      assertEquals(1, dUP2_X2_0.getLength());
      assertEquals("dup2_x2", dUP2_X2_0.getName());
      assertEquals((short)94, dUP2_X2_0.getOpcode());
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = new ObjectType("X]2");
      assertNotNull(objectType0);
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      assertNotNull(operandStack0);
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      I2D i2D0 = (I2D)InstructionConstants.I2D;
      assertNotNull(i2D0);
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals(1, i2D0.getLength());
      assertEquals("i2d", i2D0.getName());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, ":");
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      F2I f2I0 = new F2I();
      assertNotNull(f2I0);
      assertEquals("f2i", f2I0.getName());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      
      I2S i2S0 = new I2S();
      assertNotNull(i2S0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals("i2s", i2S0.getName());
      assertEquals(1, i2S0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'X]2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 904;
      LocalVariables localVariables0 = new LocalVariables(904);
      assertNotNull(localVariables0);
      assertEquals(904, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ KM5K3j");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      OperandStack operandStack1 = new OperandStack(904);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(904, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      
      String string0 = frame0.toString();
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertNotNull(string0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(904, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("k$ KM5K3j");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("k$ KM5K3j", constantUtf8_0.getBytes());
      
      ISUB iSUB0 = new ISUB();
      assertNotNull(iSUB0);
      assertEquals(1, iSUB0.getLength());
      assertEquals("isub", iSUB0.getName());
      assertEquals((short)100, iSUB0.getOpcode());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ISHR iSHR0 = new ISHR();
      assertNotNull(iSHR0);
      assertEquals(1, iSHR0.getLength());
      assertEquals("ishr", iSHR0.getName());
      assertEquals((short)122, iSHR0.getOpcode());
      
      I2L i2L0 = new I2L();
      assertNotNull(i2L0);
      assertEquals("i2l", i2L0.getName());
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'k$ KM5K3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(846);
      assertNotNull(localVariables0);
      assertEquals(846, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables(846);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(846, localVariables1.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("The 'index' is not a valid index into the local variable aFray.");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LThe 'index' is not a valid index into the local variable aFray/;", objectType0.getSignature());
      assertEquals("The 'index' is not a valid index into the local variable aFray.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(846, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LThe 'index' is not a valid index into the local variable aFray/;", objectType0.getSignature());
      assertEquals("The 'index' is not a valid index into the local variable aFray.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(846, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      OperandStack operandStack1 = new OperandStack(2);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(2, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.slotsUsed());
      
      operandStack1.push(objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LThe 'index' is not a valid index into the local variable aFray/;", objectType0.getSignature());
      assertEquals("The 'index' is not a valid index into the local variable aFray.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(frame0);
      assertEquals(846, localVariables1.maxLocals());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(846, localVariables1.maxLocals());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(operandStack1, operandStack0);
      
      LAND lAND0 = new LAND();
      assertNotNull(lAND0);
      assertEquals(1, lAND0.getLength());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type 'The 'index' is not a valid index into the local variable aFray.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      Frame frame2 = frame1.getClone();
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      SASTORE sASTORE0 = new SASTORE();
      assertNotNull(sASTORE0);
      assertEquals((short)86, sASTORE0.getOpcode());
      assertEquals(1, sASTORE0.getLength());
      assertEquals("sastore", sASTORE0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("{obmy`J@fDs9mIto<!x");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      DREM dREM0 = new DREM();
      assertNotNull(dREM0);
      assertEquals(1, dREM0.getLength());
      assertEquals("drem", dREM0.getName());
      assertEquals((short)115, dREM0.getOpcode());
      
      Instruction instruction0 = dREM0.copy();
      assertNotNull(instruction0);
      assertEquals(1, dREM0.getLength());
      assertEquals("drem", dREM0.getName());
      assertEquals((short)115, dREM0.getOpcode());
      assertEquals((short)115, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals("drem", instruction0.getName());
      assertSame(dREM0, instruction0);
      assertSame(instruction0, dREM0);
      
      OperandStack operandStack1 = new OperandStack(876, objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack1.isEmpty());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      IREM iREM0 = new IREM();
      assertNotNull(iREM0);
      assertEquals(1, iREM0.getLength());
      assertEquals((short)112, iREM0.getOpcode());
      assertEquals("irem", iREM0.getName());
      
      boolean boolean0 = frame0.equals(iREM0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, iREM0.getLength());
      assertEquals((short)112, iREM0.getOpcode());
      assertEquals("irem", iREM0.getName());
      assertFalse(boolean0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling2);
      
      Frame frame2 = frame1.getClone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      Frame frame3 = new Frame(localVariables0, operandStack1);
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(frame3);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack1.isEmpty());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame3);
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack1.isEmpty());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, frame0);
      assertNotSame(operandStack1, operandStack0);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertNotNull(mONITORENTER0);
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals(1, mONITORENTER0.getLength());
      
      Frame frame4 = new Frame(localVariables0, operandStack1);
      assertTrue(frame4.equals((Object)frame0));
      assertTrue(frame4.equals((Object)frame3));
      assertTrue(frame4.equals((Object)frame2));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(frame4);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack1.isEmpty());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F((L2F) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L{obmy`J@fDs9mIto<!x;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("0I{n,/rXej^>3ym}&dZ");
      assertNotNull(objectType0);
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(172);
      assertNotNull(constantMethodType0);
      assertEquals(172, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      String string0 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(string0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      NOP nOP0 = new NOP();
      assertNotNull(nOP0);
      assertEquals(1, nOP0.getLength());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals("nop", nOP0.getName());
      
      String string1 = nOP0.toString(constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, nOP0.getLength());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals("nop", nOP0.getName());
      assertEquals("nop", string1);
      assertNotSame(constantPool0, constantPool1);
      
      String string2 = nOP0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, nOP0.getLength());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals("nop", nOP0.getName());
      assertEquals("nop[0](1)", string2);
      
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals(1, nOP0.getLength());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals("nop", nOP0.getName());
      
      LUSHR lUSHR0 = new LUSHR();
      assertNotNull(lUSHR0);
      assertEquals((short)125, lUSHR0.getOpcode());
      assertEquals(1, lUSHR0.getLength());
      assertEquals("lushr", lUSHR0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type '0I{n,.rXej^>3ym}&dZ'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 876;
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = new ObjectType("X]2");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      FADD fADD0 = new FADD();
      assertNotNull(fADD0);
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals("fadd", fADD0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'X]2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("0I{n,/rXej^>3ym}&dZ");
      assertNotNull(objectType0);
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      OperandStack operandStack1 = new OperandStack(173);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(0, operandStack1.size());
      assertEquals(173, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.slotsUsed());
      
      Frame frame2 = frame0.getClone();
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      
      LSHR lSHR0 = new LSHR();
      assertNotNull(lSHR0);
      assertEquals("lshr", lSHR0.getName());
      assertEquals(1, lSHR0.getLength());
      assertEquals((short)123, lSHR0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type '0I{n,.rXej^>3ym}&dZ'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = new ObjectType("{obmy`J@fDs9mIto<!x");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      OperandStack operandStack0 = new OperandStack(876);
      assertNotNull(operandStack0);
      assertTrue(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(876, 876);
      assertNotNull(frame0);
      
      OperandStack operandStack1 = new OperandStack(876, objectType0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertNotNull(fileSystemHandling2);
      
      Frame frame2 = frame1.getClone();
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      
      Frame frame3 = new Frame(localVariables0, operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame3.equals((Object)frame0));
      assertFalse(frame3.equals((Object)frame2));
      assertFalse(frame3.equals((Object)frame1));
      assertNotNull(frame3);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      
      Object object0 = frame3.clone();
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame3.equals((Object)frame0));
      assertFalse(frame3.equals((Object)frame2));
      assertFalse(frame3.equals((Object)frame1));
      assertFalse(object0.equals((Object)frame2));
      assertFalse(object0.equals((Object)frame1));
      assertFalse(object0.equals((Object)frame0));
      assertNotNull(object0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, object0);
      assertNotSame(frame3, frame1);
      assertNotSame(object0, frame3);
      assertNotSame(object0, frame2);
      assertNotSame(object0, frame1);
      assertNotSame(object0, frame0);
      
      instConstraintVisitor0.setFrame(frame3);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)object0));
      assertFalse(frame3.equals((Object)frame2));
      assertFalse(frame3.equals((Object)frame1));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, object0);
      assertNotSame(frame3, frame1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertNotNull(mONITORENTER0);
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals("monitorenter", mONITORENTER0.getName());
      
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals("monitorenter", mONITORENTER0.getName());
      
      LDC_W lDC_W0 = new LDC_W(0);
      assertNotNull(lDC_W0);
      assertEquals(2, lDC_W0.getLength());
      assertEquals((short)18, lDC_W0.getOpcode());
      assertEquals(0, lDC_W0.getIndex());
      assertEquals("ldc", lDC_W0.getName());
      
      ARETURN aRETURN0 = new ARETURN();
      assertNotNull(aRETURN0);
      assertEquals((short)176, aRETURN0.getOpcode());
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      
      I2S i2S0 = new I2S();
      assertNotNull(i2S0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertEquals("i2s", i2S0.getName());
      
      L2I l2I0 = new L2I();
      assertNotNull(l2I0);
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      
      LSTORE lSTORE0 = new LSTORE(5);
      assertNotNull(lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(5, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(2, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
      
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(5, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(2, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(873);
      assertNotNull(localVariables0);
      assertEquals(873, localVariables0.maxLocals());
      
      ObjectType objectType0 = new ObjectType("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(873, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(873, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(873, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(873, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(873, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(873, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      String string0 = frame0.toString();
      assertTrue(frame0.equals((Object)frame1));
      assertNotNull(string0);
      assertEquals(873, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(873, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      
      boolean boolean0 = frame1.equals(instConstraintVisitor0);
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(873, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(873, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(boolean0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(873, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(873, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      IADD iADD0 = new IADD();
      assertNotNull(iADD0);
      assertEquals((short)96, iADD0.getOpcode());
      assertEquals("iadd", iADD0.getName());
      assertEquals(1, iADD0.getLength());
      
      String string1 = iADD0.toString(false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((short)96, iADD0.getOpcode());
      assertEquals("iadd", iADD0.getName());
      assertEquals(1, iADD0.getLength());
      assertEquals("iadd", string1);
      
      IRETURN iRETURN0 = new IRETURN();
      assertNotNull(iRETURN0);
      assertEquals("ireturn", iRETURN0.getName());
      assertEquals((short)172, iRETURN0.getOpcode());
      assertEquals(1, iRETURN0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      
      Frame frame2 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      BasicType basicType0 = Type.CHAR;
      assertNotNull(basicType0);
      assertEquals((byte)5, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("C", basicType0.getSignature());
      
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.BYTE);
      assertNotNull(nEWARRAY0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)8, nEWARRAY0.getTypecode());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      
      NEWARRAY nEWARRAY1 = new NEWARRAY((byte) (-1));
      assertFalse(nEWARRAY1.equals((Object)nEWARRAY0));
      assertNotNull(nEWARRAY1);
      assertEquals("newarray", nEWARRAY1.getName());
      assertEquals(2, nEWARRAY1.getLength());
      assertEquals((byte) (-1), nEWARRAY1.getTypecode());
      assertEquals((short)188, nEWARRAY1.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(815);
      assertNotNull(localVariables0);
      assertEquals(815, localVariables0.maxLocals());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(815, localVariables0.maxLocals());
      assertEquals(815, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("Exp,cting a ReturnaddressType in local variable ");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(815, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(815, operandStack0.maxStack());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(815, operandStack0.maxStack());
      assertEquals(815, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(frame0);
      assertEquals(815, localVariables0.maxLocals());
      assertEquals(815, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(815, operandStack0.maxStack());
      assertEquals(815, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(815, localVariables0.maxLocals());
      assertEquals(815, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(815, operandStack0.maxStack());
      assertEquals(815, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(815, localVariables0.maxLocals());
      assertEquals(815, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(815, operandStack0.maxStack());
      assertEquals(815, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame1);
      
      IINC iINC0 = new IINC(3973, 3973);
      assertNotNull(iINC0);
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(3973, iINC0.getIndex());
      assertEquals(3973, iINC0.getIncrement());
      assertEquals(6, iINC0.getLength());
      assertEquals("iinc", iINC0.getName());
      assertEquals((short)132, iINC0.getOpcode());
      
      IREM iREM0 = new IREM();
      assertNotNull(iREM0);
      assertEquals((short)112, iREM0.getOpcode());
      assertEquals("irem", iREM0.getName());
      assertEquals(1, iREM0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type 'Exp,cting a ReturnaddressType in local variable '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 876;
      LocalVariables localVariables0 = new LocalVariables(853);
      assertNotNull(localVariables0);
      assertEquals(853, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2235, objectType0);
      assertNotNull(operandStack0);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(2235, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables1 = new LocalVariables(876);
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(876, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(2235, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, localVariables1.maxLocals());
      
      String string0 = frame0.toString();
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertNotNull(string0);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(2235, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables1, localVariables0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(2235, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertFalse(localVariables0.equals((Object)localVariables1));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(853, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(2235, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame2 = frame0.getClone();
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertFalse(frame0.equals((Object)frame1));
      assertFalse(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(2235, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      IMUL iMUL0 = new IMUL();
      assertNotNull(iMUL0);
      assertEquals((short)104, iMUL0.getOpcode());
      assertEquals(1, iMUL0.getLength());
      assertEquals("imul", iMUL0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      PUTFIELD pUTFIELD0 = new PUTFIELD(521);
      assertNotNull(pUTFIELD0);
      assertEquals(3, pUTFIELD0.getLength());
      assertEquals("putfield", pUTFIELD0.getName());
      assertEquals(521, pUTFIELD0.getIndex());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("r");
      assertNotNull(objectType0);
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(521, objectType0);
      assertNotNull(operandStack0);
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(521, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      LocalVariables localVariables0 = new LocalVariables(521);
      assertNotNull(localVariables0);
      assertEquals(521, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(521, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(521, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(521, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(521, localVariables0.maxLocals());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertNotNull(constantPool0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(256, constantPool0.getLength());
      
      int int0 = constantPoolGen0.addDouble(521);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
      
      Character character0 = Character.valueOf('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      String string0 = frame0.toString();
      assertNotNull(string0);
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(521, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(521, localVariables0.maxLocals());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertNotNull(constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      
      LOR lOR0 = new LOR();
      assertNotNull(lOR0);
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      
      int int1 = lOR0.consumeStack(constantPoolGen1);
      assertFalse(int1 == int0);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertEquals(1, constantPoolGen1.getSize());
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertEquals(4, int1);
      assertNotSame(constantPoolGen1, constantPoolGen0);
      
      Instruction instruction0 = lOR0.copy();
      assertNotNull(instruction0);
      assertEquals((short)129, instruction0.getOpcode());
      assertEquals("lor", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertSame(instruction0, lOR0);
      assertSame(lOR0, instruction0);
      
      FCMPL fCMPL0 = new FCMPL();
      assertNotNull(fCMPL0);
      assertEquals(1, fCMPL0.getLength());
      assertEquals((short)149, fCMPL0.getOpcode());
      assertEquals("fcmpl", fCMPL0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type 'r'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(904);
      assertNotNull(localVariables0);
      assertEquals(904, localVariables0.maxLocals());
      
      ObjectType objectType0 = new ObjectType("k$ KM5K3j");
      assertNotNull(objectType0);
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      assertNotNull(operandStack0);
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals(904, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      OperandStack operandStack1 = new OperandStack(904);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(0, operandStack1.size());
      assertEquals(904, operandStack1.maxStack());
      
      Frame frame2 = new Frame(904, 904);
      assertFalse(frame2.equals((Object)frame1));
      assertFalse(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      
      Frame frame3 = frame2.getClone();
      assertFalse(frame2.equals((Object)frame1));
      assertFalse(frame2.equals((Object)frame0));
      assertFalse(frame3.equals((Object)frame1));
      assertFalse(frame3.equals((Object)frame0));
      assertNotNull(frame3);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame3);
      assertNotSame(frame2, frame0);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, frame0);
      
      String string0 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertFalse(frame0.equals((Object)frame3));
      assertFalse(frame0.equals((Object)frame2));
      assertNotNull(string0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame3);
      assertNotSame(frame0, frame2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      IMUL iMUL0 = new IMUL();
      assertNotNull(iMUL0);
      assertEquals("imul", iMUL0.getName());
      assertEquals(1, iMUL0.getLength());
      assertEquals((short)104, iMUL0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList(iMUL0);
      assertNotNull(instructionList0);
      assertEquals("imul", iMUL0.getName());
      assertEquals(1, iMUL0.getLength());
      assertEquals((short)104, iMUL0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      POP pOP0 = new POP();
      assertNotNull(pOP0);
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      
      instConstraintVisitor0.visitStackInstruction(pOP0);
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      
      IADD iADD0 = new IADD();
      assertNotNull(iADD0);
      assertEquals(1, iADD0.getLength());
      assertEquals("iadd", iADD0.getName());
      assertEquals((short)96, iADD0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'k$ KM5K3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("booleyi");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Lbooleyi;", objectType0.getSignature());
      assertEquals("booleyi", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Lbooleyi;", objectType0.getSignature());
      assertEquals("booleyi", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lbooleyi;", objectType0.getSignature());
      assertEquals("booleyi", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lbooleyi;", objectType0.getSignature());
      assertEquals("booleyi", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertNotNull(constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      
      byte byte0 = (byte)74;
      BALOAD bALOAD0 = (BALOAD)InstructionConstants.BALOAD;
      assertNotNull(bALOAD0);
      assertEquals(1, bALOAD0.getLength());
      assertEquals("baload", bALOAD0.getName());
      assertEquals((short)51, bALOAD0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList(bALOAD0);
      assertNotNull(instructionList0);
      assertEquals(1, bALOAD0.getLength());
      assertEquals("baload", bALOAD0.getName());
      assertEquals((short)51, bALOAD0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertEquals(1, bALOAD0.getLength());
      assertEquals("baload", bALOAD0.getName());
      assertEquals((short)51, bALOAD0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      assertNotNull(iF_ICMPLT0);
      assertEquals(1, bALOAD0.getLength());
      assertEquals("baload", bALOAD0.getName());
      assertEquals((short)51, bALOAD0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      
      IF_ICMPLT iF_ICMPLT1 = new IF_ICMPLT(instructionHandle0);
      assertFalse(iF_ICMPLT1.equals((Object)iF_ICMPLT0));
      assertNotNull(iF_ICMPLT1);
      assertEquals(1, bALOAD0.getLength());
      assertEquals("baload", bALOAD0.getName());
      assertEquals((short)51, bALOAD0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPLT1.getLength());
      assertEquals((short)161, iF_ICMPLT1.getOpcode());
      assertEquals("if_icmplt", iF_ICMPLT1.getName());
      assertEquals(0, iF_ICMPLT1.getIndex());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 'booleyi'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(864);
      assertNotNull(localVariables0);
      assertEquals(864, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      assertNotNull(operandStack0);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(864, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(864, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(864, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(864, localVariables0.maxLocals());
      assertEquals(864, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(864, localVariables0.maxLocals());
      assertEquals(864, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      
      Frame frame2 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals(864, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      
      GETFIELD gETFIELD0 = new GETFIELD(2217);
      assertNotNull(gETFIELD0);
      assertEquals((short)180, gETFIELD0.getOpcode());
      assertEquals("getfield", gETFIELD0.getName());
      assertEquals(2217, gETFIELD0.getIndex());
      assertEquals(3, gETFIELD0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IADD iADD0 = new IADD();
      assertNotNull(iADD0);
      assertEquals("iadd", iADD0.getName());
      assertEquals((short)96, iADD0.getOpcode());
      assertEquals(1, iADD0.getLength());
      
      String string0 = iADD0.toString();
      assertNotNull(string0);
      assertEquals("iadd", iADD0.getName());
      assertEquals((short)96, iADD0.getOpcode());
      assertEquals(1, iADD0.getLength());
      assertEquals("iadd[96](1)", string0);
      
      FSTORE fSTORE0 = new FSTORE(4);
      assertNotNull(fSTORE0);
      assertEquals(2, fSTORE0.getLength());
      assertEquals(4, fSTORE0.getIndex());
      assertEquals("fstore", fSTORE0.getName());
      assertEquals((short)56, fSTORE0.getOpcode());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
      
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals(2, fSTORE0.getLength());
      assertEquals(4, fSTORE0.getIndex());
      assertEquals("fstore", fSTORE0.getName());
      assertEquals((short)56, fSTORE0.getOpcode());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(815);
      assertNotNull(localVariables0);
      assertEquals(815, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables(815);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(815, localVariables1.maxLocals());
      
      ObjectType objectType0 = new ObjectType("Exp,cting a ReturnaddressType in local variable ");
      assertNotNull(objectType0);
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(815, objectType0);
      assertNotNull(operandStack0);
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(815, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(815, localVariables1.maxLocals());
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(815, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame1);
      assertEquals(815, localVariables1.maxLocals());
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(815, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(815, localVariables1.maxLocals());
      assertEquals("Exp,cting a ReturnaddressType in local variable ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LExp,cting a ReturnaddressType in local variable ;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(815, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      
      IINC iINC0 = new IINC(3973, 3973);
      assertNotNull(iINC0);
      assertEquals("iinc", iINC0.getName());
      assertEquals(6, iINC0.getLength());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(3973, iINC0.getIndex());
      assertEquals(3973, iINC0.getIncrement());
      assertEquals((short)132, iINC0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 915;
      LocalVariables localVariables0 = new LocalVariables(915);
      assertNotNull(localVariables0);
      assertEquals(915, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("1x>av8 Y*!");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("1x>av8 Y*!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1x>av8 Y*!;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(146, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("1x>av8 Y*!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1x>av8 Y*!;", objectType0.getSignature());
      assertEquals(146, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(915, localVariables0.maxLocals());
      assertEquals(915, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(915, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("1x>av8 Y*!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1x>av8 Y*!;", objectType0.getSignature());
      assertEquals(146, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      String string0 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(string0);
      assertEquals(915, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("1x>av8 Y*!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1x>av8 Y*!;", objectType0.getSignature());
      assertEquals(146, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(915, localVariables0.maxLocals());
      assertEquals(915, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals("1x>av8 Y*!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1x>av8 Y*!;", objectType0.getSignature());
      assertEquals(146, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(146, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame1 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(915, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("1x>av8 Y*!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1x>av8 Y*!;", objectType0.getSignature());
      assertEquals(146, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(915, localVariables2.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(915, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("1x>av8 Y*!", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L1x>av8 Y*!;", objectType0.getSignature());
      assertEquals(146, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      
      NOP nOP0 = new NOP();
      assertNotNull(nOP0);
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals("nop", nOP0.getName());
      assertEquals(1, nOP0.getLength());
      
      NOP nOP1 = new NOP();
      assertTrue(nOP1.equals((Object)nOP0));
      assertNotNull(nOP1);
      assertEquals((short)0, nOP1.getOpcode());
      assertEquals("nop", nOP1.getName());
      assertEquals(1, nOP1.getLength());
      
      instConstraintVisitor0.visitNOP(nOP0);
      assertTrue(nOP0.equals((Object)nOP1));
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals("nop", nOP0.getName());
      assertEquals(1, nOP0.getLength());
      assertNotSame(nOP0, nOP1);
      
      IINC iINC0 = new IINC(506, 506);
      assertNotNull(iINC0);
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(506, iINC0.getIncrement());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals(6, iINC0.getLength());
      assertEquals("iinc", iINC0.getName());
      assertEquals(506, iINC0.getIndex());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      assertNotNull(operandStack0);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0);
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(161, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(161, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(222);
      assertNotNull(localVariables0);
      assertEquals(222, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(161, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(222, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(161, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(222, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(1848);
      assertNotNull(aNEWARRAY0);
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertEquals(1848, aNEWARRAY0.getIndex());
      
      Class<?>[] classArray0 = aNEWARRAY0.getExceptions();
      assertNotNull(classArray0);
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertEquals(1848, aNEWARRAY0.getIndex());
      
      FMUL fMUL0 = new FMUL();
      assertNotNull(fMUL0);
      assertEquals("fmul", fMUL0.getName());
      assertEquals(1, fMUL0.getLength());
      assertEquals((short)106, fMUL0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(864);
      assertNotNull(localVariables0);
      assertEquals(864, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables(864);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(864, localVariables1.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("0I{n,/rXej^>3ym}&dZ");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(661, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(661, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      OperandStack operandStack1 = new OperandStack(173, objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(173, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      
      Frame frame0 = new Frame(localVariables1, operandStack1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(frame0);
      assertEquals(864, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(173, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(864, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(173, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(operandStack1, operandStack0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(172);
      assertNotNull(constantMethodType0);
      assertEquals(172, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      String string0 = frame0.toString();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(string0);
      assertEquals(864, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(173, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(864, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(173, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      LocalVariables localVariables2 = new LocalVariables(173);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(173, localVariables2.maxLocals());
      
      DSUB dSUB0 = new DSUB();
      assertNotNull(dSUB0);
      assertEquals(1, dSUB0.getLength());
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type '0I{n,.rXej^>3ym}&dZ'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(886);
      assertNotNull(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      String string0 = localVariables0.toString();
      assertNotNull(string0);
      assertEquals(886, localVariables0.maxLocals());
      
      localVariables0.merge(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      ObjectType objectType0 = new ObjectType("Ljava/lang/Thowable;");
      assertNotNull(objectType0);
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(886, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertNotNull(uninitializedObjectType0);
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'Ljava.lang.Thowable;'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'Ljava.lang.Thowable;'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(886, (short)16);
      assertNotNull(mULTIANEWARRAY0);
      assertEquals(886, mULTIANEWARRAY0.getIndex());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals((short)16, mULTIANEWARRAY0.getDimensions());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '16' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = new ObjectType("{obmy`J@fDs9mIto<!x");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      OperandStack operandStack0 = new OperandStack(876);
      assertNotNull(operandStack0);
      assertEquals(876, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      
      DREM dREM0 = new DREM();
      assertNotNull(dREM0);
      assertEquals("drem", dREM0.getName());
      assertEquals((short)115, dREM0.getOpcode());
      assertEquals(1, dREM0.getLength());
      
      Instruction instruction0 = dREM0.copy();
      assertNotNull(instruction0);
      assertEquals("drem", dREM0.getName());
      assertEquals((short)115, dREM0.getOpcode());
      assertEquals(1, dREM0.getLength());
      assertEquals((short)115, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals("drem", instruction0.getName());
      assertSame(dREM0, instruction0);
      assertSame(instruction0, dREM0);
      
      OperandStack operandStack1 = new OperandStack(876, objectType0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      
      Frame frame1 = frame0.getClone();
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertNotNull(fileSystemHandling2);
      
      Frame frame2 = frame1.getClone();
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      Frame frame3 = new Frame(localVariables0, operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame3.equals((Object)frame1));
      assertFalse(frame3.equals((Object)frame0));
      assertFalse(frame3.equals((Object)frame2));
      assertNotNull(frame3);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      
      Object object0 = frame3.clone();
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame3.equals((Object)frame1));
      assertFalse(frame3.equals((Object)frame0));
      assertFalse(frame3.equals((Object)frame2));
      assertFalse(object0.equals((Object)frame2));
      assertFalse(object0.equals((Object)frame1));
      assertFalse(object0.equals((Object)frame0));
      assertNotNull(object0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, object0);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      assertNotSame(object0, frame2);
      assertNotSame(object0, frame1);
      assertNotSame(object0, frame0);
      assertNotSame(object0, frame3);
      
      instConstraintVisitor0.setFrame(frame3);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame3.equals((Object)frame1));
      assertFalse(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)object0));
      assertFalse(frame3.equals((Object)frame2));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, object0);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertNotNull(mONITORENTER0);
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      
      LDC_W lDC_W0 = new LDC_W(0);
      assertNotNull(lDC_W0);
      assertEquals((short)18, lDC_W0.getOpcode());
      assertEquals(0, lDC_W0.getIndex());
      assertEquals("ldc", lDC_W0.getName());
      assertEquals(2, lDC_W0.getLength());
      
      I2S i2S0 = new I2S();
      assertNotNull(i2S0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals("i2s", i2S0.getName());
      
      L2I l2I0 = new L2I();
      assertNotNull(l2I0);
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      
      I2F i2F0 = new I2F();
      assertNotNull(i2F0);
      assertEquals("i2f", i2F0.getName());
      assertEquals(1, i2F0.getLength());
      assertEquals((short)134, i2F0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L{obmy`J@fDs9mIto<!x;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      PUTFIELD pUTFIELD0 = new PUTFIELD(282);
      assertNotNull(pUTFIELD0);
      assertEquals(282, pUTFIELD0.getIndex());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertEquals(3, pUTFIELD0.getLength());
      assertEquals("putfield", pUTFIELD0.getName());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("r");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(282, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(282, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(282);
      assertNotNull(localVariables0);
      assertEquals(282, localVariables0.maxLocals());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(282, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(282, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      operandStack0.merge(operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(282, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(282, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(282, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(282, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(282, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(282, localVariables0.maxLocals());
      assertNotSame(operandStack0, operandStack1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertNotNull(constantPool0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(256, constantPool0.getLength());
      
      int int0 = constantPoolGen0.addDouble(282);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
      
      OperandStack operandStack2 = new OperandStack(282, objectType0);
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertNotNull(operandStack2);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, operandStack2.size());
      assertEquals(282, operandStack2.maxStack());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.slotsUsed());
      
      FMUL fMUL0 = new FMUL();
      assertNotNull(fMUL0);
      assertEquals("fmul", fMUL0.getName());
      assertEquals((short)106, fMUL0.getOpcode());
      assertEquals(1, fMUL0.getLength());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DNEG dNEG0 = new DNEG();
      assertNotNull(dNEG0);
      assertEquals(1, dNEG0.getLength());
      assertEquals("dneg", dNEG0.getName());
      assertEquals((short)119, dNEG0.getOpcode());
      
      DNEG dNEG1 = new DNEG();
      assertTrue(dNEG1.equals((Object)dNEG0));
      assertNotNull(dNEG1);
      assertEquals((short)119, dNEG1.getOpcode());
      assertEquals("dneg", dNEG1.getName());
      assertEquals(1, dNEG1.getLength());
      
      String string0 = dNEG1.toString();
      assertTrue(dNEG1.equals((Object)dNEG0));
      assertNotNull(string0);
      assertEquals((short)119, dNEG1.getOpcode());
      assertEquals("dneg", dNEG1.getName());
      assertEquals(1, dNEG1.getLength());
      assertEquals("dneg[119](1)", string0);
      assertNotSame(dNEG1, dNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'r'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(129, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(129, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(129);
      assertNotNull(localVariables0);
      assertEquals(129, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(129, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(129, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(129);
      assertNotNull(iNSTANCEOF0);
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals(129, iNSTANCEOF0.getIndex());
      
      DLOAD dLOAD0 = new DLOAD(129);
      assertNotNull(dLOAD0);
      assertEquals(2, dLOAD0.getLength());
      assertEquals("dload", dLOAD0.getName());
      assertEquals(129, dLOAD0.getIndex());
      assertEquals((short)24, dLOAD0.getOpcode());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals(2, dLOAD0.getLength());
      assertEquals("dload", dLOAD0.getName());
      assertEquals(129, dLOAD0.getIndex());
      assertEquals((short)24, dLOAD0.getOpcode());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      
      INSTANCEOF iNSTANCEOF1 = (INSTANCEOF)iNSTANCEOF0.copy();
      assertTrue(iNSTANCEOF1.equals((Object)iNSTANCEOF0));
      assertNotNull(iNSTANCEOF1);
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals(129, iNSTANCEOF0.getIndex());
      assertEquals("instanceof", iNSTANCEOF1.getName());
      assertEquals((short)193, iNSTANCEOF1.getOpcode());
      assertEquals(129, iNSTANCEOF1.getIndex());
      assertEquals(3, iNSTANCEOF1.getLength());
      assertNotSame(iNSTANCEOF0, iNSTANCEOF1);
      assertNotSame(iNSTANCEOF1, iNSTANCEOF0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("Gx]xR'7wxu2{nY");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Gx]xR'7wxu2{nY", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LGx]xR'7wxu2{nY;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(1137, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Gx]xR'7wxu2{nY", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LGx]xR'7wxu2{nY;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1137, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Gx]xR'7wxu2{nY", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LGx]xR'7wxu2{nY;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1137, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Gx]xR'7wxu2{nY", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LGx]xR'7wxu2{nY;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1137, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      
      CHECKCAST cHECKCAST0 = new CHECKCAST(3);
      assertNotNull(cHECKCAST0);
      assertEquals(3, cHECKCAST0.getLength());
      assertEquals((short)192, cHECKCAST0.getOpcode());
      assertEquals(3, cHECKCAST0.getIndex());
      assertEquals("checkcast", cHECKCAST0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      Frame frame2 = frame1.getClone();
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      IAND iAND0 = new IAND();
      assertNotNull(iAND0);
      assertEquals(1, iAND0.getLength());
      assertEquals((short)126, iAND0.getOpcode());
      assertEquals("iand", iAND0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(604);
      assertNotNull(aNEWARRAY0);
      assertEquals(604, aNEWARRAY0.getIndex());
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertEquals(3, aNEWARRAY0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(aNEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("X]2");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      Frame frame2 = frame0.getClone();
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      
      ObjectType objectType1 = new ObjectType(":");
      assertFalse(objectType1.equals((Object)objectType0));
      assertNotNull(objectType1);
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(":", objectType1.getClassName());
      assertEquals("L:;", objectType1.getSignature());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      LSTORE lSTORE0 = new LSTORE(876);
      assertNotNull(lSTORE0);
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(4, lSTORE0.getLength());
      assertEquals(876, lSTORE0.getIndex());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(lSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'X]2'; Instruction type: 'long'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(2192, objectType0);
      assertNotNull(operandStack0);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      FRETURN fRETURN0 = new FRETURN();
      assertNotNull(fRETURN0);
      assertEquals((short)174, fRETURN0.getOpcode());
      assertEquals(1, fRETURN0.getLength());
      assertEquals("freturn", fRETURN0.getName());
      
      Instruction instruction0 = fRETURN0.copy();
      assertNotNull(instruction0);
      assertEquals((short)174, fRETURN0.getOpcode());
      assertEquals(1, fRETURN0.getLength());
      assertEquals("freturn", fRETURN0.getName());
      assertEquals((short)174, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals("freturn", instruction0.getName());
      assertSame(fRETURN0, instruction0);
      assertSame(instruction0, fRETURN0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      D2L d2L0 = new D2L();
      assertNotNull(d2L0);
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals("d2l", d2L0.getName());
      assertEquals(1, d2L0.getLength());
      
      String string0 = d2L0.toString(false);
      assertNotNull(string0);
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals("d2l", d2L0.getName());
      assertEquals(1, d2L0.getLength());
      assertEquals("d2l", string0);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertNotNull(mONITOREXIT0);
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertEquals("monitorexit", mONITOREXIT0.getName());
      
      LREM lREM0 = new LREM();
      assertNotNull(lREM0);
      assertEquals("lrem", lREM0.getName());
      assertEquals((short)113, lREM0.getOpcode());
      assertEquals(1, lREM0.getLength());
      
      IADD iADD0 = new IADD();
      assertNotNull(iADD0);
      assertEquals((short)96, iADD0.getOpcode());
      assertEquals("iadd", iADD0.getName());
      assertEquals(1, iADD0.getLength());
      
      ISHR iSHR0 = new ISHR();
      assertNotNull(iSHR0);
      assertEquals("ishr", iSHR0.getName());
      assertEquals(1, iSHR0.getLength());
      assertEquals((short)122, iSHR0.getOpcode());
      
      CHECKCAST cHECKCAST0 = new CHECKCAST(99);
      assertNotNull(cHECKCAST0);
      assertEquals("checkcast", cHECKCAST0.getName());
      assertEquals(99, cHECKCAST0.getIndex());
      assertEquals(3, cHECKCAST0.getLength());
      assertEquals((short)192, cHECKCAST0.getOpcode());
      
      D2L d2L1 = new D2L();
      assertTrue(d2L1.equals((Object)d2L0));
      assertNotNull(d2L1);
      assertEquals((short)143, d2L1.getOpcode());
      assertEquals(1, d2L1.getLength());
      assertEquals("d2l", d2L1.getName());
      
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      assertNotNull(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      
      LNEG lNEG0 = new LNEG();
      assertNotNull(lNEG0);
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = ObjectType.getInstance("n");
      assertNotNull(objectType0);
      assertEquals("n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ln;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(187, objectType0);
      assertNotNull(operandStack0);
      assertEquals("n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ln;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(187, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(187);
      assertNotNull(localVariables0);
      assertEquals(187, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals("n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ln;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(187, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(187, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ln;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(187, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(187, localVariables0.maxLocals());
      
      DUP dUP0 = new DUP();
      assertNotNull(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals("dup", dUP0.getName());
      
      ASTORE aSTORE0 = new ASTORE(1);
      assertNotNull(aSTORE0);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(1, aSTORE0.getIndex());
      assertEquals(1, aSTORE0.getLength());
      assertEquals((short)76, aSTORE0.getOpcode());
      assertEquals("astore_1", aSTORE0.getName());
      
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(1, aSTORE0.getIndex());
      assertEquals(1, aSTORE0.getLength());
      assertEquals((short)76, aSTORE0.getOpcode());
      assertEquals("astore_1", aSTORE0.getName());
      
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      assertNotNull(iMPDEP2_0);
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals(1, iMPDEP2_0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(886);
      assertNotNull(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables(886);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(886, localVariables1.maxLocals());
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("$ ~!5KJ3");
      assertNotNull(objectType0);
      assertEquals("$ ~!5KJ3", objectType0.getClassName());
      assertEquals("L$ ~!5KJ3;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      assertNotNull(operandStack0);
      assertEquals("$ ~!5KJ3", objectType0.getClassName());
      assertEquals("L$ ~!5KJ3;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      AASTORE aASTORE0 = new AASTORE();
      assertNotNull(aASTORE0);
      assertEquals(1, aASTORE0.getLength());
      assertEquals((short)83, aASTORE0.getOpcode());
      assertEquals("aastore", aASTORE0.getName());
      
      String string0 = aASTORE0.toString(true);
      assertNotNull(string0);
      assertEquals(1, aASTORE0.getLength());
      assertEquals((short)83, aASTORE0.getOpcode());
      assertEquals("aastore", aASTORE0.getName());
      assertEquals("aastore[83](1)", string0);
      
      Frame frame0 = new Frame(255, 2217);
      assertNotNull(frame0);
      
      boolean boolean0 = frame0.equals("$ ~!5KJ3");
      assertFalse(boolean0);
      
      String string1 = frame0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = frame0.clone();
      assertTrue(object0.equals((Object)frame0));
      assertNotNull(object0);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(frame1.equals((Object)object0));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(886, localVariables1.maxLocals());
      assertEquals("$ ~!5KJ3", objectType0.getClassName());
      assertEquals("L$ ~!5KJ3;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      instConstraintVisitor0.setFrame(frame1);
      assertFalse(frame1.equals((Object)object0));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals(886, localVariables1.maxLocals());
      assertEquals("$ ~!5KJ3", objectType0.getClassName());
      assertEquals("L$ ~!5KJ3;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame0);
      
      operandStack0.push(objectType0);
      assertEquals("$ ~!5KJ3", objectType0.getClassName());
      assertEquals("L$ ~!5KJ3;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals("ddiv", dDIV0.getName());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals(1, dDIV0.getLength());
      
      String string2 = frame1.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(frame1.equals((Object)object0));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(string2);
      assertEquals(886, localVariables1.maxLocals());
      assertEquals("$ ~!5KJ3", objectType0.getClassName());
      assertEquals("L$ ~!5KJ3;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame0);
      
      Frame frame2 = frame1.getClone();
      assertFalse(frame2.equals((Object)object0));
      assertFalse(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertFalse(frame1.equals((Object)object0));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals(886, localVariables1.maxLocals());
      assertEquals("$ ~!5KJ3", objectType0.getClassName());
      assertEquals("L$ ~!5KJ3;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(frame2, object0);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      
      Frame frame3 = frame1.getClone();
      assertFalse(frame3.equals((Object)frame0));
      assertFalse(frame3.equals((Object)object0));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(frame1.equals((Object)object0));
      assertTrue(frame1.equals((Object)frame2));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame3);
      assertEquals(886, localVariables1.maxLocals());
      assertEquals("$ ~!5KJ3", objectType0.getClassName());
      assertEquals("L$ ~!5KJ3;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, object0);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame3);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      
      Frame frame4 = frame3.getClone();
      assertFalse(frame3.equals((Object)frame0));
      assertFalse(frame3.equals((Object)object0));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame1));
      assertFalse(frame4.equals((Object)object0));
      assertTrue(frame4.equals((Object)frame3));
      assertTrue(frame4.equals((Object)frame1));
      assertFalse(frame4.equals((Object)frame0));
      assertFalse(frame1.equals((Object)object0));
      assertTrue(frame1.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame3));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame4);
      assertEquals(886, localVariables1.maxLocals());
      assertEquals("$ ~!5KJ3", objectType0.getClassName());
      assertEquals("L$ ~!5KJ3;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, object0);
      assertNotSame(frame3, frame4);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame4, object0);
      assertNotSame(frame4, frame3);
      assertNotSame(frame4, frame2);
      assertNotSame(frame4, frame0);
      assertNotSame(frame4, frame1);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame3);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame4);
      assertNotSame(frame1, frame0);
      
      LocalVariables localVariables2 = new LocalVariables(886);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(886, localVariables2.maxLocals());
      
      FDIV fDIV0 = new FDIV();
      assertNotNull(fDIV0);
      assertEquals("fdiv", fDIV0.getName());
      assertEquals(1, fDIV0.getLength());
      assertEquals((short)110, fDIV0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type '$ ~!5KJ3'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(886);
      assertNotNull(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = new ObjectType("Ljava/lang/Throwable;");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(886, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(886, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(frame0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      IUSHR iUSHR0 = new IUSHR();
      assertNotNull(iUSHR0);
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals("iushr", iUSHR0.getName());
      assertEquals(1, iUSHR0.getLength());
      
      String string0 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(string0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      String string1 = constantPoolGen0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("", string1);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Ljava/lang/Throwable;");
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertNotNull(constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals(1, lADD0.getLength());
      assertEquals("ladd", lADD0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'Ljava.lang.Throwable'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(904);
      assertNotNull(localVariables0);
      assertEquals(904, localVariables0.maxLocals());
      
      ObjectType objectType0 = new ObjectType("k$ KM5K3j");
      assertNotNull(objectType0);
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      assertNotNull(operandStack0);
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals(904, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(904, localVariables0.maxLocals());
      assertEquals(904, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      String string0 = Pattern.quote("k$ KM5K3j");
      assertNotNull(string0);
      assertEquals("\\Qk$ KM5K3j\\E", string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals(1, dDIV0.getLength());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals((short)111, dDIV0.getOpcode());
      
      String string1 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      LAND lAND0 = new LAND();
      assertNotNull(lAND0);
      assertEquals(1, lAND0.getLength());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RET rET0 = new RET(904);
      assertNotNull(rET0);
      assertEquals(904, rET0.getIndex());
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      
      RET rET1 = new RET(162);
      assertFalse(rET1.equals((Object)rET0));
      assertNotNull(rET1);
      assertEquals(162, rET1.getIndex());
      assertEquals("ret", rET1.getName());
      assertEquals(2, rET1.getLength());
      assertEquals((short)169, rET1.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 162.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("n");
      assertNotNull(objectType0);
      assertEquals("n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ln;", objectType0.getSignature());
      
      int int0 = 187;
      OperandStack operandStack0 = new OperandStack(187, objectType0);
      assertNotNull(operandStack0);
      assertEquals("n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ln;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(187, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(187);
      assertNotNull(localVariables0);
      assertEquals(187, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals("n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ln;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(187, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(187, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("n", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ln;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(187, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(187, localVariables0.maxLocals());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      assertNotNull(dUP2_X1_0);
      assertEquals("dup2_x1", dUP2_X1_0.getName());
      assertEquals((short)93, dUP2_X1_0.getOpcode());
      assertEquals(1, dUP2_X1_0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = new ObjectType("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2217, objectType0);
      assertNotNull(operandStack0);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Frame frame1 = (Frame)frame0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Class '");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = frame0.toString();
      assertTrue(frame0.equals((Object)frame1));
      assertNotNull(string0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2217, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame2 = frame1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      String string1 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("<clinit>", string2);
      
      instConstraintVisitor0.setFrame(frame2);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)frame2));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2217, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)24, (byte)5}, byteArray0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertArrayEquals(new byte[] {(byte)24, (byte)5}, byteArray0);
      
      DLOAD dLOAD0 = new DLOAD(26);
      assertNotNull(dLOAD0);
      assertEquals((short)24, dLOAD0.getOpcode());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      assertEquals(26, dLOAD0.getIndex());
      assertEquals(2, dLOAD0.getLength());
      assertEquals("dload", dLOAD0.getName());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) dLOAD0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotNull(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)24, dLOAD0.getOpcode());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      assertEquals(26, dLOAD0.getIndex());
      assertEquals(2, dLOAD0.getLength());
      assertEquals("dload", dLOAD0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertArrayEquals(new byte[] {(byte)24, (byte)5}, byteArray0);
      
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotNull(jSR_W0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)24, dLOAD0.getOpcode());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      assertEquals(26, dLOAD0.getIndex());
      assertEquals(2, dLOAD0.getLength());
      assertEquals("dload", dLOAD0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertEquals("jsr_w", jSR_W0.getName());
      assertEquals(0, jSR_W0.getIndex());
      assertEquals(5, jSR_W0.getLength());
      assertArrayEquals(new byte[] {(byte)24, (byte)5}, byteArray0);
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor1);
      
      instConstraintVisitor1.visitJSR_W(jSR_W0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)24, dLOAD0.getOpcode());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      assertEquals(26, dLOAD0.getIndex());
      assertEquals(2, dLOAD0.getLength());
      assertEquals("dload", dLOAD0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertEquals("jsr_w", jSR_W0.getName());
      assertEquals(0, jSR_W0.getIndex());
      assertEquals(5, jSR_W0.getLength());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      assertArrayEquals(new byte[] {(byte)24, (byte)5}, byteArray0);
      
      POP pOP0 = new POP();
      assertNotNull(pOP0);
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      
      instConstraintVisitor0.visitStackInstruction(pOP0);
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor1));
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertNotSame(instConstraintVisitor0, instConstraintVisitor1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(158, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(158, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(158);
      assertNotNull(localVariables0);
      assertEquals(158, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(158, localVariables0.maxLocals());
      assertEquals(158, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(158, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(158, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(158, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(158, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(158, localVariables0.maxLocals());
      assertEquals(158, localVariables1.maxLocals());
      assertEquals(158, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      String string0 = localVariables0.toString();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(string0);
      assertEquals(158, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(158, localVariables0.maxLocals());
      assertEquals(158, localVariables1.maxLocals());
      assertEquals(158, localVariables2.maxLocals());
      assertEquals(158, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      
      String string1 = localVariables1.toString();
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(158, localVariables0.maxLocals());
      assertEquals(158, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      
      localVariables3.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(158, localVariables0.maxLocals());
      assertEquals(158, localVariables1.maxLocals());
      assertEquals(158, localVariables2.maxLocals());
      assertEquals(158, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.OrFileFilter");
      assertFalse(boolean0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals(1, dDIV0.getLength());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals((short)111, dDIV0.getOpcode());
      
      ISHR iSHR0 = new ISHR();
      assertNotNull(iSHR0);
      assertEquals(1, iSHR0.getLength());
      assertEquals((short)122, iSHR0.getOpcode());
      assertEquals("ishr", iSHR0.getName());
      
      I2S i2S0 = new I2S();
      assertNotNull(i2S0);
      assertEquals(1, i2S0.getLength());
      assertEquals("i2s", i2S0.getName());
      assertEquals((short)147, i2S0.getOpcode());
      
      L2I l2I0 = new L2I();
      assertNotNull(l2I0);
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      String string0 = localVariables0.toString();
      assertNotNull(string0);
      assertEquals(876, localVariables0.maxLocals());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      String string1 = frame0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      String string2 = localVariables0.toString();
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(876, localVariables0.maxLocals());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      String string3 = localVariables0.toString();
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(876, localVariables0.maxLocals());
      
      Frame frame2 = new Frame(localVariables0, operandStack0);
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      Frame frame3 = frame2.getClone();
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame0));
      assertNotNull(frame3);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(frame2, frame3);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      SIPUSH sIPUSH0 = new SIPUSH((short)47);
      assertNotNull(sIPUSH0);
      assertEquals((short)17, sIPUSH0.getOpcode());
      assertEquals("sipush", sIPUSH0.getName());
      assertEquals(3, sIPUSH0.getLength());
      
      IDIV iDIV0 = new IDIV();
      assertNotNull(iDIV0);
      assertEquals(1, iDIV0.getLength());
      assertEquals("idiv", iDIV0.getName());
      assertEquals((short)108, iDIV0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeVirtual");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(2205, objectType0);
      assertNotNull(operandStack0);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2205, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2205, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(2205, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame0 = new Frame(46, 2205);
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      String string0 = frame1.toString();
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(string0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertNotNull(constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      
      int int0 = 192;
      FSTORE fSTORE0 = new FSTORE(2205);
      assertNotNull(fSTORE0);
      assertEquals(4, fSTORE0.getLength());
      assertEquals("fstore", fSTORE0.getName());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
      assertEquals((short)56, fSTORE0.getOpcode());
      assertEquals(2205, fSTORE0.getIndex());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(fSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = ObjectType.getInstance("Leaving a constructor that itself did not call a constructor.");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LLeaving a constructor that itself did not call a constructor/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Leaving a constructor that itself did not call a constructor.", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(129, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LLeaving a constructor that itself did not call a constructor/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Leaving a constructor that itself did not call a constructor.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(129, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(129);
      assertNotNull(localVariables0);
      assertEquals(129, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LLeaving a constructor that itself did not call a constructor/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Leaving a constructor that itself did not call a constructor.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(129, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(1, objectType0.getSize());
      assertEquals("LLeaving a constructor that itself did not call a constructor/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Leaving a constructor that itself did not call a constructor.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(129, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertEquals(129, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      int int0 = 72;
      OperandStack operandStack1 = new OperandStack(72);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(0, operandStack1.size());
      assertEquals(72, operandStack1.maxStack());
      assertEquals(0, operandStack1.slotsUsed());
      assertTrue(operandStack1.isEmpty());
      
      Frame frame1 = new Frame(localVariables1, operandStack1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertEquals(0, operandStack1.size());
      assertEquals(72, operandStack1.maxStack());
      assertEquals(0, operandStack1.slotsUsed());
      assertTrue(operandStack1.isEmpty());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ISHL iSHL0 = new ISHL();
      assertNotNull(iSHL0);
      assertEquals("ishl", iSHL0.getName());
      assertEquals(1, iSHL0.getLength());
      assertEquals((short)120, iSHL0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type 'Leaving a constructor that itself did not call a constructor.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(904);
      assertNotNull(localVariables0);
      assertEquals(904, localVariables0.maxLocals());
      
      ObjectType objectType0 = new ObjectType("k$ KM5K3j");
      assertNotNull(objectType0);
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      assertNotNull(operandStack0);
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      OperandStack operandStack1 = new OperandStack(904);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(0, operandStack1.size());
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(904, operandStack1.maxStack());
      
      Frame frame2 = new Frame(904, 904);
      assertFalse(frame2.equals((Object)frame0));
      assertFalse(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      
      LDIV lDIV0 = new LDIV();
      assertNotNull(lDIV0);
      assertEquals(1, lDIV0.getLength());
      assertEquals("ldiv", lDIV0.getName());
      assertEquals((short)109, lDIV0.getOpcode());
      
      LASTORE lASTORE0 = new LASTORE();
      assertNotNull(lASTORE0);
      assertEquals((short)80, lASTORE0.getOpcode());
      assertEquals(1, lASTORE0.getLength());
      assertEquals("lastore", lASTORE0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'k$ KM5K3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(886);
      assertNotNull(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = new ObjectType("k$ ~K!5KJ3");
      assertNotNull(objectType0);
      assertEquals("k$ ~K!5KJ3", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~K!5KJ3;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(886, objectType0);
      assertNotNull(operandStack0);
      assertEquals("k$ ~K!5KJ3", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~K!5KJ3;", objectType0.getSignature());
      assertEquals(886, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("k$ ~K!5KJ3", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~K!5KJ3;", objectType0.getSignature());
      assertEquals(886, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(886, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      operandStack0.push(objectType0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals("k$ ~K!5KJ3", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~K!5KJ3;", objectType0.getSignature());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertNotNull(frame0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("k$ ~K!5KJ3", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~K!5KJ3;", objectType0.getSignature());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      
      String string0 = Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      assertNotNull(string0);
      assertEquals("k$ ~K!5KJ3", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~K!5KJ3;", objectType0.getSignature());
      assertEquals("()Lk$ ~K!5KJ3;", string0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("k$ ~K!5KJ3", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~K!5KJ3;", objectType0.getSignature());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("k$ ~K!5KJ3", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~K!5KJ3;", objectType0.getSignature());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals(1, dDIV0.getLength());
      assertEquals("ddiv", dDIV0.getName());
      
      LOR lOR0 = new LOR();
      assertNotNull(lOR0);
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      
      LMUL lMUL0 = new LMUL();
      assertNotNull(lMUL0);
      assertEquals("lmul", lMUL0.getName());
      assertEquals(1, lMUL0.getLength());
      assertEquals((short)105, lMUL0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type 'k$ ~K!5KJ3'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals(1, dDIV0.getLength());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals((short)111, dDIV0.getOpcode());
      
      Frame frame2 = new Frame(localVariables1, (OperandStack) null);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE((IFNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = new ObjectType("r");
      assertNotNull(objectType0);
      assertEquals("r", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lr;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(521);
      assertNotNull(operandStack0);
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(521, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(521);
      assertNotNull(localVariables0);
      assertEquals(521, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables(521);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(521, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(521, operandStack0.maxStack());
      assertEquals(521, localVariables0.maxLocals());
      
      LocalVariables localVariables2 = new LocalVariables(521);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(521, localVariables2.maxLocals());
      
      OperandStack operandStack1 = new OperandStack(227, objectType0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("r", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lr;", objectType0.getSignature());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(227, operandStack1.maxStack());
      
      Frame frame1 = new Frame(localVariables2, operandStack1);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals("r", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(521, localVariables2.maxLocals());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(227, operandStack1.maxStack());
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals("r", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(521, localVariables2.maxLocals());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(227, operandStack1.maxStack());
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame1, frame0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertNotNull(dUP_X2_0);
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      Frame frame1 = (Frame)frame0.clone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      String string0 = frame0.toString();
      assertTrue(frame0.equals((Object)frame1));
      assertNotNull(string0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(frame0, frame1);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame2 = frame0.getClone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      AASTORE aASTORE0 = new AASTORE();
      assertNotNull(aASTORE0);
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertEquals((short)83, aASTORE0.getOpcode());
      
      String string1 = aASTORE0.toString(false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertEquals((short)83, aASTORE0.getOpcode());
      assertEquals("aastore", string1);
      
      boolean boolean1 = frame0.equals(aASTORE0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(boolean1 == boolean0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertEquals((short)83, aASTORE0.getOpcode());
      assertFalse(boolean1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)frame2));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      
      operandStack1.push(objectType0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(2, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      DRETURN dRETURN0 = new DRETURN();
      assertNotNull(dRETURN0);
      assertEquals(1, dRETURN0.getLength());
      assertEquals((short)175, dRETURN0.getOpcode());
      assertEquals("dreturn", dRETURN0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(853);
      assertNotNull(localVariables0);
      assertEquals(853, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("0I{n,/rXej^>3ym}&dZ");
      assertNotNull(objectType0);
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(853, localVariables0.maxLocals());
      assertEquals(853, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(173, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string0 = Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      assertNotNull(string0);
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals("()L0I{n,/rXej^>3ym}&dZ;", string0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(853, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(173, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string1 = frame0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(853, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(173, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(853, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(173, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      Frame frame2 = frame1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals(853, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(173, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(853, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(173, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      POP pOP0 = new POP();
      assertNotNull(pOP0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals("pop", pOP0.getName());
      assertEquals(1, pOP0.getLength());
      
      ISHR iSHR0 = new ISHR();
      assertNotNull(iSHR0);
      assertEquals("ishr", iSHR0.getName());
      assertEquals((short)122, iSHR0.getOpcode());
      assertEquals(1, iSHR0.getLength());
      
      IOR iOR0 = new IOR();
      assertNotNull(iOR0);
      assertEquals("ior", iOR0.getName());
      assertEquals(1, iOR0.getLength());
      assertEquals((short)128, iOR0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type '0I{n,.rXej^>3ym}&dZ'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      Frame frame1 = (Frame)frame0.clone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      String string0 = frame0.toString();
      assertTrue(frame0.equals((Object)frame1));
      assertNotNull(string0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, frame1);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertEquals(876, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      AASTORE aASTORE0 = new AASTORE();
      assertNotNull(aASTORE0);
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertEquals((short)83, aASTORE0.getOpcode());
      
      boolean boolean1 = frame0.equals(aASTORE0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(boolean1 == boolean0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertEquals((short)83, aASTORE0.getOpcode());
      assertFalse(boolean1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      operandStack1.push(objectType0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(2, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      IASTORE iASTORE0 = new IASTORE();
      assertNotNull(iASTORE0);
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(198);
      assertNotNull(localVariables0);
      assertEquals(198, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(198, localVariables0.maxLocals());
      assertEquals(198, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = new ObjectType("0I{n,/rXej^>3ym}&dZ");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(198, localVariables0.maxLocals());
      assertEquals(198, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      OperandStack operandStack0 = new OperandStack(1360, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1360, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1360, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1360, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(frame0);
      assertEquals(198, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1360, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(198, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1360, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      
      I2S i2S0 = new I2S();
      assertNotNull(i2S0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertEquals("i2s", i2S0.getName());
      
      L2I l2I0 = new L2I();
      assertNotNull(l2I0);
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      I2F i2F0 = new I2F();
      assertNotNull(i2F0);
      assertEquals(1, i2F0.getLength());
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals("i2f", i2F0.getName());
      
      LRETURN lRETURN0 = new LRETURN();
      assertNotNull(lRETURN0);
      assertEquals("lreturn", lRETURN0.getName());
      assertEquals((short)173, lRETURN0.getOpcode());
      assertEquals(1, lRETURN0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type '0I{n,.rXej^>3ym}&dZ'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(141);
      assertNotNull(localVariables0);
      assertEquals(141, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(141, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(141, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(141, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(141, operandStack0.maxStack());
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(141, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(141, operandStack0.maxStack());
      
      OperandStack operandStack1 = new OperandStack(141, objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(141, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      
      OperandStack operandStack2 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertNotNull(operandStack2);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(141, operandStack0.maxStack());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.size());
      assertEquals(141, operandStack2.maxStack());
      assertEquals(1, operandStack2.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      
      AASTORE aASTORE0 = new AASTORE();
      assertNotNull(aASTORE0);
      assertEquals("aastore", aASTORE0.getName());
      assertEquals((short)83, aASTORE0.getOpcode());
      assertEquals(1, aASTORE0.getLength());
      
      ILOAD iLOAD0 = new ILOAD(3565);
      assertNotNull(iLOAD0);
      assertEquals((short)21, iLOAD0.getOpcode());
      assertEquals("iload", iLOAD0.getName());
      assertEquals(3565, iLOAD0.getIndex());
      assertEquals(4, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      
      String string0 = frame0.toString();
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertNotNull(string0);
      assertEquals(141, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(141, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(frame0, frame1);
      
      String string1 = frame0.toString();
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(141, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(141, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(frame0, frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(141, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(141, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(frame0, frame1);
      
      ASTORE aSTORE0 = new ASTORE(136);
      assertNotNull(aSTORE0);
      assertEquals(136, aSTORE0.getIndex());
      assertEquals("astore", aSTORE0.getName());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(2, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getOpcode());
      
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals(136, aSTORE0.getIndex());
      assertEquals("astore", aSTORE0.getName());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(2, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getOpcode());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectType objectType1 = ObjectType.getInstance("If stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: '");
      assertFalse(objectType1.equals((Object)objectType0));
      assertNotNull(objectType1);
      assertEquals(1, objectType1.getSize());
      assertEquals("LIf stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: ';", objectType1.getSignature());
      assertEquals("If stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: '", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertNotSame(objectType1, objectType0);
      
      OperandStack operandStack3 = new OperandStack(141, objectType0);
      assertTrue(operandStack3.equals((Object)operandStack1));
      assertTrue(operandStack3.equals((Object)operandStack0));
      assertTrue(operandStack3.equals((Object)operandStack2));
      assertFalse(objectType0.equals((Object)objectType1));
      assertNotNull(operandStack3);
      assertEquals(1, operandStack3.size());
      assertFalse(operandStack3.isEmpty());
      assertEquals(1, operandStack3.slotsUsed());
      assertEquals(141, operandStack3.maxStack());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      DREM dREM0 = new DREM();
      assertNotNull(dREM0);
      assertEquals((short)115, dREM0.getOpcode());
      assertEquals(1, dREM0.getLength());
      assertEquals("drem", dREM0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type 'k$ ~KM5KJ3j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(886);
      assertNotNull(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = new ObjectType("Ljava/lang/Throwable;");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(886, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(886, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      OperandStack operandStack2 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertNotNull(operandStack2);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack2.slotsUsed());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.size());
      assertEquals(886, operandStack2.maxStack());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertNotNull(frame0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      String string0 = localVariables0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(string0);
      assertEquals(886, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Ljava/lang/Throwable;");
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      instructionList0.iterator();
      instructionList0.copy();
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'Ljava.lang.Throwable'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(886);
      assertNotNull(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = new ObjectType("Ljava/lang/Throwable;");
      assertNotNull(objectType0);
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(886, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(886, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(frame0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      
      String string0 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(string0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Ljava/lang/Throwable;");
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertNotNull(constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(654, (short)6029);
      assertNotNull(mULTIANEWARRAY0);
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(654, mULTIANEWARRAY0.getIndex());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)6029, mULTIANEWARRAY0.getDimensions());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      
      Frame frame1 = new Frame(3200, 1041);
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      Frame frame2 = (Frame)frame0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertFalse(frame0.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT((IFLT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType("");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(129, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(129);
      assertNotNull(localVariables0);
      assertEquals(129, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(129, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(129, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      RETURN rETURN0 = new RETURN();
      assertNotNull(rETURN0);
      assertEquals(1, rETURN0.getLength());
      assertEquals("return", rETURN0.getName());
      assertEquals((short)177, rETURN0.getOpcode());
      
      POP pOP0 = new POP();
      assertNotNull(pOP0);
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      
      ISHR iSHR0 = new ISHR();
      assertNotNull(iSHR0);
      assertEquals(1, iSHR0.getLength());
      assertEquals("ishr", iSHR0.getName());
      assertEquals((short)122, iSHR0.getOpcode());
      
      RETURN rETURN1 = new RETURN();
      assertTrue(rETURN1.equals((Object)rETURN0));
      assertNotNull(rETURN1);
      assertEquals("return", rETURN1.getName());
      assertEquals((short)177, rETURN1.getOpcode());
      assertEquals(1, rETURN1.getLength());
      
      FREM fREM0 = new FREM();
      assertNotNull(fREM0);
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      assertEquals((short)114, fREM0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(158, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(158, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(158);
      assertNotNull(localVariables0);
      assertEquals(158, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(158, localVariables0.maxLocals());
      assertEquals(158, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(158, operandStack0.maxStack());
      assertEquals(158, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(158, operandStack0.maxStack());
      assertEquals(158, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(158, localVariables0.maxLocals());
      assertEquals(158, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(158, operandStack0.maxStack());
      assertEquals(158, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame2 = new Frame(158, 158);
      assertFalse(frame2.equals((Object)frame1));
      assertFalse(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      
      Frame frame3 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      assertFalse(frame0.equals((Object)frame2));
      assertFalse(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame1));
      assertNotNull(frame3);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(158, operandStack0.maxStack());
      assertEquals(158, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame3);
      assertNotSame(frame0, frame2);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, frame0);
      
      IMUL iMUL0 = new IMUL();
      assertNotNull(iMUL0);
      assertEquals(1, iMUL0.getLength());
      assertEquals("imul", iMUL0.getName());
      assertEquals((short)104, iMUL0.getOpcode());
      
      OperandStack operandStack1 = new OperandStack(158, uninitializedObjectType0.OBJECT);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(158, operandStack1.maxStack());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      LUSHR lUSHR0 = new LUSHR();
      assertNotNull(lUSHR0);
      assertEquals("lushr", lUSHR0.getName());
      assertEquals((short)125, lUSHR0.getOpcode());
      assertEquals(1, lUSHR0.getLength());
      
      Instruction instruction0 = lUSHR0.copy();
      assertNotNull(instruction0);
      assertEquals("lushr", lUSHR0.getName());
      assertEquals((short)125, lUSHR0.getOpcode());
      assertEquals(1, lUSHR0.getLength());
      assertEquals("lushr", instruction0.getName());
      assertEquals((short)125, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertSame(lUSHR0, instruction0);
      assertSame(instruction0, lUSHR0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      IXOR iXOR0 = new IXOR();
      assertNotNull(iXOR0);
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      
      int int0 = iXOR0.produceStack(constantPoolGen0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = ObjectType.getInstance("4AA;8AfVio_P>sH1HZ");
      assertNotNull(objectType0);
      assertEquals("4AA;8AfVio_P>sH1HZ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L4AA;8AfVio_P>sH1HZ;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(214, objectType0);
      assertNotNull(operandStack0);
      assertEquals("4AA;8AfVio_P>sH1HZ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L4AA;8AfVio_P>sH1HZ;", objectType0.getSignature());
      assertEquals(214, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(214);
      assertNotNull(localVariables0);
      assertEquals(214, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(214, localVariables0.maxLocals());
      assertEquals(214, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("4AA;8AfVio_P>sH1HZ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L4AA;8AfVio_P>sH1HZ;", objectType0.getSignature());
      assertEquals(214, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(214, localVariables0.maxLocals());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("4AA;8AfVio_P>sH1HZ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L4AA;8AfVio_P>sH1HZ;", objectType0.getSignature());
      assertEquals(214, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(214, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame1 = new Frame(localVariables0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals("4AA;8AfVio_P>sH1HZ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L4AA;8AfVio_P>sH1HZ;", objectType0.getSignature());
      assertEquals(214, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(214, localVariables0.maxLocals());
      assertEquals(214, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      
      Frame frame2 = new Frame(localVariables0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals("4AA;8AfVio_P>sH1HZ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L4AA;8AfVio_P>sH1HZ;", objectType0.getSignature());
      assertEquals(214, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(214, localVariables0.maxLocals());
      assertEquals(214, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Frame frame3 = frame0.getClone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame1));
      assertNotNull(frame3);
      assertEquals("4AA;8AfVio_P>sH1HZ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L4AA;8AfVio_P>sH1HZ;", objectType0.getSignature());
      assertEquals(214, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(214, localVariables0.maxLocals());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame3);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, frame0);
      
      Object object0 = frame0.clone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame3));
      assertTrue(object0.equals((Object)frame1));
      assertTrue(object0.equals((Object)frame0));
      assertTrue(object0.equals((Object)frame3));
      assertTrue(object0.equals((Object)frame2));
      assertNotNull(object0);
      assertEquals("4AA;8AfVio_P>sH1HZ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L4AA;8AfVio_P>sH1HZ;", objectType0.getSignature());
      assertEquals(214, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(214, localVariables0.maxLocals());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, object0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame3);
      assertNotSame(object0, frame0);
      assertNotSame(object0, frame3);
      assertNotSame(object0, frame2);
      assertNotSame(object0, frame1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)object0));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame3));
      assertEquals("4AA;8AfVio_P>sH1HZ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L4AA;8AfVio_P>sH1HZ;", objectType0.getSignature());
      assertEquals(214, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(214, localVariables0.maxLocals());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, object0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame3);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      
      I2D i2D0 = new I2D();
      assertNotNull(i2D0);
      assertEquals("i2d", i2D0.getName());
      assertEquals(1, i2D0.getLength());
      assertEquals((short)135, i2D0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type '4AA'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables(876);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(876, localVariables1.maxLocals());
      
      ObjectType objectType0 = new ObjectType("0I{n,/rXej^>3ym}&dZ");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(281, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(281, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(876, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(281, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Object object0 = frame0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(object0.equals((Object)frame0));
      assertNotNull(object0);
      assertEquals(876, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(281, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      
      Frame frame1 = new Frame(281, 281);
      assertFalse(frame1.equals((Object)object0));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      
      Boolean boolean0 = new Boolean("0I{n,/rXej^>3ym}&dZ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertFalse(frame0.equals((Object)frame1));
      assertEquals(876, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(281, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, object0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      
      LocalVariables localVariables3 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      
      String string0 = frame1.toString();
      assertFalse(frame1.equals((Object)object0));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(string0);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, frame0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      int int0 = Float.MAX_EXPONENT;
      assertEquals(127, int0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ((IF_ICMPEQ) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType("");
      assertNotNull(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType1 = ObjectType.getInstance("");
      assertTrue(objectType1.equals((Object)objectType0));
      assertNotNull(objectType1);
      assertEquals("L;", objectType1.getSignature());
      assertEquals("", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertNotSame(objectType1, objectType0);
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertNotNull(operandStack0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(229);
      assertNotNull(localVariables0);
      assertEquals(229, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables1.maxLocals());
      
      String string0 = frame0.toString();
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(string0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables1.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables1.maxLocals());
      assertEquals(229, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables1.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      LocalVariables localVariables3 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables3);
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables1.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(frame0, frame1);
      
      ObjectType objectType2 = ObjectType.getInstance("");
      assertTrue(objectType2.equals((Object)objectType0));
      assertTrue(objectType2.equals((Object)objectType1));
      assertNotNull(objectType2);
      assertEquals("", objectType2.getClassName());
      assertEquals((byte)14, objectType2.getType());
      assertEquals("L;", objectType2.getSignature());
      assertEquals(1, objectType2.getSize());
      assertNotSame(objectType2, objectType1);
      assertNotSame(objectType2, objectType0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, string0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables1.maxLocals());
      assertFalse(boolean0);
      assertNotSame(objectType0, objectType2);
      assertNotSame(objectType0, objectType1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(frame0, frame1);
      
      ObjectType objectType3 = ObjectType.getInstance(string0);
      assertFalse(objectType3.equals((Object)objectType2));
      assertFalse(objectType3.equals((Object)objectType1));
      assertFalse(objectType3.equals((Object)objectType0));
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(objectType0.equals((Object)objectType2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame1));
      assertNotNull(objectType3);
      assertEquals(1, objectType3.getSize());
      assertEquals((byte)14, objectType3.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(229, localVariables0.maxLocals());
      assertEquals(229, localVariables1.maxLocals());
      assertNotSame(objectType3, objectType2);
      assertNotSame(objectType3, objectType1);
      assertNotSame(objectType3, objectType0);
      assertNotSame(objectType0, objectType2);
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType0, objectType3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(frame0, frame1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      String string1 = pUSH0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("iconst_1[4](1) (PUSH)", string1);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotNull(instructionHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotSame(instructionList0, instructionList1);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotNull(iF_ICMPNE0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPNE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(886);
      assertNotNull(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = new ObjectType("Ljava/lang/Thowable;");
      assertNotNull(objectType0);
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(886, objectType0);
      assertNotNull(operandStack0);
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      String string0 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(string0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Ljava/lang/Thowable;");
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertNotNull(constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      
      Frame frame1 = new Frame(654, 654);
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertNotNull(mONITORENTER0);
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      
      String string1 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(frame0.equals((Object)frame1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, true);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(frame0.equals((Object)frame1));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(mockFileOutputStream0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("Ljava.lang.Thowable;", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Thowable;;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      FNEG fNEG0 = new FNEG();
      assertNotNull(fNEG0);
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'Ljava.lang.Thowable'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(886);
      assertNotNull(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = new ObjectType("Ljava/lang/Throwable;");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(886, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertEquals(886, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      boolean boolean0 = objectType0.isCastableTo((Type) null);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertFalse(boolean0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(frame0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string0 = frame0.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(string0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LLjava/lang/Throwable;;", objectType0.getSignature());
      assertEquals("Ljava.lang.Throwable;", objectType0.getClassName());
      assertEquals(886, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      
      DASTORE dASTORE0 = new DASTORE();
      assertNotNull(dASTORE0);
      assertEquals(1, dASTORE0.getLength());
      assertEquals((short)82, dASTORE0.getOpcode());
      assertEquals("dastore", dASTORE0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type 'Ljava.lang.Throwable'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("X]2");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      Frame frame2 = frame0.getClone();
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      ObjectType objectType1 = new ObjectType(":");
      assertFalse(objectType1.equals((Object)objectType0));
      assertNotNull(objectType1);
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals(":", objectType1.getClassName());
      assertEquals("L:;", objectType1.getSignature());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      LSTORE lSTORE0 = new LSTORE(876);
      assertNotNull(lSTORE0);
      assertEquals(876, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(4, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      
      String string1 = lSTORE0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(876, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(4, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals("lstore[55](4) 876", string1);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertNotNull(mONITOREXIT0);
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals("monitorexit", mONITOREXIT0.getName());
      
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals("monitorexit", mONITOREXIT0.getName());
      
      SWAP sWAP0 = new SWAP();
      assertNotNull(sWAP0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      IASTORE iASTORE0 = new IASTORE();
      assertNotNull(iASTORE0);
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      String string0 = frame0.toString();
      assertNotNull(string0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      
      boolean boolean0 = frame0.equals(objectType0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertFalse(boolean0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(string0);
      assertTrue(frame0.equals((Object)frame1));
      assertNotNull(constantUtf8_0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(876, operandStack0.maxStack());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertNotNull(mONITOREXIT0);
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      
      LREM lREM0 = new LREM();
      assertNotNull(lREM0);
      assertEquals("lrem", lREM0.getName());
      assertEquals((short)113, lREM0.getOpcode());
      assertEquals(1, lREM0.getLength());
      
      IADD iADD0 = new IADD();
      assertNotNull(iADD0);
      assertEquals((short)96, iADD0.getOpcode());
      assertEquals(1, iADD0.getLength());
      assertEquals("iadd", iADD0.getName());
      
      ISHR iSHR0 = new ISHR();
      assertNotNull(iSHR0);
      assertEquals("ishr", iSHR0.getName());
      assertEquals((short)122, iSHR0.getOpcode());
      assertEquals(1, iSHR0.getLength());
      
      CHECKCAST cHECKCAST0 = new CHECKCAST(876);
      assertNotNull(cHECKCAST0);
      assertEquals((short)192, cHECKCAST0.getOpcode());
      assertEquals(3, cHECKCAST0.getLength());
      assertEquals(876, cHECKCAST0.getIndex());
      assertEquals("checkcast", cHECKCAST0.getName());
      
      D2L d2L0 = new D2L();
      assertNotNull(d2L0);
      assertEquals("d2l", d2L0.getName());
      assertEquals(1, d2L0.getLength());
      assertEquals((short)143, d2L0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE((IF_ICMPGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DREM dREM0 = new DREM();
      assertNotNull(dREM0);
      assertEquals(1, dREM0.getLength());
      assertEquals("drem", dREM0.getName());
      assertEquals((short)115, dREM0.getOpcode());
      
      SWAP sWAP0 = new SWAP();
      assertNotNull(sWAP0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectType objectType0 = new ObjectType("Leaving a constructor that itself did not call a constructor.");
      assertNotNull(objectType0);
      assertEquals("Leaving a constructor that itself did not call a constructor.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LLeaving a constructor that itself did not call a constructor/;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(70, objectType0);
      assertNotNull(operandStack0);
      assertEquals("Leaving a constructor that itself did not call a constructor.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LLeaving a constructor that itself did not call a constructor/;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(70, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables((byte)115);
      assertNotNull(localVariables0);
      assertEquals(115, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(115, localVariables0.maxLocals());
      assertEquals(115, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("Leaving a constructor that itself did not call a constructor.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LLeaving a constructor that itself did not call a constructor/;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(70, operandStack0.maxStack());
      assertEquals(115, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals("Leaving a constructor that itself did not call a constructor.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LLeaving a constructor that itself did not call a constructor/;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(70, operandStack0.maxStack());
      assertEquals(115, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertNotNull(constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      
      int int0 = constantPoolGen1.addDouble(0.0);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertEquals(3, constantPoolGen1.getSize());
      assertEquals(1, int0);
      assertNotSame(constantPoolGen1, constantPoolGen0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Leaving a constructor that itself did not call a constructor.");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("Leaving a constructor that itself did not call a constructor.", constantUtf8_0.getBytes());
      
      Character character0 = new Character('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      String string0 = constantPoolGen1.toString();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertNotNull(string0);
      assertEquals(3, constantPoolGen1.getSize());
      assertEquals("1)CONSTANT_Double[6](bytes = 0.0)\n2)null\n", string0);
      assertNotSame(constantPoolGen1, constantPoolGen0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      FCMPG fCMPG0 = new FCMPG();
      assertNotNull(fCMPG0);
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals(1, fCMPG0.getLength());
      assertEquals((short)150, fCMPG0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'Leaving a constructor that itself did not call a constructor.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[3] = (byte)112;
      byteArray0[11] = (byte)112;
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2192, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(2192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(2192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      localVariables0.set(535, objectType0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      
      String string0 = frame0.toString();
      assertNotNull(string0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(2192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(2192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      FRETURN fRETURN0 = new FRETURN();
      assertNotNull(fRETURN0);
      assertEquals((short)174, fRETURN0.getOpcode());
      assertEquals("freturn", fRETURN0.getName());
      assertEquals(1, fRETURN0.getLength());
      
      Instruction instruction0 = fRETURN0.copy();
      assertNotNull(instruction0);
      assertEquals((short)174, fRETURN0.getOpcode());
      assertEquals("freturn", fRETURN0.getName());
      assertEquals(1, fRETURN0.getLength());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)174, instruction0.getOpcode());
      assertEquals("freturn", instruction0.getName());
      assertSame(fRETURN0, instruction0);
      assertSame(instruction0, fRETURN0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals(2192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      D2L d2L0 = new D2L();
      assertNotNull(d2L0);
      assertEquals(1, d2L0.getLength());
      assertEquals("d2l", d2L0.getName());
      assertEquals((short)143, d2L0.getOpcode());
      
      String string1 = d2L0.toString(false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, d2L0.getLength());
      assertEquals("d2l", d2L0.getName());
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals("d2l", string1);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertNotNull(mONITOREXIT0);
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      InstructionHandle instructionHandle0 = null;
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      assertNotNull(iF_ICMPLE0);
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      
      I2L i2L0 = new I2L();
      assertNotNull(i2L0);
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals("i2l", i2L0.getName());
      assertEquals(1, i2L0.getLength());
      
      I2L i2L1 = new I2L();
      assertTrue(i2L1.equals((Object)i2L0));
      assertNotNull(i2L1);
      assertEquals((short)133, i2L1.getOpcode());
      assertEquals("i2l", i2L1.getName());
      assertEquals(1, i2L1.getLength());
      
      I2L i2L2 = new I2L();
      assertTrue(i2L2.equals((Object)i2L1));
      assertTrue(i2L2.equals((Object)i2L0));
      assertNotNull(i2L2);
      assertEquals(1, i2L2.getLength());
      assertEquals("i2l", i2L2.getName());
      assertEquals((short)133, i2L2.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ((IF_ACMPEQ) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(858);
      assertNotNull(localVariables0);
      assertEquals(858, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = ObjectType.getInstance("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      
      POP pOP0 = new POP();
      assertNotNull(pOP0);
      assertEquals("pop", pOP0.getName());
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = new ObjectType("r");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(521);
      assertNotNull(operandStack0);
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(521, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(521);
      assertNotNull(localVariables0);
      assertEquals(521, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables(521);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(521, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(521, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(521, localVariables0.maxLocals());
      
      LocalVariables localVariables2 = new LocalVariables(521);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(521, localVariables2.maxLocals());
      
      OperandStack operandStack1 = new OperandStack(227, objectType0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(227, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      
      Frame frame1 = new Frame(localVariables2, operandStack1);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(521, localVariables2.maxLocals());
      assertEquals(227, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(521, localVariables2.maxLocals());
      assertEquals(227, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame1, frame0);
      
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "r");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      IINC iINC0 = new IINC(97, 521);
      assertNotNull(iINC0);
      assertEquals(6, iINC0.getLength());
      assertEquals(97, iINC0.getIndex());
      assertEquals(521, iINC0.getIncrement());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc", iINC0.getName());
      
      LSHL lSHL0 = new LSHL();
      assertNotNull(lSHL0);
      assertEquals(1, lSHL0.getLength());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      
      String string0 = lSHL0.toString();
      assertNotNull(string0);
      assertEquals(1, lSHL0.getLength());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals("lshl[121](1)", string0);
      
      LSHL lSHL1 = new LSHL();
      assertTrue(lSHL1.equals((Object)lSHL0));
      assertNotNull(lSHL1);
      assertEquals((short)121, lSHL1.getOpcode());
      assertEquals("lshl", lSHL1.getName());
      assertEquals(1, lSHL1.getLength());
      
      String string1 = lSHL1.toString();
      assertTrue(lSHL1.equals((Object)lSHL0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((short)121, lSHL1.getOpcode());
      assertEquals("lshl", lSHL1.getName());
      assertEquals(1, lSHL1.getLength());
      assertEquals("lshl[121](1)", string1);
      assertNotSame(lSHL1, lSHL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'r'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(886);
      assertNotNull(localVariables0);
      assertEquals(886, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals(886, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertNotNull(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(886, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(886, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(886, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(886, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(frame0);
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(886, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(886, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(886, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      assertNotNull(iLOAD0);
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)26, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_0", iLOAD0.getName());
      assertEquals(0, iLOAD0.getIndex());
      
      instConstraintVisitor0.visitLocalVariableInstruction(iLOAD0);
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)26, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_0", iLOAD0.getName());
      assertEquals(0, iLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava/lang/Throwable;");
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = new LocalVariables(876);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(876, localVariables1.maxLocals());
      
      ObjectType objectType0 = new ObjectType("k$ ~KM5KJ3j");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(876, localVariables1.maxLocals());
      assertEquals(876, localVariables2.maxLocals());
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(876, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(876, localVariables2.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(876, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ ~KM5KJ3j", objectType0.getClassName());
      assertEquals("Lk$ ~KM5KJ3j;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(876, localVariables2.maxLocals());
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertNotNull(mONITOREXIT0);
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      
      ISHR iSHR0 = new ISHR();
      assertNotNull(iSHR0);
      assertEquals("ishr", iSHR0.getName());
      assertEquals((short)122, iSHR0.getOpcode());
      assertEquals(1, iSHR0.getLength());
      
      FCMPG fCMPG0 = new FCMPG();
      assertNotNull(fCMPG0);
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals(1, fCMPG0.getLength());
      assertEquals((short)150, fCMPG0.getOpcode());
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      assertNotNull(iLOAD0);
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(0, iLOAD0.getIndex());
      assertEquals((short)26, iLOAD0.getOpcode());
      assertEquals("iload_0", iLOAD0.getName());
      
      IINC iINC0 = new IINC(1897, 876);
      assertNotNull(iINC0);
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(6, iINC0.getLength());
      assertEquals("iinc", iINC0.getName());
      assertEquals(1897, iINC0.getIndex());
      assertEquals(876, iINC0.getIncrement());
      assertEquals((short)132, iINC0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = new ObjectType("X]2");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      ObjectType objectType1 = new ObjectType(":");
      assertFalse(objectType1.equals((Object)objectType0));
      assertNotNull(objectType1);
      assertEquals("L:;", objectType1.getSignature());
      assertEquals(1, objectType1.getSize());
      assertEquals(":", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      
      OperandStack operandStack1 = new OperandStack(876, objectType0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      
      OperandStack operandStack2 = (OperandStack)operandStack1.clone();
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertNotNull(operandStack2);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(876, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(operandStack1, operandStack2);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      
      Frame frame2 = new Frame(localVariables0, operandStack1);
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(operandStack1.equals((Object)operandStack2));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(876, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      
      String string1 = frame1.toString();
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LX]2;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("X]2", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      
      FCMPL fCMPL0 = new FCMPL();
      assertNotNull(fCMPL0);
      assertEquals("fcmpl", fCMPL0.getName());
      assertEquals((short)149, fCMPL0.getOpcode());
      assertEquals(1, fCMPL0.getLength());
      
      I2F i2F0 = new I2F();
      assertNotNull(i2F0);
      assertEquals(1, i2F0.getLength());
      assertEquals("i2f", i2F0.getName());
      assertEquals((short)134, i2F0.getOpcode());
      
      LRETURN lRETURN0 = new LRETURN();
      assertNotNull(lRETURN0);
      assertEquals((short)173, lRETURN0.getOpcode());
      assertEquals(1, lRETURN0.getLength());
      assertEquals("lreturn", lRETURN0.getName());
      
      instConstraintVisitor0.visitIFNULL((IFNULL) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE((IFLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(904);
      assertNotNull(localVariables0);
      assertEquals(904, localVariables0.maxLocals());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = new ObjectType("k$ KM5K3j");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(904, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(904, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      
      String string0 = frame0.toString();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(string0);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      
      Frame frame1 = frame0.getClone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(904, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(904, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("k$ KM5K3j", objectType0.getClassName());
      assertEquals("Lk$ KM5K3j;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(904, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      assertNotNull(aRRAYLENGTH0);
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals(1, aRRAYLENGTH0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type k$ KM5K3j.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals(876, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("0I{n,/rXej^>3ym}&dZ");
      assertNotNull(objectType0);
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(661, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(661, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      String string0 = Character.getName(876);
      assertNotNull(string0);
      assertEquals("COMBINING LATIN SMALL LETTER R", string0);
      
      OperandStack operandStack1 = new OperandStack(661, objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(661, operandStack1.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(661, operandStack1.maxStack());
      
      Frame frame1 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(661, operandStack1.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame2 = new Frame(661, 661);
      assertFalse(frame2.equals((Object)frame0));
      assertFalse(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame0.equals((Object)frame1));
      assertFalse(frame0.equals((Object)frame2));
      assertFalse(frame1.equals((Object)frame2));
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("L0I{n,/rXej^>3ym}&dZ;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("0I{n,.rXej^>3ym}&dZ", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(661, operandStack1.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      
      ALOAD aLOAD0 = new ALOAD(661);
      assertNotNull(aLOAD0);
      assertEquals(661, aLOAD0.getIndex());
      assertEquals("aload", aLOAD0.getName());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals((short)25, aLOAD0.getOpcode());
      assertEquals(4, aLOAD0.getLength());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      int int0 = Character.MAX_CODE_POINT;
      assertEquals(1114111, int0);
      
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      assertNotNull(instructionList0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(661, aLOAD0.getIndex());
      assertEquals("aload", aLOAD0.getName());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals((short)25, aLOAD0.getOpcode());
      assertEquals(4, aLOAD0.getLength());
      
      String string1 = instructionList0.toString(false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(661, aLOAD0.getIndex());
      assertEquals("aload", aLOAD0.getName());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals((short)25, aLOAD0.getOpcode());
      assertEquals(4, aLOAD0.getLength());
      assertEquals("  -1: aload 661\n", string1);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      
      InstructionHandle instructionHandle0 = instructionList1.insert(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionHandle0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(661, aLOAD0.getIndex());
      assertEquals("aload", aLOAD0.getName());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals((short)25, aLOAD0.getOpcode());
      assertEquals(4, aLOAD0.getLength());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      short short0 = Constants.ALOAD_0;
      assertEquals((short)42, short0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) (short)42);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(iFGT0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(3, iFGT0.getLength());
      assertEquals("ifgt", iFGT0.getName());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(661, aLOAD0.getIndex());
      assertEquals("aload", aLOAD0.getName());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals((short)25, aLOAD0.getOpcode());
      assertEquals(4, aLOAD0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type '0I{n,.rXej^>3ym}&dZ'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      PUTFIELD pUTFIELD0 = new PUTFIELD(521);
      assertNotNull(pUTFIELD0);
      assertEquals("putfield", pUTFIELD0.getName());
      assertEquals(3, pUTFIELD0.getLength());
      assertEquals(521, pUTFIELD0.getIndex());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      
      ObjectType objectType0 = ObjectType.getInstance("r");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2350, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2350, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(32);
      assertNotNull(localVariables0);
      assertEquals(32, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2350, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(32, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2350, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(32, localVariables0.maxLocals());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertNotNull(constantPool0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(256, constantPool0.getLength());
      
      int int0 = constantPoolGen0.addDouble(521);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
      
      Character character0 = new Character('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      String string0 = frame0.toString();
      assertNotNull(string0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2350, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(32, localVariables0.maxLocals());
      assertEquals("Local Variables:\n0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n15: <unknown object>\n16: <unknown object>\n17: <unknown object>\n18: <unknown object>\n19: <unknown object>\n20: <unknown object>\n21: <unknown object>\n22: <unknown object>\n23: <unknown object>\n24: <unknown object>\n25: <unknown object>\n26: <unknown object>\n27: <unknown object>\n28: <unknown object>\n29: <unknown object>\n30: <unknown object>\n31: <unknown object>\nOperandStack:\nSlots used: 1 MaxStack: 2350.\nr (Size: 1)\n", string0);
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertEquals(2350, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertNotNull(mONITORENTER0);
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals(1, mONITORENTER0.getLength());
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("r", objectType0.getClassName());
      assertEquals("Lr;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertEquals(2350, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(32, localVariables0.maxLocals());
      
      DUP dUP0 = new DUP();
      assertNotNull(dUP0);
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      
      DUP2 dUP2_0 = new DUP2();
      assertNotNull(dUP2_0);
      assertEquals((short)92, dUP2_0.getOpcode());
      assertEquals(1, dUP2_0.getLength());
      assertEquals("dup2", dUP2_0.getName());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r");
      assertFalse(boolean0);
      
      instConstraintVisitor0.visitDUP2(dUP2_0);
      assertEquals((short)92, dUP2_0.getOpcode());
      assertEquals(1, dUP2_0.getLength());
      assertEquals("dup2", dUP2_0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D((F2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.visitGOTO((GOTO) null);
      DDIV dDIV0 = new DDIV();
      assertNotNull(dDIV0);
      assertEquals(1, dDIV0.getLength());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals((short)111, dDIV0.getOpcode());
      
      LocalVariables localVariables0 = new LocalVariables(1721);
      assertNotNull(localVariables0);
      assertEquals(1721, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1721, localVariables0.maxLocals());
      assertEquals(1721, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      OperandStack operandStack0 = new OperandStack(119);
      assertNotNull(operandStack0);
      assertTrue(operandStack0.isEmpty());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(1721, localVariables0.maxLocals());
      assertEquals(1721, localVariables1.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Frame frame1 = null;
      try {
        frame1 = new Frame((-127), (-127));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(129, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(129);
      assertNotNull(localVariables0);
      assertEquals(129, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(129, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(129, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertEquals(129, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      Frame frame1 = (Frame)frame0.clone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(129, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Frame frame2 = frame0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertNotNull(frame2);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(129, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame3 = frame1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame0));
      assertNotNull(frame3);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(129, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame3);
      assertNotSame(frame1, frame3);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame2);
      
      Frame frame4 = new Frame(129, 129);
      assertFalse(frame4.equals((Object)frame2));
      assertFalse(frame4.equals((Object)frame0));
      assertFalse(frame4.equals((Object)frame3));
      assertFalse(frame4.equals((Object)frame1));
      assertNotNull(frame4);
      
      IMUL iMUL0 = new IMUL();
      assertNotNull(iMUL0);
      assertEquals("imul", iMUL0.getName());
      assertEquals(1, iMUL0.getLength());
      assertEquals((short)104, iMUL0.getOpcode());
      
      OperandStack operandStack1 = new OperandStack(129, uninitializedObjectType0.OBJECT);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertFalse(operandStack1.isEmpty());
      assertEquals(129, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      LUSHR lUSHR0 = new LUSHR();
      assertNotNull(lUSHR0);
      assertEquals(1, lUSHR0.getLength());
      assertEquals("lushr", lUSHR0.getName());
      assertEquals((short)125, lUSHR0.getOpcode());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      NOP nOP0 = new NOP();
      assertNotNull(nOP0);
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
      
      String string0 = nOP0.toString(constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
      assertEquals("nop", string0);
      assertNotSame(constantPool0, constantPool1);
      
      String string1 = nOP0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
      assertEquals("nop[0](1)", string1);
      
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
      
      LUSHR lUSHR1 = new LUSHR();
      assertTrue(lUSHR1.equals((Object)lUSHR0));
      assertNotNull(lUSHR1);
      assertEquals(1, lUSHR1.getLength());
      assertEquals((short)125, lUSHR1.getOpcode());
      assertEquals("lushr", lUSHR1.getName());
      
      ASTORE aSTORE0 = new ASTORE(129);
      assertNotNull(aSTORE0);
      assertEquals("astore", aSTORE0.getName());
      assertEquals(2, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(129, aSTORE0.getIndex());
      
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals("astore", aSTORE0.getName());
      assertEquals(2, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(129, aSTORE0.getIndex());
      
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      assertEquals("astore", aSTORE0.getName());
      assertEquals(2, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(129, aSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 129;
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(129, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(129);
      assertNotNull(localVariables0);
      assertEquals(129, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(129, localVariables0.maxLocals());
      assertEquals(129, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(129, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(129, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(129, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      DREM dREM0 = new DREM();
      assertNotNull(dREM0);
      assertEquals((short)115, dREM0.getOpcode());
      assertEquals("drem", dREM0.getName());
      assertEquals(1, dREM0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOOKUPSWITCH((LOOKUPSWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(876);
      assertNotNull(localVariables0);
      assertEquals(876, localVariables0.maxLocals());
      
      ObjectType objectType0 = ObjectType.getInstance("bool,ean");
      assertNotNull(objectType0);
      assertEquals("bool,ean", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lbool,ean;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(876, objectType0);
      assertNotNull(operandStack0);
      assertEquals("bool,ean", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lbool,ean;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("bool,ean", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lbool,ean;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(876, localVariables0.maxLocals());
      assertEquals("bool,ean", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lbool,ean;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      operandStack0.push(objectType0);
      assertEquals("bool,ean", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lbool,ean;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(876, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertNotNull(mONITORENTER0);
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      
      I2B i2B0 = new I2B();
      assertNotNull(i2B0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      
      L2D l2D0 = new L2D();
      assertNotNull(l2D0);
      assertEquals((short)138, l2D0.getOpcode());
      assertEquals("l2d", l2D0.getName());
      assertEquals(1, l2D0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertNotNull(instructionList0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      assertNotNull(iF_ACMPNE0);
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      
      String string0 = iF_ACMPNE0.toString();
      assertNotNull(string0);
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals("if_acmpne[166](3) -> null", string0);
      
      instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      
      D2I d2I0 = new D2I();
      assertNotNull(d2I0);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals("d2i", d2I0.getName());
      assertEquals(1, d2I0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type 'bool,ean'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
