/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:52:49 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseMotionListener;
import java.beans.EventSetDescriptor;
import java.beans.beancontext.BeanContext;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Enumeration;
import java.util.Locale;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JApplet;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JRootPane;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.Apriori;
import weka.attributeSelection.PrincipalComponents;
import weka.core.Capabilities;
import weka.core.EuclideanDistance;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.C45Saver;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetListener;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      filter0.addMouseMotionListener(defaultCaret0);
      filter0.setCustomName("");
      Add add0 = new Add();
      filter0.setFilter(add0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource((String) null, "weka/gui/beans/icons/", ".gif");
      databaseLoader0.getDataSet();
      TestSetEvent testSetEvent0 = null;
      try {
        testSetEvent0 = new TestSetEvent((Object) null, (Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      InstanceEvent instanceEvent0 = new InstanceEvent("AllFilter");
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      filter0.paintImmediately(1792, 0, 1792, 1792);
      crossValidationFoldMaker0.removeMouseMotionListener((MouseMotionListener) null);
      crossValidationFoldMaker0.firePropertyChange("", false, false);
      filter0.removeTestSetListener(crossValidationFoldMaker0);
      filter0.removeTestSetListener(crossValidationFoldMaker0);
      Enumeration enumeration0 = filter0.enumerateRequests();
      filter0.connectionNotification("weka/gui/beans/icons/DefaultFilter_animated.gif", enumeration0);
      filter0.addInstanceListener((InstanceListener) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.addNotify();
      filter0.disconnectionNotification("", substringLabeler0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      BeanVisual beanVisual0 = instanceStreamToBatchMaker0.getVisual();
      filter0.setVisual(beanVisual0);
      filter0.isBusy();
      filter0.removeTestSetListener(substringLabeler0);
      filter0.setVisual(beanVisual0);
      filter0.removeInstanceListener(instanceStreamToBatchMaker0);
      filter0.globalInfo();
      ImageSaver imageSaver0 = new ImageSaver();
      InstanceEvent instanceEvent0 = new InstanceEvent(imageSaver0);
      filter0.acceptInstance(instanceEvent0);
      filter0.addDataSourceListener(crossValidationFoldMaker0);
      assertEquals("InstanceStreamToBatchMaker", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("", "");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.disconnectionNotification("", "");
      boolean boolean0 = filter0.eventGeneratable("Done.");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setName("");
      Loader loader0 = new Loader();
      loader0.getStructure("$~S&IWn.w($pC-'P*g");
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getY();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      filter0.getFilter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.removeDataSourceListener(substringLabeler0);
      filter0.getWrappedAlgorithm();
      filter0.isBusy();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(euclideanDistance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.core.EuclideanDistance : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      filter0.removeComponentListener((ComponentListener) null);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      filter0.disconnectionNotification("+0o'", localDate0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.removeKeyListener((KeyListener) null);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      Saver saver0 = new Saver();
      filter0.removeDataSourceListener(saver0);
      filter0.doLayout();
      String string0 = "rlHrom}wcpjxO;kKyX8";
      filter0.disconnectionNotification("rlHrom}wcpjxO;kKyX8", predictionAppender0);
      // Undeclared exception!
      try { 
        filter0.connectionNotification("+0o'", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      dataVisualizer0.setIgnoreRepaint(false);
      dataVisualizer0.setFocusTraversalKeysEnabled(true);
      filter0.isOptimizedDrawingEnabled();
      dataVisualizer0.hasFocus();
      dataVisualizer0.removeNotify();
      filter0.getInputContext();
      filter0.removeDataSourceListener(dataVisualizer0);
      BeanVisual beanVisual0 = filter0.getVisual();
      filter0.isOpaque();
      filter0.setAlignmentX(212.32578F);
      dataVisualizer0.isPaintingForPrint();
      filter0.isOpaque();
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
      
      filter0.setCustomName("");
      filter0.useDefaultVisual();
      filter0.isBusy();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      beanVisual0.m_visualLabel = (JLabel) defaultListCellRenderer_UIResource0;
      filter0.getCustomName();
      filter0.addTestSetListener(dataVisualizer0);
      filter0.setCustomName("");
      filter0.firePropertyChange("", false, false);
      filter0.useDefaultVisual();
      filter0.enumerateRequests();
      filter0.isBusy();
      filter0.setVisual(beanVisual0);
      assertFalse(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      // Undeclared exception!
      try { 
        filter0.performRequest("'c+dIB7[Zf-24");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'c+dIB7[Zf-24 not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("testSet");
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      assertFalse(dataVisualizer0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("SlidingMidPointofWidestSide splitting method. Please ");
      assertTrue(boolean0);
      
      Filter filter1 = new Filter();
      filter1.stop();
      filter1.addTrainingSetListener(filter0);
      filter1.disconnectionNotification("SlidingMidPointofWidestSide splitting method. Please ", "SlidingMidPointofWidestSide splitting method. Please ");
      filter1.getFilter();
      BeanVisual beanVisual0 = filter1.getVisual();
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("SlidingMidPointofWidestSide splitting method. Please ");
      assertTrue(boolean0);
      
      filter0.stop();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockJapaneseDate0, (Instances) null, 1, (-2822), 704, 1750);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("jg>*t(Q;]-");
      assertTrue(boolean0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("jg>*t(Q;]-", (Instances) null, 50, 50);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter1.getToolkit();
      Dimension dimension0 = filter1.getMaximumSize();
      dimension0.setSize(1.0E-4, (-118.283));
      filter0.eventGeneratable("");
      filter1.contains((-585), (-44));
      Locale locale0 = Locale.GERMAN;
      JComponent.setDefaultLocale(locale0);
      TextViewer textViewer0 = new TextViewer();
      textViewer0.getUI();
      filter1.removeTrainingSetListener(filter0);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      AllFilter allFilter0 = new AllFilter();
      filter1.setWrappedAlgorithm(allFilter0);
      filter0.removeTestSetListener(filter1);
      filter0.removeTestSetListener(attributeSummarizer0);
      filter0.stop();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesOnlyClass();
      try { 
        principalComponents0.transformedData((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getBaselineResizeBehavior();
      filter0.firePropertyChange("~[\"Z#>RFXH=t}^o2)=", (-552.86F), (-4578.4736F));
      filter0.connectionNotification("~[\"Z#>RFXH=t}^o2)=", "~[\"Z#>RFXH=t}^o2)=");
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.connectionNotification("~[\"Z#>RFXH=t}^o2)=", multiFilter0);
      filter0.setDoubleBuffered(true);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      Object object0 = BeanContext.globalHierarchyLock;
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.getStructure(">dp^YpO5");
      filter0.m_globalInfo = "testSet";
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(object0, (Instances) null, 46, 46, 46, 450);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addInstanceListener(flowByExpression0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.addNotify();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.removeTestSetListener(flowByExpression0);
      Appender appender0 = new Appender();
      filter0.removeInstanceListener(appender0);
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      ImageSaver imageSaver0 = new ImageSaver();
      InstanceEvent instanceEvent0 = new InstanceEvent("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      filter0.acceptInstance(instanceEvent0);
      filter0.addDataSourceListener(substringLabeler0);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.stop();
      Filter filter1 = new Filter();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      filter1.disconnectionNotification(" packages", findWithCapabilities0);
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      Saver saver0 = new Saver();
      filter0.setBounds(100000, (-1911102579), (-1911102579), (-57));
      Logger logger0 = saver0.m_logger;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      DataSetEvent dataSetEvent0 = new DataSetEvent(mockJapaneseDate0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getFilter();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(saver0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      filter0.removeInstanceListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(mockJapaneseDate0, instances0, 11, 11);
      filter0.acceptTestSet(testSetEvent0);
      Classifier classifier0 = new Classifier();
      filter0.removeInstanceListener(classifier0);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptDataSet((DataSetEvent) null);
      filter0.acceptDataSet((DataSetEvent) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      filter0.removeMouseMotionListener(mouseMotionListener0);
      filter0.disconnectionNotification("SlidingMidPointofWidestSide splitting method. Please ", "SlidingMidPointofWidestSide splitting method. Please ");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getStructure("k33TN1x=X|3v0");
      DataSetEvent dataSetEvent0 = new DataSetEvent("k33TN1x=X|3v0", (Instances) null);
      Filter filter0 = new Filter();
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("l]gE:s.g");
      assertTrue(boolean0);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.addTestSetListener(scatterPlotMatrix0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(flowByExpression0, instances0, 46, 337);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isFocusable();
      filter0.getFilter();
      filter0.connectionNotification("instance", (Object) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[KnowledgeFlow]|OK.");
      filter0.acceptDataSet((DataSetEvent) null);
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0, false);
      filter0.setLog(logPanel0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getToolTipText();
      filter0.transferFocus();
      filter0.getAlignmentY();
      filter0.isFocusOwner();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      filter0.createVolatileImage((-1108316885), (-2163));
      filter0.getFocusListeners();
      filter0.getVisual();
      filter0.getWrappedAlgorithm();
      Add add0 = new Add();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/gui/beans/icons/");
      filter0.setFilter(add0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      flowByExpression0.setOpaque(false);
      filter0.acceptInstance(instanceEvent0);
      filter0.removeDataSourceListener(flowByExpression0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.isBusy();
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getToolTipText();
      filter0.transferFocus();
      filter0.getAlignmentY();
      filter0.isFocusOwner();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      filter0.createVolatileImage((-1108316882), (-2163));
      filter0.getFocusListeners();
      filter0.getVisual();
      filter0.getWrappedAlgorithm();
      Add add0 = new Add();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/gui/beans/icons/");
      filter0.setFilter(add0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus(3);
      flowByExpression0.setOpaque(true);
      filter0.acceptInstance(instanceEvent0);
      filter0.removeDataSourceListener(flowByExpression0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.connectionNotification("=.ds+kB", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      Add add0 = new Add();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m(J=");
      filter0.setFilter(add0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      instanceEvent1.setStatus(2);
      flowByExpression0.setOpaque(false);
      filter0.acceptInstance(instanceEvent1);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      Add add0 = new Add();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m(J=");
      filter0.setFilter(add0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      boolean boolean0 = filter0.connectionAllowed("instance");
      assertEquals("Add", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = new SparseInstance(864, doubleArray0, intArray0, 864);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setInstance(sparseInstance0);
      instanceEvent0.setStatus(6);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus(864);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instanceEvent0.setStructure(instances0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Add add0 = new Add();
      Filter filter0 = new Filter();
      filter0.setFilter(add0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Filter filter1 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(flowByExpression0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instances0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.addTrainingSetListener(dataVisualizer0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(dataVisualizer0, instances0, 1935, 875);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.connectionNotification("@relation", instances0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus((-29));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instanceEvent0.setStructure(instances0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f");
      filter0.setFilter(add0);
      double[] doubleArray0 = new double[12];
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = new SparseInstance(864, doubleArray0, intArray0, 864);
      Sorter sorter0 = new Sorter();
      C45Saver c45Saver0 = new C45Saver();
      Capabilities capabilities0 = c45Saver0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(add0, instances0, 178, (-1));
      filter0.acceptTrainingSet(trainingSetEvent0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      TestSetEvent testSetEvent0 = new TestSetEvent(attributeSelection0, instances0, (-2), (-1));
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("Add", filter0.getCustomName());
  }
}
