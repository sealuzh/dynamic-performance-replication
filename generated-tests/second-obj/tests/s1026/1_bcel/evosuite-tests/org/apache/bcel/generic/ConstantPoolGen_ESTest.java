/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:37:37 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(139);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(139, 139);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-3932), (-3932));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1234));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 256);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = ObjectStreamConstants.baseWireHandle;
      int int2 = constantPoolGen0.addUtf8("?");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2411), (-2411));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger0 = new ConstantInteger((-2411));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = null;
      typeArray0[1] = null;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      constantPoolGen0.getSize();
      int int1 = constantPoolGen0.addNameAndType("Unknown constant type ", "Unknown constant type ");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addInterfaceMethodref("", "", "");
      // Undeclared exception!
      try { 
        constantPoolGen0.addString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref("^[", "9", "8Fm8r=' D/|#V&");
      assertEquals((-1), int0);
      
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addUtf8("=O><MDY&H0}]Ko{aE.");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-587);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("\n", "1)CONXT{NT_Utf8[1](\"C1xuxw\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONXT{NT_Utf8[1](\"C1xuxw\")\n2)CONSTANT_String[8](string_index = 1)\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("t/ZpFmW{o<'U7:J3B`t", "t/ZpFmW{o<'U7:J3B`t", "t/ZpFmW{o<'U7:J3B`t");
      constantPoolGen0.setConstant(4, (Constant) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      int int0 = Double.SIZE;
      ObjectType objectType0 = new ObjectType("H;>a[Wev?^%`nZI#E,v");
      constantPoolGen0.addClass(objectType0);
      int int1 = constantPoolGen0.addClass(objectType0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString((-1110));
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantClass constantClass0 = new ConstantClass(649);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantClass2;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass1;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1110
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(52, 589);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantLong constantLong0 = new ConstantLong(52);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("%");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(849L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass(248);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(4444, (-1528));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4444
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1110);
      // Undeclared exception!
      try { 
        constantPoolGen0.addLong(0L);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1110);
      // Undeclared exception!
      try { 
        constantPoolGen0.addString("(s?p");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1982);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupMethodref("eRT8B7<CPv'a", "eRT8B7<CPv'a", "eRT8B7<CPv'a");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addInteger((-3943));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = constantPoolGen0.lookupLong((-205L));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int1 = constantPoolGen1.lookupInteger((-1582));
      assertEquals(256, constantPoolGen1.getSize());
      assertTrue(int1 == int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-870), (-870));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.lookupFloat(1.0F);
      assertEquals((-1), int0);
      
      int int1 = constantPoolGen0.getSize();
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantFloat0, constantPoolGen0);
      constantPoolGen1.toString();
      int int1 = constantPoolGen1.lookupInterfaceMethodref("Cxuxw", "1)CONSTANT_Float[4](bytes = 0.0)\n", "=^=n+(1{Z5Ep{d");
      assertEquals(2, constantPoolGen1.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = 346;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-295), 346);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -295
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInteger((-1));
      constantPoolGen0.adjustSize();
      constantPoolGen0.addFloat(1.0F);
      constantPoolGen0.addInteger((-1));
      ConstantDouble constantDouble0 = new ConstantDouble(2);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, (-1));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%");
      BasicType basicType0 = Type.BOOLEAN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}]gJ)7']}2kKt~>");
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-29.837343F));
      pUSH0.getInstructionList();
      constantPoolGen0.addFloat(0.0F);
      int int0 = constantPoolGen0.lookupLong(0L);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addInterfaceMethodref("", "", "");
      constantPoolGen0.addDouble(4);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      AALOAD aALOAD0 = new AALOAD();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(9, type0, type0.NO_ARGS, stringArray0, "82qHA`{/p", "irem", (InstructionList) null, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      String string0 = "K.X0&K.X0&_fATX}yf1";
      String string1 = "}:3vvr,.&";
      constantPoolGen0.addMethodref("K.X0&K.X0&_fATX}yf1", "9", "}:3vvr,.&");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      constantPoolGen0.lookupMethodref("K.X0&K.X0&_fATX}yf1", (String) null, "K.X0&K.X0&_fATX}yf1");
      constantPoolGen1.toString();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((Method) null, "\n", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      constantPoolGen1.addFloat(0L);
      assertEquals(2, constantPoolGen1.getSize());
      
      constantPoolGen0.getConstant(1);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("", "");
      constantPoolGen0.lookupInteger(907);
      constantPoolGen0.addLong(1633L);
      constantPoolGen0.lookupMethodref("", "{JxZ%$", (String) null);
      constantPoolGen0.lookupNameAndType("+cV1V", "(9im-");
      constantPoolGen0.addLong((-1994L));
      constantPoolGen0.addDouble(1633L);
      // Undeclared exception!
      try { 
        constantPoolGen0.addNameAndType((String) null, "{JxZ%$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("t&-BVV.*");
      constantPoolGen0.toString();
      constantPoolGen0.addLong(0L);
      int int0 = constantPoolGen0.addFloat(0L);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = (-1110);
      constantPoolGen0.addDouble((-1110));
      ConstantClass constantClass0 = new ConstantClass(157);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantPoolGen0.addDouble((-457.2517084287));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass1;
      constantArray0[3] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString((-1110));
      Method.getComparator();
      constantPoolGen0.addDouble(2.0);
      ConstantClass constantClass0 = new ConstantClass((-1110));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantDouble constantDouble0 = new ConstantDouble(2.0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1110
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("JgFX2%", "JgFX2%", "JgFX2%");
      ConstantDouble constantDouble0 = new ConstantDouble((-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addConstant(constantDouble0, constantPoolGen0);
      int int0 = constantPoolGen1.lookupDouble((-1));
      assertEquals(3, constantPoolGen1.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = null;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.MULTILINE;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(126);
      constantPoolGen0.addDouble(126);
      ConstantClass constantClass0 = new ConstantClass(649);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantDouble constantDouble0 = new ConstantDouble(2.0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 649
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(256);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 256);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong((-4570775389781098481L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 256);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.getConstantPool();
      ConstantDouble constantDouble0 = new ConstantDouble(1220.98732818);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(256, 256);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInterfaceMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Double.MAX_EXPONENT;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1023, 1023);
      Constant[] constantArray0 = new Constant[12];
      constantArray0[0] = (Constant) constantMethodHandle0;
      Constant.getComparator();
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 1023, reference_index = 1023)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(256);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 157);
      Constant[] constantArray0 = new Constant[5];
      Constant.setComparator((BCELComparator) null);
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantMethodHandle0.copy();
      constantPoolGen0.addFieldref("' but is '", "' but is '", "");
      int int0 = Long.SIZE;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      BasicType basicType0 = Type.CHAR;
      LCMP lCMP0 = new LCMP();
      lCMP0.getType(constantPoolGen1);
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(256);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 159);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      Constant[] constantArray1 = new Constant[5];
      constantArray1[1] = (Constant) constantMethodHandle0;
      constantArray1[2] = (Constant) constantInteger0;
      constantArray1[4] = (Constant) constantMethodHandle0;
      constantPoolGen0.addFloat(256);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray1[3], constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = Pattern.COMMENTS;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("in-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      GETFIELD gETFIELD0 = new GETFIELD();
      int int1 = constantPoolGen0.lookupMethodref("in-", "", (String) null);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("C1xuxw");
      constantPoolGen0.lookupInteger((-1));
      constantPoolGen0.lookupFloat(2);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      try { 
        constantPool0.getConstant((-3411), (byte) (-47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -3411. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "Unknown constant type ";
      ConstantFieldref constantFieldref0 = new ConstantFieldref(458, 458);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 458
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayType arrayType0 = new ArrayType("`)dW9", 6);
      int int0 = constantPoolGen0.addArrayClass(arrayType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1199.8976F));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[LT(znV%1)CONSTANT_Utf8[1](\"1xux_\")\n2)CONSTANT_String[8](string_index = 1)\n;");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble1 = new ConstantDouble(0.0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[3] = (Constant) constantUtf8_2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Method method0 = new Method();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, ":$N(EceO7M+t", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(138);
      constantPoolGen0.addDouble(0.0);
      ConstantClass constantClass0 = new ConstantClass(252);
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.lookupFloat(1830.0F);
      constantPoolGen0.addFloat(138);
      int int0 = Pattern.CANON_EQ;
      AALOAD aALOAD0 = new AALOAD();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      String[] stringArray0 = new String[1];
      String string0 = "' but is '";
      stringArray0[0] = "' but is '";
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((-866), type0, type0.NO_ARGS, stringArray0, "#", "=Q9|B+~FyG$Bu{", instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 1
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(46);
      constantPoolGen0.lookupClass("/;(5,rq6");
      constantPoolGen0.addInteger(243);
      constantPoolGen0.lookupClass("/;(5,rq6");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GETFIELD gETFIELD0 = new GETFIELD(204);
      // Undeclared exception!
      try { 
        gETFIELD0.getLoadClassType(constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(256);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 159);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      Constant[] constantArray1 = new Constant[5];
      constantArray1[0] = (Constant) constantInteger0;
      constantArray1[1] = (Constant) constantMethodHandle0;
      constantArray1[2] = (Constant) constantInteger0;
      constantArray1[3] = (Constant) constantInteger0;
      constantArray1[4] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray1);
      constantPoolGen0.addFloat(0.0F);
      int int0 = ObjectStreamConstants.baseWireHandle;
      constantPoolGen1.addConstant(constantArray1[3], constantPoolGen0);
      int int1 = ObjectStreamConstants.baseWireHandle;
      int int2 = constantPoolGen0.addUtf8("ifle");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(109);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantInteger0;
      constantPool0.setConstantPool(constantArray0);
      constantPoolGen0.addMethodref("K.X0&K.X0&_fATX}yf1", "9", "}:3vvr,.&");
      constantPoolGen0.addFieldref("9", "9", "}:3vvr,.&");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}:3vvr,.&");
      int int0 = Double.BYTES;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int1 = Character.SIZE;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(6, 247);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.adjustSize();
      constantPoolGen0.adjustSize();
      constantPoolGen0.addUtf8("}:3vvr,.&");
      int int2 = constantPoolGen0.lookupString("zIygLoo7yUo']e-");
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addString("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      constantPoolGen0.addString("");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      constantPoolGen1.lookupFloat(2);
      constantPoolGen0.addInteger((-142));
      constantPoolGen1.adjustSize();
      int int0 = Pattern.CANON_EQ;
      constantPoolGen0.addUtf8("");
      constantPoolGen1.addClass(".\n");
      ConstantFieldref constantFieldref2 = new ConstantFieldref(20000, 128);
      ObjectType objectType0 = Type.OBJECT;
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Type type0 = operandStack0.peek();
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType(type0, (-924));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -924
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.BOOLEAN;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-29.837343F));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((-593), basicType0, basicType0.NO_ARGS, (String[]) null, "}]gJ)7']}2kKt~>", "}]gJ)7']}2kKt~>", instructionList0, constantPoolGen0);
      int int0 = constantPoolGen0.lookupMethodref(methodGen0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = Pattern.COMMENTS;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(4);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addFloat(0.0F);
      int int1 = ObjectStreamConstants.baseWireHandle;
      int int2 = Long.BYTES;
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      String string0 = "Hpxiex9~u_=K^+i!(C";
      ConstantMethodref constantMethodref0 = new ConstantMethodref(8257536, (-390));
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8257536
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = Pattern.COMMENTS;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ObjectType objectType0 = Type.CLASS;
      constantPoolGen1.addClass(objectType0);
      constantPoolGen1.addFieldref("~u6Q>l)sc`bc8TZ,0I", "", "");
      constantPoolGen0.addMethodref("", "1xux", "1xux");
      constantPoolGen0.addInterfaceMethodref("", "", "1xux");
      constantPoolGen0.addMethodref("", "1xux", "1xux");
      String[] stringArray0 = new String[16];
      stringArray0[0] = "~u6Q>l)sc`bc8TZ,0I";
      String string0 = Constants.ILLEGAL_OPCODE;
      constantPoolGen0.adjustSize();
      assertEquals(8, constantPoolGen0.getSize());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int1 = Character.MAX_CODE_POINT;
      int int2 = Pattern.MULTILINE;
      assertFalse(int2 == int3);
  }
}
