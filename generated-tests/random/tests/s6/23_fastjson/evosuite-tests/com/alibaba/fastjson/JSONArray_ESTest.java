/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 14:10:24 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.time.chrono.MinguoEra;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONArray jSONArray0 = new JSONArray();
      char[] charArray0 = new char[0];
      Type type0 = jSONArray0.componentType;
      Feature[] featureArray0 = new Feature[22];
      Feature feature0 = Feature.SupportAutoType;
      JSON.toJSON((Object) jSONArray0);
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.IgnoreAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseBigDecimal;
      featureArray0[3] = feature3;
      JSON.parseObject(charArray0, 3089, (Type) null, featureArray0);
      jSONArray0.contains((Object) null);
      jSONArray0.set(919, feature2);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(919);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : IgnoreAutoType
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(5307, (Object) null);
      jSONArray1.getBooleanValue(989);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getFloatValue(989);
      jSONArray3.getByteValue(5307);
      JSONArray jSONArray4 = jSONArray2.fluentAddAll(5307, (Collection<?>) jSONArray1);
      JSONArray jSONArray5 = jSONArray1.fluentRemove((int) (byte)0);
      // Undeclared exception!
      jSONArray4.remove((Object) jSONArray5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(5303);
      JSONArray jSONArray1 = jSONArray0.fluentSet(5303, fileSystemHandling0);
      jSONArray1.retainAll(jSONArray0);
      jSONArray1.getJSONArray(5277);
      jSONArray0.getComponentType();
      jSONArray0.getShort(3089);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray1.isEmpty();
      jSONArray1.getSqlDate(3089);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(906);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>(887);
      JSONObject jSONObject0 = null;
      linkedHashSet0.add((JSONObject) null);
      jSONArray0.indexOf("O*bVGw0(kVG-e@iW?pB");
      linkedHashSet0.add((JSONObject) null);
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(906);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 906
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(927);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(5423, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.getDoubleValue(0);
      jSONArray2.lastIndexOf(jSONArray0);
      jSONArray1.getBoolean(989);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.getObject(3089, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(927);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      jSONArray1.fluentSet(5423, "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(5423);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      jSONArray0.setComponentType((Type) null);
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject("", (Type) null, featureArray0);
      jSONArray0.parallelStream();
      jSONArray0.clear();
      // Undeclared exception!
      try { 
        jSONArray0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(116);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 116, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(76);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)15;
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreNotMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableASM;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.NonStringKeyAsString;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowUnQuotedFieldNames;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowArbitraryCommas;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.CustomMapDeserializer;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.CustomMapDeserializer;
      featureArray0[8] = feature8;
      JSON.parse(byteArray0, featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      Object object0 = jSONArray1.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 555;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(555);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 555, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.isEmpty();
      int int0 = (-1185);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1185));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1185
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, serializerFeatureArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1590);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1590, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.stream();
      jSONArray0.listIterator();
      jSONArray0.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-4991));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4991
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-20);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1569));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1569
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(71);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(71, byteArrayInputStream0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1612;
      JSONArray jSONArray0 = new JSONArray(1612);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(3062);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3062, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(806);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), object0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(object0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray3.fluentRetainAll(jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(164);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(1735);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1735, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(144);
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      Collection<JSONArray> collection0 = hashMap0.values();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(collection0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.clear();
      assertTrue(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1563);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1563, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) class0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray3.fluentRetainAll(list0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      int int0 = (-1378);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportNonPublicField;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportNonPublicField;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportArrayToBean;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AutoCloseSource;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.IgnoreNotMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.AutoCloseSource;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.DisableFieldSmartMatch;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSON.parseObject("M;[LRXb@:4B", (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(762);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray1);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", hashMap0);
      jSONArray4.set(92, (Object) null);
      MinguoEra[] minguoEraArray0 = new MinguoEra[1];
      MinguoEra minguoEra0 = MinguoEra.ROC;
      minguoEraArray0[0] = minguoEra0;
      jSONArray1.toArray(minguoEraArray0);
      assertEquals(93, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(137);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 137, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1857));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) integer0, 989, serializerFeatureArray0);
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray2.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "(R_R#P>wLKP{Jh");
      int int0 = 159;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 159, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowComment;
      featureArray0[3] = feature3;
      JSON.parse(byteArray0, featureArray0);
      JSON.setDefaultTypeKey("");
      jSONArray0.clone();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      Type type0 = jSONArray1.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(165);
      jSONArray0.hashCode();
      JSONObject jSONObject0 = new JSONObject(true);
      Integer integer0 = new Integer(10);
      JSONObject jSONObject1 = jSONObject0.fluentRemove(integer0);
      jSONArray0.fluentSet(165, jSONObject1);
      assertEquals(166, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(931, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray3.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 933
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONArray jSONArray0 = new JSONArray();
      char[] charArray0 = new char[0];
      Type type0 = jSONArray0.componentType;
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportNonPublicField;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseBigDecimal;
      featureArray0[3] = feature3;
      JSON.parseObject(charArray0, 3089, (Type) null, featureArray0);
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(768, 768);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 768
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3040);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      jSONArray0.fluentRetainAll(set0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.CustomMapDeserializer;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parse("@type", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray2.fluentRemove((Object) jSONArray1);
      OutputStream outputStream0 = null;
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableCircularReferenceDetect;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.OrderedField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InternFieldNames;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableASM;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.IgnoreAutoType;
      featureArray0[7] = feature7;
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1619;
      JSONArray jSONArray0 = new JSONArray(1619);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.alibaba.fastjson.JSONArray");
      PrintWriter printWriter0 = mockPrintWriter0.format(jSONArray0.defaultLocale, "@type", (Object[]) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.writeJSONString((Writer) printWriter0, (Object) printWriter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(113);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.lastIndexOf(integer0);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.add((-1), (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1747);
      String string0 = "L_ki/6;|(gU_C&";
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1747), "L_ki/6;|(gU_C&");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray1);
      int int0 = 1450;
      JSONArray jSONArray4 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd(1450, (Object) jSONArray4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1450, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1658);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1658, "Z%EO?V:\"{(");
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(1228, (Collection<?>) jSONArray0);
      jSONArray3.getFloat(871);
      jSONArray1.fluentClear();
      int int0 = 4294;
      ParserConfig parserConfig0 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      parserConfig0.setDefaultClassLoader(classLoader1);
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      Class<JSONObject> class0 = JSONObject.class;
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p,R4M-ky/#CuBA$gSQU";
      stringArray0[1] = "|0+>+VOhQB1v!";
      stringArray0[2] = "J^N< ds_Qip+$l$";
      stringArray0[3] = "hx4RWl6|V2d> 6@YllR";
      String string0 = "";
      stringArray0[4] = "";
      stringArray0[5] = "/!fX7G^omtY@MA!";
      stringArray0[6] = "com.alibaba.fastjson.JSONArray";
      stringArray0[7] = "";
      stringArray0[8] = "?2";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues("hx4RWl6|V2d> 6@YllR");
      JSONArray jSONArray0 = new JSONArray(list0);
      jSONArray0.size();
      jSONArray0.fluentAdd(0, (Object) "J^N< ds_Qip+$l$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@type");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, 0, 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(11, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(927);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(5423, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.getDoubleValue(0);
      jSONArray2.lastIndexOf(jSONArray0);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.getObject(3089, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(5307, (Object) null);
      jSONArray1.isEmpty();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getFloatValue(989);
      jSONArray3.getByteValue(5307);
      JSONArray jSONArray4 = jSONArray2.fluentAddAll(5307, (Collection<?>) jSONArray1);
      JSONArray jSONArray5 = jSONArray1.fluentRemove((int) (byte)0);
      // Undeclared exception!
      jSONArray4.remove((Object) jSONArray5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(69);
      int int0 = (-978);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-978));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-2242L));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      jSONArray2.fluentRemoveAll(jSONArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)111;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("#CTD6 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject0.fluentClear();
      byte[] byteArray1 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      System.setCurrentTimeMillis(0L);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        jSONObject0.getBigInteger("ZNzh&S+^'rg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }
}
