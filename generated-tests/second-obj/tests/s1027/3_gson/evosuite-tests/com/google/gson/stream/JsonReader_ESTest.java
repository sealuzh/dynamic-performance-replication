/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:37:01 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[8] = '\u0000';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset.defaultCharset();
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip(1001L);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.reset();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = 't';
      charArray0[3] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset.defaultCharset();
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.nextInt();
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset.defaultCharset();
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[4] = 'h';
      char[] charArray1 = new char[1];
      charArray1[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.toString();
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[2];
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      charArrayReader0.markSupported();
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("j");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      charset0.decode(byteBuffer1);
      StringReader stringReader0 = new StringReader("].TQ}u0&2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J~*jyou");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("J~*jyou");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2,;d:I?");
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      charArrayReader0.markSupported();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[11];
      charArray0[0] = 'F';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      charArray0[1] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.reset();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("j");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      byteBuffer1.asFloatBuffer();
      CharBuffer charBuffer1 = charset0.decode(byteBuffer1);
      Charset charset1 = Charset.defaultCharset();
      charset1.decode(byteBuffer1);
      StringReader stringReader0 = new StringReader("].TQ}u0&2");
      stringReader0.read(charBuffer1);
      jsonReader0.setLenient(false);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#oEQ^S");
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '#';
      charArray0[4] = '2';
      charArray0[5] = '2';
      pipedWriter0.write(charArray0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.setLenient(false);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      charArrayReader1.skip((-22L));
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("$VALUES");
      stringReader0.mark(50);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was END_DOCUMENT at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j");
      stringReader0.mark(125);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      jsonReader0.skipValue();
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U4/0um");
      PipedReader pipedReader0 = new PipedReader(12);
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '#';
      charArray0[2] = 'R';
      charArray0[3] = '2';
      charArray0[4] = '#';
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("U4/0um");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charset0.encode(charBuffer0);
      byteBuffer0.asFloatBuffer();
      StringReader stringReader0 = new StringReader("U4/0um");
      stringReader0.mark(4802);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read(charBuffer0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("L");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      byteBuffer1.asFloatBuffer();
      CharBuffer charBuffer1 = charset0.decode(byteBuffer1);
      Charset charset1 = Charset.defaultCharset();
      charset1.decode(byteBuffer1);
      StringReader stringReader0 = new StringReader("].TQ}u0&2");
      stringReader0.read(charBuffer1);
      jsonReader0.setLenient(true);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("j");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      byteBuffer1.asFloatBuffer();
      charset0.decode(byteBuffer1);
      Charset charset1 = Charset.defaultCharset();
      charset1.decode(byteBuffer1);
      StringReader stringReader0 = new StringReader("].TQ}u0&2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      charArrayReader1.skip(0L);
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      jsonReader0.isLenient();
      JsonReader jsonReader1 = new JsonReader(charArrayReader1);
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("j");
      StringReader stringReader0 = new StringReader("j");
      Charset charset1 = Charset.defaultCharset();
      ByteBuffer byteBuffer1 = charset0.encode("j");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charset1.encode(charBuffer0);
      ByteBuffer byteBuffer2 = charset0.encode("j");
      byteBuffer2.asFloatBuffer();
      Charset charset2 = Charset.defaultCharset();
      charset2.decode(byteBuffer1);
      StringReader stringReader1 = new StringReader(" ~");
      stringReader1.read(charBuffer0);
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Charset.defaultCharset();
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = '9';
      charArray0[4] = 'h';
      char[] charArray1 = new char[1];
      charArray1[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      jsonReader1.nextInt();
      // Undeclared exception!
      try { 
        jsonReader1.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset.defaultCharset();
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = '9';
      charArray0[4] = 'h';
      char[] charArray1 = new char[1];
      charArray1[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      jsonReader1.nextInt();
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U4/0um");
      PipedReader pipedReader0 = new PipedReader(12);
      char[] charArray0 = new char[5];
      stringReader0.read(charArray0);
      charArray0[1] = '#';
      charArray0[2] = 'R';
      charArray0[4] = '#';
      stringReader0.mark(13);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String string0 = "j";
      charset0.encode("j");
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = 'G';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = '\'';
      charArray0[5] = '%';
      charArray0[6] = 'G';
      charArray0[8] = 'q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      charArrayReader0.markSupported();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset.defaultCharset();
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = '9';
      charArray0[4] = 'h';
      char[] charArray1 = new char[1];
      charArray1[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      jsonReader1.setLenient(true);
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      jsonReader0.nextDouble();
      try { 
        jsonReader1.endArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("$VALUES");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = 'J';
      charArray0[2] = 'y';
      charArray0[3] = 'w';
      charArray0[4] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = '&';
      charArray0[2] = '>';
      charArray0[3] = 'C';
      charArray0[4] = 'm';
      charArray0[5] = 'c';
      charArray0[6] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      Charset charset1 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("j");
      CharBuffer charBuffer0 = charset1.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      ByteBuffer byteBuffer2 = charset1.encode("j");
      byteBuffer2.asFloatBuffer();
      charset0.decode(byteBuffer1);
      Charset charset2 = Charset.defaultCharset();
      charset2.decode(byteBuffer2);
      StringReader stringReader0 = new StringReader("j");
      CharBuffer charBuffer1 = charset0.decode(byteBuffer2);
      stringReader0.read(charBuffer1);
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Charset.defaultCharset();
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[4] = '9';
      char[] charArray1 = new char[1];
      charArray1[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U4/0um");
      PipedReader pipedReader0 = new PipedReader(12);
      char[] charArray0 = new char[5];
      stringReader0.read(charArray0);
      charArray0[1] = '#';
      charArray0[2] = 'R';
      charArray0[3] = '2';
      charArray0[4] = '#';
      stringReader0.mark(13);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      jsonReader0.skipValue();
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        Charset.forName("U4/0um");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // U4/0um
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset.defaultCharset();
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = '&';
      charArray0[2] = '>';
      char[] charArray1 = new char[8];
      charArray1[0] = '\\';
      charArray1[1] = '&';
      charArray1[2] = 'C';
      charArray1[3] = 'A';
      charArray1[4] = '&';
      charArray1[5] = '>';
      charArray1[6] = 'C';
      charArray1[7] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 335);
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      charArrayReader0.skip((-1L));
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "U4/0um";
      StringReader stringReader0 = new StringReader("U4/0um");
      PipedReader pipedReader0 = new PipedReader(12);
      char[] charArray0 = new char[5];
      stringReader0.read(charArray0);
      charArray0[1] = '#';
      charArray0[2] = 'R';
      charArray0[3] = '2';
      charArray0[4] = '#';
      stringReader0.mark(13);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      jsonReader0.peeked = 13;
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
