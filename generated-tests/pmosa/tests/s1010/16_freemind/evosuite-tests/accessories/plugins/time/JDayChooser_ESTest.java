/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 17:28:11 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeListener;
import java.sql.Time;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.ActionMap;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import org.apache.batik.css.engine.SVGCSSEngine;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.events.DOMKeyEvent;
import org.apache.batik.svggen.DOMTreeManager;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.ExtensionHandler;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.xerces.dom.DeferredDOMImplementationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.DocumentType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      JToolBar jToolBar0 = new JToolBar(0);
      jToolBar0.paintImmediately(86, 86, 0, (-2339));
      Insets insets0 = jToolBar0.getMargin();
      jDayChooser0.getInsets(insets0);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setMonth(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMonth(299);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setDay(8);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-2645);
      Color.RGBtoHSB(0, (-2645), 0, floatArray0);
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) (-2645);
      Color.getColor("~[p_4{I@9]U/|.I1", (-2645));
      floatArray1[1] = (float) (-1161);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) 8;
      floatArray1[4] = (float) (-2645);
      floatArray1[5] = (-2862.85F);
      floatArray1[6] = (float) 8;
      floatArray1[7] = (float) (-2645);
      floatArray1[8] = (float) 8;
      Color.RGBtoHSB((-1161), 8, (-2645), floatArray1);
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertEquals(8, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[9];
      floatArray0[0] = 947.2716F;
      floatArray0[1] = 1142.5F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-700.4894F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1220.1F;
      floatArray0[6] = 946.0F;
      floatArray0[7] = (-1862.02F);
      floatArray0[8] = 0.0F;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent(jDayChooser0, 9999, 710L, 9999, 11, 0, 0, 9999, 9999, false, 9999);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "H5Z'p3E2Z7n5aReJ";
      stringArray0[1] = "}s";
      stringArray0[2] = "tn kKE8t8[@v3x";
      stringArray0[3] = "s2jjb~>A?'*\">P DL";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.xalan.lib.Redirect";
      stringArray0[6] = "s%'n|4qqF('";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.decorationBackgroundVisible = true;
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isWeekOfYearVisible();
      int int0 = 0;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1625), "day", 0);
      actionEvent0.setSource((Object) null);
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 65489;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 65489, 65489, 33, 'Q');
      int int1 = SVGCSSEngine.STROKE_OPACITY_INDEX;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("Center", (byte)0, (byte)0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-2544L), 0, 65489, '_');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(9999);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (byte)0);
      jDayChooser0.getAutoscrolls();
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.updateUI();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-835), "o{y$aoufe7r4?~L", 0, 3023, 9999, 0, 65489, (-835), 9999, 1444, (-2184), (-835), (-2184));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 9999
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getKeyListeners();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getWeekdayForeground();
      int int0 = 166;
      char char0 = 'D';
      int int1 = 1519;
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-1684), (-1684), (-1684), 166, 'D', 1519);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      jDayChooser0.repaint((-1L), (-1283), 2459, 1838, 0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getBaselineResizeBehavior();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getGraphics();
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, (-2930), 2459, 'h');
      InputEvent.getModifiersExText(0);
      keyEvent0.paramString();
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.addListeners(0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.setSundayForeground((Color) null);
      Locale locale0 = jDayChooser0.locale;
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      jDayChooser0.getLocale();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      Font font0 = defaultStyledDocument0.getFont(simpleAttributeSet0);
      jDayChooser0.setFont(font0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      float[] floatArray0 = new float[4];
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.createToolTip();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMouseListeners();
      jDayChooser0.setYear((-712));
      Locale locale0 = jDayChooser0.getLocale();
      SynthListUI synthListUI0 = new SynthListUI();
      jDayChooser0.getToolTipText();
      jDayChooser0.removePropertyChangeListener("", (PropertyChangeListener) synthListUI0);
      jDayChooser0.setDay((-1489));
      jDayChooser0.setIgnoreRepaint(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set(12, (-2019), (-712), (-2019), 1335, 1335);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.addListeners(2);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 36);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMap();
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 944);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = SystemColor.DESKTOP;
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 790, 790, 790, 238, 'w', (MenuElement[]) null, (MenuSelectionManager) null);
      KeyEvent.getExtendedKeyCodeForChar(790);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMaxDayCharacters(790);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(33);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Time time0 = new Time(238);
      time0.toLocalTime();
      jDayChooser0.setSelectableDateRange((Date) null, time0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1223.9F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.createToolTip();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 48, 48, 48, 48, 'm', 0);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setLocation(2052, 4);
      jDayChooser0.getBackground();
      jDayChooser0.setMonth(2052);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekOfYearVisible(false);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.textHighlightText;
      int int0 = 65489;
      int int1 = 33;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 65489, 65489, 33, 'H');
      keyEvent0.getExtendedKeyCode();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      FlowLayout flowLayout0 = new FlowLayout(22, (-141), 36);
      JPanel jPanel0 = new JPanel(flowLayout0, false);
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, 36, 0L, 36, 36, 'A');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2227), 49, (-2227), 35, '>');
      keyEvent0.getExtendedKeyCode();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(63705);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 65489, 65489, 1, 'H');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(1);
      KeyEvent.getExtendedKeyCodeForChar(65489);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 65489, 1, 0, 0, 'H');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 65489, 65489, 1, 'H');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(1);
      KeyEvent.getExtendedKeyCodeForChar(65489);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 65489, 0, 1, 65489, 'H');
      jDayChooser0.keyPressed(keyEvent1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DOMImplementation dOMImplementation0 = DeferredDOMImplementationImpl.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument((DocumentType) null, dOMImplementation0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(genericDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
      DOMTreeManager dOMTreeManager0 = sVGGraphics2D0.getDOMTreeManager();
      ExtensionHandler extensionHandler0 = dOMTreeManager0.getExtensionHandler();
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(genericDocument0, defaultImageHandler0, extensionHandler0, false);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D1);
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 65489, 33, 49, 40, 'Q');
      int int0 = DOMKeyEvent.DOM_VK_F10;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(2989);
      assertEquals(21, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, (-101), (-101), 34, 'Q');
      int int0 = SVGCSSEngine.STROKE_OPACITY_INDEX;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3), 33, (-280), 37, 'Q');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 38, 38, 38, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 38, 38, 38, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 39, 39, 39, ']');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }
}
