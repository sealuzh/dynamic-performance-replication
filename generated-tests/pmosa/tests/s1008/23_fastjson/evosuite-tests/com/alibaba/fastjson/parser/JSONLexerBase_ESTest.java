/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:34:52 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.skipWhitespace();
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.charAt(941);
      assertEquals(988, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      jSONScanner0.nextToken(1381);
      int int0 = 1293;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getScript();
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : pos 2, json : +6fB-wUgw ')fclzJ'
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDouble('(');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 1);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - D, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "^>vw|pscF\"T:";
      JSONScanner jSONScanner0 = new JSONScanner("^>vw|pscF\"T:", (-2258));
      jSONScanner0.next();
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-3147));
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanUUID('\u0000');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char char0 = '6';
      jSONReaderScanner0.scanUUID('6');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.next();
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(" \"a*,l", 0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, '+');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = '^';
      jSONScanner0.hasSpecial = true;
      jSONScanner0.isRef();
      char char1 = 'm';
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      char char2 = '+';
      jSONScanner0.scanStringArray(set0, '+');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('^', '^', 'x', 'm', '^');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = 'D';
      charArray0[2] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.matchStat = 0;
      jSONReaderScanner0.nextToken(26);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(20, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^)r!*W$,n~'\"");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.isRef();
      Feature feature0 = Feature.UseObjectArray;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("idyca6gl");
      jSONReaderScanner0.scanLong('4');
      jSONReaderScanner0.scanDate('c');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 2626);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1391, 0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p3V7r@_gwwy", 0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'Q';
      charArray0[4] = '\'';
      charArray0[5] = '2';
      charArray0[6] = 'c';
      charArray0[7] = 'j';
      charArray0[8] = '@';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.info();
      jSONScanner0.scanNumber();
      jSONScanner0.isEOF();
      jSONScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      
      jSONReaderScanner0.skipWhitespace();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      int int0 = jSONReaderScanner0.scanType("illega str");
      assertEquals((-2), int0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      String string0 = jSONReaderScanner0.scanString('%');
      assertNull(string0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.getCalendar();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.skipWhitespace();
      JSONScanner jSONScanner0 = new JSONScanner("is");
      jSONScanner0.nextToken(0);
      jSONScanner0.charAt(0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue", 2626);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken(123);
      jSONReaderScanner0.close();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str", 48);
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.nextToken((-496));
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(48, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      jSONReaderScanner0.scanBoolean('x');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      charArray0[1] = 'j';
      charArray0[2] = 'Z';
      charArray0[3] = 'T';
      charArray0[4] = '.';
      charArray0[5] = 'd';
      charArray0[6] = 'J';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(1905, charArray0, 1905, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.bytesValue();
      boolean boolean0 = jSONReaderScanner0.scanBoolean('\"');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("truKe");
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanBoolean('Q');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      char[] charArray0 = new char[2];
      char[] charArray1 = new char[6];
      charArray1[0] = ' ';
      charArray1[1] = ' ';
      charArray1[3] = ' ';
      charArray1[4] = ' ';
      charArray1[5] = ' ';
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3220);
      jSONReaderScanner0.scanLong(' ');
      JSONScanner jSONScanner0 = new JSONScanner("IDyCa6gl>oYZ}.(");
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = locale0.stripExtensions();
      jSONScanner0.setLocale(locale1);
      jSONScanner0.stringVal();
      jSONScanner0.scanIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V", 25);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rNrUj+\"$g/eI* 5r+", 1626);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1585, "rNrUj+\"$g/eI* 5r+");
      simpleTimeZone0.setDSTSavings(851);
      jSONScanner0.setTimeZone(simpleTimeZone0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 2 - r, info : pos 0, json : rNrUj+\"$g/eI* 5r+
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.token();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanString();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.longValue();
      int int0 = 8;
      int int1 = 59;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, int0, int1);
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.putChar('d');
      jSONReaderScanner0.nextToken(1423);
      jSONReaderScanner0.close();
      assertEquals(7, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 1);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-552));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - D, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      int int0 = jSONReaderScanner0.scanType("illega str");
      assertEquals((-2), int0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.isRef();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'p';
      charArray0[2] = '2';
      charArray0[3] = '#';
      charArray0[4] = '-';
      charArray0[5] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 23);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.bytesValue();
      SymbolTable symbolTable0 = new SymbolTable(89);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-363), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kG%n_@$D", 2626);
      jSONReaderScanner0.scanInt('9');
      jSONReaderScanner0.nextToken((-858));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.pos = (-552);
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanInt('a');
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.bytesValue();
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 1);
      jSONReaderScanner0.close();
      jSONReaderScanner0.setToken(106);
      assertEquals(106, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".ET)RB2BX\"V");
      SymbolTable symbolTable0 = new SymbolTable(97);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : .pos 0, json : .ET)RB2BX\"V
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      SymbolTable symbolTable0 = new SymbolTable(2626);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 58);
      SymbolTable symbolTable0 = new SymbolTable(58);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 944;
      SymbolTable symbolTable0 = new SymbolTable(944);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 944);
      int int1 = 3795;
      SymbolTable symbolTable1 = new SymbolTable(3795);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.nextToken(0);
      assertEquals('l', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken(3097);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      int int0 = jSONReaderScanner0.intValue();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFloat('3');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("create asm deserializer error, ", 2626);
      jSONReaderScanner0.scanDecimal('F');
      assertEquals(2626, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '3';
      charArray0[0] = '3';
      charArray0[1] = 'G';
      charArray0[2] = 'u';
      charArray0[3] = '9';
      charArray0[4] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1700, 2408);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('3');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9cM)Fh-<^3@'a@24Gd", (-1005));
      jSONScanner0.scanDecimal('_');
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'l';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.indexOf('n', (-1005));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1005), 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("truKe");
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.bytesValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[2];
      charArray0[1] = 'I';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1ctkJI");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue", 2626);
      jSONReaderScanner0.scanLong('+');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.bytesValue();
      boolean boolean0 = jSONReaderScanner0.isEnabled(1305, 1305);
      assertEquals(2626, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 2626);
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.bytesValue();
      boolean boolean0 = jSONReaderScanner0.isEnabled(2626, 110);
      assertEquals(2626, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#H(");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('$');
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'i');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q[::hL16G|sSW");
      JSONScanner jSONScanner1 = new JSONScanner("S", (-2370));
      SymbolTable symbolTable0 = new SymbolTable(4440);
      jSONScanner1.scanSymbolWithSeperator(symbolTable0, '$');
      jSONScanner1.scanNumber();
      jSONScanner1.scanDate('*');
      assertEquals(2, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 1);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.close();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextIdent();
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 'W';
      charArray0[2] = ':';
      charArray0[3] = 'g';
      charArray0[4] = ';';
      charArray0[5] = 'F';
      charArray0[6] = '*';
      charArray0[7] = '=';
      charArray0[8] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1264, 1264);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('o');
      assertEquals(1264, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 640);
      jSONReaderScanner0.scanDecimal('Y');
      jSONReaderScanner0.next();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanBoolean('r');
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[2] = '\u001A';
      charArray0[3] = 'Y';
      charArray0[4] = '\u001A';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      charArray0[7] = 'r';
      jSONReaderScanner0.matchField(charArray0);
      assertEquals(640, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!JVayfx T");
      jSONReaderScanner0.nextToken(3334);
      SymbolTable symbolTable0 = new SymbolTable(127);
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "undefined";
      int int0 = (-2370);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", (-2370));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", (-2370));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f_`Rme");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 640;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 640);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.getCurrent();
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = '\u001A';
      charArray0[2] = '\u0000';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 640, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".", 1563);
      Locale locale0 = Locale.CHINESE;
      Locale.setDefault(locale0);
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanNumber();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".tusDv");
      jSONScanner0.scanBoolean('D');
      jSONScanner0.scanNumber();
      jSONScanner0.putChar('(');
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1879340214));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "error parse true");
      JSONScanner jSONScanner0 = new JSONScanner(".class");
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IDyCa6gl", 640);
      jSONReaderScanner0.next();
      boolean boolean0 = jSONReaderScanner0.isEnabled(640, 13);
      assertFalse(boolean0);
      assertEquals(640, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("treeset");
      char char0 = '-';
      jSONScanner0.scanBoolean('-');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("trim", (-2089));
      jSONReaderScanner0.scanBoolean('>');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken(3097);
      jSONReaderScanner0.close();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanDate('Y');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.timeZone = null;
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 's';
      charArray0[2] = '^';
      charArray0[3] = '>';
      charArray0[4] = '+';
      charArray0[5] = 'J';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanDate('t');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanDate(' ');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = JSONLexer.EOI;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-3813));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefnw");
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'Q';
      charArray0[2] = 'u';
      charArray0[3] = ' ';
      charArray0[4] = '';
      charArray0[5] = '6';
      charArray0[6] = 'c';
      charArray0[7] = 'I';
      charArray0[8] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4, 4);
      jSONReaderScanner0.nextToken(4);
      jSONReaderScanner0.close();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'Q';
      charArray0[3] = ' ';
      charArray0[4] = '';
      charArray0[5] = 'C';
      charArray0[7] = 'I';
      charArray0[8] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4, 4);
      jSONReaderScanner0.nextToken(4);
      jSONReaderScanner0.close();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldDouble(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 51);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'Y';
      charArray0[2] = ';';
      charArray0[3] = '=';
      charArray0[4] = 'w';
      charArray0[5] = '-';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rK");
      jSONReaderScanner0.putChar('V');
      jSONReaderScanner0.sp = 45;
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"", 0);
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 3678080, 682);
      jSONReaderScanner2.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      
      jSONReaderScanner1.bytesValue();
      assertEquals(0, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", (-2370));
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", (-2370));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.close();
      int int0 = 13;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('\"');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IDyCa6gl");
      jSONReaderScanner0.nextToken(7);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('<');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(14);
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(pipedReader0, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 9Td", (-1369));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1369));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 9, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken(8);
      assertEquals('l', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken(87);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{");
      jSONReaderScanner0.nextToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";y909a+", (-1830));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"");
      String string0 = jSONReaderScanner1.tokenName();
      assertEquals("Unknown", string0);
      
      jSONReaderScanner0.nextToken(13);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1830), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("snt3jg");
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      Locale locale0 = Locale.FRENCH;
      int int0 = jSONScanner0.intValue();
      assertEquals(7388935, int0);
      
      jSONScanner0.indexOf('{', (-3902));
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_a7ggf{Y'9i|");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '>';
      charArray0[5] = '';
      charArray0[6] = '}';
      jSONScanner0.scanDate('');
      charArray0[7] = '';
      charArray0[8] = '';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanDecimal('');
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 25;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V", 25);
      char[] charArray0 = new char[6];
      jSONReaderScanner0.scanFloat('y');
      charArray0[0] = 'y';
      charArray0[1] = 'n';
      charArray0[2] = 'C';
      char char0 = 'g';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - V, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1391, 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse null or new", 76);
      jSONReaderScanner1.nextToken(3);
      assertEquals(1, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24);
      jSONReaderScanner0.nextToken(16);
      jSONReaderScanner0.close();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken(16);
      jSONReaderScanner0.scanDecimal('J');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":fBg`l=", 1131);
      jSONReaderScanner0.nextToken(2626);
      assertEquals('f', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[}gjXN:ekYw*0k", 252);
      jSONReaderScanner0.nextToken(3);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = locale0.stripExtensions();
      jSONReaderScanner0.setLocale(locale1);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("truKe");
      jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pcwRhxv57");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.skipWhitespace();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(48);
      jSONReaderScanner0.close();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      jSONReaderScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(1984);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONReaderScanner0.nextToken(8);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1391, 0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextToken(120);
      jSONReaderScanner0.close();
      int int0 = jSONReaderScanner0.pos();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N({");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("N({");
      jSONReaderScanner0.nextToken(62);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^)r!*W$,n~'\"");
      jSONReaderScanner0.nextToken(1475);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1475);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 3);
      jSONReaderScanner0.eofPos = 3;
      jSONReaderScanner0.scanDate('3');
      JSONScanner jSONScanner0 = new JSONScanner("$", 31);
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = 'A';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(31, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)4;
      jSONReaderScanner0.scanDate(' ');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{", (-3784));
      jSONReaderScanner0.nextToken((-1489));
      assertEquals(12, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken(9);
      jSONReaderScanner0.close();
      jSONReaderScanner0.scanDate('R');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{", 13);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken(20);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 244, (-740));
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner1.close();
      assertEquals((-740), jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken(11);
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.pos();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".oT=<l", (-2400));
      jSONReaderScanner0.nextToken((-2400));
      assertEquals(25, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      SymbolTable symbolTable0 = new SymbolTable(78);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner0.scanString('%');
      jSONReaderScanner0.longValue();
      JSONScanner jSONScanner0 = new JSONScanner("java.time.OffsetTime");
      char char0 = '>';
      jSONScanner0.nextToken(78);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('%', '%', 'P', '>', '1');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[}gjXN:ekYw*0k", 252);
      jSONReaderScanner0.nextToken(10);
      assertEquals('}', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken(18);
      jSONReaderScanner0.bytesValue();
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      boolean boolean0 = jSONScanner0.isEOF();
      boolean boolean1 = JSONScanner.checkDate('P', 'P', 'P', 'd', 'd', 'P', (-1307), 0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1009, (-221));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      char char0 = 'W';
      jSONReaderScanner0.scanInt('W');
      char[] charArray1 = new char[6];
      charArray1[0] = 'W';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7_D>FMT*");
      jSONReaderScanner0.nextToken(20);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      SymbolTable symbolTable0 = new SymbolTable(246);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '^');
      jSONReaderScanner0.putChar('^');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.integerValue();
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-CCU`pK@U");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3129);
      jSONReaderScanner0.nextToken(3129);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-1489));
      char[] charArray0 = new char[6];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      charArray0[0] = '9';
      charArray0[1] = 'O';
      charArray0[2] = '+';
      charArray0[4] = 'm';
      charArray0[5] = 's';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt(')');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('F');
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'F';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      jSONReaderScanner0.copyTo(1561, 0, charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDecimal('F');
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('F');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match F - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-1489));
      jSONReaderScanner0.scanLong('x');
      jSONReaderScanner0.nextToken(0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("truKe");
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.scanDouble('s');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.bytesValue();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      jSONReaderScanner0.info();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.nextToken();
      assertEquals('t', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".tusDv");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('+');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'd';
      charArray0[2] = '#';
      charArray0[5] = 'G';
      charArray0[6] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(bufferedReader0, 791);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'I');
      jSONReaderScanner0.nextToken((-1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFloat('\\');
      jSONReaderScanner0.scanInt('-');
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '-');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'U';
      charArray0[2] = '\\';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanDate('X');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFloat('\\');
      int int0 = Calendar.MILLISECOND;
      jSONReaderScanner0.scanType("");
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("truKe");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.sp = 17;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-CCU`pK@U");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3129);
      jSONReaderScanner0.nextToken(3129);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-CCU`pK@U");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      Locale locale0 = Locale.PRC;
      char char0 = 'h';
      jSONScanner0.scanBoolean('h');
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1), 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken(12);
      StringReader stringReader0 = new StringReader("-G\"7t&TJ~vm17ZuI<t");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.sp = 34;
      jSONReaderScanner1.nextIdent();
      try { 
        jSONReaderScanner1.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rK");
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = ')';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.nextToken(12);
      jSONReaderScanner0.isBlankInput();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6idya69");
      jSONReaderScanner0.scanDate('O');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal ref, ");
      SymbolTable symbolTable0 = new SymbolTable(78);
      Class<Feature> class0 = Feature.class;
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '?');
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '?');
      jSONReaderScanner0.nextToken(91);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("}hM8~~[*sPa~:KE9y", 40);
      JSONLexerBase.readString((char[]) null, 0);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^)r!*W$,n~'\"");
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      charArray0[1] = 'T';
      jSONReaderScanner0.scanString('T');
      jSONReaderScanner0.nextToken((-2840));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : )
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'R';
      charArray0[2] = 'h';
      charArray0[3] = 'q';
      charArray0[4] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      Feature feature0 = Feature.AllowComment;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanDate('-');
      char[] charArray1 = new char[6];
      charArray1[0] = 'I';
      charArray1[1] = 'k';
      charArray1[2] = '-';
      charArray1[3] = 'I';
      charArray1[4] = '+';
      charArray1[5] = 'R';
      jSONReaderScanner0.sbuf = charArray1;
      jSONReaderScanner0.scanDecimal('e');
      jSONReaderScanner0.scanLong('h');
      jSONReaderScanner0.scanDouble('R');
      jSONReaderScanner0.isEnabled(1);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-1315));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tr_e");
      jSONReaderScanner0.scanDouble('}');
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]&");
      jSONReaderScanner0.nextToken((-11));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"", 2626);
      SymbolTable symbolTable0 = new SymbolTable(2626);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("'XY#", 125, 2626, 46, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$");
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[16];
      charArray1[0] = '4';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. $
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '<';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[3] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2458, 39);
      jSONReaderScanner0.scanLong('6');
      jSONReaderScanner0.matchStat = 2458;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 2458);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte) (-102);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONLexerBase.isWhitespace('A');
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47);
      jSONReaderScanner0.scanLong('+');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken(16);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"e\", pos 1, json : error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eZ");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 1, json : eZ
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken(28);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ew");
      jSONReaderScanner0.nextToken(2);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('Z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vlzZ?ykHk");
      jSONReaderScanner0.nextToken(6);
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("error", string0);
      
      JSONScanner jSONScanner0 = new JSONScanner("vlzZ?ykHk");
      jSONScanner0.isEOF();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char char0 = '<';
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.mark(4);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanDate('<');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 95, 3525);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken(2);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("truKe");
      int int0 = 2;
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '7';
      char char0 = '8';
      charArray0[2] = '8';
      charArray0[3] = '?';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 255, 58);
      jSONReaderScanner1.nextToken(255);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("truKe");
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      jSONReaderScanner0.scanDouble('6');
      jSONReaderScanner0.scanBoolean('s');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 5);
      SymbolTable symbolTable0 = new SymbolTable(120);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.numberString();
      jSONScanner0.nextToken(5);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xx", 9);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. x
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 5);
      SymbolTable symbolTable0 = new SymbolTable(120);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'k');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      SymbolTable symbolTable0 = new SymbolTable('[');
      jSONReaderScanner0.scanSymbol(symbolTable0, '[');
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M-dd>*8sj`o'#|S]", (-1186));
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '-';
      SymbolTable symbolTable0 = new SymbolTable(999999);
      jSONReaderScanner0.scanSymbol(symbolTable0, '');
      charArray0[2] = 'e';
      charArray0[3] = ')';
      charArray0[4] = '#';
      charArray0[5] = '$';
      charArray0[6] = '5';
      charArray0[7] = '=';
      charArray0[8] = 'o';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken(79);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'J');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'Q';
      charArray0[3] = ' ';
      charArray0[4] = '';
      charArray0[5] = '6';
      charArray0[6] = 'c';
      charArray0[7] = 'I';
      charArray0[8] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4, 4);
      jSONReaderScanner0.nextToken(4);
      jSONReaderScanner0.close();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E/,KE[ < B];1(");
      JSONScanner jSONScanner0 = new JSONScanner("E/,KE[ < B];1(");
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      char[] charArray0 = new char[0];
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&");
      jSONScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = ')';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 678, (-406));
      jSONReaderScanner1.scanUUID('/');
      jSONReaderScanner1.skipComment();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("[biV6.OeVa$w");
      jSONReaderScanner2.putChar('\"');
      jSONReaderScanner2.nextToken(0);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("truKe");
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_af", (-1188));
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("new");
      jSONReaderScanner0.scanStringArray(arrayList0, 'q');
      jSONReaderScanner0.scanUUID('(');
      jSONReaderScanner0.tokenName();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("new");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = '!';
      charArray0[2] = 'k';
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanStringArray(arrayList0, 'k');
      charArray0[3] = '#';
      charArray0[4] = '%';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('9');
      jSONScanner0.scanInt(':');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("InitStringFieldAsEmpty");
      jSONScanner0.isEnabled(3227, 125);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "illegal identifier : ";
      objectArray0[1] = (Object) "InitStringFieldAsEmpty";
      objectArray0[2] = (Object) jSONScanner0;
      objectArray0[3] = (Object) "InitStringFieldAsEmpty";
      objectArray0[4] = (Object) "illegal identifier : ";
      jSONScanner0.intValue();
      objectArray0[5] = (Object) "InitStringFieldAsEmpty";
      objectArray0[6] = (Object) jSONScanner0;
      objectArray0[7] = (Object) "illegal identifier : ";
      objectArray0[8] = (Object) "illegal identifier : ";
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.lexError("illegal identifier : ", objectArray0);
      jSONScanner0.intValue();
      jSONScanner0.indexOf('`', 10);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0d*b-x5W|*njF/j");
      jSONReaderScanner0.scanDouble('l');
      jSONReaderScanner0.scanDate('r');
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONToken");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[5];
      char char0 = ':';
      charArray0[0] = ':';
      char char1 = '!';
      charArray0[1] = '!';
      char char2 = '\'';
      jSONReaderScanner0.scanUUID('\'');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = '~';
      charArray0[2] = 't';
      charArray0[3] = 'U';
      charArray0[4] = '7';
      charArray0[5] = '~';
      charArray0[6] = 'U';
      charArray0[7] = '~';
      charArray0[8] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2590);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      charArray0[7] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1976, 9999);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1976, 1832);
      jSONReaderScanner1.scanLong('6');
      JSONScanner jSONScanner0 = new JSONScanner("PHRSax~}a~/1", 1832);
      jSONReaderScanner1.info();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.isBlankInput();
      assertEquals(9999, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDouble('}');
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '}';
      charArray0[4] = '}';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanBoolean('K');
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":\"");
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.scanString(' ');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0d*b-x5W|*njF/j");
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONToken");
      int int0 = jSONReaderScanner0.scanInt('\'');
      assertEquals(0, int0);
      
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.subString(0, 584);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6Pm6HL");
      jSONReaderScanner0.scanInt('J');
      jSONReaderScanner0.nextToken(28);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(28, (-2216));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2216
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[&5Jn-b@ML`~K");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add(0, "new");
      arrayList0.add("[&5Jn-b@ML`~K");
      jSONReaderScanner1.scanStringArray(arrayList0, '*');
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'q';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = '%';
      charArray0[5] = 'q';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('5');
      JSONScanner jSONScanner0 = new JSONScanner("new", (-1));
      jSONScanner0.scanInt('!');
      jSONScanner0.scanUUID('z');
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[&5Jn-b@ML`~K");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add(0, "new");
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("TreeSet");
      arrayList0.add("[&5Jn-b@ML`~K");
      jSONReaderScanner1.scanStringArray(arrayList0, '*');
      jSONReaderScanner1.nextToken(0);
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanInt('L');
      int int0 = 28;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      Locale locale0 = Locale.PRC;
      jSONScanner0.scanBoolean('h');
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      jSONScanner0.np = 105;
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = new SymbolTable(4155);
      // Undeclared exception!
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 't');
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = new SymbolTable(4155);
      // Undeclared exception!
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'q');
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9cM)Fh-<^3@'a@24Gd");
      jSONReaderScanner0.scanFloat('X');
      BigDecimal bigDecimal0 = new BigDecimal(24);
      assertEquals((byte)24, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GMnP;es;OqzoOksFL");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("GMnP;es;OqzoOksFL", 0);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      Locale locale0 = Locale.FRENCH;
      int int0 = jSONScanner0.intValue();
      assertEquals(26552, int0);
      
      jSONScanner0.indexOf('\\', (-1438503259));
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GMnP;es;OqzoOksFL");
      JSONScanner jSONScanner0 = new JSONScanner("GMnP;es;OqzoOksFL", 0);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      Locale locale0 = Locale.FRENCH;
      char[] charArray0 = new char[1];
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 4096);
      jSONReaderScanner1.scanDate('L');
      char[] charArray1 = new char[2];
      charArray1[0] = 'z';
      charArray1[1] = '6';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0rKe");
      char[] charArray0 = new char[3];
      jSONReaderScanner0.matchStat = (int) ',';
      charArray0[2] = 'P';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.longValue();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0rKe");
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      jSONReaderScanner0.matchStat = (int) ',';
      charArray0[2] = 'P';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.longValue();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ew");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken(15);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      jSONReaderScanner0.nextToken(185);
      jSONReaderScanner0.scanFloat('m');
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      SymbolTable symbolTable0 = new SymbolTable(4);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'm');
      BigDecimal bigDecimal0 = new BigDecimal(3);
      jSONReaderScanner0.tokenName();
      SymbolTable symbolTable1 = new SymbolTable(3);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("error");
      char[] charArray1 = new char[8];
      charArray1[0] = 'm';
      charArray1[1] = '#';
      charArray1[2] = 'm';
      charArray1[3] = 'P';
      charArray1[4] = 'm';
      charArray1[5] = '#';
      charArray1[6] = 'm';
      charArray1[7] = '#';
      Class<Integer> class1 = Integer.class;
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray1, class1);
      assertNull(collection0);
  }
}
