/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 19:19:17 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("'");
      jRip0.setCheckErrorRate(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      jRip0.setMinNo(4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jRip0.minNoTipText();
      String[] stringArray0 = jRip0.getOptions();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip jRip1 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.setCheckErrorRate(true);
      Utils.SMALL = 22.6078;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier.main(stringArray0);
      jRip1.checkErrorRateTipText();
      jRip0.setOptions(stringArray0);
      jRip0.checkErrorRateTipText();
      jRip0.setOptions(stringArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 353.9060287;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 22.6078;
      doubleArray0[4] = (double) 3647;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(459.5521724222, doubleArray0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("numeric");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numeric not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      jRip0.setUsePruning(false);
      jRip0.setMinNo(4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      attribute0.value(3647);
      String[] stringArray0 = jRip0.getOptions();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip jRip1 = new JRip();
      jRip0.setCheckErrorRate(true);
      jRip_NominalAntd0.value = 3020.0;
      Utils.SMALL = 22.6078;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      AbstractClassifier.runClassifier(serializedClassifier0, stringArray0);
      jRip1.checkErrorRateTipText();
      jRip0.setOptions(stringArray0);
      jRip0.globalInfo();
      jRip0.setOptions(stringArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 2;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 22.6078;
      doubleArray0[4] = (double) 3647;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(459.5521724222, doubleArray0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("numeric");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numeric not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, list0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      boolean boolean0 = jRip_NumericAntd0.covers(denseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 3020);
      jRip_RipperRule0.setConsequent(3020);
      Instances instances1 = new Instances("", arrayList0, 3020);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = predicate0.negate();
      Attribute attribute0 = new Attribute(".arff", "", 3020);
      predicate1.negate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip0.getDebug();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NumericAntd0.splitData(instances0, 3020, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      AbstractInstance.s_numericAfterDecimalPoint = (-1109);
      instances1.add((Instance) binarySparseInstance0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd1.copy();
      jRip0.getOptimizations();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 72);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      SparseInstance sparseInstance0 = new SparseInstance(72, doubleArray0, intArray0, (-5120));
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("@data");
      Attribute attribute0 = new Attribute("", arrayList1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 2, (-1109));
      Enumeration enumeration0 = attribute0.enumerateValues();
      jRip0.getUsePruning();
      RuleStats.partition(instances0, (-1109));
      arrayList1.add("@end");
      arrayList0.add(attribute0);
      RuleStats.partition(instances0, 3);
      jRip0.setOptimizations(1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) enumeration0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.and(predicate2);
      JRip jRip1 = new JRip();
      attribute0.equals(arrayList0);
      jRip1.getOptions();
      jRip0.setOptimizations(119);
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      instances0.add((Instance) sparseInstance0);
      jRip_NominalAntd0.covers(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, (-1109), Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip_RipperRule0.setConsequent(1.0);
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      Predicate<Object> predicate1 = predicate0.negate();
      Attribute attribute0 = new Attribute("'", 79);
      Predicate<Object> predicate2 = predicate0.negate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate1.and(predicate0);
      predicate1.and(predicate2);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule1.hasAntds();
      predicate0.and(predicate3);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("'", (List<String>) null, protectedProperties0);
      attribute0.equals(attribute1);
      Locale.getISOLanguages();
      jRip0.setOptimizations(2);
      JRip jRip2 = new JRip();
      arrayList0.add(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.att = attribute1;
      jRip_NominalAntd0.splitData(instances0, 3, 1);
      JRip jRip3 = new JRip();
      // Undeclared exception!
      try { 
        jRip3.getMeasure("string");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      jRip_RipperRule0.setConsequent(83);
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Attribute attribute0 = new Attribute((String) null, "", (-52));
      jRip0.optimizationsTipText();
      jRip_RipperRule0.grow(instances0);
      System.setCurrentTimeMillis((-1435L));
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances1.clear();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      binarySparseInstance0.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip_NominalAntd0.splitData(instances1, 4, 1);
      JRip jRip1 = new JRip();
      instances0.listIterator();
      JRip.main(stringArray0);
      jRip1.setCheckErrorRate(false);
      jRip1.getOptions();
      jRip_RipperRule0.prune(instances1, true);
      JRip jRip2 = new JRip();
      jRip1.getUsePruning();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("$JF6@4?J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // $JF6@4?J not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      jRip_RipperRule0.setConsequent(83);
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Attribute attribute0 = new Attribute((String) null, "", (-52));
      jRip0.optimizationsTipText();
      jRip_RipperRule0.grow(instances0);
      System.setCurrentTimeMillis((-1435L));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Instances instances1 = new Instances(instances0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      instances1.clear();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule2.grow(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-282.422638315));
      Instances instances0 = null;
      Attribute attribute0 = new Attribute((String) null, "", 2161);
      jRip0.optimizationsTipText();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      AbstractClassifier.makeCopies(jRip0, 1921);
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[5];
      SparseInstance sparseInstance0 = new SparseInstance(2835.5761371043, doubleArray0, intArray0, 4542);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.TAIWAN;
      locale0.getUnicodeLocaleKeys();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@data";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "";
      stringArray0[3] = ".arff";
      stringArray0[4] = "'";
      stringArray0[5] = "";
      stringArray0[6] = "'";
      JRip.main(stringArray0);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      AbstractClassifier.makeCopies(jRip0, 1921);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".arff", protectedProperties0);
      instances0.deleteWithMissing(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2835.5761371043, doubleArray0, intArray0, 4575);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.getISOCountries();
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Attribute attribute1 = new Attribute("@data", list0);
      attribute1.setWeight(1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip0.foldsTipText();
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass(0.0, instances0, (-559.935528690653), 50.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(50.0);
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      AbstractClassifier.makeCopies(jRip0, 1921);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      SparseInstance sparseInstance0 = new SparseInstance(2835.5761371043, doubleArray0, intArray0, 4542);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Attribute attribute0 = new Attribute("@data", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accuRate = (-500.29);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip0.foldsTipText();
      JRip jRip1 = new JRip();
      jRip_NumericAntd0.toString();
      jRip_RipperRule0.hasAntds();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1109), doubleArray0);
      binarySparseInstance0.setValueSparse(0, (-1.0));
      JRip jRip2 = new JRip();
      try { 
        jRip2.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[1] = 83;
      intArray0[2] = 83;
      intArray0[4] = 83;
      SparseInstance sparseInstance0 = new SparseInstance(707.0622261, doubleArray0, intArray0, 83);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-93);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Attribute attribute0 = new Attribute("", arrayList1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      arrayList0.add(attribute0);
      jRip_NumericAntd0.splitData(instances0, (-1.0), 0);
      jRip_NumericAntd0.accu = (double) 83;
      jRip_NumericAntd0.value = (double) 83;
      jRip_NumericAntd0.covers(sparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList1.add("http://www-stat.stanford.edu/~jhf/ftp/stobst.ps");
      intArray0[1] = 83;
      jRip_NominalAntd0.splitData(instances0, 83.0, 83.0);
      SparseInstance sparseInstance1 = new SparseInstance((-2486.37519104349), doubleArray0, intArray0, 0);
      // Undeclared exception!
      try { 
        sparseInstance1.setClassValue(".arff");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      AbstractClassifier.makeCopies(jRip0, 1921);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      SparseInstance sparseInstance0 = new SparseInstance(2835.5761371043, doubleArray0, intArray0, 4542);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Attribute attribute0 = new Attribute("@data", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip0.foldsTipText();
      JRip jRip1 = new JRip();
      jRip_NumericAntd0.toString();
      jRip_RipperRule0.hasAntds();
      SparseInstance sparseInstance1 = new SparseInstance(4, doubleArray0, intArray0, 1);
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 1, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[1] = 83;
      intArray0[2] = 83;
      intArray0[4] = 83;
      SparseInstance sparseInstance0 = new SparseInstance(707.0622261, doubleArray0, intArray0, 83);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("C1)8ebm,`xvDHy@i~", arrayList1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      arrayList0.add(attribute0);
      jRip_NumericAntd0.splitData(instances0, (-1.0), 0);
      jRip_NumericAntd0.accu = (double) 83;
      jRip_NumericAntd0.value = (double) 83;
      jRip_NumericAntd0.covers(sparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList1.add("http://www-stat.stanford.edu/~jhf/ftp/stobst.ps");
      jRip_NominalAntd0.value = (double) 83;
      jRip_NominalAntd0.splitData(instances0, 83.0, 83.0);
      SparseInstance sparseInstance1 = new SparseInstance((-2486.37519104349), doubleArray0, intArray0, 0);
      jRip_NominalAntd0.covers(sparseInstance1);
      jRip0.listOptions();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.hasAntds();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      jRip_RipperRule1.size();
      jRip_RipperRule1.covers(binarySparseInstance0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) binarySparseInstance0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      jRip_RipperRule1.covers(binarySparseInstance0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.and(predicate4);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("William W. Cohen", linkedList2);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip1.getRuleStats(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("", instances0, protectedProperties2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.getUsePruning();
      String[] stringArray0 = null;
      jRip0.setOptions((String[]) null);
      jRip0.setFolds(0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(1921);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      AbstractClassifier.makeCopies(jRip0, 1921);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SparseInstance sparseInstance0 = new SparseInstance(2835.5761371043, doubleArray0, intArray0, 83);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("@data", list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip0.foldsTipText();
      JRip jRip1 = new JRip();
      jRip_NumericAntd0.splitData(instances0, 1921, 4);
      jRip1.optimizationsTipText();
      jRip_RipperRule0.covers(sparseInstance0);
      jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip1.getUsePruning();
      jRip0.getSeed();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.att = attribute0;
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip1.getFolds());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      AbstractClassifier.makeCopies(jRip0, 1921);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      SparseInstance sparseInstance0 = new SparseInstance(2835.5761371043, doubleArray0, intArray0, 4542);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("@data", list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip0.foldsTipText();
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 4542, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      String string0 = "LT";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.setDebug(true);
      byte[] byteArray0 = new byte[1];
      jRip0.getOptions();
      byteArray0[0] = (byte) (-95);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "LT";
      stringArray0[1] = "LT";
      stringArray0[2] = "LT";
      stringArray0[3] = "LT";
      stringArray0[4] = "LT";
      stringArray0[5] = "LT";
      stringArray0[6] = "LT";
      stringArray0[7] = "LT";
      stringArray0[8] = "LT";
      jRip0.setOptions(stringArray0);
      jRip0.setFolds((byte) (-95));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[1] = 1921;
      intArray0[2] = 1921;
      intArray0[3] = 83;
      intArray0[4] = 83;
      SparseInstance sparseInstance0 = new SparseInstance(707.0622261, doubleArray0, intArray0, 1921);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("C1)8ebm,`xvDHy@i~", arrayList1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accu = (double) 1921;
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) 1921;
      jRip_NumericAntd0.covers(sparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 1921.0, 1921.0);
      SparseInstance sparseInstance1 = new SparseInstance((-2486.37519104349), doubleArray0, intArray0, 83);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      AbstractClassifier.makeCopies(jRip0, 1921);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      SparseInstance sparseInstance0 = new SparseInstance(2835.5761371043, doubleArray0, intArray0, 4542);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("@data", list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip0.foldsTipText();
      JRip jRip1 = new JRip();
      jRip_NumericAntd0.splitData(instances0, 4542, 4);
      jRip1.optimizationsTipText();
      jRip_RipperRule0.covers(sparseInstance0);
      jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip1.getUsePruning();
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 0.5;
      int[] intArray0 = new int[8];
      intArray0[0] = (-100);
      intArray0[1] = 79;
      intArray0[2] = (-15);
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = (-43);
      intArray0[6] = 69;
      intArray0[7] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0, intArray0, (-64));
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      String[] stringArray0 = jRip1.getOptions();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip1.setOptions(stringArray0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, 1);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      AbstractClassifier.makeCopies(jRip0, 1925);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[0] = (-90);
      intArray0[1] = 1925;
      jRip0.setSeed((-749L));
      intArray0[2] = (-90);
      intArray0[3] = 83;
      intArray0[4] = 83;
      SparseInstance sparseInstance0 = new SparseInstance(707.0622261, doubleArray0, intArray0, 1925);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("C1)8ebm,`xvDHy@i~", list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accu = (double) 1925;
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.toString();
      jRip0.checkErrorRateTipText();
      jRip0.globalInfo();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, (-1.0), (-2.147483648E9));
      assertEquals((-749L), jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1481);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 70);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      jRip_RipperRule0.prune(instances0, false);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      try { 
        jRip0.rulesetForOneClass(64.0, (Instances) null, 64.0, 64.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JRip jRip0 = new JRip();
      Instances instances0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@qj+&>PzZI=Uq%";
      stringArray0[1] = "\"k\"PlUnL";
      stringArray0[2] = "-S";
      stringArray0[3] = "*4lh?@tf?hdWoUH(l''";
      stringArray0[4] = "r%";
      stringArray0[5] = "icist";
      stringArray0[6] = "Cannot handle date ";
      stringArray0[7] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*4lh?@tf?hdWoUH(l''\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2576);
      try { 
        jRip1.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("    return \"Auto-generated filter wrapper, based on ");
      Attribute attribute1 = new Attribute("string");
      attribute0.addStringValue(attribute1, 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 2;
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.toString();
      jRip0.setOptimizations(1);
      jRip0.getOptions();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Attribute attribute2 = null;
      try {
        attribute2 = new Attribute("No pruning: one rule found:\n", (Instances) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      sparseInstance0.setValue((-1161), (double) 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(4);
      assertEquals(4, jRip0.getFolds());
      
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip1 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "J';W>X21[)Pw`Y0/]";
      stringArray0[1] = "+>k4xXQ^GJ0L%a-}H\"";
      stringArray0[2] = "Gradient converge: ";
      stringArray0[3] = "";
      stringArray0[4] = "-N";
      stringArray0[5] = "";
      jRip1.setOptions(stringArray0);
      assertEquals(3, jRip1.getFolds());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "\n\nClass ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "\n\nClass ";
      stringArray0[5] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[6] = "-F";
      stringArray0[7] = "L(DgP:K";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L(DgP:K\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.setCheckErrorRate(false);
      jRip0.setCheckErrorRate(false);
      jRip0.listOptions();
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = null;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setOptions((String[]) null);
      String string0 = jRip0.usePruningTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether pruning is performed.", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      jRip0.getMinNo();
      String[] stringArray0 = new String[0];
      JRip.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Utils.log2 = 1300.120193;
      jRip0.setOptimizations((-54));
      int int0 = jRip0.getOptimizations();
      assertEquals((-54), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        jRip0.rulesetForOneClass(0.0, (Instances) null, (-1.0), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Attribute attribute0 = new Attribute("7*5:5WIe\"mi/P\"OzHZ^");
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      double double0 = jRip0.getMinNo();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JRip jRip0 = new JRip();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Instances instances0 = null;
      try { 
        jRip0.rulesetForOneClass(Double.NaN, (Instances) null, Double.NaN, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        jRip0.rulesetForOneClass((-1.0), (Instances) null, 0.0, (-1739.866872083159));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JRip jRip0 = new JRip();
      DenseInstance denseInstance0 = new DenseInstance(75);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setOptimizations((-684));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0, (-684));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, (-3904.57405801391), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.setDebug(false);
      jRip1.setOptimizations(2288);
      SparseInstance sparseInstance0 = new SparseInstance(2288);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance(sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lY");
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      jRip0.enumerateMeasures();
      jRip0.foldsTipText();
      jRip0.globalInfo();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double double0 = 4483.5029589;
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4483.5029589, intArray0, (-599));
      binarySparseInstance0.dataset();
      try { 
        inputMappedClassifier0.getModelHeader((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.merge("", (Object) null, biFunction0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      properties0.putAll(protectedProperties0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties0.merge(jRip_RipperRule1, classOrder0, biFunction1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => =", string0);
      
      String string1 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string1);
      
      String string2 = jRip0.checkErrorRateTipText();
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string2);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2, jRip0.getOptimizations());
      
      jRip0.setOptimizations((-1));
      jRip0.optimizationsTipText();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("The minimum total weight of the instances in a rule.", (String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals("The minimum total weight of the instances in a rule. = ", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-4439L));
      Attribute attribute0 = null;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getAccu();
      System.setCurrentTimeMillis(0L);
      int int0 = (-2157);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2157));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setMinNo(64.0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("weka/core/Capabilities.props");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weka/core/Capabilities.props not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JRip jRip0 = new JRip();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      try { 
        jRip0.rulesetForOneClass((-3528.5212729208333), (Instances) null, 1296.31514478, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JRip.main((String[]) null);
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.getTechnicalInformation();
      int int0 = (-55);
      jRip0.setOptimizations((-55));
      jRip0.optimizationsTipText();
      jRip0.setSeed(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The number of optimization runs.");
      jRip0.getCapabilities();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.accu = (double) 0L;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      Predicate.isEqual((Object) arrayList0);
      predicate0.negate();
      AbstractClassifier.makeCopies(jRip0, 1921);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[1] = 1921;
      intArray0[2] = (-90);
      intArray0[3] = 83;
      intArray0[4] = 83;
      SparseInstance sparseInstance0 = new SparseInstance(707.0622261, doubleArray0, intArray0, 1921);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("C1)8ebm,`xvDHy@i~", list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accu = (double) 1921;
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.toString();
      jRip0.foldsTipText();
      jRip0.usePruningTipText();
      jRip0.getMinNo();
      try { 
        jRip0.rulesetForOneClass((-137.1001102), instances0, (-137.1001102), 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 83);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.negate();
      AbstractClassifier.makeCopies(jRip0, 1921);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[1] = 1921;
      intArray0[2] = (-90);
      intArray0[3] = 83;
      intArray0[4] = 83;
      SparseInstance sparseInstance0 = new SparseInstance(707.0622261, doubleArray0, intArray0, 1921);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("C1)8ebm,`xvDHy@i~", list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accu = (double) 1921;
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (-1228.551);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.toString();
      jRip0.foldsTipText();
      jRip0.usePruningTipText();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("veUQSPJ/u2]QPvAV8z", arrayList0, 2065);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Attribute attribute1 = attribute0.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      jRip_NumericAntd0.covers(sparseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.ensureCapacity(11);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.getRevision();
      jRip0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-753));
      jRip0.getCheckErrorRate();
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttr();
      assertEquals((-753), jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      try { 
        jRip0.rulesetForOneClass(3904.69041, (Instances) null, (-4822.776060416), 4.8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@ f6:n>5Do~ ";
      stringArray0[1] = "@ f6:n>5Do~ ";
      stringArray0[2] = "@ f6:n>5Do~ ";
      stringArray0[3] = "@ f6:n>5Do~ ";
      stringArray0[4] = "@ f6:n>5Do~ ";
      stringArray0[5] = "@ f6:n>5Do~ ";
      stringArray0[6] = "@ f6:n>5Do~ ";
      stringArray0[7] = "@ f6:n>5Do~ ";
      stringArray0[8] = "@ f6:n>5Do~ ";
      JRip.main(stringArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      jRip0.enumerateMeasures();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      boolean boolean0 = false;
      CoverTree coverTree0 = new CoverTree();
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 1;
      try { 
        jRip0.rulesetForOneClass(4.0, (Instances) null, (-1.0), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      try { 
        jRip0.rulesetForOneClass(1.0, (Instances) null, (-753), (-2376.64119));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.listOptions();
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      String string1 = jRip0.checkErrorRateTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string1);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.getTechnicalInformation();
      System.setCurrentTimeMillis(42L);
      jRip0.setFolds(350);
      assertEquals(350, jRip0.getFolds());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setOptimizations((-778));
      jRip0.checkErrorRateTipText();
      assertEquals((-778), jRip0.getOptimizations());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"position\" is numeric: ";
      stringArray0[1] = ": ";
      stringArray0[2] = "";
      stringArray0[3] = "_*/AO#3`nOWJ!";
      stringArray0[4] = "iW%$Vqz";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Derek H. Sleeman and Peter Edwards";
      stringArray0[8] = "-split-percentage <percentage>\n";
      jRip0.setOptions(stringArray0);
      AbstractClassifier.makeCopy(jRip0);
      jRip0.setOptimizations(4);
      jRip0.listOptions();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      System.setCurrentTimeMillis(1L);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DenseInstance denseInstance0 = new DenseInstance(480);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      boolean boolean0 = jRip_RipperRule0.covers(denseInstance1);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-53));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-53), jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Sorted classes:");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setUsePruning(true);
      jRip_RipperRule0.getRevision();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      try { 
        jRip0.rulesetForOneClass((-3528.5212729208333), (Instances) null, (-3528.5212729208333), (-3528.5212729208333));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, (double[]) null);
      Attribute attribute0 = new Attribute("_binarized", (-24));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getSplitPoint();
      JRip jRip1 = new JRip();
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute("date", "@end", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "implementation in aspects of accuracy, ruleset size and running time ";
      stringArray0[3] = "";
      jRip0.setDebug(true);
      stringArray0[4] = "f~}Ef$=>S;*z-.BQEo";
      stringArray0[5] = "T(sY";
      stringArray0[6] = "i.D.";
      stringArray0[7] = "";
      boolean boolean0 = jRip0.getDebug();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JRip jRip1 = null;
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-4639.87148685291), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Attribute attribute0 = new Attribute("Py`[PQ9", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      AbstractClassifier.makeCopies(jRip0, 21);
      JRip jRip1 = new JRip();
      jRip1.debugTipText();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip1.listOptions();
      jRip_RipperRule1.hasAntds();
      jRip_RipperRule0.copy();
      JRip jRip2 = new JRip();
      jRip2.debugTipText();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute(" Consequent not set yet.", protectedProperties1);
      // Undeclared exception!
      try { 
        attribute1.parseDate("integer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only parse date values for date attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("StuM]/<ciAow;", "", 109);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 109;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 109;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 109;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 1;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1207;
      intArray0[4] = 0;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(1, doubleArray0, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, list0, 227);
      Attribute attribute1 = attribute0.copy((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.foldsTipText();
      KDTree kDTree0 = new KDTree();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("cbR)6#Y/r(9(Q3}z");
      jRip_RipperRule0.toString(attribute0);
      jRip0.getOptions();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 2, 2251.8002986061206);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "3";
      stringArray0[2] = "implementation in aspects of accuracy, ruleset size and running time ";
      stringArray0[3] = "";
      stringArray0[4] = "3";
      stringArray0[5] = "T(sY";
      jRip0.listOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      double double0 = jRip_RipperRule0.getConsequent();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "3";
      stringArray0[2] = "implementation in aspects of accuracy, ruleset size and running time ";
      stringArray0[3] = "";
      stringArray0[4] = "f~}Ef$=>S;*z-.BQEo";
      stringArray0[5] = "f~}Ef$=>S;*z-.BQEo";
      stringArray0[6] = "i.D.";
      stringArray0[7] = "";
      stringArray0[8] = "8T|3&";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(2321.43321437);
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = "No pruning: one rule found:\n";
      jRip_RipperRule0.size();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("No pruning: one rule found:\n", "No pruning: one rule found:\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-224.3499));
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.hasAntds();
      jRip0.checkErrorRateTipText();
      JRip.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 1915;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.seedTipText();
      Utils.log2 = 476.828899;
      Attribute attribute0 = new Attribute("\nGrowing and pruning Revision ...", 0);
      attribute0.value(2063);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("date", arrayList0, 4);
      // Undeclared exception!
      try { 
        instances0.renameAttributeValue(attribute0, (String) null, "SUNFV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null not found
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getUsePruning();
      jRip0.setDebug(true);
      try { 
        AbstractClassifier.forName((String) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: null
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      int int0 = 200003;
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(200003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "3";
      stringArray0[2] = "implementation in aspects of accuracy, ruleset size and running time ";
      stringArray0[3] = "";
      stringArray0[4] = "f~}Ef$=>S;*z-.BQEo";
      stringArray0[5] = "T(sY";
      stringArray0[6] = "i.D.";
      stringArray0[7] = "";
      stringArray0[8] = "8T|3&";
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jRip0.globalInfo();
      Attribute attribute0 = new Attribute("", arrayList0);
      Attribute.typeToString(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getSplitPoint();
      double double0 = (-776.4530170836497);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4878.0, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 0;
      AbstractClassifier.makeCopies(jRip0, 0);
      String[] stringArray0 = new String[3];
      jRip0.getTechnicalInformation();
      stringArray0[0] = "{Ue4k^z<Y{";
      stringArray0[1] = "M+\f";
      stringArray0[2] = " Unable to randomize the class orders.";
      JRip.main(stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-151));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      jRip0.setDebug(false);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = (-3159.6296914);
      jRip_NumericAntd0.accuRate = (-3159.6296914);
      DenseInstance denseInstance0 = new DenseInstance((-3159.6296914), (double[]) null);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.main((String[]) null);
      jRip0.getRevision();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(790L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = "cNx,xH(L>(oDi]S8G@l";
      stringArray0[4] = ".";
      stringArray0[5] = ".";
      stringArray0[6] = ".";
      stringArray0[7] = ".";
      stringArray0[8] = ".";
      try { 
        AbstractClassifier.forName(".", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      jRip0.optimizationsTipText();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      try { 
        linearNNSearch0.nearestNeighbour((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The pruning method.";
      stringArray0[1] = ">VJ7wK";
      stringArray0[2] = "'u5x.%j5qD3:S@&BX";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("%6T`pCT0]Za$8/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %6T`pCT0]Za$8/ not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.toString();
      jRip0.setCheckErrorRate(true);
      jRip0.setMinNo((-489.5564));
      jRip0.setCheckErrorRate(false);
      jRip0.getOptimizations();
      jRip0.getOptimizations();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      jRip0.seedTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0.0);
      jRip0.getFolds();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Instances instances0 = null;
      try { 
        principalComponents0.transformedData((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(jRip0, 1285);
      jRip0.getDebug();
      jRip0.getFolds();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", (Instances) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getRevision();
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.getDistances();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The tree has not been supplied with a set of instances or getDistances() has been called before calling kNearestNeighbours().
         //
         verifyException("weka.core.neighboursearch.CoverTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 1507;
      intArray0[1] = 1641;
      intArray0[2] = (-852);
      intArray0[3] = 826;
      intArray0[4] = 3;
      intArray0[5] = 80;
      intArray0[6] = 35;
      intArray0[7] = 1721;
      intArray0[8] = 351;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1593.922317), intArray0, 110);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-2299.09422038));
      jRip0.checkErrorRateTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setSeed((-561L));
      jRip_RipperRule0.getRevision();
      jRip0.getSeed();
      jRip0.checkErrorRateTipText();
      jRip0.checkErrorRateTipText();
      Instances instances0 = null;
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.", (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 0;
      jRip0.setOptimizations(0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(0.0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      IBk iBk0 = new IBk(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1381.5193450307), (int[]) null, 2);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.checkErrorRateTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1256));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getCapabilities((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }
}
