/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 17:44:33 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.sql.JDBCType;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.bean.UntypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.IscStmtHandle;
import org.firebirdsql.gds.IscTrHandle;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.LocalGDSImpl;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBStatement;
import org.h2.table.Table;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.lib.HsqlByteArrayOutputStream;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isProcedureCall("call");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("call");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" NOCHECK");
      SQLUtil.isQuery("}L[PB>zbDM_kI");
      TableContainer tableContainer0 = new TableContainer("---Lk$l");
      assertEquals("---Lk$l", tableContainer0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(98, "Kd @%x\"!#]@e,U=^w ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      SQLUtil.renderColumn(dBColumn0);
      SQLUtil.isDML("create unique index");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getActiveConstraintDescriptors((ConstraintDescriptorList) null);
      dataDictionaryImpl0.getActiveConstraintDescriptors((ConstraintDescriptorList) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("RtQ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update'");
      DBDataType dBDataType0 = DBDataType.getInstance((-1588), "Can't cancel an invalid EventHandle");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RtQ", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CAN'T CANCEL AN INVALID EVENTHANDLE", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|>*#bH|T");
      DBDataType dBDataType0 = DBDataType.getInstance(1, "|>*#bH|T");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer(1);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|>*#bH|T", defaultDBTable0, dBDataType0, integer1, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("|>*#bH|T |>*#BH|T(1,1) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("RbA;c!N");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert", dBSchema0);
      SQLUtil.isDML("insert");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getActiveConstraintDescriptors((ConstraintDescriptorList) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create table");
      boolean boolean0 = SQLUtil.isDDL("create table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create tableo(d-\"lmz&eyar");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      StringBuilder stringBuilder0 = new StringBuilder("select intovnna^vj(k;|c57l\niz");
      SQLUtil.addRequiredCondition("select intovnna^vj(k;|c57l\niz", stringBuilder0);
      assertEquals("select intovnna^vj(k;|c57l\niz and select intovnna^vj(k;|c57l\niz", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("insert");
      DBCatalog dBCatalog0 = new DBCatalog("insert");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("insert", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("vnqa^v");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N|C PpjX]5");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "vnqa^v";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      assertEquals("SELECT * FROM N|C PpjX]5 WHERE vnqa^v = 'vnqa^v'", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.isDML("F2l)\\)gmgrckn&S");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "F2l)\\)gmgrckn&S";
      stringArray0[1] = "F2l)\\)gmgrckn&S";
      stringArray0[2] = "o0^Kw;PVk{/T@Bv";
      stringArray0[3] = "F2l)\\)gmgrckn&S";
      stringArray0[4] = "F2l)\\)gmgrckn&S";
      stringArray0[5] = "F2l)\\)gmgrckn&S";
      stringArray0[6] = "F2l)\\)gmgrckn&S";
      stringArray0[7] = "F2l)\\)gmgrckn&S";
      String string0 = "create table";
      stringArray0[8] = "create table";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBSchema dBSchema0 = new DBSchema("F2l)\\)gmgrckn&S");
      DBPackage dBPackage0 = new DBPackage("F2l)\\)gmgrckn&S", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("&y>:_,1>", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      SQLUtil.ownerDotComponent(compositeDBObject0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9bYh*nwFZ", dBSchema0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.databene.jdbacl.SQLUtil";
      stringArray0[1] = "org.databene.jdbacl.SQLUtil";
      stringArray0[2] = "org.databene.jdbacl.SQLUtil";
      stringArray0[3] = "org.databene.jdbacl.SQLUtil";
      stringArray0[4] = "org.databene.jdbacl.SQLUtil";
      stringArray0[5] = "org.databene.jdbacl.SQLUtil";
      stringArray0[6] = "org.databene.jdbacl.SQLUtil";
      stringArray0[7] = "org.databene.jdbacl.SQLUtil";
      String string0 = SQLUtil.join("org.databene.jdbacl.SQLUtil", "org.databene.jdbacl.SQLUtil", stringArray0, "org.databene.jdbacl.SQLUtil", "org.databene.jdbacl.SQLUtil", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      stringBuilder0.append("*45!");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("sf=@$ca6/$rMd1Vij^", stringBuilder0);
      assertEquals("sf=@$ca6/$rMd1Vij^", stringBuilder0.toString());
      
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("update", "vnna^v", stringArray0, "vnna^v", "org.apache.derby.impl.sql.compile.DeleteNode", stringArray0);
      assertEquals("update join vnna^v as org.apache.derby.impl.sql.compile.DeleteNode on vnna^v.null = org.apache.derby.impl.sql.compile.DeleteNode.null", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<?)wNjs`?S4k9kErWc";
      stringArray0[1] = "<?)wNjs`?S4k9kErWc";
      stringArray0[2] = "<?)wNjs`?S4k9kErWc";
      stringArray0[3] = "<?)wNjs`?S4k9kErWc";
      SQLUtil.renderColumnListWithTableName("<?)wNjs`?S4k9kErWc", stringArray0);
      String string0 = "xW!5C";
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("_-66F");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_-66F";
      String string0 = SQLUtil.renderColumnListWithTableName("_-66F", stringArray0);
      assertEquals("_-66F._-66F", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.removeComments("vnna^vj");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "vnna^vj";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "setSQLAllowed";
      SQLUtil.isProcedureCall("setSQLAllowed");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("", "q 'E", (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "UeXdZkKVh'YXU\"p";
      stringArray0[4] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., ., ., .UeXdZkKVh'YXU\"p, .", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("");
      DBPackage dBPackage0 = new DBPackage("", (DBSchema) null);
      String string1 = SQLUtil.substituteMarkers("", "., ., ., .UeXdZkKVh'YXU\"p, .", dBPackage0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" NCHECK");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockMinguoDate.now();
      String string0 = SQLUtil.substituteMarkers(" NCHECK", " NCHECK", mockMinguoDate0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "aj=3:";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "aj=3:";
      stringArray0[1] = "aj=3:";
      stringArray0[2] = "iUi";
      stringArray0[3] = "aj=3:";
      stringArray0[4] = "aj=3:";
      stringArray0[5] = "aj=3:";
      stringArray0[6] = "aj=3:";
      stringArray0[7] = "aj=3:";
      SQLUtil.leftJoin("aj=3:", stringArray0, "aj=3:", "aj=3:", stringArray0);
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("LV'p.");
      StringBuilder stringBuilder1 = stringBuilder0.append(0L);
      SQLUtil.addRequiredCondition("i/h+b6z hTmGD;J&)", stringBuilder1);
      assertEquals("LV'p.0 and i/h+b6z hTmGD;J&)", stringBuilder1.toString());
      assertEquals("LV'p.0 and i/h+b6z hTmGD;J&)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("sf=@$ca6/$rMd1Vij^", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, " does not represent a directory");
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'Y';
      charArray0[2] = 'P';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      StringBuilder stringBuilder4 = stringBuilder3.replace(0, 0, "sf=@$ca6/$rMd1Vij^");
      StringBuilder stringBuilder5 = stringBuilder4.append((CharSequence) "sf=@$ca6/$rMd1Vij^");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("org.h2.store.FileStore");
      SQLUtil.substituteMarkers("", "", tableContainer0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "org.h2.store.FileStore";
      stringArray0[2] = "org.h2.store.FileStore";
      stringArray0[3] = " (";
      stringArray0[4] = "org.h2.store.FileStore";
      stringArray0[5] = "";
      stringArray0[6] = "0Tj=!MZ?;l~f";
      stringArray0[7] = "v|9.";
      stringArray0[8] = "";
      SQLUtil.innerJoin("", stringArray0, "v|9.", "org.h2.store.FileStore", stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("0Tj=!MZ?;l~f", (String) null, versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8/Uf-*C%;]Y=&[M";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "8/Uf-*C%;]Y=&[M", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "8/Uf-*C%;]Y=&[M");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(",");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("- 0", true, (String) null, "select");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"- 0\" CHECK select", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("sf=@$ca6/$rMd1Vij^", stringBuilder0);
      assertEquals("sf=@$ca6/$rMd1Vij^", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sf=@$ca6/$rMd1Vij^");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sf=@$ca6/$rMd1Vij^";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "sf=@$ca6/$rMd1Vij^", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (sf=@$ca6/$rMd1Vij^, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "tD@QG";
      SQLUtil.parseColumnTypeAndSize("tD@QG");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("LV'p.");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("LV'p.", stringBuilder0);
      SQLUtil.addRequiredCondition("i/h+b6z hTmGD;J&)", stringBuilder1);
      assertEquals("LV'p. or LV'p. and i/h+b6z hTmGD;J&)", stringBuilder1.toString());
      assertEquals("LV'p. or LV'p. and i/h+b6z hTmGD;J&)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "");
      int int0 = 13;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(13, 393);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 13
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.isQuery("getArray(String)");
      SQLUtil sQLUtil0 = new SQLUtil();
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '_';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = 'g';
      charArray0[5] = 'R';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-1244), 675);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("@S};2/MLoEn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("@S};2/MLoEn", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@S};2/MLoEn", defaultDBTable0, (-177), "UNIQUE ");
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = SQLUtil.normalize("jANmG", true);
      assertEquals("jANmG", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "nz*N[VQ[0)dX";
      stringArray0[1] = ")GxDoE#z8 |AJw=]l";
      stringArray0[2] = "jANmG";
      stringArray0[3] = "@S};2/MLoEn";
      String string1 = SQLUtil.join("nz*N[VQ[0)dX", ")GxDoE#z8 |AJw=]l", stringArray0, "UNIQUE ", "nz*N[VQ[0)dX", stringArray0);
      assertEquals("nz*N[VQ[0)dX join UNIQUE  as nz*N[VQ[0)dX on )GxDoE#z8 |AJw=]l.nz*N[VQ[0)dX = nz*N[VQ[0)dX.nz*N[VQ[0)dX and )GxDoE#z8 |AJw=]l.)GxDoE#z8 |AJw=]l = nz*N[VQ[0)dX.)GxDoE#z8 |AJw=]l and )GxDoE#z8 |AJw=]l.jANmG = nz*N[VQ[0)dX.jANmG and )GxDoE#z8 |AJw=]l.@S};2/MLoEn = nz*N[VQ[0)dX.@S};2/MLoEn", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("R(Kl0H\"N<70Gq F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: R(Kl0H\"N<70Gq F
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("VNNA^VJ(k;|c57LNiz");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("6=1vmCb3[aG+~l", stringBuilder0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = " NOCHECK";
      stringArray0[3] = " NOCHECK";
      stringArray0[4] = " NOCHECK";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(,  NOCHECK, ,  NOCHECK,  NOCHECK)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("VWSRrB1Ig@", false);
      assertEquals("VWSRrB1Ig @", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(98, "Kd @%x\"!#]@e,U=^w ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      defaultDBTable0.getColumn("");
      String string0 = SchemaDescriptor.IBM_SYSTEM_CAT_SCHEMA_NAME;
      boolean boolean1 = SQLUtil.isDML("SYSCAT");
      assertFalse(boolean1);
      
      String string1 = SQLUtil.normalize("IoDQ?E!^w=enGyru>_", true);
      assertEquals("IoDQ ? E ! ^ w = enGyru > _", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = SQLUtil.join("SYSCAT", "", stringArray0, "IoDQ ? E ! ^ w = enGyru > _", "IoDQ?E!^w=enGyru>_", stringArray0);
      assertEquals("SYSCAT join IoDQ ? E ! ^ w = enGyru > _ as IoDQ?E!^w=enGyru>_ on ", string2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("LzgmUKo", true, "LzgmUKo", "SELECT * FROM ");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT LzgmUKo ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("@S};2/MLoEn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("6=1vmCb3[aG+~l", stringBuilder0);
      assertEquals("6=1vmCb3[aG+~l", stringBuilder0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@S};2/MLoEn";
      stringArray0[1] = "6=1vmCb3[aG+~l";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.parseColumnTypeAndSize("6=1vmCb3[aG+~l");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBSchema0.getTable("@S};2/MLoEn");
      DBDataType dBDataType0 = DBDataType.getInstance(95, "6=1vmCb3[aG+~l");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6=1vmCb3[aG+~l", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("6=1vmCb3[aG+~l", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(98, "Kd @%x\"!#]@e,U=^w ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vnna^vj", defaultDBTable0, (-355389787), "UNIQUE ");
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType.getInstance((-3347), "Kd @%x\"!#]@e,U=^w ");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn1.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.sql.SQLXML";
      stringArray0[1] = "exec";
      stringArray0[2] = null;
      stringArray0[3] = "Kd @%x\"!#]@e,U=^w ";
      stringArray0[4] = "vnna^vj";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = 'G';
      charArray0[2] = 'p';
      charArray0[3] = '~';
      charArray0[4] = '_';
      charArray0[5] = 'G';
      charArray0[6] = '@';
      charArray0[7] = 'K';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-1754445842), (-1754445842));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("sf=@$ca6/$rMd1Vij^", stringBuilder0);
      stringBuilder1.insert(0, "sf=@$ca6/$rMd1Vij^");
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      String[] stringArray0 = new String[2];
      stringArray0[0] = "sf=@$ca6/$rMd1Vij^";
      stringArray0[1] = "sf=@$ca6/$rMd1Vij^";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(sf=@$ca6/$rMd1Vij^, sf=@$ca6/$rMd1Vij^)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sf=@$ca6/$rMd1Vij^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.mutatesDataOrStructure("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter index";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.parseColumnTypeAndSize("");
      DBDataType dBDataType0 = DBDataType.getInstance((-593340621), "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("refereeTable", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("V");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("V(2)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("Y2nQqw<\fjaO,q");
      String string0 = SQLUtil.removeComments("Y2nQqw<\fjaO,q");
      assertEquals("Y2nQqw<\fjaO,q", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("sf=@$ca6/$rMd1Vij^");
      String string0 = SQLUtil.normalize("F<OFfd,w,=/`z|m}", true);
      assertEquals("F < OFfd, w, = / ` z | m }", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBPackage dBPackage0 = new DBPackage("insertinsert", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("6b138684-0121-c5e9-9114-00000043e718", dBPackage0);
      String string0 = SQLUtil.typeAndName(dBProcedure0);
      assertNotNull(string0);
      assertEquals("procedure 6b138684-0121-c5e9-9114-00000043e718", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("sf=@$ca6/$rMd1Vij^");
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, (long) 1);
      SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      assertEquals("s1f=@$ca6/$rMd1Vij^ and null", stringBuilder1.toString());
      
      CompositeDBObject<TableContainer> compositeDBObject0 = (CompositeDBObject<TableContainer>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      tableContainer0.getSchema();
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container null", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("sf=@$ca6/$rMd1Vij^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$A1xyt7RI\"Cf");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sf=@$ca6/$rMd1Vij^";
      stringArray0[1] = "$A1xyt7RI\"Cf";
      stringArray0[2] = "sf=@$ca6/$rMd1Vij^";
      stringArray0[3] = "sf=@$ca6/$rMd1Vij^";
      stringArray0[4] = "sf=@$ca6/$rMd1Vij^";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop tablel<w", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop tablel<w\" UNIQUE (sf=@$ca6/$rMd1Vij^, $A1xyt7RI\"Cf, sf=@$ca6/$rMd1Vij^, sf=@$ca6/$rMd1Vij^, sf=@$ca6/$rMd1Vij^, )", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42Z91");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("g%m-)<`Vij]?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("1hH_G8?w,U|'7=VUw[d", stringBuilder0);
      assertEquals("CONSTRAINT g%m-)<`Vij]?  and 1hH_G8?w,U|'7=VUw[d", stringBuilder0.toString());
      
      TableContainer tableContainer0 = new TableContainer("g%m-)<`Vij]?", defaultDBTable0);
      tableContainer0.getSchema();
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint g%m-)<`Vij]?", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("sf=@$ca6/$rMd1Vij^", stringBuilder0);
      stringBuilder1.insert(0, " does not represent a directory");
      assertEquals(" does not represent a directorysf=@$ca6/$rMd1Vij^", stringBuilder1.toString());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String string0 = SQLUtil.normalize("43X54.U", false);
      assertEquals("43X54.U", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("sf=@$ca6/$rMd1Vij^");
      SQLUtil.isQuery("sf=@$ca6/$rMd1Vij^");
      SQLUtil.normalize("sf=@$ca6/$rMd1Vij^", true);
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "sf = @ $ ca6 / $ rMd1Vij ^";
      stringArray0[2] = "sf=@$ca6/$rMd1Vij^";
      stringArray0[3] = null;
      stringArray0[4] = "sf = @ $ ca6 / $ rMd1Vij ^";
      stringArray0[5] = "sf=@$ca6/$rMd1Vij^";
      stringArray0[6] = "sf=@$ca6/$rMd1Vij^";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-3617), (char[]) null, (-3617), 557);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3617
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBDataType.getInstance(4147, "vnn`a^vj");
      String string0 = SQLUtil.normalize("- 0", false);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("*`GNQgf");
      String string0 = SQLUtil.normalize("*`GNQgf", false);
      assertEquals("* ` GNQgf", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("z_a4BH");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("*`GNQgf");
      DBSchema dBSchema0 = new DBSchema("-wAO_H1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*`GNQgf", dBSchema0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-3);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      HsqlByteArrayOutputStream hsqlByteArrayOutputStream0 = rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(hsqlByteArrayOutputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(23, hsqlByteArrayOutputStream0.size());
      
      String string0 = SQLUtil.renderValue(nameSpec0);
      assertEquals("IF_REPRODUCIBLE", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("o(D-\"LMZ&EyAr");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o(D-\"LMZ&EyAr", dBSchema0);
      FileUtil.canonicalFile("o(D-\"LMZ&EyAr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o(D-\"LMZ&EyAr");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil.normalize("R(Kl0H'\"N<70Gq F", true);
      CompositeDBObject<DBNonUniqueIndex> compositeDBObject0 = (CompositeDBObject<DBNonUniqueIndex>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("(:Qx[B;`8bMrb", compositeDBObject0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        tableContainer0.addTable((DBTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainerSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "z_a4BH";
      String string1 = "-";
      DBCatalog dBCatalog0 = new DBCatalog("-");
      String string2 = "create unique indexvnna^vj(k;|c57l\\niz";
      dBCatalog0.getSchema("create unique indexvnna^vj(k;|c57l\niz");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z_a4BH", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[0];
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      HsqlByteArrayOutputStream hsqlByteArrayOutputStream0 = rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(hsqlByteArrayOutputStream0, true);
      // Undeclared exception!
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("*`GNQgf");
      String string0 = SQLUtil.normalize("ZMIH)~R", true);
      assertEquals("ZMIH) ~ R", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      boolean boolean0 = SQLUtil.isQuery("select intoy6qh@)n~3v1vd!c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" UOCHECK");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SchemaDescriptor.STD_SYSTEM_UTIL_SCHEMA_NAME;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " UOCHECK", true, stringArray0);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \" UOCHECK\" ", string1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.isQuery("- 0");
      SQLUtil.removeComments("T-t`yJ5");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" ");
      DBDataType.getInstance((-1983997609), " ");
      defaultDBTable0.getCheckConstraints();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = Table.SYSTEM_TABLE;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SYSTEM TABLE", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("execute53[t'*");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(19L, file0.length());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SchemaDescriptor.STD_SYSTEM_UTIL_SCHEMA_NAME;
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "drop index%12z=,0it0tqsb+,v!";
      stringArray0[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "SELECT * FROM ", "update");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }
}
