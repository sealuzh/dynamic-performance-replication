/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 17:13:13 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(class0);
      doubleKeyMap1.get("1");
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      doubleKeyMap2.get("1");
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap3 = new DoubleKeyMap<Integer, String, String>(class1);
      Integer integer0 = new Integer(1);
      Map<String, String> map0 = doubleKeyMap3.remove(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>((Map<Object, Map<Integer, String>>) null, class0);
      doubleKeyMap0.newMap();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>(class1);
      Integer integer0 = new Integer((-1011));
      doubleKeyMap1.remove(integer0, "");
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      Class<HashMap> class2 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class2);
      Map<Integer, Map<Object, Integer>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap3 = new DoubleKeyMap<Integer, Object, Integer>(map0);
      Integer integer1 = new Integer((-1938));
      doubleKeyMap3.remove(integer1, (Object) null);
      HashMap<Object, Map<String, Object>> hashMap1 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap4 = new DoubleKeyMap<Object, String, Object>(hashMap1);
      Map<Object, Map<Object, Object>> map1 = doubleKeyMap4.newMap();
      Class<HashMap> class3 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap5 = new DoubleKeyMap<Object, Object, Object>(map1, class3);
      doubleKeyMap5.put((Object) null, (Object) null, (Object) null);
      Map<String, Map<Object, Integer>> map2 = doubleKeyMap1.newMap();
      Class<HashMap> class4 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap6 = new DoubleKeyMap<String, Object, Integer>(map2, class4);
      Class<HashMap> class5 = HashMap.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap7 = new DoubleKeyMap<Integer, String, Object>(class5);
      Map<Object, Integer> map3 = doubleKeyMap7.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap6.put((String) null, map3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      doubleKeyMap0.put((Object) null, (Object) ";", (Object) ";");
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      HashMap<Object, Map<Object, String>> hashMap1 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      String string0 = doubleKeyMap1.get((Integer) null, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer((-2723));
      doubleKeyMap0.put("", integer0, integer0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.remove("", integer1);
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Map<Map<Object, String>, Map<String, Integer>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Map<Object, String>, String, Integer>(map0, class0);
      Integer integer2 = new Integer((-3385));
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Object, String, Integer>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Map<Object, Object> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put("9T", "9T", (Object) map0);
      doubleKeyMap0.remove("vK|,HL';z EUc");
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap1.put("9>8]#.]H#?Nse", "", "39;(p=*MF()w");
      doubleKeyMap1.remove("J} =p6d8*UU]");
      doubleKeyMap1.put("J} =p6d8*UU]", "9>8]#.]H#?Nse", "BL1^#VXw^X[]");
      doubleKeyMap1.get("J} =p6d8*UU]", (String) null);
      doubleKeyMap1.remove((String) null);
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap2.newMap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      doubleKeyMap0.put((Object) null, (Object) ";", (Object) ";");
      Object object0 = new Object();
      Object object1 = new Object();
      doubleKeyMap0.put((Object) null, object0, object1);
      Integer integer0 = new Integer((-662));
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
  }
}
