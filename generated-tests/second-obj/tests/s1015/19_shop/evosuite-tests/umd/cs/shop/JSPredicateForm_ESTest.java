/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:57:02 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.FileNotFoundException;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("&xjVSd}y");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("4.0", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) listIterator0);
      jSPredicateForm0.trimToSize();
      jSPredicateForm0.toStr();
      jSTerm0.matches(jSPredicateForm0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.toStr();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("4.0");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.toStr();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("[Bs", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      Object object0 = new Object();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(qEQ9+L");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("-VxA.H`Cta'N93W", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("4.0", 0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '4';
      charArray0[2] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      lineNumberReader0.read();
      charArrayReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = ':';
      charArray0[1] = '4';
      charArray0[2] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      lineNumberReader0.read();
      charArrayReader0.skip('I');
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm1.print();
      jSTerm0.print();
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "4.0";
      jSTerm0.insertElementAt("4.0", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) listIterator0);
      jSPredicateForm0.toStr();
      jSTerm0.matches(jSPredicateForm0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSPredicateForm0.insertElementAt("4.0", 0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      jSTerm0.insertElementAt("[Bs", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.stream();
      jSTerm0.toStr();
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("4.0", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) listIterator0);
      jSPredicateForm0.trimToSize();
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSPredicateForm0.insertElementAt("4.0", 0);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.toStr();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("4.0", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      jSTerm0.toStr();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.print();
      jSTerm0.toStr();
      jSTerm0.equals((JSPredicateForm) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("[Bs", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      Object object0 = new Object();
      jSTerm0.add(object0);
      System.setCurrentTimeMillis((-1664L));
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("}(XtI)");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      bufferedReader0.read();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      jSTerm0.JSPredicateFormInit(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("}(Iet I]");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      bufferedReader0.read();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(=FEQ9+L");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      streamTokenizer0.quoteChar(1942);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSPredicateForm0.toStr();
      JSTerm jSTerm0 = new JSTerm();
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("[Bs", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("}(Xet I)");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      bufferedReader0.read();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      jSTerm0.JSPredicateFormInit(streamTokenizer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSSubstitution1.add((Object) jSPredicateForm0);
      jSPredicateForm0.toStr();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("}(Xet I)");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      bufferedReader0.read();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      jSTerm0.JSPredicateFormInit(streamTokenizer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSTerm0.equals(jSPredicateForm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
