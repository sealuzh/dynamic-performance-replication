/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:16:13 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '7';
      charArray0[2] = ']';
      charArray0[3] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JVCParser jVCParser0 = new JVCParser(charArrayReader0);
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JVCParser jVCParser0 = new JVCParser(dataInputStream0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t";
      jVCParser0.getToken(0);
      stringArray0[1] = "#U??:FQiP#-K6";
      stringArray0[2] = "FYAfck,7%9";
      stringArray0[3] = "PPOh.}8n}T\"J{v'";
      String string0 = "]]HgJM2J";
      stringArray0[4] = "]]HgJM2J";
      JVCParser.main(stringArray0);
      dataInputStream0.markSupported();
      jVCParser0.getNextToken();
      jVCParser0.getNextToken();
      jVCParser0.ReInit((Reader) null);
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      PipedReader pipedReader0 = new PipedReader(1460);
      // Undeclared exception!
      try { 
        jVCParser0.getToken(1460);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[16];
      JVCParser.main(stringArray0);
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      // Undeclared exception!
      try { 
        jVCParser0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[6];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark(105);
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "rx$l8B3j;m.eD8-9";
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser("rx$l8B3j;m.eD8-9", (Set<String>) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      InputStream inputStream0 = null;
      int int0 = 0;
      char char0 = 'd';
      try { 
        pipedReader0.mark(100);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "/^-n{IkA^S~]";
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "j6<RR\"6KPZ,9HparJ=";
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JVCParser jVCParser0 = new JVCParser(dataInputStream0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t";
      Token.newToken(100);
      stringArray0[1] = "#U??:FQiP#-K6";
      stringArray0[2] = "FYAfck,7%9";
      stringArray0[3] = "POh.}8n}T\"J{v'";
      stringArray0[4] = "]]HgJM2J";
      JVCParser.main(stringArray0);
      dataInputStream0.markSupported();
      jVCParser0.getNextToken();
      jVCParser0.getNextToken();
      PipedInputStream pipedInputStream1 = new PipedInputStream(418);
      jVCParser0.ReInit((InputStream) dataInputStream0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "\"", 2792, 0, 0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.skip(0L);
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j6<RR\"6KPZ,9HparJ=";
      stringArray0[1] = "Ky=qyV,4itV2/>,5a@#";
      stringArray0[2] = " ";
      JVCParser.main(stringArray0);
      String string0 = jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      PipedReader pipedReader1 = new PipedReader();
      jVCParser0.ReInit((Reader) pipedReader1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-3);
      byteArray0[8] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1883, (byte)0);
      String string0 = null;
      JVCParser jVCParser1 = new JVCParser(byteArrayInputStream0, (String) null);
      jVCParser1.ReInit((JVCParserTokenManager) null);
      jVCParser0.parse();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        dataInputStream0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '7';
      charArray0[2] = ']';
      charArray0[3] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JVCParser jVCParser0 = new JVCParser(charArrayReader0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "Ky=qyV,4itV2/>,5a@#";
      stringArray0[2] = "Ky=qyV,4itV2/>,5a@#";
      stringArray0[3] = " ";
      stringArray0[4] = "Ky=qyV,4itV2/>,5a@#";
      JVCParser.main(stringArray0);
      String string0 = jVCParser0.parse();
      assertEquals("_sb.append(\"7]k\");", string0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JVCParser jVCParser0 = new JVCParser(charArrayReader0);
      String string0 = jVCParser0.parse();
      assertEquals("_sb.append(\"\\\\\");", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JVCParser jVCParser0 = new JVCParser(charArrayReader0);
      jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '7';
      charArray0[2] = ']';
      charArray0[3] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JVCParser jVCParser0 = new JVCParser(charArrayReader0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(".append(\"");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charArrayReader0.read(charBuffer0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "Ky=qyV,4itV2/>,5a@#";
      stringArray0[3] = " ";
      stringArray0[4] = "Ky=qyV,4itV2/>,5a@#";
      jVCParser0.parse();
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '7';
      charArray0[2] = ']';
      charArray0[3] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JVCParser jVCParser0 = new JVCParser(charArrayReader0);
      jVCParser0.getNextToken();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "Ky=qyV,4itV2/>,5a@#";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = "Ky=qyV,4itV2/>,5a@#";
      JVCParser.main(stringArray0);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced end tag in null, line: 1
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '7';
      charArray0[2] = ']';
      charArray0[3] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JVCParser jVCParser0 = new JVCParser(charArrayReader0);
      jVCParser0.parse();
      jVCParser0.enable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JVCParser jVCParser0 = new JVCParser(charArrayReader0);
      Token token0 = jVCParser0.getToken(45);
      assertEquals(6, token0.endColumn);
      
      String string0 = jVCParser0.parse();
      assertEquals("_sb.append(\"\u0000\u0000\u0000\u0000\u0000\u0000\");", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}\n");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      String string0 = jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals("_sb.append(\"}\\n\");\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      StringReader stringReader0 = new StringReader("StringBuilder _sb2 = new StringBuilder();\n");
      JVCParser jVCParser1 = new JVCParser(stringReader0);
      String string0 = jVCParser1.parse();
      assertEquals("_sb.append(\"StringBuilder _sb2 = new StringBuilder();\\n\");\n", string0);
      assertEquals(100, jVCParser1.debugColumn);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L>^BNft[%[[qIAoovZ1");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[==");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T[[!");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[!");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }
}
