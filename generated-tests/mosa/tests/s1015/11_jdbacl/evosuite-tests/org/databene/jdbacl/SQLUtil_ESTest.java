/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:47:07 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.value.CompareMode;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("(\"0&^!z");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.normalize("-sq,*A9mWH8BFM\r>", false);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("K", (String[]) null, "-sq,*A9mWH8BFM\r>", "- sq, * A9mWH8BFM  r >", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.normalize("drop materialized view.readclob\";", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("f{nfZ|uvsT;)I}g{");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("f{nfZ|uvsT;)I}g{");
      String string0 = Optimizer.NO_TIMEOUT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("f{nfZ|uvsT;)I}g{", defaultDBTable0, (-392800006), "call!'1:2f_");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("storage_class_name", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompositeDBObject<DBUniqueIndex> compositeDBObject0 = (CompositeDBObject<DBUniqueIndex>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn("q-\"stf=").when(compositeDBObject0).getName();
      doReturn("42821").when(compositeDBObject0).getObjectType();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertEquals("42821 q-\"stf=", string0);
      
      String string1 = SQLUtil.substituteMarkers("42821", "42821 q-\"stf=", "42821 q-\"stf=");
      assertEquals("42821", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.removeComments("f{nfZ|uvsT;)I}g{");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("f{nfZ|uvsT;)I}g{");
      String string0 = Optimizer.NO_TIMEOUT;
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("f{nfZ|uvsT;)I}g{", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "dBqd-.|^", stringArray0);
      assertEquals(" as dBqd-.|^ on . = dBqd-.|^. and .null = dBqd-.|^.null and .null = dBqd-.|^.null and .null = dBqd-.|^.null", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}E6MY";
      stringArray0[1] = "}E6MY";
      stringArray0[2] = "}E6MY";
      String string0 = SQLUtil.renderColumnListWithTableName("}E6MY", stringArray0);
      assertEquals("}E6MY.}E6MY, }E6MY.}E6MY, }E6MY.}E6MY", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "()", true, (String[]) null);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT () ", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.normalize("f{nfZ|uvsT;)I}g{", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("deletelf)@kljs1=]zi(bve4", true, "deletelf)@kljs1=]zi(bve4", "pPlRktYXHng>i");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT deletelf)@kljs1=]zi(bve4 CHECK pPlRktYXHng>i", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("deletelf)@klEs1=]zi(bvd4", true, "deletelf)@klEs1=]zi(bvd4", "pPlRktYXHng>i");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK pPlRktYXHng>i", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments(">E|b8$U#s|Bj!*B|Iy");
      String string0 = Optimizer.NO_TIMEOUT;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(">E|b8$U#s|Bj!*B|Iy", dBCatalog0);
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.>E|b8$U#s|Bj!*B|Iy", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "select intojliavmd\\ zza4y/'sf";
      SQLUtil.normalize("select intojliavmd zza4y/'sf", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intojliavmd  zza4y / 'sf'", defaultDBTable0, 62, "select intojliavmd zza4y/'sf");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string1 = "q8,*I(vVe#e?J\"~d9q";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("q8,*I(vVe#e?J\"~d9q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: q8,*I(vVe#e?J\"~d9q
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.normalize("-sq,*A9mWH8BFM\r>", false);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("$m8p69av8\",nDs(W", false, (String) null, "R");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "R");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      assertEquals("R0.0CONSTRAINT $m8p69av8\",nDs(W ", stringBuilder1.toString());
      assertEquals("R0.0CONSTRAINT $m8p69av8\",nDs(W ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.normalize("Kh]7~qtq'Ewx6Y@6", true);
      StringBuilder stringBuilder0 = new StringBuilder("Kh ] 7 ~ qtq 'Ewx6Y@6'");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) null);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("Kh ] 7 ~ qtq 'Ewx6Y@6'", stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.normalize("execute", false);
      SQLUtil.mutatesDataOrStructure("([");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("execute", stringBuilder0);
      assertEquals("execute", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view!'1:2f_");
      String string0 = SQLUtil.renderValue(boolean0);
      assertEquals("true", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("true");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("i~756=q[Kti}hs");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "i~756=q[Kti}hs";
      stringArray0[1] = "i~756=q[Kti}hs";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM i~756=q[Kti}hs WHERE i~756=q[Kti}hs = 'i~756=q[Kti}hs' AND i~756=q[Kti}hs = 'i~756=q[Kti}hs' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.isDDL("pCLpkwt8HnfK-{pS/+ ");
      boolean boolean0 = SQLUtil.isDML("YSqa");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean1 = SQLUtil.isDDL("pCLpkwt8HnfK-{pS/+ ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("MJyD{2XX@U6", defaultDBTable0, (-2207), "RDB$PROCEDURE_NAME");
      defaultDBColumn0.setVersionColumn(true);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "MJyD{2XX@U6", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.equals(integer0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("UNIQUE ()", defaultDBTable0, (-2207), "RDB$PROCEDURE_NAME");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("UNIQUE ()");
      dBColumnArray0[1] = dBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("UNIQUE (), UNIQUE (), MJyD{2XX@U6, MJyD{2XX@U6, MJyD{2XX@U6, MJyD{2XX@U6, MJyD{2XX@U6", string1);
      
      String string2 = SQLUtil.innerJoin("MJyD{2XX@U6", stringArray0, "+BtZ#.", "pRElBx~~^", stringArray0);
      assertEquals("+BtZ#. as pRElBx~~^ on ", string2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "()", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("O)xde");
      Boolean boolean1 = SQLUtil.mutatesStructure("call");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " CHECK ", false, (String[]) null);
      dBUniqueConstraint0.setDoc("()");
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \" CHECK \" ", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SQLUtil.normalize("select intonull = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null(3) null", true);
      assertEquals("select intonull = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null (3) null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[11];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(18, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL(3) NULL", string1);
      
      boolean boolean0 = SQLUtil.isDML("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL(3) NULL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompositeDBObject<DBUniqueIndex> compositeDBObject0 = (CompositeDBObject<DBUniqueIndex>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update!'1:2f_");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = SQLUtil.renderValue("update!'1:2f_");
      assertEquals("'update!'1:2f_'", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("update!'1:2f_");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("exec", true);
      assertEquals("exec", string0);
      
      SQLUtil.parseColumnTypeAndSize("428C1");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("exec", stringArray0);
      SQLUtil.renderColumnListWithTableName("exec", stringArray0);
      String string1 = SQLUtil.join("", "op?M$@", stringArray0, "MismatchedTreeNodeException(", "43X99.U", stringArray0);
      assertEquals("MismatchedTreeNodeException( as 43X99.U on ", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("!'1:2f_");
      assertNull(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue("!'1:2f_");
      assertEquals("'!'1:2f_'", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'!'1:2f_'";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'!'1:2f_'", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT '!'1:2f_' PRIMARY KEY ('!'1:2f_')", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("*`+?kZl@Eh7B!)#wP");
      DBPackage dBPackage0 = new DBPackage("RDB$PROCEDURE_NAME", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("*`+?kZl@Eh7B!)#wP", dBPackage0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.renderValue(integer0);
      assertEquals("2", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-1728461787), "DATE");
      Integer integer1 = new Integer(624);
      DBSchema dBSchema1 = new DBSchema("Cleanup action starting");
      dBSchema0.getTable("IS_DEFAULT BIT");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2", (DBTable) null, dBDataType0, integer1);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("2 DATE NULL", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter session");
      SQLUtil.addOptionalCondition("alter session", stringBuilder0);
      assertEquals("alter session or alter session", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.isQuery("?6@M+MlE=r0I");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?6@M+MlE=r0I";
      String string0 = CompareMode.OFF;
      SQLUtil.mutatesDataOrStructure("alter session");
      SQLUtil.isQuery("?6@M+MlE=r0I");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("alter materi", false, "?6@M+MlE=r0I", "Bc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("~D5i5x,Yf", true);
      assertEquals("~ D5i  5x, Yf", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("L>>~:?r{)*Xa(", false);
      assertEquals("L > > ~ : ? r {) * Xa (", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "dB<+V]", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("select intojliavmd zza4y/'sf", true);
      StringBuilder stringBuilder0 = new StringBuilder(45);
      SQLUtil.addOptionalCondition("select intojliavmd zza4y/'sf", stringBuilder0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      String string1 = SQLUtil.substituteMarkers("select intojliavmd zza4y/'sf", "select intojliavmd  zza4y / 'sf'", mockHijrahDate0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = Optimizer.NO_TIMEOUT;
      String string1 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string1);
      
      PipedReader pipedReader0 = new PipedReader(66);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      String string2 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string2);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/");
      DBDataType dBDataType0 = DBDataType.getInstance((-400), "/");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("- 0", defaultDBTable0, dBDataType0, (Integer) (-4), integer0);
      String string3 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("- 0 /(-4,2) NULL", string3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompositeDBObject<DBUniqueIndex> compositeDBObject0 = (CompositeDBObject<DBUniqueIndex>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intonull = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null(3) null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1607), "c: TS.A&");
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c: TS.A&", defaultDBTable0, dBDataType0, (Integer) null);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("c: TS.A&", string0);
      
      String string1 = SQLUtil.normalize("c: TS.A&", true);
      assertEquals("c : TS.A &", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1607), "c# TS.A&");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c# TS.A&", defaultDBTable0, dBDataType0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("c# TS.A&", defaultDBTable0, dBDataType0, (Integer) null);
      vector0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[c# TS.A& : C# TS.A&(2), c# TS.A& : C# TS.A&]", vector0.toString());
      
      SQLUtil.normalize("c# TS.A&", true);
      SQLUtil.renderColumn(defaultDBColumn1);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("'%C>7O2egqHnPY", "c# TS.A& C# TS.A& NULL", stringArray0, "c # TS.A &", "", stringArray0);
      assertEquals("'%C>7O2egqHnPY join c # TS.A & as  on ", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C@dU-GR[");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("memory", false, defaultDBTable0, "memory");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      mockPrintWriter0.print(false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = RawStoreFactory.PATCH_INITPAGE_RECOVER_ERROR;
      assertEquals("derby.storage.patchInitPageRecoverError", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C@dU-GR[");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "C@dU-GR[", true, (String[]) null);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      mockPrintWriter0.print(false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = RawStoreFactory.PATCH_INITPAGE_RECOVER_ERROR;
      String string1 = "exece^naj0u+ruqb-=ng\"";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("derby.storage.patchInitPageRecoverError");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }
}
