/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:57:05 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.MouseEvent;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.net.URL;
import java.util.Random;
import java.util.TimeZone;
import java.util.function.Predicate;
import javax.accessibility.AccessibleAction;
import javax.swing.JTree;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyleConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.AbstractOutput;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.supportVector.Puk;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.EuclideanDistance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.KDTree;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      Stacking stacking0 = new Stacking();
      try { 
        Evaluation.handleCostOption("distributionForInstance", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("U");
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      evaluation0.confusionMatrix();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      testInstances0.setWordSeparators("@relation");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.falsePositiveRate((-2));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.setDiscardPredictions(false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Sl@il.'$eQI7.c| D?");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-1));
      evaluation0.weightedAreaUnderROC();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("34aKG*QZ)svR");
      testInstances0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("@data");
      testInstances0.setClassType((-2));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      testInstances0.setWordSeparators(".bsi");
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "34aKG*QZ)svR");
      evaluation0.setDiscardPredictions(true);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 15, (-1523.560746));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("2001-04-04 14:?13:55");
      testInstances0.setNumRelationalDate(378);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      evaluation0.meanPriorAbsoluteError();
      evaluation0.precision(1);
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 378;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalCost = 2472.424;
      evaluation0.toSummaryString(true);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-777), 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.falsePositiveRate((-1005));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, binarySparseInstance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      J48 j48_0 = new J48();
      j48_0.getCapabilities();
      Instances instances0 = testInstances0.generate("'LvlBmMl$L*|;K|");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.falsePositiveRate((-1));
      evaluation0.pctCorrect();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.rootMeanPriorSquaredError();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("lhX");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = testInstances0.generate();
      evaluation0.falsePositiveRate((-2));
      double double0 = evaluation0.m_SumKBInfo;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.totalCost();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Predicate.isEqual((Object) instances1);
      evaluation0.addNumericTrainClass(1872.9, 818.0);
      evaluation0.areaUnderROC(1322);
      double double1 = new Float((double) 1);
      evaluation0.SFPriorEntropy();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1159), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1159
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("34aKG*Q)svR");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("@data");
      testInstances0.setClassType(23);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-2));
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.KBMeanInformation();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.unclassified();
      evaluation0.toCumulativeMarginDistributionString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      evaluation0.useNoPriors();
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.rootRelativeSquaredError();
      evaluation0.toCumulativeMarginDistributionString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      double double0 = Evaluation.MIN_SF_PROB;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(118);
      testInstances0.setClassType(17);
      testInstances0.setNumRelationalDate((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.KBInformation();
      double double1 = NimbusStyle.SMALL_SCALE;
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) additiveRegression0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassType((-1036));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      testInstances0.setMultiInstance(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      testInstances0.setNumNominalValues((-2059));
      evaluation0.KBRelativeInformation();
      evaluation0.falsePositiveRate(1744);
      evaluation0.meanPriorAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.precision(791);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 791
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = (-788.52);
      doubleArray0[3] = (-588.695763812);
      doubleArray0[4] = (-1422.69);
      doubleArray0[5] = (-68.0);
      doubleArray0[6] = 3632.39400521;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.getRevision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.toCumulativeMarginDistributionString();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 477, (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = instances0.stringFreeStructure();
      textDirectoryLoader0.setCharSet("debugTipTxt");
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      instances1.toArray();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(117);
      testInstances0.setClassType((-1));
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(1);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.toClassDetailsString("@data");
      double double1 = NimbusStyle.SMALL_SCALE;
      evaluation0.kappa();
      evaluation0.weightedAreaUnderROC();
      evaluation0.setNumericPriorsFromBuffer();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate("ma");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      evaluation0.areaUnderROC((-2));
      instances0.delete();
      double double0 = evaluation0.m_SumPredicted;
      double[] doubleArray0 = new double[2];
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setClassType(8);
      testInstances0.setNumRelationalDate((-1));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.listOptions();
      double double1 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.weightedFMeasure();
      evaluation0.KBRelativeInformation();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = new Instances(instances0, (-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      double double0 = KStarConstants.EPSILON;
      evaluation0.SFMeanEntropyGain();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.areaUnderROC(10);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.correct();
      // Undeclared exception!
      try { 
        evaluation0.recall(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("R5ZiI");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setClassType((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      Double double0 = new Double((-1));
      ArffLoader arffLoader0 = new ArffLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      evaluation0.m_SumSchemeEntropy = (-1527.80808965712);
      hierarchicalClusterer0.getLinkType();
      testInstances0.setRelation("setOptions");
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances2 = new TestInstances();
      testInstances0.listOptions();
      evaluation0.weightedTruePositiveRate();
      testInstances0.setHandler(hierarchicalClusterer0);
      try { 
        testInstances1.generate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute type '-1' unknown!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("yW8GX'n:y");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators((String) null);
      testInstances0.setClassType(23);
      testInstances0.setNumString(12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      MakeDensityBasedClusterer makeDensityBasedClusterer1 = new MakeDensityBasedClusterer(makeDensityBasedClusterer0);
      MakeDensityBasedClusterer makeDensityBasedClusterer2 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = makeDensityBasedClusterer2.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'A';
      charArray0[2] = 'k';
      charArray0[3] = 'e';
      evaluation0.num2ShortID(2000, charArray0, 845);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("34aKG*Q)svR");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("@data");
      testInstances0.setClassType(23);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-2));
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "globalInfo");
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = ')';
      evaluation0.num2ShortID((-1127281206), charArray0, 1916);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("34aKG*Q)svR");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("GUITipText");
      testInstances0.setClassType(23);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      costMatrix2.initialize();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      Instance instance0 = null;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      JSONLoader jSONLoader0 = new JSONLoader();
      MockFile mockFile0 = new MockFile("@relation");
      jSONLoader0.setRetrieval((byte)11);
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        jSONLoader0.setSource(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("seedTipText");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      MouseEvent.getMouseModifiersText((-1));
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      capabilities0.disableAllAttributeDependencies();
      capabilities0.toString();
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("yW8GX'n:y");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("lnFactorial");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Bagging bagging0 = new Bagging();
      Capabilities capabilities1 = bagging0.getCapabilities();
      capabilities1.enableAllAttributeDependencies();
      MouseEvent.getMouseModifiersText(498);
      Instances instances1 = testInstances1.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setNoClass(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = NimbusStyle.SMALL_SCALE;
      String string0 = Capabilities.PROPERTIES_FILE;
      MockRandom mockRandom0 = new MockRandom();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("34aKG*Q)svR");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("GUITipText");
      testInstances0.setClassType(23);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MissingClass = 3.4;
      evaluation0.weightedAreaUnderROC();
      evaluation0.SFSchemeEntropy();
      evaluation0.kappa();
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      try { 
        evaluation0.crossValidateModel("getNumIterations", instances0, (-1463), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: getNumIterations
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("34aKG*QZ)svR");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("34aKG*QZ)svR");
      testInstances0.setClassType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      double[] doubleArray0 = new double[0];
      evaluation0.toCumulativeMarginDistributionString();
      DenseInstance denseInstance0 = new DenseInstance(3069.014, doubleArray0);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      evaluation0.equals(randomCommittee0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopy(randomCommittee0);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBMeanInformation();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.SFMeanEntropyGain();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.equals(multilayerPerceptron0);
      evaluation0.areaUnderROC(2269);
      evaluation0.falsePositiveRate(1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Evaluation.makeOptionString(naiveBayesMultinomialText0, true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("2001-04-04 14:?13:55");
      testInstances0.setNumRelationalDate(378);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      evaluation0.meanPriorAbsoluteError();
      evaluation0.precision(1);
      evaluation0.sizeOfPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators(".bsi");
      testInstances0.setClassType((-1124));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.getRevision();
      evaluation0.falseNegativeRate((-1124));
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.matthewsCorrelationCoefficient(0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      MouseEvent.getMouseModifiersText(1);
      testInstances0.generate();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = instances0.stringFreeStructure();
      textDirectoryLoader0.setCharSet("debugTipText");
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      instances1.toArray();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(117);
      testInstances0.setClassType((-1));
      textDirectoryLoader0.getOptions();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalDate((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double1 = NimbusStyle.SMALL_SCALE;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.SFEntropyGain();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable0 = new DecisionTable();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getTechnicalInformation();
      Predicate.isEqual((Object) regressionByDiscretization0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.areaUnderROC(10);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      evaluation0.weightedMatthewsCorrelation();
      instances0.deleteStringAttributes();
      evaluation0.SFMeanPriorEntropy();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate("@data");
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getConfidenceFactor");
      evaluation0.falsePositiveRate((-2));
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.totalCost();
      evaluation2.weightedTrueNegativeRate();
      DecisionTable decisionTable0 = new DecisionTable();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(decisionTable0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = ':';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      evaluation0.num2ShortID(110, charArray0, 2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tSets index of class attribute (default: last).\n");
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      double double0 = UnivariateKernelEstimator.CONST;
      evaluation0.confusionMatrix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.setDiscardPredictions(false);
      evaluation0.addNumericTrainClass((-2), (-0.9189385332046727));
      instances0.toArray();
      evaluation0.makeDistribution((-0.9189385332046727));
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      testInstances0.listOptions();
      testInstances0.setWordSeparators((String) null);
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2267.08903);
      doubleArray0[2] = (-2267.08903);
      evaluation0.setDiscardPredictions(true);
      doubleArray0[7] = (double) 36;
      double double0 = NimbusStyle.SMALL_SCALE;
      evaluation0.kappa();
      evaluation0.weightedAreaUnderROC();
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 6);
      double double0 = NimbusStyle.LARGE_SCALE;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      DecisionStump decisionStump0 = new DecisionStump();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      String string0 = JTree.CELL_RENDERER_PROPERTY;
      TestInstances testInstances0 = new TestInstances();
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = instances0.stringFreeStructure();
      textDirectoryLoader0.setCharSet("debugTipText");
      double double0 = NimbusStyle.LARGE_SCALE;
      instances1.toArray();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(117);
      testInstances0.setClassType((-1));
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      TestInstances testInstances1 = new TestInstances();
      testInstances1.listOptions();
      testInstances1.setNumRelationalDate((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      double double1 = NimbusStyle.MINI_SCALE;
      evaluation0.KBRelativeInformation();
      evaluation0.toSummaryString(".bsi", true);
      evaluation0.avgCost();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("yW8GX'n:y");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-48);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      testInstances0.setWordSeparators((String) null);
      testInstances0.setClassType(48);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      String string0 = AccessibleAction.DECREMENT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      HierarchicalClusterer hierarchicalClusterer1 = new HierarchicalClusterer();
      hierarchicalClusterer1.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      CostMatrix costMatrix0 = new CostMatrix((byte)2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances1, costMatrix1);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.rootRelativeSquaredError();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      JRip jRip0 = new JRip();
      evaluation0.equals(jRip0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient(72);
      instances0.deleteWithMissingClass();
      evaluation0.toSummaryString(true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = evaluation0.m_SumPriorAbsErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.m_TotalSizeOfRegions;
      double double2 = evaluation0.m_SumAbsErr;
      String string0 = Capabilities.PROPERTIES_FILE;
      MockRandom mockRandom0 = new MockRandom();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) costSensitiveClassifier0;
      evaluation1.toCumulativeMarginDistributionString();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.areaUnderROC(1258);
      evaluation1.weightedFalsePositiveRate();
      evaluation0.weightedAreaUnderPRC();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      testInstances0.getData();
      Double double0 = new Double((-1));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setClassType((-109));
      testInstances0.setNumRelationalDate((-109));
      testInstances0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SMO sMO0 = new SMO();
      evaluation0.getDiscardPredictions();
      double double1 = evaluation0.m_MaxTarget;
      Evaluation.getGlobalInfo(additiveRegression1);
      evaluation0.toClassDetailsString(".bsi");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("pfCGlMwwlco(J");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nTime taken to test model on training split: ");
      testInstances0.setWordSeparators((String) null);
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 23;
      doubleArray0[0] = (-2267.08903);
      doubleArray0[2] = (-2267.08903);
      doubleArray0[7] = (double) 23;
      doubleArray0[5] = (double) 23;
      doubleArray0[7] = (double) (-2);
      evaluation0.updateMargins(doubleArray0, 6, (-2.0));
      evaluation0.toCumulativeMarginDistributionString();
      JSONLoader jSONLoader0 = new JSONLoader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      testInstances0.setWordSeparators("seedTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      MouseEvent.getMouseModifiersText((-1));
      TestInstances testInstances2 = new TestInstances();
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.toMatrixString();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean0 = evaluation2.m_ComplexityStatisticsAvailable;
      Evaluation.getGlobalInfo(regressionByDiscretization0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      evaluation1.getRevision();
      evaluation2.meanAbsoluteError();
      try { 
        evaluation1.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      String string0 = DefaultEditorKit.beginAction;
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators("@data");
      testInstances0.setClassType((-2));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.unclassified();
      String string1 = DefaultEditorKit.cutAction;
      try { 
        evaluation0.evaluateModelOnce((-2661.6464920176), (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2661
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("lhX");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-2));
      double double0 = evaluation0.m_SumKBInfo;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.totalCost();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Predicate.isEqual((Object) instances0);
      evaluation0.addNumericTrainClass(1872.9, 818.0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.toMatrixString();
      evaluation0.SFEntropyGain();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.relativeAbsoluteError();
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getRelationalClassFormat();
      testInstances0.generate();
      evaluation0.falsePositiveRate((-2));
      double double0 = evaluation0.m_SumKBInfo;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TimeZone.getAvailableIDs();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFMeasure();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.getHeader();
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution(1.0E10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      ArffLoader arffLoader0 = new ArffLoader();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      regressionByDiscretization0.setClassifier(naiveBayesMultinomialUpdateable0);
      Environment environment0 = Environment.getSystemWide();
      Environment.main(testInstances0.DEFAULT_WORDS);
      arffLoader0.setEnvironment(environment0);
      arffLoader0.getNextInstance(instances0);
      arffLoader0.getRevision();
      evaluation0.falsePositiveRate((-2));
      testInstances0.setClassType(0);
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setWordSeparators(".arff.gz");
      evaluation1.meanPriorAbsoluteError();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      Object[][] objectArray0 = new Object[2][6];
      objectArray0[0] = (Object[]) testInstances1.DEFAULT_WORDS;
      objectArray0[1] = (Object[]) testInstances1.DEFAULT_WORDS;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[1]);
      evaluation0.equals(defaultTableModel0);
      evaluation2.toSummaryString();
      evaluation1.weightedMatthewsCorrelation();
      evaluation0.SFEntropyGain();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteWithMissingClass();
      evaluation1.toSummaryString(true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double1 = evaluation0.m_SumPriorAbsErr;
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation1.m_TotalSizeOfRegions;
      double double3 = evaluation1.m_SumAbsErr;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Capabilities.PROPERTIES_FILE;
      MockRandom mockRandom0 = new MockRandom();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      testInstances0.setClassType(16);
      Evaluation evaluation3 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(105);
      evaluation0.toClassDetailsString();
      try { 
        evaluation2.updateStatsForPredictor(78.2408, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "  ";
      stringArray0[1] = "\tOutputs predictions for test instances (or the train instances if\n";
      stringArray0[2] = "cJD,,o.1H,]'w[d+O";
      stringArray0[3] = "'&,%=i\u0005";
      stringArray0[4] = "6N&hd!>RQWf<kyQ]G";
      stringArray0[5] = "weka.core.matrix.Matrix";
      stringArray0[6] = "[rbys";
      stringArray0[7] = "3,{x)0kV90EgOzXySNe";
      AdaBoostM1.main(stringArray0);
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "\tSets training file.\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = testInstances0.getData();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      testInstances0.setNumRelationalDate((-2));
      evaluation0.weightedTrueNegativeRate();
      DecisionTable decisionTable0 = new DecisionTable();
      double double0 = evaluation0.m_SumPredicted;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, 4, 1885.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1000
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.rootRelativeSquaredError();
      evaluation0.getClassPriors();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "globalInfo";
      stringArray0[5] = "globalInfo";
      stringArray0[6] = ".arff";
      stringArray0[7] = ".bsi";
      stringArray0[8] = "@data";
      try { 
        AbstractClassifier.forName("vEV%*vCQ:|T%\"A'Qp", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: vEV%*vCQ:|T%\"A'Qp
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-788.52);
      doubleArray0[3] = 1000.0;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalString((byte)22);
      Bagging bagging0 = new Bagging();
      Evaluation.getGlobalInfo(bagging0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(91);
      evaluation0.SFMeanPriorEntropy();
      try { 
        Evaluation.evaluateModel("-F <filter specification>", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name -F <filter specification>.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      testInstances1.setWordSeparators("trying");
      Instances.main(testInstances1.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances1);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      HierarchicalClusterer hierarchicalClusterer1 = new HierarchicalClusterer();
      hierarchicalClusterer1.getCapabilities();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      try { 
        evaluation1.toMatrixString("@relation");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.pctUnclassified();
      evaluation0.weightedAreaUnderPRC();
      AllFilter allFilter0 = new AllFilter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      evaluation0.matthewsCorrelationCoefficient(72);
      evaluation0.toSummaryString(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      stringArray0[2] = " ";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      stringArray0[5] = ",k%^6f:ZD/1 #";
      stringArray0[6] = "@relation";
      TestInstances.main(stringArray0);
      evaluation0.KBMeanInformation();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.SFMeanEntropyGain();
      evaluation0.equals((Object) null);
      evaluation0.areaUnderROC((-1958));
      evaluation0.falsePositiveRate((-1));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/ ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/ ");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, " ");
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setClassType((-1112551771));
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalDate((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      double double0 = NimbusStyle.MINI_SCALE;
      evaluation0.toMatrixString("@data");
      evaluation0.KBRelativeInformation();
      evaluation0.toSummaryString("@relation", true);
      evaluation0.areaUnderPRC((-834));
      evaluation0.makeDistribution(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "seedTipText";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      testInstances0.setWordSeparators("seedTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      testInstances0.setWordSeparators("(l");
      testInstances1.setClassType(1);
      testInstances0.setClassType(10);
      testInstances1.setNumRelationalDate(100);
      Evaluation evaluation1 = new Evaluation(instances1);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        evaluation1.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(false);
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      testInstances0.setWordSeparators("seedTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1632);
      testInstances1.setClassType((-1676));
      testInstances0.setNumRelationalDate((-1676));
      Instances instances2 = testInstances0.generate("@data");
      Evaluation evaluation1 = new Evaluation(instances2);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation1.KBInformation();
      Evaluation evaluation2 = new Evaluation(instances1);
      try { 
        evaluation2.toClassDetailsString(".arff");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      int int0 = 72;
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-2));
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) randomSubSpace0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      testInstances0.setNumRelationalDate(28);
      DecisionStump decisionStump0 = new DecisionStump();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      double double1 = NimbusStyle.SMALL_SCALE;
      double double2 = UnivariateKernelEstimator.CONST;
      double double3 = evaluation0.m_MinTarget;
      evaluation0.numFalsePositives(1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.useNoPriors();
      evaluation0.KBRelativeInformation();
      org.evosuite.runtime.Random.setNextRandom(8);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      double double0 = evaluation0.m_SumPredicted;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 240.6645258;
      SparseInstance sparseInstance0 = new SparseInstance(240.6645258, doubleArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation1.KBInformation();
      evaluation0.useNoPriors();
      double double1 = NimbusStyle.SMALL_SCALE;
      evaluation1.kappa();
      evaluation0.weightedAreaUnderROC();
      evaluation1.relativeAbsoluteError();
      evaluation0.relativeAbsoluteError();
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      testInstances0.setWordSeparators("seedTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      MouseEvent.getMouseModifiersText((-1));
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.toMatrixString();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      SelectedTag selectedTag0 = new SelectedTag(0, regressionByDiscretization0.TAGS_ESTIMATOR);
      Evaluation.makeOptionString(naiveBayesMultinomialUpdateable0, false);
      evaluation1.errorRate();
      evaluation0.SFEntropyGain();
      evaluation0.setNumericPriorsFromBuffer();
      Evaluation evaluation3 = new Evaluation(instances1, (CostMatrix) null);
      evaluation3.relativeAbsoluteError();
      evaluation3.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N#;vacv*N~Q6");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances1 = testInstances0.getData();
      Double double0 = new Double((-1));
      Evaluation evaluation0 = new Evaluation(instances1);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.setDiscardPredictions(false);
      testInstances0.generate(" ");
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.setWordSeparators(" ");
      TestInstances testInstances3 = new TestInstances();
      testInstances0.setClassType((-2));
      testInstances3.setClassType((-2));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.pctIncorrect();
      evaluation0.KBInformation();
      Vote vote0 = new Vote();
      try { 
        evaluation0.evaluateModel((Classifier) vote0, instances0, (Object[]) doubleArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [D cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.getData();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedTrueNegativeRate();
      DecisionTable decisionTable0 = new DecisionTable();
      double double0 = evaluation0.m_SumPredicted;
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      SelectedTag selectedTag0 = multiClassClassifier0.getMethod();
      decisionTable0.setEvaluationMeasure(selectedTag0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) (-1);
      decisionTable0.buildClassifier(instances0);
      DecisionStump.main(testInstances0.DEFAULT_WORDS);
      Evaluation.getGlobalInfo(multiClassClassifier0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC(2);
      SparseInstance sparseInstance0 = new SparseInstance(5);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      evaluation0.getHeader();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = new Instances(instances0, (-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      double double0 = KStarConstants.EPSILON;
      evaluation0.SFMeanEntropyGain();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.areaUnderROC(10);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.correct();
      System.setCurrentTimeMillis((-2));
      evaluation0.numInstances();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("yWGX'n:W");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators(".bsi");
      testInstances0.setClassType(48);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.m_SumKBInfo;
      ArffLoader arffLoader0 = new ArffLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      hierarchicalClusterer0.getLinkType();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.listOptions();
      testInstances1.setHandler(hierarchicalClusterer0);
      testInstances1.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = new SelectedTag(1, hierarchicalClusterer0.TAGS_LINK_TYPE);
      Evaluation.makeOptionString(costSensitiveClassifier0, true);
      evaluation0.errorRate();
      evaluation0.SFEntropyGain();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.relativeAbsoluteError();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.toSummaryString();
      evaluation0.sizeOfPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-2));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      capabilities1.disableAllAttributeDependencies();
      capabilities1.toString();
      evaluation1.weightedAreaUnderROC();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }
}
