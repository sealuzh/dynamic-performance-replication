/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:29:17 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)67;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((int) (byte)105, (int) (byte)67);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-54);
      byteArray0[1] = (byte) (-54);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = null;
      // Undeclared exception!
      try { 
        byteString0.EMPTY.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)33;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.hmacSha512(byteString1);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("s.iimit == supos");
      byteString0.internalArray();
      byteString0.toByteArray();
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Hy#. CN\"W=/i>8<I4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: Hy#. CN\"W=/i>8<I4
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 429, (-676));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=429 byteCount=-676
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-69);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode = (-1111);
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[6];
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      byteString0.base64Url();
      int int0 = byteString0.lastIndexOf(byteArray0, 122);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockFile mockFile0 = new MockFile("A", "A");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "A";
      mockPrintStream0.printf("A", objectArray0);
      mockPrintStream0.append('y');
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      ByteString byteString0 = ByteString.read(byteArrayInputStream0, (byte)0);
      Object object1 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)10);
      Buffer buffer0 = pipe0.buffer;
      byteString0.write(buffer0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString0.getByte((byte)0);
      ByteString byteString1 = null;
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
      ByteString byteString1 = byteString0.EMPTY.sha256();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      charset0.name();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("US-ASCII");
      int int0 = byteString0.indexOf(byteArray0, (-1815));
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      String string1 = byteString0.toString();
      assertEquals("[hex=00]", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)43;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-45);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.equals(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.substring(16);
      assertEquals(48, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      ByteString byteString0 = hashingSink0.hash();
      deflaterSink0.timeout();
      int int0 = 0;
      byteString0.substring(0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString((long) 0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)31;
      ByteString byteString0 = ByteString.encodeUtf8("");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      byteString0.write(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = ByteString.encodeUtf8("C<");
      // Undeclared exception!
      try { 
        byteString0.getByte((-3560));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byteString0.base64Url();
      ByteString byteString1 = byteString0.md5();
      assertEquals(16, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.sha512();
      int int0 = byteString1.indexOf(byteString0, 17);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)8;
      byteString0.EMPTY.lastIndexOf(byteString0, 0);
      byteArray0[1] = (byte)0;
      byteString0.hex();
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" (to read code point prefixed 0x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[5] = (byte)33;
      byteArray0[5] = (byte) (-10);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      ByteString byteString1 = ByteString.of(byteBuffer1);
      ByteString byteString2 = byteString1.md5();
      String string0 = byteString2.toString();
      assertEquals("[hex=d300000003f9399dd7ed0700e0fdd700]", string0);
      
      ByteString byteString3 = byteString1.substring((int) (byte)0, (int) (byte)0);
      byteString0.getByte((byte)0);
      assertFalse(byteString0.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode = (-1111);
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString0);
      assertFalse(boolean0);
      
      int int0 = byteString0.indexOf(byteArray0, 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.EMPTY.rangeEquals(0, byteArray0, 0, 1093);
      ByteString.codePointIndexToCharIndex("HmacSHA1", 0);
      byteString0.EMPTY.startsWith(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      byte[] byteArray1 = new byte[0];
      byteString1.EMPTY.rangeEquals(0, byteArray1, 57343, 11);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        ByteString.read(sequenceInputStream0, (-3451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3451
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString.decodeBase64("3vGW> F_iTWYl6Q6");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("3vGW> F_iTWYl6Q6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: v
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      inflaterSource0.timeout();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: t
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)100;
      byteArray0[4] = (byte)94;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)67;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)79;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertArrayEquals(new byte[] {(byte)51, (byte)67, (byte)0, (byte)51, (byte)51, (byte)115, (byte)118, (byte)79}, byteArray0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode = (-1134);
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      String string1 = byteString0.EMPTY.base64Url();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (int) (byte)12, (int) (byte)12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.md5();
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      deflaterSink0.finishDeflate();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.asByteBuffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString((long) 6);
      int int0 = byteString0.indexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("/Mtkx*M6&gTKi_^Xt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: /Mtkx*M6&gTKi_^Xt
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 110, (byte)0);
      ByteString byteString0 = ByteString.read(byteArrayInputStream0, (byte)0);
      byteString0.toAsciiUppercase();
      byteString0.EMPTY.base64Url();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode = (-1134);
      byteString0.EMPTY.toString();
      byteString0.base64();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("z)7HyZRXL6;^;,)x", charset0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString0.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[2] = (byte)101;
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      charset0.name();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("US-ASCII");
      byteString0.write(mockFileOutputStream0);
      assertEquals(7, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString[] byteStringArray0 = new ByteString[4];
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      gzipSource0.timeout();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = hashingSink0.hash();
      HashingSource.hmacSha256(hashingSource0, byteString0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString.decodeBase64("\uFFFD\uFFFD\uFFFD5~\uFFFD\uFFFD\uFFFD\uFFFDT(P\uFFFDm\uFFFD\u0007\uFFFD \uFFFD\u0005\u000BW\u0015\uFFFD\uFFFD\uFFFD\uFFFD!\uFFFDl\uFFFD\uFFFDG\uFFFD\uFFFD<]\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0018\uFFFD\uFFFD~\uFFFD/c\uFFFD1\uFFFDGAz\uFFFD\uFFFD82z\uFFFD'\uFFFD>");
      byteString0.rangeEquals((-32), byteString0, 97, (-32));
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("1A\u0004X~spH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: \u0004
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      buffer0.writeDecimalLong(1L);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-10), (byte)30);
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (byte) (-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -10
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-22);
      ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 1790);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00970be999]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)63;
      ByteString byteString2 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString2);
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "";
      ByteString byteString0 = ByteString.decodeHex("");
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[6];
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = hashingSource0.hash();
      byteString0.startsWith(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString1);
      ByteString byteString2 = hashingSink0.hash();
      int int0 = byteString2.compareTo(byteString1);
      String string0 = byteString1.toString();
      assertEquals("[hex=e7b0000990f0000090fbf00099efb990900e00e0e09b9700009b990b00b9b0bb]", string0);
      
      byteString0.indexOf(byteArray0);
      int int1 = byteString2.indexOf(byteArray0, (-1));
      assertTrue(int1 == int0);
      
      byteString0.toAsciiUppercase();
      byteString2.hashCode();
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource.sha256(gzipSource0);
      byte[] byteArray0 = new byte[9];
      buffer0.writeShort(50);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-125);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-49);
      ByteString byteString0 = new ByteString(byteArray0);
      gzipSource0.close();
      HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      Object object0 = new Object();
      byteString1.equals(object0);
      byteString1.startsWith(byteString0);
      byteString0.toAsciiLowercase();
      byteString1.compareTo(byteString0);
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      assertEquals(16, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString.codePointIndexToCharIndex("", 17);
      ByteString byteString1 = new ByteString(byteArray0);
      int int1 = 615;
      ByteString.codePointIndexToCharIndex("7,![73XCugtB?", 615);
      ByteString byteString2 = ByteString.encodeUtf8("SHA-512");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSource0, inflater0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString2);
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(buffer1);
      hashingSource0.hash();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 14);
      try { 
        ByteString.read(byteArrayInputStream0, 17);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)33;
      byteArray0[5] = (byte) (-10);
      byteArray0[5] = (byte)0;
      byteArray0[3] = (byte)0;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      BufferedSink bufferedSink0 = buffer1.emit();
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource0.readByteArray();
      ByteString byteString1 = hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      byteString1.write(buffer0);
      charset0.decode(byteBuffer0);
      ByteString byteString2 = ByteString.of(byteBuffer0);
      byteString2.toString();
      ByteString byteString3 = byteString2.substring((int) (byte)0, (int) (byte)0);
      byteString1.getByte((byte)0);
      byteString0.compareTo(byteString2);
      // Undeclared exception!
      try { 
        byteString3.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString0.sha256();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString3 = byteString2.sha1();
      ByteString byteString4 = byteString1.sha512();
      byteString2.toAsciiUppercase();
      int int1 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString5 = byteString2.md5();
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int3 = byteString0.compareTo(byteString1);
      ByteString byteString6 = byteString3.toAsciiUppercase();
      int int4 = byteString4.lastIndexOf(byteString5);
      assertTrue(int4 == int3);
      
      int int5 = byteString3.compareTo(byteString6);
      assertEquals(1, int5);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      buffer0.emit();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.decodeBase64("7j;<6b[oajj<AW2W");
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString1.asByteBuffer();
      byteString0.asByteBuffer();
      ByteString byteString2 = realBufferedSource1.readByteString();
      realBufferedSource0.rangeEquals((long) (byte)12, byteString1);
      ByteString byteString3 = new ByteString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteString2.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      byteString3.hex();
      ByteString.encodeUtf8("0c000000000000");
      byteString3.utf8();
      byteString1.compareTo(byteString2);
      int int0 = 129;
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-1042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("cyJSm", charset0);
      int int1 = ObjectStreamConstants.baseWireHandle;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString1 = ByteString.encodeString("cyJSm", charset0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString2 = ByteString.decodeHex("");
      String string0 = byteString0.toString();
      assertEquals("[text=cyJSm]", string0);
      
      hashingSource0.toString();
      ByteString.encodeUtf8("cyJSm");
      ByteString.codePointIndexToCharIndex("cyJSm", 56);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      byteString2.rangeEquals((int) (byte) (-10), byteArray0, 45, 3686);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-17);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.indexOf(byteArray0);
      ByteString byteString2 = byteString1.sha1();
      byteString0.sha512();
      ByteString byteString3 = byteString1.toAsciiUppercase();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("cyJSm", charset0);
      HashingSource.sha256(buffer0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      byteString0.indexOf(byteString2, (-1));
      Charset charset1 = Charset.defaultCharset();
      ByteString.encodeString("cyJSm", charset0);
      ByteString byteString4 = hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString3.equals(byteString1);
      byteString0.startsWith(byteArray0);
      byteString0.string(charset1);
      byteString1.hex();
      byteString4.utf8();
      // Undeclared exception!
      try { 
        byteString1.getByte((-1643));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)33;
      byteArray0[5] = (byte) (-5);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.emit();
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray1 = byteString0.toByteArray();
      ByteString byteString1 = new ByteString(byteArray1);
      Charset charset0 = Charset.defaultCharset();
      byteString1.string(charset0);
      byteString1.asByteBuffer();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      hashingSink0.flush();
      ByteString byteString2 = realBufferedSource0.readByteString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString3 = ByteString.of(byteBuffer0);
      ByteString byteString4 = new ByteString(byteArray0);
      byteString4.toString();
      byteString2.startsWith(byteArray0);
      realBufferedSource0.readUtf8Line();
      ByteString byteString5 = ByteString.encodeUtf8("size < 2: ");
      byteString3.utf8();
      byteString2.compareTo(byteString5);
      byteString5.indexOf(byteArray1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString0.sha256();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte byte0 = (byte) (-46);
      byteString1.endsWith(byteArray0);
      ByteString.decodeHex("");
      byteString1.toString();
      // Undeclared exception!
      try { 
        byteString2.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-94);
      byteArray0[5] = (byte) (-20);
      byteArray0[4] = (byte) (-94);
      byte byte0 = (byte)110;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)110;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      Buffer buffer1 = (Buffer)buffer0.write((Source) hashingSource0, (long) (byte)0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.closed;
      byteString0.toString();
      String string0 = "4(;?mDL'0%R$u2M,B$u";
      ByteString.encodeUtf8("4(;?mDL'0%R$u2M,B$u");
      HashingSource.md5(hashingSource0);
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1(hashingSource0, byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.sha512();
      byteString0.toAsciiUppercase();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset charset0 = Charset.defaultCharset();
      int int1 = ObjectStreamConstants.baseWireHandle;
      HashingSource.sha256(buffer0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString1);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)30;
      byteArray1[3] = (byte)30;
      byteString1.indexOf(byteArray1, (int) (byte)30);
      ByteString.decodeHex("");
      byteString2.equals(hashingSource0);
      ByteString byteString3 = hashingSource0.hash();
      byteString3.sha512();
      byteString1.string(charset0);
      byteString2.toString();
      buffer0.readString(charset0);
      ByteString byteString4 = ByteString.encodeUtf8("[hex=630e871c18e9d6bd93aab1015ba117cfbd5a41133b710c24a16332e6767889c1ca8cd4f9745c48aca2f81979acf872ca8b19b0e41d4487e47c9f27acb4f74dcf]");
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString4);
      ByteString byteString5 = hashingSource1.hash();
      byteString4.toString();
      byteString5.indexOf(byteArray0);
      byteString1.toAsciiUppercase();
      byteString1.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString0.sha256();
      ByteString byteString3 = byteString2.sha1();
      ByteString byteString4 = byteString1.sha512();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString2.md5();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString5 = ByteString.encodeString("\r", charset0);
      int int1 = ObjectStreamConstants.baseWireHandle;
      byteString0.indexOf(byteString3, (int) (byte) (-10));
      ByteString byteString6 = ByteString.encodeString("\r", charset0);
      ByteString.decodeHex("");
      byteString5.toString();
      byteString1.string(charset0);
      byteString4.toString();
      ByteString.encodeUtf8("[hex=630e871c18e9d6bd93aab1015ba117cfbd5a41133b710c24a16332e6767889c1ca8cd4f9745c48aca2f81979acf872ca8b19b0e41d4487e47c9f27acb4f74dcf]");
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString6.asByteBuffer();
  }
}
