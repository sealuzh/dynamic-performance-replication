/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:24:29 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      Time time0 = new Time((-567L));
      linkedHashSet0.add(time0);
      linkedHashSet0.add(time0);
      TypeUtils.isHibernateInitialized(linkedHashSet0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(56, "L'", 159, 56, 1024, 159, (-1721518476), 1024, 1024, 56, (-1249));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 159
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      Time time0 = new Time((-567L));
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isPath(class0);
      String string0 = "o";
      Field[] fieldArray0 = new Field[7];
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.getGenericParamType(class0);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      TypeUtils.computeGetters(class1, map0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.loadClass("c6eate");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("c6eate");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c6eate\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,4AcG+OLFKz_O[9:");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("1,4AcG+OLFKz_O[9:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"14AcG+OLFKz_O[9:\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      TypeUtils.isPath(class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.getOrDefault(class0, ":pqdY\"|(kQua;");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("toString");
      SQLTransientException sQLTransientException0 = new SQLTransientException("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "getgetEras", (-689), mockIllegalStateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(":pqdY\"|(kQua;", ")", sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      hashtable0.getOrDefault(sQLFeatureNotSupportedException0, "localPatternChars");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      TypeUtils.isHibernateInitialized(class1);
      TypeUtils.isProxy(class0);
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy1);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.decapitalize("");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("", "get");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, parameterizedTypeImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("3y!P'6~p.TO7", "VW0+w(", 0);
      ParserConfig parserConfig0 = ParserConfig.global;
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.decapitalize("L");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("@5mC,RA", weakHashMap0);
      SQLDataException sQLDataException0 = new SQLDataException("`Gq", "l", sQLClientInfoException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("", sQLClientInfoException0);
      TypeUtils.toLocale("Ljava.util.concurrent.ConcurrentSkipListSet");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      Class<RenderingHints> class0 = RenderingHints.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("@5mC,RA");
      TypeUtils.isHibernateInitialized(mockIllegalArgumentException0);
      Class<?> class1 = TypeUtils.loadClass("");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float(246.71659);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Ljava.awt.Font");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float(246.71659);
      ParserConfig.getGlobalInstance();
      Class<Field> class0 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Collection collection0 = new LinkedHashSet<SQLException>();
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      Double double0 = new Double(6.794030687712041);
      TypeUtils.castToBoolean(double0);
      TypeUtils.getClassFromMapping("SortField");
      AtomicInteger atomicInteger0 = new AtomicInteger(20);
      TypeUtils.castToInt(atomicInteger0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(bufferCapabilities_FlipContents0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : copied
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils.isTransient((Method) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JobAttributes> class0 = JobAttributes.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("B");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, false, (PropertyNamingStrategy) null);
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeUtils.getSerializeFeatures(class0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.JSONPath", classLoader0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.loadClass("cZat~");
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      TypeUtils.decapitalize("getDateTimeInstance");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      Locale locale0 = Locale.US;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.clone();
      Stack<Locale> stack0 = new Stack<Locale>();
      NumberFormat.getInstance(locale0);
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.fnv1a_64("/e{)}-dpxZD$ZOg'N");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = "TO;M/G9N";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/e{)}-dpxZD$ZOg'N", (String) null);
      Locale locale0 = Locale.JAPANESE;
      locale0.hasExtensions();
      MessageFormat messageFormat0 = new MessageFormat(" 9?s^8@l,ICbrF=a9", locale0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(47);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      linkedHashMap0.remove((Object) sQLFeatureNotSupportedException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("fastjson.parser.deny", (Throwable) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "fastjson.parser.deny");
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("fastjson.parser.deny", classLoader1, false);
      TypeUtils.unwrapOptional(class0);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      ChoiceFormat choiceFormat0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(choiceFormat0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<InternalError> class1 = InternalError.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      Dimension dimension0 = new Dimension();
      String string0 = "toString";
      InstantiationError instantiationError0 = new InstantiationError("toString");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.InstantiationError: toString
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("JEYwnMRJL2krYwZ}");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.print((float) 989);
      mockPrintStream1.append('?');
      illegalMonitorStateException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLDataException sQLDataException0 = new SQLDataException("J", "@type", illegalMonitorStateException0);
      Character.valueOf('[');
      Properties properties0 = new Properties();
      TypeUtils.castToBigDecimal(properties0);
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("J");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      StackTraceElement stackTraceElement0 = new StackTraceElement(",S^D", "Signers", "yyyy-MM-dd HH:mm:ss", 989);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : ,S^D.Signers(yyyy-MM-dd HH:mm:ss:989)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<InternalError> class0 = InternalError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, false);
      LinkedHashSet<IllegalStateException> linkedHashSet0 = new LinkedHashSet<IllegalStateException>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      DateFormatSymbols dateFormatSymbols1 = new DateFormatSymbols();
      linkedHashMap0.remove((Object) dateFormatSymbols1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) dateFormatSymbols0, (Type) class0, parserConfig0);
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(timeDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.TimeDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.decapitalize("L");
      long long0 = 159L;
      Long long1 = new Long(159L);
      TypeUtils.castToDouble(long1);
      Timestamp timestamp0 = new Timestamp(159L);
      // Undeclared exception!
      try { 
        MockInstant.parse("l");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'l' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getRawClass(class1);
      Locale locale0 = TypeUtils.toLocale("9\"%=^] l\"3W04V'");
      locale0.getDisplayCountry();
      TypeUtils.getCollectionItemType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : 9\"%=^] l\"3w04v'
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GenericArrayType genericArrayType0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.decapitalize("L");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("@5mC,RA", weakHashMap0);
      SQLDataException sQLDataException0 = new SQLDataException("`Gq", "l", sQLClientInfoException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("", sQLClientInfoException0);
      TypeUtils.toLocale("Ljava.util.concurrent.ConcurrentSkipListSet");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      Class<RenderingHints> class0 = RenderingHints.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      java.util.IdentityHashMap<IllegalArgumentException, Object> identityHashMap0 = new java.util.IdentityHashMap<IllegalArgumentException, Object>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = new Float(246.71659);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      ParserConfig.getGlobalInstance();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      TypeUtils.toLocale("isgetSuperclass");
      TypeUtils.fnv1a_64_lower("isgetSuperclass");
      Class<String> class1 = String.class;
      TypeUtils.getSerializeFeatures(class1);
      Float float1 = TypeUtils.castToFloat((Object) null);
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      BigDecimal bigDecimal0 = new BigDecimal(47);
      TypeUtils.decapitalize("");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<String> class0 = String.class;
      Locale.getISOLanguages();
      Class<HttpCookie> class1 = HttpCookie.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      treeMap0.descendingKeySet();
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("craete instance error", false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.MapSortField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature2;
      int int0 = new Integer(989);
      TypeUtils.castToByte((Object) null);
      TypeUtils.isTransient((Method) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JobAttributes> class1 = JobAttributes.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      Class<PageAttributes> class2 = PageAttributes.class;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("ite");
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) choiceFormat0, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BreakIterator.getLineInstance();
      TypeUtils typeUtils0 = new TypeUtils();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)28;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.castToBytes("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.getClassFromMapping("addSuppressed");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.toLocale("");
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean1 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isNumber("F");
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("T,{%bG0Y~+6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : T,{%bG0Y~+6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.decapitalize("L");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("L", "Qg%x&m{&FO4<nie`a-E");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      weakHashMap0.values();
      TypeUtils.toLocale("Vy!7n`");
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getClass((Type) class0);
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      String string0 = "";
      // Undeclared exception!
      try { 
        breakIterator0.isBoundary(387);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3117);
      int int0 = 38;
      intArray0[3] = (-3117);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("pcH?(Xr#:q6");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      illegalMonitorStateException0.setStackTrace(stackTraceElementArray0);
      SQLDataException sQLDataException0 = new SQLDataException("pcH?(Xr#:q6", "file relative path not support.", illegalMonitorStateException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("TODO", sQLDataException0);
      TypeUtils.toLocale("pcH?(Xr#:q6");
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      TypeUtils.isHibernateInitialized(propertyProcessableDeserializer0);
      String string0 = "]64n<q-3";
      TypeUtils.loadClass("]64n<q-3");
      Class<TimeUnit> class2 = TimeUnit.class;
      Class<JSONPDeserializer> class3 = JSONPDeserializer.class;
      Field[] fieldArray0 = new Field[3];
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("]64n<q-3", treeMap0);
      fieldArray0[0] = null;
      ParserConfig.getFieldFromCache("file relative path not support.", treeMap0);
      fieldArray0[1] = null;
      ParserConfig.getFieldFromCache("]64n<q-3", treeMap0);
      fieldArray0[2] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "-f:", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      linkedHashMap0.put((String) null, "L");
      Class<PageAttributes> class1 = PageAttributes.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      TypeUtils.cast((Object) linkedHashMap0, class2, parserConfig0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class2;
      Class<Character> class3 = Character.TYPE;
      typeArray0[6] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], class0);
      parameterizedTypeImpl0.getTypeName();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@88337c9e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BreakIterator.getLineInstance();
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToBytes("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.getClassFromMapping("addSuppressed");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.toLocale("");
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      
      boolean boolean1 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.decapitalize("");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap1.put("", "");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<Collator> class1 = Collator.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class1);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 0);
      ParserConfig parserConfig0 = ParserConfig.global;
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      TypeUtils.cast((Object) "", (ParameterizedType) parameterizedTypeImpl2, parserConfig0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<IndexOutOfBoundsException> class2 = IndexOutOfBoundsException.class;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) weakHashMap1, (PropertyNamingStrategy) null);
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      TypeUtils.getGenericParamType(type0);
      TypeUtils.unwrapOptional(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      SQLDataException sQLDataException0 = new SQLDataException("Ljava.util.concurrent.ConcurrentSkipListSet", "r,PkY#%I,y", illegalMonitorStateException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("Ljava.util.concurrent.ConcurrentSkipListSet", illegalMonitorStateException0);
      TypeUtils.toLocale("iTH8)> ");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Double> class2 = Double.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) linkedHashMap0);
      TypeUtils.isHibernateInitialized(type0);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      TypeUtils.castToString(mapDeserializer0);
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mapDeserializer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.StringCharacterIterator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      TypeUtils.getGenericParamType(type0);
      TypeUtils.unwrapOptional(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      SQLDataException sQLDataException0 = new SQLDataException("Ljava.util.concurrent.ConcurrentSkipListSet", "r,PkY#%I,y", illegalMonitorStateException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("Ljava.util.concurrent.ConcurrentSkipListSet", illegalMonitorStateException0);
      TypeUtils.toLocale("iTH8)> ");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Double> class2 = Double.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) linkedHashMap0);
      IllegalMonitorStateException illegalMonitorStateException1 = new IllegalMonitorStateException();
      ParserConfig parserConfig0 = new ParserConfig(true);
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", linkedHashMap1);
      TypeUtils.cast((Object) illegalMonitorStateException1, type0, parserConfig0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DecimalFormatSymbols@1073a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.loadClass("L", (ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader.getSystemClassLoader();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.loadClass("1.2.46");
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLSyntaxErrorException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class1);
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build((Class<?>) class2, (Type) class1, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("oracle.sql.TIMESTAMP");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("P");
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      Class<SQLDataException> class1 = SQLDataException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) weakHashMap0, false);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("JEYwnMRJL2krYwZ}");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.print((float) 989);
      mockPrintStream1.append('?');
      illegalMonitorStateException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLDataException sQLDataException0 = new SQLDataException("J", "@type", illegalMonitorStateException0);
      Character.valueOf('[');
      Properties properties0 = new Properties();
      TypeUtils.castToBigDecimal(properties0);
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("J");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("kotlin.reflect.jvm.internal.KClassImpl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("can not cast to JSONObject.");
      assertEquals("can not cast to JSONObject.", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "Ljava.awt.Rectangle";
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Ljava.awt.Rectangle");
      Locale locale0 = Locale.KOREA;
      NumberFormat.getInstance(locale0);
      TypeUtils.toLocale("Ljava.awt.Rectangle");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.computeGetters(class0, map0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 2284;
      intArray0[1] = 53;
      intArray0[2] = 1443168256;
      intArray0[3] = (-1363);
      intArray0[4] = (-596549643);
      intArray0[5] = 991;
      intArray0[6] = (-1895);
      intArray0[7] = 187;
      intArray0[8] = 49;
      MockException mockException0 = new MockException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept", intArray0, mockException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) batchUpdateException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.isPath(class0);
      TypeUtils.castToDate("");
      ClassLoader.getSystemClassLoader();
      InstantiationException instantiationException0 = new InstantiationException("create instance error");
      assertEquals("create instance error", instantiationException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("CRp=$oUE#?G").when(biFunction0).apply(any() , anyString());
      weakHashMap0.compute("gb5I", biFunction0);
      Class<String> class0 = String.class;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      InstantiationException instantiationException0 = new InstantiationException();
      TypeUtils.cast((Object) instantiationException0, (Type) class0, parserConfig0);
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<IllegalThreadStateException> class1 = IllegalThreadStateException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      Class<PageAttributes> class2 = PageAttributes.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) throwableDeserializer0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.castToString((Object) null);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      TypeUtils.toLocale(")d[.F|T_+T7`");
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("");
      Class<Date> class0 = Date.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NegativeArraySizeException: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      InstantiationError instantiationError0 = new InstantiationError();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(".", ".");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLIntegrityConstraintViolationException: .
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.decapitalize("");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      Double double0 = new Double(6.794030687712041);
      TypeUtils.castToBoolean(double0);
      TypeUtils.getClassFromMapping("SortField");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.isNumber("");
      TypeUtils.castToBoolean("");
      Boolean.logicalOr(false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Boolean.compare(false, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BreakIterator.getLineInstance();
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToBytes("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.getClassFromMapping("addSuppressed");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.toLocale("");
      TypeUtils.fnv1a_64_lower("can not cast to char, value : ");
      Class<Properties> class0 = Properties.class;
      Properties properties0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Bnqy(zcbc0NwO";
      TypeUtils.getClassFromMapping("Bnqy(zcbc0NwO");
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.castToSqlDate((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Ljava.lang.AutoCloseable");
      assertEquals("ljava.lang.AutoCloseable", string0);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isNumber("F");
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      weakHashMap0.put("EMPTY", "Ljava.lang.AutoCloseable");
      weakHashMap0.put("i^2X<iIn8&", "}k%");
      weakHashMap0.putIfAbsent("ljava.lang.AutoCloseable", (String) null);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      weakHashMap0.values();
      TypeUtils.toLocale("isgetSuperclass");
      long long0 = TypeUtils.fnv1a_64_lower("o");
      assertEquals((-5808550276084140354L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class2 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.lang.AutoCloseable");
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getParserFeatures(class0);
      String string0 = "lON)X@";
      TypeUtils.fnv1a_64("lON)X@");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("Ljava.lang.AutoCloseable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.lang.AutoCloseable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "";
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.isPath(class0);
      TypeUtils.castToDate("");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TypeUtils.decapitalize("");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Locale locale0 = Locale.GERMAN;
      NumberFormat.getIntegerInstance();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      bigDecimal0.floatValue();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig1);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.parser.deserializer.TimeDeserializer", concurrentHashMap0);
      ParserConfig.global = parserConfig0;
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("VIS(d~&DyRY", "VIS(d~&DyRY");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      TypeUtils.getSerializeFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "]0;jdz9fsrG";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]0;jdz9fsrG");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLNonTransientConnectionException: ]0;jdz9fsrG
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeUtils.loadClass("L", (ClassLoader) null);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "L", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = "TO;M/G9N";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("TO;M/G9N", "l");
      Locale locale0 = Locale.JAPANESE;
      locale0.hasExtensions();
      MessageFormat messageFormat0 = new MessageFormat("Ljava.lang.AutoCloseable", locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.MessageFormat@2787bc3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig1);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.parser.deserializer.TimeDeserializer", concurrentHashMap0);
      ParserConfig.global = parserConfig0;
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("VIS(d~&DyRY", "VIS(d~&DyRY");
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[2]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[2]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationError0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.InstantiationError -> java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      System.setCurrentTimeMillis(10L);
      String string0 = "Ljava.awt.Rectangle";
      SQLException sQLException0 = new SQLException("Ljava.awt.Rectangle", "n[X'K`suBvo(7");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("n[X'K`suBvo(7", "Ljava.awt.Rectangle", "n[X'K`suBvo(7", 1333);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string1 = "";
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "Ljava.awt.Rectangle", "", (-114));
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLException0.spliterator();
      sQLException0.setStackTrace(stackTraceElementArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ljava.awt.Rectangle", sQLException0);
      sQLTransientException0.spliterator();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLTransientException: Ljava.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      TypeUtils.getGenericParamType(type0);
      TypeUtils.unwrapOptional(class1);
      String string0 = "Ljava.awt.Rectangle";
      TypeUtils.fnv1a_64("Ljava.awt.Rectangle");
      boolean boolean0 = true;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class1);
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class1, propertyNamingStrategy0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      javaBeanDeserializer0.smartMatch("vf ");
      Class<FieldInfo> class3 = FieldInfo.class;
      TypeUtils.isProxy(class3);
      javaBeanDeserializer0.smartMatch("fastjson.parser.deny");
      ParserConfig parserConfig1 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class3, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TypeUtils.decapitalize("L");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      TypeUtils.decapitalize("fastjson.parser.autoTypeSupport");
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.fnv1a_64("lON)X@");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("}OXl!e!26").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "Lzd:c0AYn$");
      sQLTransientConnectionException0.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("classAssertionStatus", "/t5s{k97]>c", 0, sQLTransientConnectionException0);
      InstantiationError instantiationError0 = new InstantiationError((String) null);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.GridBagConstraints@1bf4805e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getCollectionItemType(class1);
      TypeUtils.unwrapOptional(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      TypeUtils.fnv1a_64_lower("JEYwnMRJL2krYwZ}");
      Short short0 = new Short((short)89);
      TypeUtils.castToString(short0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "Go-]oCB.jz");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class2 = TypeUtils.loadClass(" SDI:.V9a)CY+B", (ClassLoader) aSMClassLoader0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Map<String, String> map0 = new HashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(map0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Object object0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("craete instance error", false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.MapSortField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) class0, serializerFeatureArray0);
      TypeUtils.castToByte(object0);
      Method method0 = null;
      TypeUtils.isTransient(method0);
      int int0 = (-1731286819);
      int int1 = 11;
      Insets insets0 = new Insets(jSONObject0.DEFAULT_GENERATE_FEATURE, int0, int0, int1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Insets[top=3089,left=-1731286819,bottom=-1731286819,right=11]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.getGenericParamType(class0);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      TypeUtils.computeGetters(class1, map0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Ljava.awt.Font");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      classLoader1.setClassAssertionStatus("ishashCode", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      TypeUtils.castToTimestamp(bigDecimal0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("empty");
      SQLException sQLException0 = new SQLException("fastjson.parser.autoTypeAccept", "Ljava.awt.Font", 97, sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("AllowArbitraryCommas", "Ljava.awt.Font", sQLException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeSupport", (Map<String, ClientInfoStatus>) null, sQLTimeoutException0);
      Class<PageAttributes> class0 = PageAttributes.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sQLClientInfoException0, class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "";
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : en
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      java.sql.Date date0 = new java.sql.Date((-2242L));
      TypeUtils.castToDate(date0);
      Class<Boolean> class0 = Boolean.TYPE;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("syntax error, unexpect token ", hashMap0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap1, propertyNamingStrategy0, true);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, "qHWRx}8E1o 5lYGyD", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("andIncrement");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = "get";
      weakHashMap0.put("get", "");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      Type[] typeArray1 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray1, class1, parameterizedTypeImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "", 112);
      ParserConfig parserConfig0 = ParserConfig.global;
      StackOverflowError stackOverflowError0 = new StackOverflowError("andIncrement");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackOverflowError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 185, fieldName lineNumber, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "Ljava.awt.Font";
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.instrumentation.InstrumentingClassLoader@365c8214
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("sides", "PATTERN_YEAR");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Locale locale0 = TypeUtils.toLocale("sides");
      assertEquals("sides", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("can not get javaBeanDeserializer. ", "EMPTY");
      weakHashMap0.put("1.2.46", "EMPTY");
      weakHashMap0.putIfAbsent("unsupported set operation.", "1.2.46");
      Class<SQLWarning> class0 = SQLWarning.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, true);
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap1.values();
      Locale locale0 = TypeUtils.toLocale("serialVersionUID");
      assertEquals("serialversionuid", locale0.toString());
      
      long long0 = TypeUtils.fnv1a_64_lower("i^2X<iIn8&");
      assertEquals(5411597058182196394L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      Class class3 = (Class)TypeUtils.getGenericParamType(class2);
      assertNull(class3);
      
      TypeUtils.unwrapOptional(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class2, map0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("parse unwrapped field error.");
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = TypeUtils.isHibernateInitialized(timeUnit0);
      assertTrue(boolean0);
      
      TypeUtils.loadClass("JEYwnMRJL2krYwZ}");
      Class class4 = (Class)TypeUtils.unwrapOptional(class2);
      assertEquals(1, class4.getModifiers());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isGenericParamType(class0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("YS'0z+5", "yt$AiE'", 1);
      concurrentHashMap0.equals(sQLTransientException0);
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Class<Date> class0 = Date.class;
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.checkAutoType((String) null, class0);
      parserConfig0.compatibleWithJavaBean = false;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      TypeUtils.cast((Object) null, class0, parserConfig0);
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeUtils.decapitalize("5w. $~05t)S\"7+\"J");
      Class<InternalError> class0 = InternalError.class;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      Short.toUnsignedInt((short)5697);
      TypeUtils.decapitalize("");
      Class<String> class0 = String.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.getCollectionItemClass(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      TypeUtils.castToLong(stringArray0[1]);
      SerializeWriter serializeWriter0 = new SerializeWriter();
      Boolean boolean0 = new Boolean("Ljava.awt.Font");
      Class<Locale> class0 = Locale.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      ClassLoader.getSystemClassLoader();
      Class<ChoiceFormat> class2 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-95);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -21982734615391
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<InternalError> class0 = InternalError.class;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      TypeUtils.castToInt("");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      Double double0 = new Double(6.794030687712041);
      TypeUtils.castToBoolean(double0);
      TypeUtils.getClassFromMapping("SortField");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "";
      TypeUtils.decapitalize((String) null);
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      BigDecimal bigDecimal0 = new BigDecimal(47);
      linkedHashMap0.remove((Object) bigDecimal0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      ArrayList<StringCharacterIterator> arrayList0 = new ArrayList<StringCharacterIterator>();
      arrayList0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) arrayList0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils.decapitalize("");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("", "get");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ClassLoader> class0 = ClassLoader.class;
      InstantiationError instantiationError0 = new InstantiationError();
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("craete instance error", false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.MapSortField;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("CRp=$oUE#?G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : CRp=$oUE#?G
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      String string0 = "p_)+^";
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {Fractional metrics enable key=Fractional metrics enable key}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TypeUtils.decapitalize("EU5D ZPC<BOmQ6");
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.clearClassMapping();
      Rectangle rectangle0 = null;
      try {
        rectangle0 = new Rectangle((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      Short.toUnsignedInt((short)5697);
      TypeUtils.decapitalize("");
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.getSerializeFeatures(class0);
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.lang.AutoCloseable");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isNumber("F");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      weakHashMap0.getOrDefault("ljava.lang.AutoCloseable", "ljava.lang.AutoCloseable");
      weakHashMap0.put("EMPTY", "Ljava.lang.AutoCloseable");
      weakHashMap0.put("i^2X<iIn8&", "}k%");
      weakHashMap0.putIfAbsent("ljava.lang.AutoCloseable", (String) null);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      weakHashMap0.values();
      TypeUtils.toLocale("isgetSuperclass");
      TypeUtils.fnv1a_64_lower("o");
      TypeUtils.getSerializeFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashMap0);
      TypeUtils.toLocale("j7bxuNGrLI2=Y0w*E\"&");
      TypeUtils.fnv1a_64_lower("fileName");
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.decapitalize("&(=^~UeeohAmQ_XY&");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      TypeUtils.toLocale(")d[.F|T_+T7`");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.clone();
      TypeUtils.isHibernateInitialized(linkedHashSet0);
      TypeUtils.loadClass("&(=^~UeeohAmQ_XY&");
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.decapitalize("");
      TypeUtils.castToLong("");
      SerializeWriter serializeWriter0 = new SerializeWriter();
      Boolean boolean0 = new Boolean(":I?-Jyir/Pj,;");
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator((String) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g5zO3|_. |/!*3N";
      stringArray0[1] = "DAY_OF_WEEK_FIELD.000000";
      stringArray0[2] = "[Z";
      stringArray0[3] = "e}Yo3I";
      stringArray0[4] = "lo";
      stringArray0[5] = ";";
      stringArray0[6] = "H0 NJ FJ{";
      stringArray0[7] = "k#";
      stringArray0[8] = "java.lang.Comparable";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<TimeUnit> class1 = TimeUnit.class;
      String string0 = "(II)V";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "(II)V", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TypeUtils.decapitalize("");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      TypeUtils.decapitalize("gethahCoIde");
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      TypeUtils.getGenericParamType(type0);
      TypeUtils.unwrapOptional(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      TypeUtils.unwrapOptional((Type) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiFunction<Object, Object, Jdk8DateCodec> biFunction0 = (BiFunction<Object, Object, Jdk8DateCodec>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute((String) null, biFunction0);
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      TypeUtils.castToString(jSONObject0);
      TypeUtils.getCollectionItemClass((Type) null);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("0001-01-01T00:00:00+08:00");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(choiceFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.text.ChoiceFormat@0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.castToBigDecimal(linkedHashMap0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.isProxy(class0);
      TypeUtils.isHibernateInitialized(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      TypeUtils.getCollectionItemType(type0);
      String string0 = "|lg.'^[svn}@g";
      NumberFormatException numberFormatException0 = new NumberFormatException("|lg.'^[svn}@g");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.NumberFormatException: |lg.'^[svn}@g
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<Integer> class0 = Integer.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TypeUtils.decapitalize("");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) imageCapabilities0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.ImageCapabilities@339dd8a7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      TypeUtils.castToBigDecimal(linkedHashMap0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("O@)Eb");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("", mockIllegalArgumentException0);
      int[] intArray0 = new int[4];
      intArray0[0] = 39;
      intArray0[1] = 104;
      intArray0[2] = (-1631);
      intArray0[3] = (-2491);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, mockIllegalStateException0);
      TypeUtils.unwrapOptional(class0);
      Short short0 = TypeUtils.castToShort("");
      assertNull(short0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<InternalError> class0 = InternalError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<FieldInfo> class2 = FieldInfo.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) serializeBeanInfo0, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-3117);
      Class<ClassLoader> class0 = ClassLoader.class;
      String string0 = "CRp=$oUE#?G";
      String string1 = ">YShuLa9.^F{$$&jKI$";
      InstantiationError instantiationError0 = new InstantiationError(">YShuLa9.^F{$$&jKI$");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      treeMap0.put(">YShuLa9.^F{$$&jKI$", class0);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.isPath(class1);
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Dimension> class2 = Dimension.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("sO,'p78", treeMap0);
      Class<GridBagConstraints> class3 = GridBagConstraints.class;
      Class<SQLTransactionRollbackException> class4 = SQLTransactionRollbackException.class;
      TypeUtils.getSuperMethodAnnotation(class4, (Method) null);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("sO,'p78", (Method) null, (Field) null, class3, class3, 45, (-813), 45, (JSONField) null, (JSONField) null, "TSX|6H>4R9O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      TypeUtils.getClass((Type) class0);
      TypeUtils.fnv1a_64_lower("v,^uAElkm");
      int[] intArray0 = new int[3];
      intArray0[0] = 1024;
      intArray0[1] = 116;
      intArray0[2] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("v,^uAElkm", intArray0);
      SecurityException securityException0 = new SecurityException(":i)Bc-D,* USipw", batchUpdateException0);
      String string0 = TypeUtils.castToString(securityException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Type type0 = null;
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.fnv1a_64("Ljava.awt.Rectangle");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      TypeUtils.fnv1a_64("java/lang/Double");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      FieldInfo fieldInfo0 = new FieldInfo("a~GI$,gCaTg", class1, class1, class0, (Field) null, (-1107632031), (-1107632031), (-2581));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getGenericParamType(class0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      TypeUtils.computeGetters(class1, map0);
      TypeUtils.createCollection(type0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      linkedHashMap0.remove((Object) dateFormatSymbols0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.getDeserializer((Type) class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      Locale locale0 = TypeUtils.toLocale("}|U~! }.Y");
      assertEquals("}|u~! }.y", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      Locale locale0 = TypeUtils.toLocale("Ljava.awt.Font");
      NumberFormat.getInstance(locale0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToTimestamp((Object) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(jSONType0);
      parserConfig0.getDeserializer((Class<?>) class1, (Type) class2);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      linkedHashSet0.spliterator();
      Character character0 = new Character('9');
      TypeUtils.isHibernateInitialized(character0);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<PageAttributes> class3 = PageAttributes.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class3, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isPath(class0);
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      Class<MockDate> class2 = MockDate.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("cachedHashCode", parserConfig0, 97);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(2);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Time time0 = Time.valueOf(localTime0);
      // Undeclared exception!
      try { 
        propertyProcessableDeserializer0.deserialze(defaultJSONParser0, (Type) class2, (Object) time0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // craete instance error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = null;
      TypeUtils.castToShort((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.isPath(class0);
      TypeUtils.castToDate("");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("parse unwrapped field error.");
      TypeUtils.isHibernateInitialized(class0);
      TypeUtils.loadClass("");
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.isNumber("$dG]YBWi%z8z");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "parse unwrapped field error.", (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TypeUtils.decapitalize("");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("", "get");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, parameterizedTypeImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "get", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.lang.AutoCloseable");
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.fnv1a_64("lON)X@");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("Lzd:c0AYn$").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("Ljava.lang.AutoCloseable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.lang.AutoCloseable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      String string0 = "CRp=$oUE#?G";
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.ClassLoader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject1 = new JSONObject(hashMap0);
      TypeUtils.castToString(instantiationError0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeSupport");
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      Class<ClassLoader> class2 = ClassLoader.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class1, class2, class2, (Field) null, 3089, 4, 3089);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      TypeUtils.castToTimestamp((Object) null);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig2 = new ParserConfig(classLoader0);
      Class<Double> class3 = Double.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig2, class3);
      Class<PageAttributes> class4 = PageAttributes.class;
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) rectangle0, class4, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.fnv1a_64("lON)X@");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "Lzd:c0AYn$");
      sQLTransientConnectionException0.printStackTrace();
      Class<ClassLoader> class1 = ClassLoader.class;
      Class<Boolean> class2 = Boolean.TYPE;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("is", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("getelements", class2, class1, class1, (Field) null, 115, 27, (-881));
      Class<Point> class3 = Point.class;
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      TypeUtils.toLocale("Erv");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters(fieldInfo0.declaringClass, (Map<String, String>) linkedHashMap0);
      assertFalse(list0.contains(fieldInfo0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.unwrapOptional(class0);
      TypeUtils.fnv1a_64("Ljava.awt.Rectangle");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      String string0 = "can not cast to JSONObject.";
      Method method0 = null;
      Field field0 = null;
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      int int0 = (-2767);
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class2, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.isNumber("");
      TypeUtils.castToBoolean("");
      String string1 = "org.springframework.util.LinkedMultiValueMap";
      TypeUtils.decapitalize("org.springframework.util.LinkedMultiValueMap");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      TypeUtils.toLocale("org.springframework.util.LinkedMultiValueMap");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<TimeUnit> class0 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TypeUtils.loadClass("L", (ClassLoader) null);
      TypeUtils.getCollectionItemType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("JEYwnMRJL2krYwZ}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"JEYwnMRJL2krYwZ}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "Ljava.awt.Font";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ljava.awt.Font";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter1.getClazz();
      TypeUtils.unwrapOptional(class1);
      Locale locale0 = Locale.ENGLISH;
      MessageFormat messageFormat0 = new MessageFormat("D!2I,!qhU(8]S", locale0);
      TypeUtils.castToString(messageFormat0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Ljava.awt.Font");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TypeUtils.decapitalize("0:hth\"^rr");
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("o'K68^ubnehJ\"Q@P-8", weakHashMap0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "dd/MM/yyyy HH:mm:ss", sQLClientInfoException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("", sQLDataException0);
      TypeUtils.toLocale("writeString");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = new Vector<FieldInfo>();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("C]>AEYK");
      TypeUtils.isHibernateInitialized((Object) null);
      Class<?> class0 = TypeUtils.loadClass("`Gq");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0);
      TypeUtils.isProxy(class0);
      int int0 = 431;
      MockDate mockDate0 = new MockDate(1174, 1174, 431);
      Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockDate0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.fnv1a_64("Ljava.awt.Rectangle");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(bufferCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.BufferCapabilities@1e16d37b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      JSON.toJavaObject((JSON) jSONObject0, class1);
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.ClassLoader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<IllegalThreadStateException> class1 = IllegalThreadStateException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      Class<BufferCapabilities>[] classArray0 = null;
      ThrowableDeserializer throwableDeserializer1 = new ThrowableDeserializer(parserConfig0, class1);
      int int0 = (-26760553);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-26760553));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      String string0 = "D1<$V\"Y";
      Class<Properties> class1 = Properties.class;
      Class<NumberFormat> class2 = NumberFormat.class;
      Class<Calendar> class3 = Calendar.class;
      Field[] fieldArray0 = new Field[7];
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("~|6 LmMQHhfv^DWcf", identityHashMap0);
      fieldArray0[0] = null;
      ParserConfig.getFieldFromCache("Ljava.awt.Color", identityHashMap0);
      fieldArray0[1] = null;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("D1<$V\"Y", treeMap0);
      fieldArray0[2] = null;
      ParserConfig.getFieldFromCache("~|6 LmMQHhfv^DWcf", treeMap0);
      fieldArray0[3] = null;
      ParserConfig.getFieldFromCache("Ljava.awt.Rectangle", treeMap0);
      fieldArray0[4] = null;
      ParserConfig.getFieldFromCache("Wc]e:kih", identityHashMap0);
      fieldArray0[5] = null;
      ParserConfig.getFieldFromCache("~|6 LmMQHhfv^DWcf", identityHashMap0);
      fieldArray0[6] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class3, "ah`<,Ia", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.decapitalize("");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      Locale locale0 = TypeUtils.toLocale(")d[.F|T_+T7`");
      assertEquals(")d[.f|t_+T7`", locale0.toString());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.clone();
      boolean boolean0 = TypeUtils.isHibernateInitialized(linkedHashSet0);
      TypeUtils.loadClass("");
      boolean boolean1 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation((Class<?>) null, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "q`yf6Ubi'qz");
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("false", true);
      classLoader0.setPackageAssertionStatus("q`yf6Ubi'qz", true);
      mockThread0.getContextClassLoader();
      MockThread.getAllStackTraces();
      TypeUtils.loadClass("q`yf6Ubi'qz", classLoader0);
      TypeUtils.isGenericParamType((Type) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("q`yf6Ubi'qz", (-1622));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = ']';
      charArray0[2] = 'j';
      charArray0[3] = '3';
      charArray0[4] = '%';
      charArray0[5] = 'J';
      charArray0[6] = 'F';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      TypeUtils.castToShort((Object) null);
      TypeUtils.castToLong((Object) null);
      Class<NumberFormat> class0 = NumberFormat.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.isPath(class0);
      TypeUtils.isGenericParamType(class0);
      String string0 = "[Z";
      TypeUtils.getClassFromMapping("[Z");
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.decapitalize("[Z");
      TypeUtils.isNumber("java.beans.Transient");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("java.beans.Transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.beans.Transient
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getGenericParamType(class1);
      TypeUtils.castToBigDecimal((Object) null);
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.getCollectionItemType(class0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("#}4Fap", "patternChars", "ZAm:L/NH+IhI9\"", 0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : #}4Fap.patternChars(ZAm:L/NH+IhI9\":0)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      TypeUtils.getClassFromMapping("SortField");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      Time time0 = new Time((-567L));
      linkedHashSet0.add(time0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[3] = serializerFeature2;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) numberFormat0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToSqlDate((Object) null);
      Class<Calendar> class2 = Calendar.class;
      TypeUtils.getParserFeatures(class2);
      String string0 = "";
      TypeUtils.isNumber("");
      Class<InternalError> class3 = InternalError.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      weakHashMap0.put("is", "o");
      TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      weakHashMap0.values();
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, (String) null, (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TypeUtils.loadClass("L", (ClassLoader) null);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "L", (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<InternalError> class0 = InternalError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, false);
      LinkedHashSet<IllegalStateException> linkedHashSet0 = new LinkedHashSet<IllegalStateException>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ParserConfig.global = parserConfig0;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.text.MockDateFormat@1c41eefa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      stringArray0[1] = "iTH8)> ";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      MockThread mockThread0 = new MockThread("Ljava.awt.Font");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setClassAssertionStatus("ishashCode", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      TypeUtils.castToTimestamp(bigDecimal0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      Type[] typeArray0 = new Type[3];
      Class<Boolean> class0 = Boolean.TYPE;
      typeArray0[0] = (Type) class0;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      typeArray0[1] = type0;
      int int0 = 49;
      JSONArray jSONArray0 = new JSONArray(49);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(49);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap1.put("!d2$f#=", "");
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "oracle.sql.DATE", 0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLInvalidAuthorizationSpecException -> java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TypeUtils.fnv1a_64("/e{)}-dpxZD$ZOg'N");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("0Sh{HD=T);^i", "0Sh{HD=T);^i");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      TypeUtils.getSerializeFeatures(class1);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class1);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, class0, parameterizedTypeImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "VW0+w(";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("VW0+w(", "get", (-1933788603));
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getSqlDate("Ljava.awt.Rectangle");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "l", (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap0.put("!d2$f#=", "!d2$f#=");
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      Class<Insets> class2 = Insets.class;
      TypeUtils.getSerializeFeatures(class2);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Type[] typeArray1 = new Type[4];
      typeArray1[0] = (Type) parameterizedTypeImpl0;
      typeArray1[1] = (Type) class2;
      typeArray1[2] = (Type) class1;
      typeArray1[3] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray1, typeArray1[1], typeArray1[3]);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!d2$f#=", "_9o5{vS4KF2<Kn2", 0);
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("hashCode", "tEB", 0, sQLInvalidAuthorizationSpecException0);
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class3, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) concurrentHashMap0, false, (PropertyNamingStrategy) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransactionRollbackException0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLTransactionRollbackException -> java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      TypeUtils.unwrapOptional(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class2, map0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("parse unwrapped field error.");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) linkedHashMap0, (Type) class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "|HX5qEa$h";
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("|HX5qEa$h");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|HX5qEa$h\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      ClassLoader.getSystemClassLoader();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.loadClass("1.2.46");
      int int0 = new Integer(3089);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "\\";
      TypeUtils.decapitalize("");
      TypeUtils.castToLong("");
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getCollectionItemType(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string1 = "<o-dt8~ld\"p1omD";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3117);
      intArray0[1] = 38;
      intArray0[3] = 2969;
      intArray0[4] = (-1958);
      Class<Integer> class0 = Integer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      ArrayList<StringCharacterIterator> arrayList0 = new ArrayList<StringCharacterIterator>();
      arrayList0.clone();
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ONE;
      TypeUtils.castToInt(bigInteger0);
      Class<DataTruncation> class1 = DataTruncation.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.ReferenceCodec", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("S", class0, class0, class0, (Field) null, (-1124155342), 27, 27);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      Class<Annotation> class0 = Annotation.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Calendar> class2 = Calendar.class;
      TypeUtils.getParserFeatures(class2);
      TypeUtils.isNumber("");
      Class<InternalError> class3 = InternalError.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("o", "is");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.merge("", "is", biFunction0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      weakHashMap0.values();
      Class<Object> class4 = Object.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class4, "L2s6#", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashMap0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      BigDecimal bigDecimal0 = new BigDecimal(47);
      linkedHashMap0.remove((Object) bigDecimal0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException((String) null, (Throwable) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("C>D", (ClassLoader) null, false);
      TypeUtils.unwrapOptional((Type) null);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      ChoiceFormat choiceFormat0 = TypeUtils.castToJavaBean((Object) "", class1);
      assertNull(choiceFormat0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      String string0 = "iTH8)> ";
      TypeUtils.decapitalize("iTH8)> ");
      Class<String> class0 = String.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<HttpCookie> class1 = HttpCookie.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.getCollectionItemClass(class0);
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 224);
      Locale locale0 = jSONReaderScanner0.getLocale();
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      String string0 = "CRp=$oUE#?G";
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig1);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.parser.deserializer.TimeDeserializer", concurrentHashMap0);
      TypeUtils.castToByte((Object) null);
      TypeUtils.fnv1a_64("fastjson.parser.autoTypeSupport");
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) instantiationError0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      SQLDataException sQLDataException0 = new SQLDataException("JEYwnMRJL2krYwZ}");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("JEYwnMRJL2krYwZ}", illegalMonitorStateException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, false);
      TypeUtils.unwrapOptional((Type) null);
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) aSMDeserializerFactory0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig1);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.parser.deserializer.TimeDeserializer", concurrentHashMap0);
      ParserConfig.global = parserConfig0;
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("VIS(d~&DyRY", "VIS(d~&DyRY");
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[2]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[2]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationError0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@57ca8485
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TypeUtils.loadClass("L", (ClassLoader) null);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      boolean boolean0 = true;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, concurrentHashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      treeMap0.descendingKeySet();
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("craete instance error", false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.MapSortField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature2;
      Integer integer0 = new Integer(989);
      TypeUtils.castToByte((Object) null);
      TypeUtils.isTransient((Method) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JobAttributes> class0 = JobAttributes.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<PageAttributes> class1 = PageAttributes.class;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("ite");
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, (PropertyNamingStrategy) null);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      LinkedHashSet<IllegalStateException> linkedHashSet0 = new LinkedHashSet<IllegalStateException>();
      InstantiationException instantiationException0 = new InstantiationException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.util.FieldInfo");
      String string0 = TypeUtils.castToString("com.alibaba.fastjson.util.FieldInfo");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("getDateInstance", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.isHibernateInitialized(class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      TypeUtils.isNumber("C");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.isPath(class0);
      TypeUtils.castToDate("");
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("@F:", classLoader0);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getGenericParamType(type0);
      TypeUtils.unwrapOptional((Type) null);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      SQLDataException sQLDataException0 = new SQLDataException("JEYwnMRJL2krYwZ}", "java.awt.Point", illegalMonitorStateException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("getgetComponentType", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      Class<?> class2 = TypeUtils.getCollectionItemClass(type0);
      TypeUtils.unwrapOptional(class2);
      Class<ChoiceFormat> class3 = ChoiceFormat.class;
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noClassDefFoundError0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<NoSuchMethodError> class1 = NoSuchMethodError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>(2);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, (PropertyNamingStrategy) null);
      assertFalse(list0.isEmpty());
      
      JSONArray jSONArray0 = new JSONArray(2);
      Locale locale0 = Locale.JAPANESE;
      ConcurrentHashMap<NumberFormat, Character> concurrentHashMap0 = new ConcurrentHashMap<NumberFormat, Character>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-12), 1620, 4, 2, 12);
      ClassLoader.getSystemClassLoader();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<IndexOutOfBoundsException> class2 = IndexOutOfBoundsException.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "Ljava.awt.Rectangle";
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Ljava.awt.Rectangle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Ljava.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) dateFormatSymbols0, (Type) class0, parserConfig0);
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("#u5H8tE4G?:", sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("iYAx&BfHQY", "iYAx&BfHQY", typeNotPresentException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("iYAx&BfHQY", sQLDataException0);
      TypeUtils.toLocale("getgetClass");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Double> class0 = Double.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      VerifyError verifyError0 = new VerifyError("#u5H8tE4G?:");
      TypeUtils.isHibernateInitialized(verifyError0);
      Class<?> class1 = TypeUtils.loadClass((String) null);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TypeUtils.decapitalize("L");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertTrue(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getCollectionItemType(class1);
      String string0 = ">?QfF {MF:Nhn";
      InstantiationError instantiationError0 = new InstantiationError(">?QfF {MF:Nhn");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      String string1 = "|HX5qEa$h";
      treeMap0.put("|HX5qEa$h", class1);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("|HX5qEa$h");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|HX5qEa$h\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      BreakIterator.getLineInstance();
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getParserFeatures(class1);
      TypeUtils.castToBytes("");
      Class<Short> class2 = Short.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.getSerializeFeatures(class2);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.lang.AutoCloseable");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isNumber("F");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      weakHashMap0.getOrDefault("ljava.lang.AutoCloseable", "ljava.lang.AutoCloseable");
      weakHashMap0.put("EMPTY", "Ljava.lang.AutoCloseable");
      weakHashMap0.put("i^2X<iIn8&", "}k%");
      weakHashMap0.putIfAbsent("ljava.lang.AutoCloseable", (String) null);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      weakHashMap0.values();
      TypeUtils.toLocale("isgetSuperclass");
      TypeUtils.fnv1a_64_lower("o");
      TypeUtils.getSerializeFeatures(class1);
      Class<PageAttributes> class2 = PageAttributes.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) serializeBeanInfo0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      linkedHashMap0.remove((Object) dateFormatSymbols0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) "", (Type) null, parserConfig0);
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.getDeserializer((Type) class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      Locale locale0 = TypeUtils.toLocale("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autotypesupport", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<InternalError> class1 = InternalError.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(55);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Map<String, Object> map0 = jSONObject1.getInnerMap();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "yyyy-MM-dd HH:mm:ss");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = TypeUtils.castToJavaBean(map0, class0, parserConfig0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.isKotlin(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.isProxy(class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters(class1, map0, true);
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0, false);
      Class<SQLDataException> class2 = SQLDataException.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class2, map0, propertyNamingStrategy1, true);
      Method method0 = null;
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      TypeUtils.isTransient((Method) null);
      String string0 = "j1MVy7;j(Q'";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "j1MVy7;j(Q'", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TypeUtils.fnv1a_64("/e{)}-dpxZD$ZOg'N");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("/e{)}-dpxZD$ZOg'N");
      treeMap0.put("[char", outOfMemoryError0);
      treeMap0.descendingKeySet();
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("CRp=$oUE#?G", "CRp=$oUE#?G");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NULL_CAUSE_MESSAGE", false);
      Integer integer0 = new Integer(38);
      TypeUtils.castToByte((Object) null);
      TypeUtils.isTransient((Method) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JobAttributes> class0 = JobAttributes.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("W/ML.ihz@? RSQykn");
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<StackTraceElementDeserializer> class2 = StackTraceElementDeserializer.class;
      TypeUtils.isPath(class2);
      Class<OptionalCodec> class3 = OptionalCodec.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class3, linkedHashMap0, true, (PropertyNamingStrategy) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.unwrapOptional(class0);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) propertyNamingStrategy0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Time time0 = new Time((-567L));
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      MockDate mockDate0 = new MockDate(97, 24, (-1459197577));
      time0.before(mockDate0);
      linkedHashSet0.add(time0);
      linkedHashSet0.spliterator();
      TypeUtils.isHibernateInitialized(time0);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      parserConfig0.setAsmEnable(false);
      Class<PageAttributes> class0 = PageAttributes.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) jSONPDeserializer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Collection collection0 = new HashSet<IllegalAccessError>();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3117);
      intArray0[1] = 38;
      intArray0[3] = 2969;
      intArray0[4] = (-1958);
      intArray0[5] = 39;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      SQLDataException sQLDataException0 = new SQLDataException("JEYwnMRJL2krYwZ}", "JEYwnMRJL2krYwZ}", illegalMonitorStateException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("JEYwnMRJL2krYwZ}", sQLDataException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("JEYwnMRJL2krYwZ}", (ClassLoader) aSMClassLoader0, false);
      TypeUtils.unwrapOptional((Type) null);
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) aSMDeserializerFactory0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("ishashCode");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      Locale locale0 = TypeUtils.toLocale("fastjson.parser.autoTypeSupport");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Float float0 = new Float(246.71659);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.getDeserializer((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig1);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.parser.deserializer.TimeDeserializer", concurrentHashMap0);
      ParserConfig.global = parserConfig0;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("VIS(d~&DyRY", "VIS(d~&DyRY");
      Type[] typeArray0 = new Type[7];
      typeArray0[1] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[2]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[2]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationError0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@efca0c62
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TypeUtils.getClassFromMapping("JSM=W`(");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig1.setAsmEnable(true);
      TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, parserConfig1);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils.getClass((Type) class0);
      TypeUtils.castToShort((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      ConcurrentHashMap<MapDeserializer, NumberFormatException> concurrentHashMap0 = new ConcurrentHashMap<MapDeserializer, NumberFormatException>();
      Class<MapDeserializer> class1 = MapDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) concurrentHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.MapDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      Time time0 = new Time((-567L));
      linkedHashSet0.add(time0);
      linkedHashSet0.spliterator();
      TypeUtils.isHibernateInitialized(linkedHashSet0);
      Class<PageAttributes> class0 = PageAttributes.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) linkedHashSet0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("/e{)}-dpxZD$ZOg'N");
      assertEquals((-7995676364743379078L), long0);
      
      TypeUtils.castToBytes("/e{)}-dpxZD$ZOg'N");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.getClassFromMapping("/e{)}-dpxZD$ZOg'N");
      Locale locale0 = Locale.CHINESE;
      TypeUtils.fnv1a_64_lower("oi?7jb& ?YD Fc");
      BigInteger bigInteger0 = BigInteger.TEN;
      TypeUtils.getKoltinConstructorParameters((Class) null);
      long long1 = TypeUtils.fnv1a_64_lower("oi?7jb& ?YD Fc");
      assertEquals(4361631597438492318L, long1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      TypeUtils.getCollectionItemType(type0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.compatibleWithJavaBean = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.loadClass("suppressedExceptions");
      TypeUtils.getCollectionItemClass(class0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      boolean boolean0 = new Boolean("suppressedExceptions");
      TypeUtils.isGenericParamType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(classLoader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      TypeUtils.isPath(class0);
      Class<Annotation> class1 = Annotation.class;
      Class<TimeUnit> class2 = TimeUnit.class;
      TypeUtils.getAnnotation((Class<?>) class2, class1);
      ClassLoader.getSystemClassLoader();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      InstantiationException instantiationException0 = new InstantiationException("to");
      assertEquals("java.lang.InstantiationException: to", instantiationException0.toString());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.isPath(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@98
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      Class<ClassLoader> class0 = ClassLoader.class;
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      jSONObject0.replace("fastjson.parser.autoTypeAccept", (Object) gridBagConstraints0);
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(12, list0.size());
      
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("O?7KF]3(", (Throwable) null);
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("O?7KF]3(", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      TypeUtils.unwrapOptional((Type) null);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      TypeUtils.castToJavaBean((Object) null, class1);
      List<FieldInfo> list1 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      TypeUtils.decapitalize("can't create non-static inner class instance.");
      StackTraceElement stackTraceElement0 = new StackTraceElement("g'/PlN`", "Ljava.awt.Font", "uS{cT", (-1612921304));
      InstantiationError instantiationError0 = new InstantiationError("PATTERN_MONTH");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("PATTERN_DAY_OF_WEEK_IN_MONTH", instantiationError0);
      sQLRecoverableException0.spliterator();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fN4+2Y;ytg-9I(", "PATTERN_HOUR0", (-136));
      sQLTransientConnectionException0.spliterator();
      InstantiationError instantiationError1 = new InstantiationError("Ljava.awt.Font");
      MockException mockException0 = new MockException(",", instantiationError1);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : org.evosuite.runtime.mock.java.lang.MockThrowable: ,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.decapitalize("0yv6|");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Object> class1 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      ParserConfig parserConfig1 = ParserConfig.global;
      TypeUtils.cast((Object) "0yv6|", (Type) class1, parserConfig1);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.decapitalize("gethahCoIde");
      byte[] byteArray0 = TypeUtils.castToBytes("gethahCoIde");
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-21), (byte)97, (byte)106, (byte)16, (byte) (-88), (byte)33, (byte) (-41)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) linkedHashMap0, (Type) class0, parserConfig0);
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      stringArray0[1] = "iTH8)> ";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.castToString((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("iTH8)> ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : iTH8)> 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader1, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("!d2$f#=", "");
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "oracle.sql.DATE", 0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLInvalidAuthorizationSpecException -> java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class1);
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class1, propertyNamingStrategy0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ClassLoader.getSystemClassLoader();
      Class<Point> class3 = Point.class;
      parserConfig0.checkAutoType((String) null, class3);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      Class<Date> class4 = Date.class;
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeDeserializer0, class4, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.TimeDeserializer@db
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      TypeUtils.loadClass("(l6_#9m<i*'~");
      TypeUtils.unwrapOptional((Type) null);
      SQLDataException sQLDataException0 = new SQLDataException("L");
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLDataException: L
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "Ljava.awt.Color", fieldArray0);
      Class<Dimension> class2 = Dimension.class;
      boolean boolean0 = TypeUtils.isPath(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.boolean");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TypeUtils.fnv1a_64("/e{)}-dpxZD$ZOg'N");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("/e{)}-dpxZD$ZOg'N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      Short.toUnsignedInt((short)5697);
      TypeUtils.decapitalize("");
      Class<String> class0 = String.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToSqlTime((Object) null);
      Class<?> class2 = TypeUtils.getClassFromMapping("");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      TypeUtils.getGenericParamType(class2);
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters(class2, map0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "JEYwnMRJL2krYwZ}", (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : JEYwnMRJL2krYwZ}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      linkedHashMap0.remove((Object) dateFormatSymbols0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) "", (Type) null, parserConfig0);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("class java.text.DateFormatSymbols", class1.toString());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      TypeUtils.getGenericParamType(type0);
      TypeUtils.unwrapOptional(class1);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Collection<String> collection0 = weakHashMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.castToDate((Object) null);
      Class<Annotation> class1 = Annotation.class;
      Class<DataTruncation> class2 = DataTruncation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class1);
      ClassLoader.getSystemClassLoader();
      InstantiationException instantiationException0 = new InstantiationException("DZTu\"");
      assertEquals("DZTu\"", instantiationException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "";
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      BigDecimal bigDecimal0 = new BigDecimal(47);
      linkedHashMap0.remove((Object) bigDecimal0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      ArrayList<StringCharacterIterator> arrayList0 = new ArrayList<StringCharacterIterator>();
      arrayList0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) arrayList0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3117);
      intArray0[1] = 38;
      intArray0[2] = 13;
      intArray0[3] = 2940;
      intArray0[4] = (-1958);
      intArray0[5] = 39;
      String string0 = "L";
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TypeUtils.decapitalize("");
      TypeUtils.castToLong("");
      TypeUtils.decapitalize("\"E|0O;j6JJ&YMo");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      Locale locale0 = Locale.US;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.clone();
      Stack<Locale> stack0 = new Stack<Locale>();
      NumberFormat.getInstance(locale0);
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "/e{)}-dpxZD$ZOg'N";
      TypeUtils.fnv1a_64("/e{)}-dpxZD$ZOg'N");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("/e{)}-dpxZD$ZOg'N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class1);
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class1, propertyNamingStrategy0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      Locale locale0 = TypeUtils.toLocale("Ljava.awt.Font");
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("Ljava.awt.Font");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Integer> class0 = Integer.class;
      TypeUtils.computeGetters(class0, map0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport", 1089);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockGregorianCalendar0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljav.awt.Fon";
      stringArray0[1] = "ifTH8)> ";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljav.awt.Fon");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljav.awt.Fon
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
      
      TypeUtils.castToBoolean("");
      TypeUtils.decapitalize("org.springframework.util.LinkedMultiValueMap");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      Locale locale0 = TypeUtils.toLocale("org.springframework.util.LinkedMultiValueMap");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.add(locale0);
      assertEquals("org.springframework.util.linkedmultivaluemap", locale0.toString());
      
      linkedHashSet0.clone();
      boolean boolean1 = TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.loadClass((String) null);
      boolean boolean2 = TypeUtils.isGenericParamType((Type) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TypeUtils.decapitalize("");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("sSMq-J/1a @L:*o7");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: sSMq-J/1a @L:*o7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToTimestamp((Object) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      parserConfig0.getDeserializer((Class<?>) class1, (Type) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      javaBeanDeserializer0.smartMatch((String) null);
      javaBeanDeserializer0.smartMatch((String) null);
      Class<FieldInfo> class2 = FieldInfo.class;
      ParserConfig parserConfig1 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaBeanDeserializer0, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.decapitalize("");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      Locale locale0 = TypeUtils.toLocale(")d[.F|T_+T7`");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.clone();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      NumberFormat.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : )d[.f|t_+T7`
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Integer> class0 = Integer.class;
      TypeUtils.computeGetters(class0, map0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertFalse(parserConfig0.fieldBased);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "|6FY=1h2*qAA+i0=8O$";
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("|6FY=1h2*qAA+i0=8O$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|6FY=1h2*qAA+i0=8O$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fillInStackTrace");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "java.awt.Rectangle", 32767L);
      Thread[] threadArray0 = new Thread[6];
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread0;
      threadArray0[3] = (Thread) mockThread0;
      threadArray0[4] = (Thread) mockThread0;
      threadArray0[5] = (Thread) mockThread0;
      MockThread.enumerate(threadArray0);
      mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.castToSqlTime((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3117);
      intArray0[1] = 38;
      intArray0[3] = 2969;
      intArray0[4] = (-1958);
      intArray0[5] = 39;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      SQLDataException sQLDataException0 = new SQLDataException("JEYwnMRJL2krYwZ}", "JEYwnMRJL2krYwZ}", illegalMonitorStateException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("JEYwnMRJL2krYwZ}", sQLDataException0);
      TypeUtils.toLocale("Ljava.awt.Rectangle");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Double> class0 = Double.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      
      Class class2 = (Class)TypeUtils.getGenericParamType(class0);
      assertNull(class2);
      
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NoClassDefFoundError> class3 = NoClassDefFoundError.class;
      TypeUtils.computeGetters(class3, map0);
      TypeUtils.createCollection(class1);
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      InstantiationError instantiationError0 = new InstantiationError();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      linkedHashMap0.remove((Object) class0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Type type0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader1, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      TypeUtils.decapitalize("");
      TypeUtils.castToLong("");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      Time time0 = new Time((-567L));
      linkedHashSet0.add(time0);
      linkedHashSet0.spliterator();
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.getClassFromMapping("au/eCSEc%GB");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TypeUtils.fnv1a_64("/e{)}-dpxZD$ZOg'N");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      treeMap0.descendingKeySet();
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("CRp=$oUE#?G", "CRp=$oUE#?G");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NULL_CAUSE_MESSAGE", false);
      Integer integer0 = new Integer(38);
      TypeUtils.castToByte((Object) null);
      TypeUtils.isTransient((Method) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<PageAttributes> class0 = PageAttributes.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("can not cast to short, value : ", class0, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. can not cast to short, value : 
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      TypeUtils.fnv1a_64("/e{)}-dpxZD$ZOg'N");
      TypeUtils.castToBytes("/e{)}-dpxZD$ZOg'N");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.getClassFromMapping("/e{)}-dpxZD$ZOg'N");
      Locale locale0 = Locale.CHINESE;
      TypeUtils.fnv1a_64_lower("oi?7jb& ?YD Fc");
      Class<Properties> class0 = Properties.class;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) bigInteger0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3117);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<StackTraceElement> class0 = StackTraceElement.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      JSONArray jSONArray0 = new JSONArray(4);
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      int int0 = 838;
      ConcurrentHashMap<NumberFormat, Character> concurrentHashMap1 = new ConcurrentHashMap<NumberFormat, Character>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-12), (-3117), 838, (-12), (-3117));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd(3089, (Object) classLoader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("aVqy:ETrwi`RyA<").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.castToSqlDate((Object) null);
      Class<Boolean> class2 = Boolean.TYPE;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      java.util.IdentityHashMap<BigDecimal, Locale> identityHashMap0 = new java.util.IdentityHashMap<BigDecimal, Locale>();
      Hashtable<BigDecimal, Locale> hashtable0 = new Hashtable<BigDecimal, Locale>(identityHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BreakIterator.getLineInstance();
      TypeUtils typeUtils0 = new TypeUtils();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~nd&m9A/+_J-W");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.getClassFromMapping("addSuppressed");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.fnv1a_64_lower("can not cast to char, value : ");
      Class<Properties> class0 = Properties.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.isTransient((Method) null);
      TypeUtils.isGenericParamType(class0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.lang.AutoCloseable");
      TypeUtils.loadClass("isclone");
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.fnv1a_64("ljava.lang.AutoCloseable");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(true);
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities1, imageCapabilities1, bufferCapabilities_FlipContents0);
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.getClassFromMapping("Ljava.lang.AutoCloseable");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      GenericArrayType genericArrayType0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      TypeUtils.decapitalize("write javaBean error, fastjson version 1.2.46");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.isPath(class0);
      Float float0 = new Float(0.0F);
      TypeUtils.castToDate(float0);
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("write javaBean error, fastjson version 1.2.46");
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      TypeUtils.isHibernateInitialized(stringIndexOutOfBoundsException0);
      TypeUtils.loadClass("write javaBean error, fastjson version 1.2.46");
      Class<Boolean> class2 = Boolean.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      Class<InternalError> class0 = InternalError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      LinkedHashSet<IllegalStateException> linkedHashSet0 = new LinkedHashSet<IllegalStateException>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Long long0 = new Long((-899L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -899
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "create";
      TypeUtils.loadClass("create");
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      Type[] typeArray0 = new Type[3];
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Short.toUnsignedInt((short) (-2944));
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sunHints_Key0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Fractional metrics enable key
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", instantiationError0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      javaBeanDeserializer0.smartMatch("");
      Class<FieldInfo> class1 = FieldInfo.class;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      TypeUtils.isProxy(class2);
      String string0 = "VFex-#L";
      javaBeanDeserializer0.smartMatch("VFex-#L");
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "CRp=$oUE#?G", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      hashMap0.put("T,{%bG0Y~+6", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, map0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      JSONArray jSONArray0 = new JSONArray(96);
      ConcurrentHashMap<NumberFormat, Character> concurrentHashMap0 = new ConcurrentHashMap<NumberFormat, Character>();
      JSONObject jSONObject0 = new JSONObject(false);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Class<MessageFormat> class1 = MessageFormat.class;
      parserConfig0.getDeserializer((Class<?>) class1, (Type) class0);
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Jdk8DateCodec> class3 = Jdk8DateCodec.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class3, (Type) class2, propertyNamingStrategy0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      JavaBeanDeserializer javaBeanDeserializer1 = new JavaBeanDeserializer(parserConfig0, class3);
      javaBeanDeserializer1.smartMatch("SUPPRESSED_SENTINEL");
      Class<NoSuchMethodException> class4 = NoSuchMethodException.class;
      TypeUtils.isProxy(class4);
      javaBeanDeserializer0.smartMatch((String) null);
      ParserConfig parserConfig1 = new ParserConfig(true);
      MockDate mockDate0 = new MockDate(2628, 2628, 0);
      Class<FieldInfo> class5 = FieldInfo.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockDate0, class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      TypeUtils.castToBigDecimal(linkedHashMap0);
      int[] intArray0 = new int[4];
      intArray0[0] = 39;
      intArray0[1] = 185;
      intArray0[2] = (-1631);
      intArray0[3] = (-2491);
      TypeUtils.unwrapOptional(class0);
      Short short0 = TypeUtils.castToShort("");
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "java.awt.Rectangle", 32767L);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("months", (ClassLoader) aSMClassLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      TypeUtils.isPath(class0);
      Class<MapDeserializer> class1 = MapDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.MapDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      TypeUtils.castToBigDecimal(linkedHashMap0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("O@)Eb");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("", mockIllegalArgumentException0);
      int[] intArray0 = new int[4];
      intArray0[0] = 39;
      intArray0[1] = 104;
      intArray0[2] = (-1631);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, mockIllegalStateException0);
      TypeUtils.castToTimestamp((Object) null);
      ConcurrentHashMap<NoSuchMethodException, Character> concurrentHashMap0 = new ConcurrentHashMap<NoSuchMethodException, Character>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<java.sql.Date> class0 = java.sql.Date.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy1);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava.awt.Font";
      stringArray0[1] = "iTH8)> ";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.castToString((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljava.awt.Font");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0);
      TypeUtils.isProxy(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      weakHashMap0.put("ha", "A;dp2QqiD1T&r(l&6");
      weakHashMap0.put("B#&i5SUw{nXX", "java.lang.OutOfMemoryError");
      weakHashMap0.putIfAbsent((String) null, "EJS@1Xw^MB+xTFYqV");
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      weakHashMap0.values();
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      BigDecimal bigDecimal0 = new BigDecimal(47);
      TypeUtils.decapitalize("");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "j");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("ghL$S-wB4=_.]+", sQLTransientException0);
      TypeUtils.toLocale("ghL$S-wB4=_.]+");
      sQLTransientException0.getSuppressed();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0);
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      TypeUtils.isHibernateInitialized(sQLTransientException0);
      TypeUtils.loadClass("]64n<q-3");
      TypeUtils.isGenericParamType(class1);
      Short short0 = TypeUtils.castToShort(bigDecimal0);
      assertEquals((short)47, (short)short0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      Locale locale0 = TypeUtils.toLocale(")d[.F|T_+T7`");
      assertEquals(")d[.f|t_+T7`", locale0.toString());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.remove((Object) null);
      linkedHashSet0.clear();
      boolean boolean0 = TypeUtils.isHibernateInitialized(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Class<Date> class0 = Date.class;
      BigDecimal bigDecimal0 = new BigDecimal(281);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.remove((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<BitSet> class1 = BitSet.class;
      TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      ArrayList<StringCharacterIterator> arrayList0 = new ArrayList<StringCharacterIterator>();
      ArrayList<StringCharacterIterator> arrayList1 = new ArrayList<StringCharacterIterator>();
      arrayList1.clone();
      Short short0 = new Short((short)18);
      TypeUtils.cast((Object) short0, (Type) class0, parserConfig0);
      TypeUtils.castToInt((Object) null);
      String string0 = "Ljava.awt.Rectangle";
      Class<LinkageError> class2 = LinkageError.class;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      HashMap<String, Field> hashMap0 = new LinkedHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3117);
      intArray0[1] = 38;
      intArray0[2] = 13;
      intArray0[3] = 2940;
      intArray0[4] = (-1958);
      intArray0[5] = 39;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      SQLDataException sQLDataException0 = new SQLDataException("L", "L", illegalMonitorStateException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("JEYwnMRJL2krYwZ}", sQLDataException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, mockIllegalStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.BatchUpdateException: org.evosuite.runtime.mock.java.lang.MockThrowable: JEYwnMRJL2krYwZ}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      java.sql.Date date0 = new java.sql.Date((-2242L));
      TypeUtils.castToDate(date0);
      Class<InstantiationException> class0 = InstantiationException.class;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      Class<ClassLoader> class2 = ClassLoader.class;
      Class<Boolean> class3 = Boolean.TYPE;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("syntax error, unexpect token ", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("syntax error, unexpect token ", class1, class2, class3, (Field) null, 21, 38, 4314);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      String string0 = null;
      // Undeclared exception!
      try { 
        mockSimpleDateFormat0.parse((String) null, (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3117);
      intArray0[1] = 38;
      intArray0[2] = 13;
      intArray0[3] = 2940;
      intArray0[4] = (-1958);
      intArray0[5] = 39;
      String string0 = "JEYwnMRJL2krYwZ}";
      String string1 = "L";
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("n=dFy_skB(!Zzsg2 ~");
      illegalMonitorStateException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLDataException sQLDataException0 = new SQLDataException("L", "L", illegalMonitorStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(mockPrintStream0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      TypeUtils.decapitalize("L");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Class<BitSet> class0 = BitSet.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      Class<?> class2 = TypeUtils.loadClass("L", classLoader1, true);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockSimpleDateFormat0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      ParserConfig parserConfig0 = new ParserConfig();
      ConcurrentHashMap<SqlDateDeserializer, DecimalFormat> concurrentHashMap0 = new ConcurrentHashMap<SqlDateDeserializer, DecimalFormat>();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) concurrentHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      TypeUtils.toLocale("Ljava.awt.Font");
      Locale locale0 = TypeUtils.toLocale("Ljava.awt.Font");
      NumberFormat.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : ljava.awt.font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<SecurityException> class1 = SecurityException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BreakIterator.getLineInstance();
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToBytes("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.getClassFromMapping("addSuppressed");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.toLocale("");
      TypeUtils.fnv1a_64_lower("");
      Class<Properties> class0 = Properties.class;
      Properties properties0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      TypeUtils.getGenericParamType(class2);
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("JEYwnMRJL2krYwZ}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class2, map0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "JEYwnMRJL2krYwZ}", (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : JEYwnMRJL2krYwZ}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      Time time0 = new Time((-567L));
      linkedHashSet0.add(time0);
      linkedHashSet0.add(time0);
      linkedHashSet0.spliterator();
      TypeUtils.isHibernateInitialized((Object) null);
      Class<PageAttributes> class0 = PageAttributes.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) linkedHashSet0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("iYAx&BfHQY");
      assertEquals(5583017854216180270L, long0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("VK>nbRgO_CT@iT{v", "VK>nbRgO_CT@iT{v");
      weakHashMap0.put("!d2$f#=", "");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      TypeUtils.getSerializeFeatures(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "oracle.sql.DATE", 0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {!d2$f#==, VK>nbRgO_CT@iT{v=VK>nbRgO_CT@iT{v}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Insets insets0 = new Insets(51, 20, 20, (-59432204));
      Class<Boolean> class0 = Boolean.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) insets0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.Insets[top=51,left=20,bottom=20,right=-59432204]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      TypeUtils.decapitalize("fastjson.parser.deny");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      Locale locale0 = Locale.US;
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.clone();
      Stack<Locale> stack0 = new Stack<Locale>();
      NumberFormat.getInstance(locale0);
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      treeMap0.descendingKeySet();
      InstantiationError instantiationError0 = new InstantiationError("CRp=$oUE#?G");
      treeMap0.put("CRp=$oUE#?G", "CRp=$oUE#?G");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/e{)}-dpxZD$ZOg'N", false);
      Integer integer0 = new Integer(38);
      TypeUtils.castToByte((Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      InstantiationException instantiationException0 = new InstantiationException("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", instantiationException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) "", (Type) class0, parserConfig1);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.ParserConfig@e3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Locale locale0 = Locale.PRC;
      BreakIterator.getCharacterInstance(locale0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      BreakIterator.getSentenceInstance(locale0);
      ParserConfig parserConfig0 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.loadClass("n2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "0:hth\"^rr";
      TypeUtils.decapitalize("0:hth\"^rr");
      Type type0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("#u5H8tE4G?:", sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("iYAx&BfH;Y", "iYAx&BfH;Y", typeNotPresentException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("iYAx&BfH;Y", sQLDataException0);
      Locale locale0 = TypeUtils.toLocale("getgetClass");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Double> class0 = Double.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      VerifyError verifyError0 = new VerifyError("#u5H8tE4G?:");
      TypeUtils.isHibernateInitialized(verifyError0);
      TimeZone timeZone0 = TimeZone.getTimeZone("iYAx&BfH;Y");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      TypeUtils.castToSqlDate(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLDataException: iYAx&BfH;Y
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Type type0 = null;
      Type type1 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.unwrapOptional(type1);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.getClassFromMapping("fastjson.parser.autoTypeAccept");
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      Class<Boolean> class1 = Boolean.TYPE;
      Field[] fieldArray0 = new Field[1];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "syntax error, unexpect token ", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.cast((Object) linkedHashMap0, (Type) class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }
}
