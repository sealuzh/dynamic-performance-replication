/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:09:38 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange((-408), 1856);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(1974, 1974);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[5];
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-834709), (-834709));
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][8];
      charClass0.appendTable(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 3648);
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(0, (-2445));
      CharClass charClass2 = charClass1.appendLiteral(0, 0);
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[2] = 66639;
      intArray0[7] = 0;
      intArray0[4] = 0;
      intArray0[5] = 66639;
      intArray0[6] = 549;
      intArray0[7] = 8169;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][0];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      CharClass charClass2 = charClass1.appendRange(32, 0);
      charClass2.cleanClass();
      assertArrayEquals(new int[] {0, 66639, 0, 0, 549, 8169, 66639, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(146, 192);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(387, 146);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray0, 387);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      String string0 = charClass3.toString();
      assertNotNull(string0);
      assertEquals("[0x0 0x0 0x0 0x0 0x92-0xb5 0x39c 0x3bc 0xb6-0xc0 0xe0 0x0]", string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass0.appendRange(615, 146);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertNotNull(charClass5);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(146, 192);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray0, 387);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1114111}, intArray0);
      
      int[] intArray1 = charClass1.toArray();
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1114111}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1114111}, intArray1);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-193);
      intArray0[1] = (-44574311);
      intArray0[2] = (-44552006);
      intArray0[3] = 2600;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-193), (-44574311), (-44552006), 2600}, intArray0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(178, 178);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(80, 80);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 178;
      intArray0[1] = 80;
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {178, 80}, intArray0);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {178, 80}, intArray0);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {178, 80}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, (-1));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange((-1), (-1));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][9];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      charClass1.appendNegatedTable(intArray0);
      charClass1.toArray();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[2] = 670;
      int int0 = 12880;
      intArray0[3] = 12880;
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      int int1 = (-136);
      charClass1.appendLiteral(int1, int0);
      charClass0.appendFoldedClass(intArray1[0]);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendRange((-2829), 120172);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 120172);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][3];
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[5];
      intArray1[0] = 119162;
      intArray1[1] = 119162;
      intArray1[2] = 119162;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(66639, 14);
      charClass0.negateClass();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.negateClass();
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.toArray();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(3953, 3953);
      charClass0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-3044));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      CharClass charClass2 = charClass1.appendLiteral(1, 1);
      charClass2.toString();
      charClass0.appendRange(1, 1);
      CharClass charClass3 = charClass1.appendNegatedTable(intArray0);
      CharClass charClass4 = charClass2.appendRange(1, (-1113));
      charClass4.toArray();
      CharClass charClass5 = charClass3.appendClassWithSign(intArray1, 1);
      charClass5.appendLiteral(249, (-1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[6];
      intArray1[0] = 4369;
      intArray1[1] = 65381;
      intArray1[2] = 1;
      intArray1[3] = 901;
      intArray1[4] = 4353;
      intArray1[5] = 2075;
      intArray0[0] = intArray1;
      charClass0.appendTableWithSign(intArray0, 120485);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      CharClass charClass1 = charClass0.appendLiteral(488, 23461);
      int[] intArray0 = charClass1.toArray();
      charClass0.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharGroup charGroup0 = null;
      // Undeclared exception!
      charClass0.appendFoldedRange(1134, 66640);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange((-1185), 66639);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[5];
      intArray1[0] = 1114112;
      intArray1[1] = 1114112;
      intArray1[2] = 65;
      intArray1[3] = 65;
      intArray1[4] = 65;
      intArray0[0] = intArray1;
      charClass0.appendNegatedTable(intArray0);
      charClass0.appendRange(65, 65);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
