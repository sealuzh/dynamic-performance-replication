/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:28:41 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.FindWithCapabilities;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Packages = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("CX87{_L@X@2H7(]G");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.setClassIndex("CX87{_L@X@2H7(]G");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " In ";
      stringArray0[1] = "";
      stringArray0[2] = "Input: ";
      stringArray0[3] = "\"7w//Wil,H'+Gd55G";
      stringArray0[4] = "";
      stringArray0[5] = ">21u+4G-w";
      stringArray0[6] = "";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "second set of options is null!";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getMisses();
      vector0.add("");
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("D[HFh");
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      capabilities0.getRevision();
      vector0.add("&ry#mW+!zi");
      capabilities0.enableDependency(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.find();
      assertEquals("D[HFh", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_Matches = null;
      capabilities0.enableDependency(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setFilename("mX");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals("mX", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.setClassIndex("\tFull name of the class analysed.\n\teg: weka.classifiers.rules.ZeroR\n\t(default weka.classifiers.rules.ZeroR)");
      findWithCapabilities0.setFilename("-W");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities capabilities1 = findWithCapabilities1.m_Capabilities;
      capabilities0.enableDependency(capabilities_Capability0);
      findWithCapabilities1.listOptions();
      findWithCapabilities0.listOptions();
      capabilities1.getClassCapabilities();
      findWithCapabilities1.setCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities1.getRevision();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities1.getOptions();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities1.setCapabilities(capabilities1);
      findWithCapabilities0.find();
      assertEquals("-W", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "K?k s5Pn.!]OvoN%";
      stringArray0[1] = "-superclass";
      stringArray0[2] = "|Q,L'V~ou5j7Ln_`";
      stringArray0[3] = "qAVWWzO";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s#:TK*A{*xC7_2Csz";
      stringArray0[1] = "0xbYmq|^ZWXP$Hs";
      stringArray0[2] = "kb1zSDYRO0uTE&G0nc/";
      stringArray0[3] = "\"position\" is string: ";
      stringArray0[4] = "~`uXP,I[E";
      stringArray0[5] = "-no-class";
      stringArray0[6] = "se.g";
      stringArray0[7] = "Cannot handle string ";
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-superclass";
      stringArray0[1] = "qAVWWzO";
      FindWithCapabilities.main(stringArray0);
  }
}
