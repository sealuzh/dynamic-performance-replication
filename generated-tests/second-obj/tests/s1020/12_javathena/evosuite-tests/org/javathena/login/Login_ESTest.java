/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:54:56 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Calendar;
import javolution.util.FastComparator;
import javolution.util.FastMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.IParse;
import org.javathena.core.data.Socket_data;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      login0.check_ip(inetAddress0);
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_deny("");
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login0.setAuth_max(31034);
      login0.getOut();
      // Undeclared exception!
      try { 
        login0.parse_console("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("SI.6#DP@7XYRSUVVVF", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      Login.setPASSWORDENC(604);
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(31058);
      MySQLConfig.setLogin_server_db("exit");
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("SCROLLS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      PrintWriter printWriter0 = Login.loginLogOut;
      login0.setOut((PrintWriter) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("cDKi@~!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.addAccountIdCount(50);
      ConfigurationManagement.setAccess_denynum(2);
      UserManagement.addAccountIdCount(2000000);
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      MySQLConfig.setLogin_server_pw("conf/subnet_athena.conf");
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.lesslessAuth_before_save_file();
      Login.mmo_auth_initTXT();
      // Undeclared exception!
      try { 
        login0.check_auth_sync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      ConfigurationManagement.setAccess_denynum(2148);
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      login0.getAuth_max();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[2] = (byte)47;
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)0, (byte)47}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = Login.getPASSWORDENC();
      assertEquals(2, int0);
      
      Login login0 = new Login();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      Login.showTab(byteArray0);
      Login.End login_End0 = login0.new End();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getTrafficClass();
      Socket_data socket_data0 = new Socket_data(mockSocket0, (IParse) null);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      login0.getServer_fd();
      InetAddress inetAddress0 = null;
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      login0.check_ip(inetAddress0);
      login_ConnectionListener0.run();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login.getDbManagemtType();
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login.getDbManagemtType();
      Login.setPASSWORDENC((-2064955568));
      Login login0 = new Login();
      login0.setAuth_max((-1720));
      login0.yesNoOnOffToBoolean("YES");
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.run();
      login_ConnectionListener0.run();
      Login login1 = new Login();
      login1.do_initTXT();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-103);
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [5, 54, 34, 1, 82, -83, -103]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.addAccountIdCount(50);
      ConfigurationManagement.setAccess_denynum(2);
      Login.mmo_auth_syncTXT();
      ConfigurationManagement.setAccess_denynum(2);
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      MySQLConfig.setLogin_server_pw("conf/subnet_athena.conf");
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      Login.getPASSWORDENC();
      login0.getLog_fp();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = new int[4];
      intArray0[0] = 30;
      intArray0[1] = 65;
      intArray0[2] = 31032;
      intArray0[3] = 100000000;
      ConfigurationManagement.setSubneti(intArray0);
      MySQLConfig.setLogin_server_id("conf/subnet_athena.conf");
      login0.getOut();
      Login.mmo_auth_syncTXT();
      int int0 = login0.getAuth_num();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login login0 = new Login();
      login0.getServer_fd();
      EvoSuiteFile evoSuiteFile0 = null;
      UserManagement.addAccountIdCount(50);
      FileSystemHandling.shouldAllThrowIOExceptions();
      login0.check_ip((InetAddress) null);
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Login login0 = new Login();
      Proxy proxy0 = Proxy.NO_PROXY;
      FromChar fromChar0 = new FromChar();
      Login.mmo_auth_syncXML();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("QY#4x|,$ CNT]", "QY#4x|,$ CNT]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // QY#4x|,$ CNT]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Login info remains.", 10006);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Login login0 = new Login();
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      login0.do_initTXT();
      Login.mmo_auth_syncXML();
      Login.End login_End0 = login0.new End();
      Login.getPASSWORDENC();
      login0.check_auth_sync();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FromAdmin fromAdmin0 = new FromAdmin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      login0.getServer_fd();
      UserManagement.addAccountIdCount(50);
      login0.do_initXML();
      login0.check_auth_sync();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.display_title();
      ConfigurationManagement.lesslessAuth_before_save_file();
      MockSocket mockSocket0 = new MockSocket();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "conf/subnet_athena.conf");
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      login0.parse_console("e p~WEKE5:W_%'2m");
      MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      ConfigurationManagement.setAccess_denynum(10);
      int int0 = 2119;
      ConfigurationManagement.setAccess_denynum(2119);
      UserManagement.addAccountIdCount(1000);
      FastMap<Integer, Auth_data> fastMap0 = FastMap.newInstance();
      fastMap0.keySet();
      FastMap<Integer, Auth_data> fastMap1 = new FastMap<Integer, Auth_data>(fastMap0);
      FastMap.newInstance();
      FastComparator<Object> fastComparator0 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      FastMap<Integer, Auth_data> fastMap2 = new FastMap<Integer, Auth_data>(50);
      UserManagement.setAuth_dats(fastMap2);
      MockInetAddress.getByName("conf/subnet_athena.conf");
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login login0 = new Login();
      login0.do_final();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromChar0);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.login_log("          _   _   _   _       _   _   _   _   _   _                          ");
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      FromChar fromChar0 = new FromChar();
      login0.getAuth_num();
      login0.check_ipmask((-1211), "0&,csnOrMid");
      byte[] byteArray0 = new byte[4];
      MockFile mockFile0 = new MockFile("0&,csnOrMid", "0&,csnOrMid");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[2] = (Object) "0&,csnOrMid";
      objectArray0[3] = (Object) byteArray0;
      objectArray0[5] = (Object) mockPrintWriter0;
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)107;
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("QY#4x|,$ CNT]", "QY#4x|,$ CNT]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // QY#4x|,$ CNT]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis((-2147483648L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Login login0 = new Login();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      login0.getLog_fp();
      int int0 = login0.getAuth_max();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)33;
      Login.showTab(byteArray0);
      boolean boolean0 = login0.yesNoOnOffToBoolean("ON");
      assertTrue(boolean0);
      
      int int1 = login0.check_ipmask(2100, "ON");
      assertTrue(int1 == int0);
      
      Login login1 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login1.new ConnectionListener();
      login_ConnectionListener0.run();
      assertEquals(0, login1.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Login info remains.", 10006);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Login login0 = new Login();
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      login0.yesNoOnOffToBoolean("OFF");
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.run();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "conf/subnet_athena.conf");
      Login.display_title();
      ConfigurationManagement.lesslessAuth_before_save_file();
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        mockSocket0.setTrafficClass(10006);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tc is not in range 0 -- 255
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.addAccountIdCount(31038);
      login0.check_ip((InetAddress) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.xml");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "conf/subnet_athena.conf");
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Login info remains.", 10006);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Login login0 = new Login();
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      login0.yesNoOnOffToBoolean("OFF");
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.run();
      login_ConnectionListener0.run();
      Login login1 = new Login();
      login1.do_initTXT();
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      login0.setServer_fd(intArray0);
      Login login2 = new Login();
      login0.check_auth_sync();
      Login login3 = new Login();
      login0.getOut();
      Login.End login_End0 = login3.new End();
      login0.yesNoOnOffToBoolean("NO");
      Login.ConnectionListener login_ConnectionListener1 = null;
      try {
        login_ConnectionListener1 = login3.new ConnectionListener();
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Failed to open TCP port
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoSuiteSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      Socket socket0 = null;
      Socket_data socket_data0 = new Socket_data((Socket) null);
      Login login1 = new Login();
      // Undeclared exception!
      try { 
        login1.parse_admin((-2082433139), socket_data0, login0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login.logUnknownPackets((Socket_data) null);
      Login login0 = new Login();
      FastMap<Integer, Auth_data> fastMap0 = FastMap.newInstance();
      FastMap<Integer, Auth_data> fastMap1 = new FastMap<Integer, Auth_data>(fastMap0);
      UserManagement.setAuth_dats(fastMap1);
      // Undeclared exception!
      try { 
        login0.check_auth_sync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = login0.getServer_fd();
      UserManagement.addAccountIdCount(50);
      login0.check_ip((InetAddress) null);
      login0.do_initXML();
      login0.setServer_fd(intArray0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(50);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      login0.check_auth_sync();
      // Undeclared exception!
      try { 
        login0.parse_console("quit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.addAccountIdCount((-523));
      login0.do_initXML();
      Login login1 = new Login();
      login1.check_auth_sync();
      Login.ConnectionListener login_ConnectionListener0 = login1.new ConnectionListener();
      login_ConnectionListener0.run();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.display_title();
      MockSocket mockSocket0 = new MockSocket();
      UserManagement.setAccountIdCount(51);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      socket_data0.setMd5key("^mX]iV");
      login0.parse_console("#-\n");
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.addAccountIdCount(31038);
      login0.check_ip((InetAddress) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.xml");
      FileSystemHandling.createFolder(evoSuiteFile0);
      login0.do_initXML();
      int[] intArray0 = new int[3];
      intArray0[2] = 10;
      intArray0[2] = 100000000;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "conf/subnet_athena.conf");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      Proxy proxy0 = Proxy.NO_PROXY;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "g{w'R");
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      login0.check_auth_sync();
      String string0 = "exit";
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
