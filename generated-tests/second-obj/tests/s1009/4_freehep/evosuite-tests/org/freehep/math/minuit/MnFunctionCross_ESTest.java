/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:08:34 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2043.80709), (-2043.80709), (-2043.80709), (-2043.80709), (-2043.80709)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[13];
      doubleArray0[5] = 9.84813004068159;
      doubleArray0[1] = (-2043.80709);
      doubleArray0[7] = 9.84813004068159;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnUserParameterState0.setLimits(0, (-2043.80709), (-1011.8925058704494));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2779.1994934701615), mnStrategy0, 9.84813004068159);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2043.80709), 4056);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3872.177633), (-3872.177633), (-3872.177633)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters1);
      mnStrategy0.setMediumStrategy();
      mnUserParameters0.toString();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 960.1956, mnStrategy0, 0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[13];
      doubleArray0[5] = 9.84813004068159;
      doubleArray0[1] = (-2043.80709);
      doubleArray0[3] = 9.84813004068159;
      doubleArray0[7] = 9.84813004068159;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnUserParameterState0.setLimits(0, (-2043.80709), (-1011.8925058704494));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameters0.setPrecision(0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2779.1994934701615), mnStrategy0, 9.84813004068159);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 9.84813004068159, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.08).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 1.2);
      mnStrategy0.setMediumStrategy();
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 793.08654;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 793.08654, 0);
      double double0 = (-0.8553768969987302);
      // Undeclared exception!
      try { 
        mnUserParameters0.removeLimits(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1126.3186657540073), (-1126.3186657540073), (-1126.3186657540073), 2945.5141448, (-1126.3186657540073)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, (-312.2298), mnStrategy0, 4388.5268705);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2658.74921725728), 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 1.2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.1667992381854417E7);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2944.670591090576, 12);
      MnUserParameters mnUserParameters2 = new MnUserParameters();
      MnUserParameters mnUserParameters3 = mnUserParameters2.clone();
      assertNotSame(mnUserParameters3, mnUserParameters1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1397.88, mnStrategy0, 1.0E-4);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1397.88, 0);
      intArray0[6] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3409.155846, 1);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 70);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3872.177633), (-3872.177633), (-3872.177633), (-1.0), (-3872.177633)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnUserParameterState0.setLimits(0, 10.000000000000002, (-2061.674392686784));
      MnStrategy mnStrategy0 = new MnStrategy((-984));
      mnStrategy0.setHessianStepTolerance(1.0E-35);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2881.83863792), mnStrategy0, 1.0E-35);
      mnUserParameters0.clone();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 9.0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), 2);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-346.0), (-984));
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3872.177633), (-3872.177633), (-3872.177633), 2945.5141448, (-3872.177633)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.1667992381854417E7), mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4388.5268705, 0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 2146705503);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2933.6762346394853, 2933.6762346394853, (-1248.4466720995913), (-1248.4466720995913), (-1612.55)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2933.6762346394853, mnStrategy0, 2933.6762346394853);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2933.6762346394853;
      doubleArray0[2] = 0.0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2933.6762346394853, 11);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2933.6762346394853, 11);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2933.6762346394853;
      doubleArray1[1] = (double) 11;
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.0, 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 793.08654;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters0.params();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      int[] intArray0 = new int[0];
      double double1 = (-1.0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.08, (-1.0), 793.08654, (-1.1667975526421791E7)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 793.08654);
      mnStrategy0.setMediumStrategy();
      double[] doubleArray1 = new double[7];
      doubleArray0[5] = (-1.1667975526421791E7);
      doubleArray1[2] = 793.08654;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-4095.0), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-602.9573561218261), 2945.5141448, 2945.5141448, 8.881784197001252E-16).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 2945.5141448, mnStrategy0, 1.2);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray0, (-0.5), 0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.2;
      doubleArray1[1] = 8.0;
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 10.000000000000002, (-2060));
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2043.80709), (-2043.80709), (-2043.80709), (-2043.80709), (-2043.80709)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[13];
      doubleArray0[1] = 9.84813004068159;
      doubleArray0[3] = 9.84813004068159;
      doubleArray0[7] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnUserParameterState0.setLimits(0, (-2043.80709), (-1011.8925058704494));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameters0.setPrecision(0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2779.1994934701615), mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 9.84813004068159, 4056);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, (-1.0), 793.08654, (-1.1667975526421791E7)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 793.08654);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (-1.1667975526421791E7);
      doubleArray1[2] = 793.08654;
      doubleArray1[3] = 793.08654;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 793.08654, 12);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.0, (-1.1667975526421791E7), 793.08654, 793.08654, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(mnCross0);
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0.0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnStrategy mnStrategy0 = new MnStrategy(0);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2933.6762346394853, 0.0, (-1248.4466720995913), (-1248.4466720995913), (-1612.55)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2933.6762346394853;
      doubleArray0[2] = 0.0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2933.6762346394853, 11);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {2933.6762346394853, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 14.200000000000003;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnStrategy mnStrategy0 = new MnStrategy(0);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertNotNull(mnStrategy0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2933.6762346394853, 0.0, (double)0, (double)0, (-1612.55)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnFunctionCross0);
      
      double[] doubleArray0 = new double[4];
      int int0 = (-1856);
      doubleArray0[0] = 2933.6762346394853;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 14.200000000000003, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 4.0;
      double[] doubleArray0 = new double[9];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      mnStrategy0.setHessianGradientNCycles(0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      double double1 = (-1.1667992381854417E7);
      int[] intArray0 = new int[0];
      double double2 = 3.398765771628007;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3.398765771628007, (double)0, 2943.7149141388477).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2943.7149141388477, mnStrategy0, 0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnFunctionCross0);
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy(0);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2945.5141448, mnStrategy0, 1.2);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertNotNull(mnFunctionCross0);
      
      MnUserParameters mnUserParameters2 = mnUserParameters0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters2.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters0, mnUserParameters2);
      assertNotSame(mnUserParameters2, mnUserParameters0);
      assertNotSame(mnUserParameters2, mnUserParameters1);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertNotNull(mnUserParameters2);
      
      double[] doubleArray1 = mnUserParameterState0.errors();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters0, mnUserParameters2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 8.881784197001252E-16, mnStrategy0, (-1.1667992381854417E7));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters2));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross1);
      
      MnCross mnCross0 = mnFunctionCross1.cross(intArray0, doubleArray1, doubleArray0, 3129.39, 13);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters0, mnUserParameters2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      mnStrategy0.setHessianGradientNCycles(0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      int[] intArray0 = new int[0];
      String string0 = mnUserParameters0.toString();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(string0);
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n", string0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3.398765771628007, (double)0, 2945.5141448, (-1.1667992381854417E7), (-1.1667992381854417E7)).when(fCNBase1).valueOf(any(double[].class));
      double double0 = 1.2;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 1.2, mnStrategy0, 0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3264.428711591992, 0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(mnCross0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnStrategy mnStrategy0 = new MnStrategy(0);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertNotNull(mnStrategy0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      
      mnStrategy0.setHessianG2Tolerance(10000.0);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(10000.0, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      int int0 = 0;
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10000.0, (-1.1667992381854417E7), (-1248.4466720995913), (-1248.4466720995913), 10000.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, (-0.42453221630582627));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(10000.0, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      
      int int1 = (-1857);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 0.0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10000.0, 1);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(10000.0, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnCross0);
      
      String string0 = "";
      double double0 = (-4308.446508223151);
      // Undeclared exception!
      try { 
        mnUserParameters1.setLimits("", 0.2, (-4308.446508223151));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2043.80709), (-2043.80709), (-2043.80709), (-2043.80709), (-2043.80709)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = 9.84813004068159;
      doubleArray0[1] = (-2043.80709);
      doubleArray0[3] = 9.84813004068159;
      doubleArray0[3] = (-2043.80709);
      doubleArray0[7] = 9.84813004068159;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, (-2043.80709), 0.0, (-2043.80709), 0.0, 9.84813004068159, 0.0, 9.84813004068159}, doubleArray0, 0.01);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, (-2043.80709), 0.0, (-2043.80709), 0.0, 9.84813004068159, 0.0, 9.84813004068159}, doubleArray0, 0.01);
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setLimits(0, (-0.11136394653429732), (-1011.8925058704494));
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, (-2043.80709), 0.0, (-2043.80709), 0.0, 9.84813004068159, 0.0, 9.84813004068159}, doubleArray0, 0.01);
      
      String string0 = mnUserParameterState0.toString();
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, (-2043.80709), 0.0, (-2043.80709), 0.0, 9.84813004068159, 0.0, 9.84813004068159}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||   free   ||   -2043.81 || no\n     2 ||        p2 ||   free   ||    0.00000 || no\n     3 ||        p3 ||   free   ||   -2043.81 || no\n     4 ||        p4 ||   free   ||    0.00000 || no\n     5 ||        p5 ||   free   ||    9.84813 ||    9.84813\n     6 ||        p6 ||   free   ||    0.00000 || no\n     7 ||        p7 ||   free   ||    9.84813 ||    9.84813\n\n\n\n\n", string0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      mnUserParameters0.setPrecision(0.0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, (-2043.80709), 0.0, (-2043.80709), 0.0, 9.84813004068159, 0.0, 9.84813004068159}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2043.80709), mnStrategy0, 9.84813004068159);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertArrayEquals(new double[] {0.0, (-2043.80709), 0.0, (-2043.80709), 0.0, 9.84813004068159, 0.0, 9.84813004068159}, doubleArray0, 0.01);
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 9.84813004068159;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 9.84813004068159, 4056);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 9.84813004068159, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2043.80709), 0.0, (-2043.80709), 0.0, 9.84813004068159, 0.0, 9.84813004068159}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-0.11136394653429732), 4056);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertArrayEquals(new double[] {0.0, 9.84813004068159, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2043.80709), 0.0, (-2043.80709), 0.0, 9.84813004068159, 0.0, 9.84813004068159}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(mnCross1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2045.9355997648738), (-2045.9355997648738), (-2045.9355997648738), (-2045.9355997648738), (-2045.9355997648738)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[13];
      doubleArray0[5] = 9.84813004068159;
      doubleArray0[1] = (-2045.9355997648738);
      doubleArray0[3] = 9.84813004068159;
      doubleArray0[7] = 9.84813004068159;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(13, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(13, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(13, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setLimits(0, (-2045.9355997648738), (-1011.8925058704494));
      assertEquals(13, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(13, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnStrategy mnStrategy0 = new MnStrategy(0);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      mnUserParameters0.setPrecision(0.0);
      assertEquals(13, mnUserParameters0.variableParameters());
      
      mnUserParameters0.setUpperLimit(0, 3618.4471119491986);
      assertEquals(13, mnUserParameters0.variableParameters());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2779.1994934701615), mnStrategy0, 9.84813004068159);
      assertEquals(13, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(13, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2045.9355997648738), 4056);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2933.6762346394853, 2933.6762346394853, 2933.6762346394853, 2933.6762346394853, -0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnStrategy mnStrategy0 = new MnStrategy(0);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertNotNull(mnStrategy0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      
      int[] intArray0 = new int[0];
      double double0 = (-1248.4466720995913);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, -0.0, mnStrategy0, 10.500000000000002);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      
      double[] doubleArray0 = new double[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, -0.0, 11);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 11, (-1));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(mnCross1);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, -0.0, mnStrategy0, (-3044.546565));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross1);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = 11;
      intArray1[3] = (-1);
      intArray1[4] = 11;
      intArray1[5] = (-1);
      intArray1[6] = 0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 11, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 2.2;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2042.2202979683484), (-2042.2202979683484), 2.2, (-2042.2202979683484), 2.2).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 9.84813004068159;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2042.2202979683484);
      doubleArray0[3] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 8.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {9.84813004068159, 0.0, (-2042.2202979683484), 0.0, 0.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {9.84813004068159, 0.0, (-2042.2202979683484), 0.0, 0.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      mnUserParameterState0.setLimits(0, 0.0, (-1011.8925058704494));
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {9.84813004068159, 0.0, (-2042.2202979683484), 0.0, 0.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      
      String string0 = mnUserParameterState0.toString();
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {9.84813004068159, 0.0, (-2042.2202979683484), 0.0, 0.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||  limited ||    9.84813 ||    9.84813\n     1 ||        p1 ||   free   ||    0.00000 || no\n     2 ||        p2 ||   free   ||   -2042.22 || no\n     3 ||        p3 ||   free   ||    0.00000 || no\n     4 ||        p4 ||   free   ||    0.00000 || no\n     5 ||        p5 ||   free   ||    0.00000 || no\n     6 ||        p6 ||   free   ||    0.00000 || no\n     7 ||        p7 ||   free   ||    8.00000 ||    8.00000\n\n\n\n\n", string0);
      
      MnStrategy mnStrategy0 = new MnStrategy(0);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      mnStrategy0.setHessianStepTolerance(0.0);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.0, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.gradientNCycles());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2777.34294145494), mnStrategy0, 0.0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.0, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertArrayEquals(new double[] {9.84813004068159, 0.0, (-2042.2202979683484), 0.0, 0.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[6];
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertEquals(8, mnUserParameters1.variableParameters());
      assertEquals(8, mnUserParameters0.variableParameters());
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertArrayEquals(new double[] {9.84813004068159, 0.0, (-2042.2202979683484), 0.0, 0.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      assertNotNull(mnUserParameters1);
      
      mnUserParameters0.setLowerLimit(0, (-1673.05790700248));
      assertEquals(8, mnUserParameters0.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertArrayEquals(new double[] {9.84813004068159, 0.0, (-2042.2202979683484), 0.0, 0.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2933.6762346394853, 2933.6762346394853, 2933.6762346394853, 2933.6762346394853, -0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnStrategy mnStrategy0 = new MnStrategy(0);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      
      int[] intArray0 = new int[0];
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, -0.0, mnStrategy0, 10.500000000000002);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      
      double[] doubleArray0 = new double[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 11, (-1));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(mnCross0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, -0.0, mnStrategy0, (-3044.546565));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross1);
      
      mnStrategy0.setGradientTolerance((-1248.4466720995913));
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals((-1248.4466720995913), mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      
      MnCross mnCross1 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 11, (-343));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals((-1248.4466720995913), mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(mnCross1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 2943.7149141388477;
      double double1 = 4.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      mnStrategy0.setHessianGradientNCycles(0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      double double2 = (-1.1667992381854417E7);
      int[] intArray0 = new int[0];
      String string0 = mnUserParameters0.toString();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(string0);
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n", string0);
      
      double double3 = 3.398765771628007;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3.398765771628007, (double)0, 2943.7149141388477, (-1.1667992381854417E7), (-1.1667992381854417E7)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 1.2, mnStrategy0, 0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(mnCross0);
      
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      int int1 = (-2125879184);
      mnStrategy0.setHessianGradientNCycles((-2125879184));
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals((-2125879184), mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        mnUserParameters0.setLimits(0, (double) 0, 1.2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2042.2202979683484), (-2042.2202979683484), 2.2, (-2042.2202979683484), 2.2).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[12];
      doubleArray0[5] = 9.84813004068159;
      doubleArray0[7] = 0.0;
      doubleArray0[1] = (-2042.2202979683484);
      doubleArray0[3] = (-4287.409156193);
      doubleArray0[6] = (-2042.2202979683484);
      doubleArray0[7] = 8.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(12, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      mnUserParameters0.setValue(0, (-2042.2202979683484));
      assertEquals(12, mnUserParameters0.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(12, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(12, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setLimits(0, 9.84813004068159, (-1011.8925058704494));
      assertEquals(12, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(12, mnUserParameterState0.variableParameters());
      
      String string0 = mnUserParameterState0.toString();
      assertEquals(12, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(12, mnUserParameterState0.variableParameters());
      assertNotNull(string0);
      assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||   -2042.22 || no\n     1 ||        p1 ||   free   ||   -2042.22 || no\n     2 ||        p2 ||   free   ||    0.00000 || no\n     3 ||        p3 ||   free   ||   -4287.41 || no\n     4 ||        p4 ||   free   ||    0.00000 || no\n     5 ||        p5 ||   free   ||    9.84813 ||    9.84813\n     6 ||        p6 ||   free   ||   -2042.22 || no\n     7 ||        p7 ||   free   ||    8.00000 ||    8.00000\n     8 ||        p8 ||   free   ||    0.00000 || no\n     9 ||        p9 ||   free   ||    0.00000 || no\n    10 ||       p10 ||   free   ||    0.00000 || no\n    11 ||       p11 ||   free   ||    0.00000 || no\n\n\n\n\n", string0);
      
      mnUserParameters0.setLimits(0, 1.4242671252433927, 1134.57894842);
      assertEquals(12, mnUserParameters0.variableParameters());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameters0.setPrecision(0.0);
      assertEquals(12, mnUserParameters0.variableParameters());
      
      mnStrategy0.setHessianStepTolerance(2.2);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2.2, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2779.8), mnStrategy0, 9.84813004068159);
      assertEquals(12, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(12, mnUserParameterState0.variableParameters());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2.2, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[6];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 2875);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, 2933.6762346394853).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnStrategy mnStrategy0 = new MnStrategy(0);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2933.6762346394853, 0.0, (-1248.4466720995913), (-1248.4466720995913), (-1612.55)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotNull(mnFunctionCross0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1248.4466720995913);
      doubleArray0[1] = (double) (-1856);
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (-1248.4466720995913);
      doubleArray0[4] = 2933.6762346394853;
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.1, mnStrategy0, 2.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross1);
      
      MnCross mnCross0 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 2933.6762346394853, 0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-1248.4466720995913), (-1856.0), 11.0, (-1248.4466720995913), 2933.6762346394853, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnCross0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1612.55);
      doubleArray2[1] = (-1156.8864);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 2933.6762346394853;
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, 0.51, 11);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(mnFunctionCross0, mnFunctionCross1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-1612.55), (-1156.8864), 1.0, 2933.6762346394853}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(mnCross1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      
      int[] intArray0 = new int[0];
      MnUserParameters mnUserParameters2 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(8, mnUserParameters2.variableParameters());
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserParameters2);
      
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters2);
      assertEquals(8, mnUserParameters2.variableParameters());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(8, mnUserParameterState1.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserParameterState1);
      
      double[] doubleArray1 = mnUserParameterState1.params();
      assertEquals(8, mnUserParameters2.variableParameters());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(8, mnUserParameterState1.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnUserParameters2, mnUserParameters1);
      assertNotSame(mnUserParameters2, mnUserParameters0);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      mnUserParameterState1.setLimits(0, (-2779.8), 4.0);
      assertEquals(8, mnUserParameters2.variableParameters());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(8, mnUserParameterState1.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnUserParameters2, mnUserParameters1);
      assertNotSame(mnUserParameters2, mnUserParameters0);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = mnUserParameterState0.toString();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters0, mnUserParameters2);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnUserParameters1, mnUserParameters2);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters2));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters2));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertNotNull(string0);
      assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\n\n", string0);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      MnUserParameters mnUserParameters3 = new MnUserParameters(doubleArray1, doubleArray0);
      assertEquals(8, mnUserParameters2.variableParameters());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(8, mnUserParameterState1.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(8, mnUserParameters3.variableParameters());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters3.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters3.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters3.equals((Object)mnUserParameters2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(mnUserParameters3);
      
      mnUserParameters3.setPrecision((-1183.209664713862));
      assertEquals(8, mnUserParameters2.variableParameters());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(8, mnUserParameterState1.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(8, mnUserParameters3.variableParameters());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnUserParameters2, mnUserParameters1);
      assertNotSame(mnUserParameters2, mnUserParameters3);
      assertNotSame(mnUserParameters2, mnUserParameters0);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnUserParameters3, mnUserParameters0);
      assertNotSame(mnUserParameters3, mnUserParameters1);
      assertNotSame(mnUserParameters3, mnUserParameters2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters3));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters3.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters3.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters3.equals((Object)mnUserParameters2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, (-2879.676698875), mnStrategy1, 793.08654);
      assertEquals(8, mnUserParameters2.variableParameters());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(8, mnUserParameterState1.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters3));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-2522.3823), 4056);
      assertEquals(8, mnUserParameters2.variableParameters());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(8, mnUserParameterState1.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnUserParameters2, mnUserParameters1);
      assertNotSame(mnUserParameters2, mnUserParameters3);
      assertNotSame(mnUserParameters2, mnUserParameters0);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnStrategy1, mnStrategy0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters3));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(mnCross0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 4056;
      intArray1[2] = 4056;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray1, doubleArray0, 0.0, 4056);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4056, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
