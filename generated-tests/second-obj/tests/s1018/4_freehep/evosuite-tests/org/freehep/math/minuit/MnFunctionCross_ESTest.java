/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:34:16 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-352.499), 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.clone();
      MnStrategy mnStrategy2 = new MnStrategy();
      MnStrategy mnStrategy3 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-352.499), mnStrategy2, 0.0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2125570549, (-357));
      mnStrategy1.setHessianG2Tolerance((-1397.4987039081));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameters0.variableParameters());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState2 = mnUserParameterState0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, (double)2125570549, 0.2, (-989.4669), (-989.4669)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setGradientNCycles(1969);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState2, (-989.4669), mnStrategy0, (-2.0));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 100, 236);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-52.1151);
      doubleArray1[1] = (-1358.939411223);
      doubleArray1[2] = (-278823.4299600957);
      doubleArray1[3] = (-1358.939411223);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(597.3123281872424, (-1.0), (-100.0), 140000.0, 140000.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.toString();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-36.3406073558394);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState2 = mnUserParameterState1.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState2, 0.0, mnStrategy0, 4.0E-7);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 4.0E-7;
      double double1 = (-352.499);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-989.4669), (-989.4669), (-352.499), (-989.4669), (-0.3)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.clone();
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 4.0E-7, mnStrategy0, (-989.4669));
      int[] intArray0 = new int[0];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0E-7, 1848);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      mnStrategy0.setHessianNCycles(0);
      mnStrategy0.setHessianNCycles(6);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.1, (double)6, (double)(-3195), 0.1, 8.2).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 6);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), (-2147401568));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1400.0), (-3195));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, (-5003.3), 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      int[] intArray0 = new int[0];
      mnStrategy1.setHessianG2Tolerance(10.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-352.499);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3936.629148549, mnStrategy0, (-282.85490396200515));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, 2125570549);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-282.85490396200515), 2);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2125570549, 4780.729400316916, (-0.5149327282166181), (-3070.0971), (-352.499)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance((-0.5149327282166181));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2.0, mnStrategy0, 2125570549);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2253.484170189006, (-1819));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2642.256929579021, 2125570549);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (double) 2125570549;
      doubleArray1[2] = 1.0E-4;
      doubleArray1[3] = (-671.0);
      doubleArray1[4] = (double) 2125570549;
      doubleArray1[5] = (-0.5149327282166181);
      double[] doubleArray2 = new double[0];
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, (-1819), 2147034452);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-3070.0971);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[1];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2125570549, 4780.729400316916, (-0.13249103315258215), (-3070.0971), (-352.499)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance((-0.13249103315258215));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2.0, mnStrategy0, -0.0);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-6, 2125570549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      int[] intArray0 = new int[0];
      mnStrategy0.setLowStrategy();
      int int0 = 45;
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)45, 4780.729400316916, 10.0, (-3052.1585104846286), (-352.499)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance(4.0E-7);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-352.499), mnStrategy0, 30525.983505173812);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2.0), 45);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setValue("e9}N[CBLt#c!R!_?aY", 0.1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1275.682787), (-352.499), (-352.499), (-1275.682787)).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      int[] intArray0 = new int[0];
      int int0 = 2125570549;
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.clone();
      MnStrategy mnStrategy2 = new MnStrategy();
      MnStrategy mnStrategy3 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-352.499), mnStrategy2, 0.0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 9924.669, 1848);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2125570549, (-357));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2125570580, 4780.729400316916, (-0.5149327282166181), (-3070.0971), (-352.499)).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance((-0.5149327282166181));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-352.499), mnStrategy0, -0.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4780.729400316916, 2);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-485.472), 15);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientTolerance(350.3);
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2125570549, 4780.729400316916, 10.0, (-3070.0971), (-352.499)).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.5, mnStrategy0, -0.0);
      double double0 = 2253.484170189006;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3.9578675999999997E-4), 2125570549);
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix("!f0<![");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-991.2476256312499), (-991.2476256312499), (-991.2476256312499), 1915.4482, 7.856149624864233).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState2 = mnUserParameterState0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState2, 4.0E-7, mnStrategy0, (-991.2476256312499));
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0E-7, 1848);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1076.15, (-3167));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0E-7, (-3167));
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-989.4669), (-989.4669), (-352.499), (-989.4669), (-0.3)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0E-7, mnStrategy0, (-989.4669));
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0E-7, 1805);
      mnStrategy0.setHessianG2Tolerance((-352.499));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameters0.variableParameters());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2125570544, 4780.729400316916, 10.0, (-3070.0971), (-352.499)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance(4.0E-7);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 1.0, mnStrategy0, -0.0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2253.484170189006, (-1819));
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2125570544;
      intArray1[1] = 2125570544;
      intArray1[2] = 12;
      intArray1[3] = 2125570544;
      intArray1[4] = (-1819);
      intArray1[5] = 2125570544;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 3545.0, (-2125879184));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2125570544, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnStrategy0);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2125570549, 4780.729400316916, 10.0, (-3070.0971), (-352.499)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance(4.0E-7);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 1.0, mnStrategy0, -0.0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2253.484170189006, (-1819));
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-992.5576156342208), (-992.5576156342208), (-992.5576156342208), 1915.4482, 7.856149624864233).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 4.0E-7, mnStrategy0, (-992.5576156342208));
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0E-7, 1866);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1076.15, (-3167));
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0E-7, (-3167));
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnCross2, mnCross0);
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertNotNull(mnCross2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      MnCross mnCross3 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0E-7, 14);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnCross3, mnCross1);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(mnCross3, mnCross2);
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertNotNull(mnCross3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      MnCross mnCross4 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 401.0, (-2146690853));
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnCross4, mnCross3);
      assertNotSame(mnCross4, mnCross1);
      assertNotSame(mnCross4, mnCross0);
      assertNotSame(mnCross4, mnCross2);
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnCross4.equals((Object)mnCross3));
      assertFalse(mnCross4.equals((Object)mnCross1));
      assertFalse(mnCross4.equals((Object)mnCross0));
      assertFalse(mnCross4.equals((Object)mnCross2));
      assertNotNull(mnCross4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertTrue(mnStrategy1.isMedium());
      assertEquals(1, mnStrategy1.strategy());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2125570549, 4780.729400316916, (-0.5149327282166181), (-3070.0971)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance((-0.5149327282166181));
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2.0, mnStrategy0, 2795.921669326905);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2253.484170189006, (-1819));
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4780.289560284164, mnStrategy0, (-0.5149327282166181));
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.0, 630);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnFunctionCross0, mnFunctionCross1);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.0, 2);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnFunctionCross0, mnFunctionCross1);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnCross2, mnCross0);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross1));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertNotNull(mnCross2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(1, mnStrategy1.strategy());
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      double[] doubleArray0 = new double[1];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnStrategy0.setHessianG2Tolerance((-0.5149327282166181));
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2.0, mnStrategy0, -0.0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase2, mnUserParameterState0, (-3070.0971), mnStrategy0, (-0.5));
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, (-0.5149327282166181), 176);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      MnCross mnCross1 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, (-0.5149327282166181), 2125570549);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals((-0.5149327282166181), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 4780.729400316916, 10.0, (-3052.1585104846286), (-352.499)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance(4.0E-7);
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, (double[]) null);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-352.499), mnStrategy0, 3.0);
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4780.729400316916, 0);
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0, (-1631));
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-352.499), (-363));
      assertEquals(4.0E-7, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnCross2, mnCross0);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertNotNull(mnCross2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLimits("", (-0.1), (-661.8238851933864));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = mnUserParameterState0.errors();
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      mnUserParameterState0.setPrecision((-1400.0));
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserParameterState0.setLimits(0, (-1400.0), 0.0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      mnStrategy0.setHessianNCycles(31);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(31, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertTrue(mnStrategy1.isMedium());
      assertFalse(mnStrategy1.isLow());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      mnStrategy1.setHessianGradientNCycles(0);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertTrue(mnStrategy1.isMedium());
      assertFalse(mnStrategy1.isLow());
      assertEquals(0, mnStrategy1.hessianGradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertNotSame(mnStrategy1, mnStrategy0);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-3142.495724), (double)1415, 0.1, (-3142.495724)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 31, mnStrategy1, 0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertTrue(mnStrategy1.isMedium());
      assertFalse(mnStrategy1.isLow());
      assertEquals(0, mnStrategy1.hessianGradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-3142.495724);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray3, (-1400.0), 1415);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3142.495724);
      doubleArray0[1] = 3754.3556310874;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, (-1400.0));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      double[] doubleArray1 = mnUserParameterState0.params();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray1, 0.01);
      
      mnUserParameterState0.setLimits(0, (-1400.0), (-3142.495724));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      mnStrategy0.setMediumStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      mnStrategy0.setHighStrategy();
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3754.3556310874, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3723.7415705573667, 3723.7415705573667, 3723.7415705573667, 0.1, (-3142.495724)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3142.495724);
      doubleArray0[1] = 3754.3556310874;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, (-1400.0));
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      double[] doubleArray1 = mnUserParameterState0.params();
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray1, 0.01);
      
      mnUserParameterState0.setLimits(0, (-1400.0), (-3142.495724));
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      double double0 = (-2674.69397417194);
      mnUserParameterState0.add("", 340.6, (-3079.4702), (-2674.69397417194), 6.0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      mnUserParameterState0.setLowerLimit(0, (-2805.41));
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      mnStrategy0.setMediumStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      
      mnStrategy0.setHighStrategy();
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 140000.23625615286, 0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.1, 0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = 0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray1, (-3079.4702), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3142.495724);
      doubleArray0[1] = 3754.3556310874;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      mnUserParameterState0.setPrecision((-1400.0));
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      mnUserParameterState0.setLimits(0, (-1400.0), (-3142.495724));
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnStrategy0.setHessianGradientNCycles(1415);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1415, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 31, mnStrategy0, 0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1415, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {(-3142.495724), 3754.3556310874}, doubleArray0, 0.01);
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[13];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3192);
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1028.918798797805, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3142.495724);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-3142.495724), 0.0}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, (-1400.0));
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {(-3142.495724), 0.0}, doubleArray0, 0.01);
      
      mnStrategy0.setHessianG2Tolerance((-3142.495724));
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals((-3142.495724), mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      
      double[] doubleArray1 = mnUserParameterState0.params();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3142.495724), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3142.495724), 0.0}, doubleArray1, 0.01);
      
      mnUserParameterState0.setLimits(0, (-1400.0), (-3142.495724));
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3142.495724), 0.0}, doubleArray0, 0.01);
      
      mnStrategy0.setMediumStrategy();
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      
      mnStrategy0.setHighStrategy();
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState2 = mnUserParameterState0.clone();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState2.nfcn());
      assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
      assertFalse(mnUserParameterState2.hasGlobalCC());
      assertFalse(mnUserParameterState2.hasCovariance());
      assertTrue(mnUserParameterState2.isValid());
      assertEquals(1, mnUserParameterState2.variableParameters());
      assertEquals(0.0, mnUserParameterState2.edm(), 0.01);
      assertNotSame(mnUserParameterState0, mnUserParameterState2);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState2, mnUserParameterState0);
      assertNotSame(mnUserParameterState2, mnUserParameterState1);
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
      assertNotNull(mnUserParameterState2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-989.4669), (double)2125570549, 0.2, (-989.4669), (-989.4669)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setGradientNCycles(1969);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1969, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState2, (-989.4669), mnStrategy0, 2.200000000000001);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState2.nfcn());
      assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
      assertFalse(mnUserParameterState2.hasGlobalCC());
      assertFalse(mnUserParameterState2.hasCovariance());
      assertTrue(mnUserParameterState2.isValid());
      assertEquals(1, mnUserParameterState2.variableParameters());
      assertEquals(0.0, mnUserParameterState2.edm(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1969, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState2));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 6, 38);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState2.nfcn());
      assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
      assertFalse(mnUserParameterState2.hasGlobalCC());
      assertFalse(mnUserParameterState2.hasCovariance());
      assertTrue(mnUserParameterState2.isValid());
      assertEquals(1, mnUserParameterState2.variableParameters());
      assertEquals(0.0, mnUserParameterState2.edm(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1969, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotSame(mnUserParameterState0, mnUserParameterState2);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState2, mnUserParameterState0);
      assertNotSame(mnUserParameterState2, mnUserParameterState1);
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState2));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-52.1151);
      doubleArray1[1] = (-1358.939411223);
      doubleArray1[2] = (-278823.4299600957);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-52.1151), 6);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState2.nfcn());
      assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
      assertFalse(mnUserParameterState2.hasGlobalCC());
      assertFalse(mnUserParameterState2.hasCovariance());
      assertTrue(mnUserParameterState2.isValid());
      assertEquals(1, mnUserParameterState2.variableParameters());
      assertEquals(0.0, mnUserParameterState2.edm(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1969, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnUserParameterState0, mnUserParameterState2);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState2, mnUserParameterState0);
      assertNotSame(mnUserParameterState2, mnUserParameterState1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState2));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {(-52.1151), (-1358.939411223), (-278823.4299600957), 0.0}, doubleArray1, 0.01);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 1.0E-4, 15);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState2.nfcn());
      assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
      assertFalse(mnUserParameterState2.hasGlobalCC());
      assertFalse(mnUserParameterState2.hasCovariance());
      assertTrue(mnUserParameterState2.isValid());
      assertEquals(1, mnUserParameterState2.variableParameters());
      assertEquals(0.0, mnUserParameterState2.edm(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1969, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnUserParameterState0, mnUserParameterState2);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState2, mnUserParameterState0);
      assertNotSame(mnUserParameterState2, mnUserParameterState1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState2));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(mnCross2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {(-52.1151), (-1358.939411223), (-278823.4299600957), 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      mnUserParameterState0.setLimits(0, (-1400.0), 0.1);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      mnStrategy0.setHessianNCycles(6);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      
      MnStrategy mnStrategy1 = new MnStrategy(0);
      assertEquals(0, mnStrategy1.strategy());
      assertTrue(mnStrategy1.isLow());
      assertEquals(0.5, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.1, mnStrategy1.gradientTolerance(), 0.01);
      assertFalse(mnStrategy1.isMedium());
      assertEquals(1, mnStrategy1.hessianGradientNCycles());
      assertEquals(3, mnStrategy1.hessianNCycles());
      assertEquals(2, mnStrategy1.gradientNCycles());
      assertEquals(0.1, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      mnStrategy1.setHessianGradientNCycles(0);
      assertEquals(0, mnStrategy1.strategy());
      assertTrue(mnStrategy1.isLow());
      assertEquals(0.5, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.1, mnStrategy1.gradientTolerance(), 0.01);
      assertFalse(mnStrategy1.isMedium());
      assertEquals(0, mnStrategy1.hessianGradientNCycles());
      assertEquals(3, mnStrategy1.hessianNCycles());
      assertEquals(2, mnStrategy1.gradientNCycles());
      assertEquals(0.1, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertNotSame(mnStrategy1, mnStrategy0);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.1, (double)6, (double)(-3195), 0.1, (-22.338049422163728)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 6);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), (-2147401568));
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(intArray0, intArray1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1400.0), (-3195));
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), 0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(intArray0, intArray1);
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(mnCross2);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross3 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1923.06, 3);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertNotSame(mnCross3, mnCross2);
      assertNotSame(mnCross3, mnCross1);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(intArray0, intArray1);
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(mnCross3);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross4 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1923.06, 0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertNotSame(mnCross4, mnCross0);
      assertNotSame(mnCross4, mnCross1);
      assertNotSame(mnCross4, mnCross2);
      assertNotSame(mnCross4, mnCross3);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(intArray0, intArray1);
      assertFalse(mnCross4.equals((Object)mnCross0));
      assertFalse(mnCross4.equals((Object)mnCross1));
      assertFalse(mnCross4.equals((Object)mnCross2));
      assertFalse(mnCross4.equals((Object)mnCross3));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(mnCross4);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[1];
      mnUserParameterState0.setLimits(0, (-1400.0), 0.1);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      mnStrategy0.setHessianNCycles(6);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.1, (double)6, (double)(-3195), 0.1, 8.2).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 6);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), (-2147401568));
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1400.0), (-3195));
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertNotSame(intArray0, intArray1);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 0, 0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertNotSame(intArray1, intArray0);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnCross2, mnCross0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertNotNull(mnCross2);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3723.017081375255, 3723.017081375255, 3723.017081375255, 0.1, 0.1).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 3754.3556310874;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, (-1400.0));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 28.0561226678188, 1447);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      mnUserParameterState0.setPrecision((-1400.0));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      
      mnUserParameterState0.setLimits(0, (-1400.0), 0.1);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      
      mnStrategy0.setHessianNCycles(6);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3754.3556310874, 0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      mnStrategy1.setHessianGradientNCycles(2474);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(2474, mnStrategy1.hessianGradientNCycles());
      assertNotSame(mnStrategy1, mnStrategy0);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 6, mnStrategy1, 0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(2474, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnFunctionCross1);
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.1, (double)6, (double)(-3195), 0.1, 4.0).when(fCNBase2).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross2 = new MnFunctionCross(fCNBase2, mnUserParameterState0, 0.0, mnStrategy0, 6);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross1));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnFunctionCross2);
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      
      MnCross mnCross2 = mnFunctionCross2.cross(intArray0, doubleArray0, doubleArray0, (-1.0), (-2147401549));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotSame(mnFunctionCross2, mnFunctionCross1);
      assertNotSame(mnFunctionCross2, mnFunctionCross0);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross1));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross0));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnCross2);
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross3 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3195), 8);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotSame(mnCross3, mnCross2);
      assertNotSame(mnCross3, mnCross1);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnFunctionCross0, mnFunctionCross1);
      assertNotSame(mnFunctionCross0, mnFunctionCross2);
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross1));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross2));
      assertNotNull(mnCross3);
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross4 = mnFunctionCross2.cross(intArray0, doubleArray0, doubleArray0, 0.2, 1288490189);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotSame(mnFunctionCross2, mnFunctionCross1);
      assertNotSame(mnFunctionCross2, mnFunctionCross0);
      assertNotSame(mnCross4, mnCross1);
      assertNotSame(mnCross4, mnCross3);
      assertNotSame(mnCross4, mnCross0);
      assertNotSame(mnCross4, mnCross2);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross1));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross0));
      assertFalse(mnCross4.equals((Object)mnCross1));
      assertFalse(mnCross4.equals((Object)mnCross3));
      assertFalse(mnCross4.equals((Object)mnCross0));
      assertFalse(mnCross4.equals((Object)mnCross2));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertNotNull(mnCross4);
      assertArrayEquals(new double[] {0.1, 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3723.017081375255, 3723.017081375255, 3723.017081375255, 0.1, (-3134.2131971701738)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3134.2131971701738);
      doubleArray0[1] = 3723.017081375255;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, 3723.017081375255);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 28.0561226678188, 1447);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      mnUserParameterState0.setLimits(0, 0.1, (-3134.2131971701738));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      
      mnStrategy0.setHessianNCycles(6);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      
      mnStrategy0.setHessianGradientNCycles(2490);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2490, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, 1.0, 3723.017081375255, 3723.017081375255, (double)2490).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 6, mnStrategy0, 0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2490, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross1);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.1, (double)6, (double)0, (-3134.2131971701738), 8.200000000000001).when(fCNBase2).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross2 = new MnFunctionCross(fCNBase2, mnUserParameterState0, 0.0, mnStrategy0, 6);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2490, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross1));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross2);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      
      MnCross mnCross1 = mnFunctionCross2.cross(intArray0, doubleArray0, doubleArray0, (-1.0), (-2147401561));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2490, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(mnFunctionCross2, mnFunctionCross1);
      assertNotSame(mnFunctionCross2, mnFunctionCross0);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross1));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 8);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2490, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnFunctionCross0, mnFunctionCross2);
      assertNotSame(mnFunctionCross0, mnFunctionCross1);
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross2));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross1));
      assertNotNull(mnCross2);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross3 = mnFunctionCross2.cross(intArray0, doubleArray0, doubleArray0, 4726.465577633728, 6);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2490, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotSame(mnCross3, mnCross1);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(mnCross3, mnCross2);
      assertNotSame(mnFunctionCross2, mnFunctionCross1);
      assertNotSame(mnFunctionCross2, mnFunctionCross0);
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross1));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross0));
      assertNotNull(mnCross3);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MnCross mnCross4 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 4726.465577633728, (-2876));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2490, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotSame(mnCross4, mnCross3);
      assertNotSame(mnCross4, mnCross2);
      assertNotSame(mnCross4, mnCross0);
      assertNotSame(mnCross4, mnCross1);
      assertNotSame(mnFunctionCross1, mnFunctionCross2);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertFalse(mnCross4.equals((Object)mnCross3));
      assertFalse(mnCross4.equals((Object)mnCross2));
      assertFalse(mnCross4.equals((Object)mnCross0));
      assertFalse(mnCross4.equals((Object)mnCross1));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross2));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnCross4);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 8.200000000000001;
      doubleArray1[1] = 0.1;
      doubleArray1[2] = 3723.017081375255;
      doubleArray1[3] = (-3134.2131971701738);
      doubleArray1[5] = 28.0561226678188;
      MnCross mnCross5 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0, 5120);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2490, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnFunctionCross0, mnFunctionCross2);
      assertNotSame(mnFunctionCross0, mnFunctionCross1);
      assertNotSame(mnCross5, mnCross2);
      assertNotSame(mnCross5, mnCross3);
      assertNotSame(mnCross5, mnCross0);
      assertNotSame(mnCross5, mnCross1);
      assertNotSame(mnCross5, mnCross4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross2));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross1));
      assertFalse(mnCross5.equals((Object)mnCross2));
      assertFalse(mnCross5.equals((Object)mnCross3));
      assertFalse(mnCross5.equals((Object)mnCross0));
      assertFalse(mnCross5.equals((Object)mnCross1));
      assertFalse(mnCross5.equals((Object)mnCross4));
      assertNotNull(mnCross5);
      assertArrayEquals(new double[] {(-3134.2131971701738), 3723.017081375255}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.200000000000001, 0.1, 3723.017081375255, (-3134.2131971701738), 0.0, 28.0561226678188}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3723.017081375255;
      doubleArray0[1] = 3754.3556310874;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {3723.017081375255, 3754.3556310874}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3723.017081375255, mnStrategy0, (-1400.0));
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {3723.017081375255, 3754.3556310874}, doubleArray0, 0.01);
      
      mnUserParameterState0.setPrecision((-1400.0));
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertArrayEquals(new double[] {3723.017081375255, 3754.3556310874}, doubleArray0, 0.01);
      
      mnUserParameterState0.setLimits(0, (-1400.0), 3723.017081375255);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertArrayEquals(new double[] {3723.017081375255, 3754.3556310874}, doubleArray0, 0.01);
      
      mnStrategy0.setHessianNCycles(31);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(31, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.isLow());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      mnStrategy1.setHessianGradientNCycles(1415);
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(1415, mnStrategy1.hessianGradientNCycles());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.isLow());
      assertNotSame(mnStrategy1, mnStrategy0);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 31, mnStrategy1, 0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(1415, mnStrategy1.hessianGradientNCycles());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.isLow());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross1);
      assertArrayEquals(new double[] {3723.017081375255, 3754.3556310874}, doubleArray0, 0.01);
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3723.017081375255, 3723.017081375255, 3723.017081375255, 3754.3556310874, 3754.3556310874).when(fCNBase2).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross2 = new MnFunctionCross(fCNBase2, mnUserParameterState0, 0.0, mnStrategy0, 31);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(31, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross0));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross1));
      assertNotNull(mnFunctionCross2);
      assertArrayEquals(new double[] {3723.017081375255, 3754.3556310874}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross2.cross(intArray0, doubleArray0, doubleArray0, (-3192), 1415);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(31, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnFunctionCross2, mnFunctionCross0);
      assertNotSame(mnFunctionCross2, mnFunctionCross1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross0));
      assertFalse(mnFunctionCross2.equals((Object)mnFunctionCross1));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {3723.017081375255, 3754.3556310874}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 3754.3556310874;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 3754.3556310874}, doubleArray0, 0.01);
      
      double[] doubleArray1 = mnUserParameterState0.errors();
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3754.3556310874}, doubleArray1, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.setPrecision((-1400.0));
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 3754.3556310874}, doubleArray0, 0.01);
      
      mnUserParameterState0.setLimits(0, (-1400.0), 0.0);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 3754.3556310874}, doubleArray0, 0.01);
      
      mnStrategy0.setHessianNCycles(31);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(31, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnStrategy1);
      
      mnStrategy1.setHessianGradientNCycles(1415);
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(1415, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertNotSame(mnStrategy1, mnStrategy0);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 31, mnStrategy1, 0);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(1415, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 3754.3556310874}, doubleArray0, 0.01);
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 3723.017081375255, 3723.017081375255, 4780.729400316916, 3754.3556310874).when(fCNBase2).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase2, mnUserParameterState0, 0.0, mnStrategy0, 31);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(31, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnFunctionCross1);
      assertArrayEquals(new double[] {0.0, 3754.3556310874}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnStrategy0.setHessianStepTolerance((-624.2945229));
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(31, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals((-624.2945229), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotSame(mnStrategy0, mnStrategy1);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      
      MnCross mnCross0 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, (-3198), 1415);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(31, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals((-624.2945229), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 3754.3556310874}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
  }
}
