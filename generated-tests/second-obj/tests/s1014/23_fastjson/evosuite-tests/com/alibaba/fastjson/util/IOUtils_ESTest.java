/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:28:29 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.Closeable;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CodingErrorAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils.decodeBase64("NMU^H%_=\"ul", 2, 2);
      IOUtils.getStringProperty("NMU^H%_=\"ul");
      PipedReader pipedReader0 = new PipedReader();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, (-1238), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1238
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars(786L, (-3049), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = IOUtils.stringSize(128);
      assertEquals(3, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = 'Z';
      IOUtils.getChars((long) 3, 3, charArray0);
      assertArrayEquals(new char[] {'X', 'Z', '3', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("+G)'~PA{NJLe");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[0];
      int int0 = IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)52, (byte) (-110), (byte) (-34)}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils.firstIdentifier('\"');
      // Undeclared exception!
      try { 
        IOUtils.getChars(33, 112, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils.getStringProperty("F,1)DU6+H(");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((-1), 2, iOUtils0.CA);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)0;
      int int0 = IOUtils.encodeUTF8(charArray0, 0, '\u0000', byteArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = IOUtils.decodeBase64(charArray0, 103, 0);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("+G)'~PA{NJLe");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[13];
      charArray0[0] = '&';
      int int0 = IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)52, (byte) (-110), (byte) (-34)}, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.DIGITS, 7, 2768, iOUtils0.specicalFlags_singleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[4];
      charArray0[0] = '\u008B';
      charArray0[1] = '\u008B';
      charArray0[3] = '0';
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, '0', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[4];
      charArray0[1] = '\u008B';
      charArray0[3] = '0';
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, '0', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("7+nI", (-3702), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.decodeBase64("q(n&FS`|");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)21}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("2_io`J.tJ=(*");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-8), (byte) (-88), (byte) (-1), (byte) (-1), (byte) (-19)}, byteArray0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      StringReader stringReader0 = new StringReader("fastjson.compatibleWithJavaBean");
      IOUtils.readAll(stringReader0);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 73, 39, iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("d.B");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOUtils.firstIdentifier('b');
      IOUtils.isValidJsonpQueryParam("'h");
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      int int0 = IOUtils.encodeUTF8(charArray0, 10, '\u0000', byteArray0);
      assertEquals(0, int0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray1 = IOUtils.decodeBase64(charArray0, 0, 2);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean0 = IOUtils.isIdent(')');
      assertFalse(boolean0);
      
      int int0 = IOUtils.stringSize((long) (byte)19);
      assertEquals(2, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 2, 2, iOUtils0.ASCII_CHARS);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", (-639), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      PipedReader pipedReader0 = new PipedReader();
      byte[] byteArray0 = IOUtils.decodeBase64("'/L>s7NA8>YN]?]:|5F");
      IOUtils.close(pipedReader0);
      IOUtils.decodeUTF8(byteArray0, 2, 2, iOUtils0.replaceChars);
      // Undeclared exception!
      try { 
        IOUtils.getChars(1L, (-1), iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.properties");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
      assertTrue(byteBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'q';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2109135724), (-2109135724), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2109135725
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 3696;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.getChars((-866L), 3696, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3695
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(35, 35, iOUtils0.CA);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset charset0 = IOUtils.UTF8;
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.toString();
      IOUtils.getChars((byte)14, (int) (byte)14, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.isIdent('B');
      IOUtils.decodeBase64("?s<");
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-83), 16, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = IOUtils.isIdent('9');
      assertTrue(boolean0);
      
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.toString();
      IOUtils.getChars((byte) (-16), (int) (byte)14, iOUtils0.ASCII_CHARS);
      int int0 = IOUtils.stringSize((long) (byte)14);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOUtils.close((Closeable) null);
      IOUtils.stringSize(1L);
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'E';
      charArray0[2] = '=';
      charArray0[3] = 'S';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-389L), (-2335), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2336
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize(8257536);
      // Undeclared exception!
      try { 
        IOUtils.getChars(1000000000L, 8257536, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils.firstIdentifier('(');
      char[] charArray0 = new char[4];
      charArray0[1] = 'n';
      charArray0[2] = '(';
      charArray0[3] = 'n';
      // Undeclared exception!
      try { 
        IOUtils.getChars(2497L, 3, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOUtils.stringSize((-760L));
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'C';
      charArray0[2] = '|';
      // Undeclared exception!
      try { 
        IOUtils.getChars(10000000000000000L, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils.stringSize((-261));
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("(v[i=A>0@las{YB_");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(uTF8Decoder0, byteBuffer1, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = IOUtils.decodeBase64("\"");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.firstIdentifier('p');
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 9, 31);
      IOUtils.getChars((-1L), 9, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.decodeBase64("NMU^H%_ul", 2, 6);
      MockFile mockFile0 = new MockFile("NMU^H%_ul", "");
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "NMU^H%_=\"ul";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("NMU^H%_=\"ul", 6, 491);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOUtils.decodeBase64("NMU^H%_=\"ul", 2, 6);
      IOUtils.getStringProperty("NMU^H%_=\"ul");
      PipedReader pipedReader0 = new PipedReader();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      PipedReader pipedReader0 = new PipedReader();
      byte[] byteArray0 = IOUtils.decodeBase64("'/L>s7NA8>YN]?]:|5F");
      IOUtils.close(pipedReader0);
      IOUtils.decodeUTF8(byteArray0, 2, 954, iOUtils0.replaceChars);
      // Undeclared exception!
      try { 
        IOUtils.getChars(1L, (-1), iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 45, 45);
      IOUtils.stringSize((long) 45);
      PipedReader pipedReader0 = new PipedReader(45);
      IOUtils.close(pipedReader0);
      IOUtils.decodeBase64("fastjson.properties");
      IOUtils.decodeUTF8(byteArray0, 2, 22, iOUtils0.ASCII_CHARS);
      // Undeclared exception!
      try { 
        IOUtils.getChars(45, (-42), iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -43
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.isIdent('\u0092');
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      char[] charArray0 = new char[26];
      charArray0[0] = '\u0092';
      charArray0[2] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 't';
      IOUtils.decodeUTF8(byteArray0, 22, '\u0092', charArray0);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 22, 22, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.firstIdentifier('|');
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.properties");
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      iOUtils0.UTF8.decode(byteBuffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[6] = (byte) (-29);
      byte byte0 = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[6] = (byte)113;
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)70, iOUtils0.DIGITS);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-128), (int) (byte) (-29), iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.newDecoder();
      iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 45, 45);
      IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      Charset charset0 = IOUtils.UTF8;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize((long) 45);
      PipedReader pipedReader0 = new PipedReader();
      IOUtils.close(pipedReader0);
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 2, 45);
      char char0 = '\'';
      IOUtils.firstIdentifier('\'');
      IOUtils.decodeUTF8(byteArray0, 2, 49, iOUtils0.CA);
      // Undeclared exception!
      try { 
        IOUtils.getChars(49, (-248), iOUtils0.replaceChars);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -249
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.newDecoder();
      iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 31, 31);
      IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      Charset charset0 = IOUtils.UTF8;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize((long) 31);
      PipedReader pipedReader0 = new PipedReader();
      IOUtils.close(pipedReader0);
      IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      IOUtils.firstIdentifier('t');
      IOUtils.decodeUTF8(byteArray0, 2, 22, iOUtils0.ASCII_CHARS);
      // Undeclared exception!
      try { 
        IOUtils.getChars(31, (-42), iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -43
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.newDecoder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      IOUtils.encodeUTF8(iOUtils0.DIGITS, (-826), (-826), iOUtils0.specicalFlags_doubleQuotes);
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.decodeBase64("fastjson.compatibleWithFieldName");
      IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      IOUtils.loadPropertiesFromFile();
      Charset charset0 = IOUtils.UTF8;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize((long) 45);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      IOUtils.close(pipedReader0);
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 2, 45);
      IOUtils.firstIdentifier('\'');
      byteBuffer0.rewind();
      IOUtils.decodeUTF8(byteArray0, 2, 49, iOUtils0.CA);
      byteBuffer0.getInt();
      IOUtils.isValidJsonpQueryParam("??q-;(,!dDQdVMmIrvE");
      // Undeclared exception!
      try { 
        IOUtils.readAll(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.newDecoder();
      iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 45, 45);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      IOUtils.decodeUTF8(byteArray0, 2, 2, iOUtils0.ASCII_CHARS);
      byte[] byteArray2 = IOUtils.specicalFlags_doubleQuotes;
      PipedReader pipedReader0 = new PipedReader(45);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.getStringProperty("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnjpqrstuvwxyz0123456789+/");
      iOUtils0.DEFAULT_PROPERTIES.toString();
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 61, (-1), byteArray1);
      // Undeclared exception!
      try { 
        IOUtils.readAll(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOUtils.decodeBase64("4[A;!k$)r(F~==(");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("N|FR'07'i.l\u0001jTM3)", 45, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.newDecoder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      byte[] byteArray1 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize((long) 78);
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 2, 78);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        mockFileReader0.ready();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize(0L);
      byte[] byteArray0 = IOUtils.decodeBase64("zNqhAi!U");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      IOUtils.stringSize((long) (-1));
      IOUtils.stringSize((long) 3);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(mockFileInputStream0, "zNqhAi!U");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.newDecoder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      IOUtils.encodeUTF8(iOUtils0.DIGITS, (-826), (-826), iOUtils0.specicalFlags_doubleQuotes);
      iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.decodeBase64("fastjson.compatibleWithFieldName");
      IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      IOUtils.loadPropertiesFromFile();
      Charset charset0 = IOUtils.UTF8;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize((long) 45);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      IOUtils.close(pipedReader0);
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 2, 45);
      IOUtils.firstIdentifier('\'');
      int int0 = 49;
      IOUtils.decodeUTF8(byteArray0, 2, 49, iOUtils0.CA);
      PipedReader pipedReader1 = new PipedReader();
      uTF8Decoder0.replacement();
      IOUtils.isValidJsonpQueryParam("\uFFFD");
      // Undeclared exception!
      try { 
        IOUtils.readAll(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      IOUtils.encodeUTF8(iOUtils0.DIGITS, (-826), (-826), iOUtils0.specicalFlags_doubleQuotes);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      IOUtils.loadPropertiesFromFile();
      Charset charset0 = IOUtils.UTF8;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.compatibleWithFieldName");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize((long) 45);
      IOUtils.getStringProperty("fastjson.compatibleWithFieldName");
      IOUtils.decodeUTF8(byteArray0, 18, 14, iOUtils0.replaceChars);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.compatibleWithJavaBean");
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOUtils.firstIdentifier('\u010B');
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(1L);
      char char0 = ',';
      int int0 = (-904);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 16, (-904));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -889
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
