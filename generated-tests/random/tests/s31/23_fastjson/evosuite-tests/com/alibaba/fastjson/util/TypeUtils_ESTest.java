/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:02:49 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("notifyAll");
      assertEquals((-1465293408307887577L), long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("$-PIV}FLE7|5H,:o! $");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : $-PIV}FLE7|5H,:o! $
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.ManyToMany", classLoader0, false);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("getgetCause", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      Byte byte1 = TypeUtils.castToByte(byte0);
      assertEquals((byte)120, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo", (ClassLoader) null);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "java.lang.Class@0000000001", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, treeMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      hashMap0.putAll(map0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("(Ljava/lang/Class;)Ljava/util/Collection;", "com.alibaba.fastjson.serializer.FieldSerializer");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("javassist.util.proxy.ProxyObject", "(l");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      hashMap0.put("isfillInStackTrace", "isfillInStackTrace");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      String string0 = TypeUtils.castToString(aSMDeserializerFactory0.classLoader);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.castToJavaBean((Object) null, class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("+?]d", "5smi %\"`");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "-\"at$#lugD-4SNjN", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      assertNotNull(type0);
      
      Class<?> class1 = TypeUtils.getRawClass(type0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("NULL");
      assertEquals("NULL", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Class<Locale> class1 = Locale.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, (PropertyNamingStrategy) null, false, true);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(12, list0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("Ljava.awt.Color", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. Ljava.awt.Color
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java.util.Collections$EmptyMap", classLoader0, false);
      assertEquals(10, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("_asm_prefix__");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("getfillInStackTrace");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Constructor<TimeZone>[] constructorArray0 = (Constructor<TimeZone>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("0udw-");
      assertEquals((-4567193202166559029L), long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("^5~Y_+~]oxc");
      assertEquals((-7171979689905428195L), long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.isHibernateInitialized(boolean0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      boolean boolean1 = TypeUtils.isHibernateInitialized(noClassDefFoundError0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((Throwable) null);
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockIllegalArgumentException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.OptionalCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Collection collection0 = TypeUtils.createCollection(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Collection collection0 = TypeUtils.createCollection(parameterizedTypeImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [J", class1.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("toUpperCase").when(genericArrayType0).toString();
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<BigInteger> class1 = BigInteger.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) type1, class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"code\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals(17, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SimpleDateFormat>[] classArray0 = (Class<SimpleDateFormat>[]) Array.newInstance(Class.class, 5);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      classArray0[0] = class0;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|l8iK28_$QFP");
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.castToDouble((Object) null);
      String string0 = "6n>x(u~ez1cd,&l,";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("6n>x(u~ez1cd,&l,", classLoader0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|l8iK28_$QFP");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class0, (ParserConfig) null);
      TypeUtils.clearClassMapping();
      Class<LinkageError> class1 = LinkageError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, identityHashMap0, false, propertyNamingStrategy0);
      Class<BitSet> class2 = BitSet.class;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      TypeUtils.getClassFromMapping("6n>x(u~ez1cd,&l,");
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("|l8iK28_$QFP");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NoSuchFieldError: |l8iK28_$QFP
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      assertEquals(16, list0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<String> class0 = String.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("java.time.ZoneId", class0, (-742));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.time.ZoneId -> com.alibaba.fastjson.parser.deserializer.JSONPDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("processValue", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.SerializerFeature", classLoader0, false);
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.ManyToMany", classLoader0);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.isPath(class0);
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      Type[] typeArray0 = new Type[3];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], propertyProcessableDeserializer0.type);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyProcessableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.46, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : 0, write javaBean error, fastjson version 1.2.46, class java.lang.Class, fieldName : type
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3036);
      Class<Locale> class0 = Locale.class;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Locale locale0 = Locale.GERMANY;
      Collator collator0 = Collator.getInstance(locale0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      NoSuchFieldException noSuchFieldException0 = TypeUtils.cast((Object) collator0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertNull(noSuchFieldException0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(2048);
      Type[] typeArray0 = new Type[1];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicInteger0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@873f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Type[] typeArray0 = new Type[9];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      BatchUpdateException batchUpdateException0 = TypeUtils.cast((Object) "", (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "}3PU8g%BUE'e", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "v*Rm%{wRIX-Ktx@RbmP", (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("q5z9p`9SIhz?KZ");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      SQLException sQLException0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertNull(sQLException0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "java.lang.StackTraceElement@0000000001", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Class<Properties> class0 = Properties.class;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) bigDecimal0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("o");
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("|L`XPUW7[WswAJ_Fe/[");
      assertEquals("|l`xpuw7[wswaj_FE/[", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "scan true error", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(353L);
      Date date0 = TypeUtils.castToDate(atomicLong0);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) date0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalArgumentException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Locale locale0 = new Locale("org.springframework.util.LinkedCaseInsensitiveMap", "spliterator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      String string0 = TypeUtils.cast((Object) mockGregorianCalendar0, class0, parserConfig0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("dqMxF]Vg2%TC{");
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) outOfMemoryError0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.OutOfMemoryError: dqMxF]Vg2%TC{
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) locale0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : fr
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Short> class0 = Short.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fileSystemHandling0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.testdata.FileSystemHandling@355ed368
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("org.springframework.remoting.support.RemoteInvocationResult", "org.springframework.remoting.support.RemoteInvocationResult");
      SQLDataException sQLDataException0 = new SQLDataException("org.springframework.remoting.support.RemoteInvocationResult", "org.springframework.remoting.support.RemoteInvocationResult", sQLWarning0);
      Class<Object> class0 = Object.class;
      Object object0 = TypeUtils.castToJavaBean((Object) sQLDataException0, class0);
      assertSame(sQLDataException0, object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      WeakHashMap<RenderingHints, MockCalendar> weakHashMap0 = new WeakHashMap<RenderingHints, MockCalendar>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(",m%z<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : ,m%z<
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Boolean boolean0 = TypeUtils.castToBoolean(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64("javax.persistence.ManyToMany");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.ManyToMany", classLoader0);
      assertEquals(9729, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1556, (-1995901768), 8, 8, 1556, (-1995901768));
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1556,MONTH=-1995901768,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=1556,SECOND=-1995901768,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("(Ljava/lang/Class;)Ljava/util/Collection;");
      assertEquals(29, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.LinkageError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Short short0 = new Short((short)37);
      Integer integer0 = TypeUtils.castToInt(short0);
      assertEquals(37, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer((-1073741823));
      Integer integer1 = TypeUtils.castToInt(integer0);
      assertEquals((-1073741823), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31, false);
      Integer integer0 = jSONObject0.getInteger("H.SjXB$k[c+[L");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TreeMap<SQLWarning, RuleBasedCollator> treeMap0 = new TreeMap<SQLWarning, RuleBasedCollator>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("notifyAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : notifyAll
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("-%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("+&c8$N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      java.sql.Date date0 = new java.sql.Date((-2638L));
      Timestamp timestamp0 = TypeUtils.castToTimestamp(date0);
      assertEquals("1969-12-31 23:59:57.362", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1556, (-1995901768), 8, 8, 1556, (-1995901768));
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockGregorianCalendar0);
      assertEquals(0, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<InterruptedException> class0 = InterruptedException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Time time0 = TypeUtils.castToSqlTime(bigInteger0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-16));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -16
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLException sQLException0 = new SQLException("org.e", "", (-30733247));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-2291), sQLException0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLInvalidAuthorizationSpecException: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<MockCalendar> class0 = MockCalendar.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("to");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(imageCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.awt.ImageCapabilities@5b99b2b3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("java.boolean");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(illegalMonitorStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.IllegalMonitorStateException: java.boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "syntax error : ", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = TypeUtils.castToFloat(float0);
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Float float0 = new Float(0.0);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("6Bfj}sbM$*Pl^}6|r0", decimalFormatSymbols0);
      Currency currency0 = decimalFormat0.getCurrency();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(currency0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      WeakHashMap<DataTruncation, TypeNotPresentException> weakHashMap0 = new WeakHashMap<DataTruncation, TypeNotPresentException>(63, 63);
      DataTruncation dataTruncation0 = new DataTruncation(44, false, true, 63, (-302), (Throwable) null);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("TODO", dataTruncation0);
      weakHashMap0.put(dataTruncation0, typeNotPresentException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      WeakHashMap<DataTruncation, TypeNotPresentException> weakHashMap0 = new WeakHashMap<DataTruncation, TypeNotPresentException>(63, 63);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(weakHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "d.JCa<KCLJ@%H|x<", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(":T&!LCg]8*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":T&!LCg]8*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Double double0 = new Double((-1417.4807811226399));
      Short short0 = TypeUtils.castToShort(double0);
      assertEquals((short) (-1417), (short)short0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("biZ[(O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : biZ[(O
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1487L);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 1487
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("is");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"is\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-2377));
      Byte byte0 = TypeUtils.castToByte(atomicInteger0);
      assertEquals((byte) (-73), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.Point[x=0,y=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<InterruptedException> class0 = InterruptedException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      Class<java.sql.Date> class1 = java.sql.Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(17, list0.size());
  }
}
