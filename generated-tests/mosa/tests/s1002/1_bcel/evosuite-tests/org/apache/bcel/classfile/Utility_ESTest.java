/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:28:11 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{null, null, null, null}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      short short0 = Constants.D2L;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('W');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = Utility.searchOpcode("invokeinterface");
      assertEquals((short)185, short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("F", "F", "F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("!b", (String[]) null);
      assertEquals("()L!b;", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.replace("void", "static", "");
      assertEquals("void", string0);
      
      String string1 = Utility.getSignature("void");
      assertEquals("V", string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = Constants.LADD;
      int int0 = Utility.clearBit((-1647), (-4295));
      assertEquals((-33556079), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-37);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 db", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.accessToString((-4168));
      try { 
        Utility.methodSignatureReturnType("static final synchronized transient native interface abstract strictfp annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `static final synchronized transient native interface abstract strictfp annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.compactClassName("boolean");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(">oX1d1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>oX1d1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "{}";
      objectArray1[1] = (Object) "{}";
      objectArray1[2] = (Object) "{}";
      Utility.printArray(objectArray1, false, true);
      try { 
        Utility.typeOfSignature("putfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte byte0 = Constants.ITEM_NewObject;
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      assertEquals("0:    nop\n1:    nop\n", string0);
      
      String string1 = Utility.compactClassName("0:    nop\n1:    nop\n", "0:    nop\n1:    nop\n", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.decode("", false);
      Utility.compactClassName("r#'\"FT/\"T~.b", "", true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.getSignature("char");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.classOrInterface((-143));
      Utility.isSet((-143), 176);
      try { 
        Utility.methodSignatureReturnType("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Utility.convertString(" eNtriec\n");
      assertEquals(" eNtriec\\n", string0);
      
      String string1 = Utility.fillup(" eNtriec\n", (-53786696), true, 't');
      assertEquals(" eNtriec\n", string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SGs|HiT;%=");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.getSignature("SGs|HiT;%=");
      assertEquals("LSGs|HiT;%=;", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Utility.classOrInterface(255);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureReturnType("OT,=[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OT,=['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.signatureToString("S`LJ");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.replace("org.apache.bcel.classfile.Utility", "org.apache.bcel.classfile.Utility", "org.apache.bcel.classfile.Utility");
      assertEquals("org.apache.bcel.classfile.Utility", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[5];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      try { 
        Utility.typeOfSignature("%&w*fp)T?r b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %&w*fp)T?r b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short short0 = Constants.ANEWARRAY_QUICK;
      byte byte0 = Utility.typeOfSignature("Invalid");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|[UF]A";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("|[UF]A", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      Utility.encode(byteArray0, false);
      short short0 = Constants.LADD;
      assertEquals((short)97, short0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[6] = (byte) (-68);
      Utility.encode(byteArray0, false);
      short short0 = Constants.LADD;
      assertEquals((short)97, short0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Utility.format(4, 4, false, 's');
      assertEquals("sss4", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.decode("CONSTANT_Float", false);
      byte byte0 = Utility.typeOfSignature("CONSTANT_Float");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("V", "V", true);
      String string0 = "@XggI)HKWCY{l*N/Li";
      try { 
        Utility.methodSignatureReturnType("@XggI)HKWCY{l*N/Li");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HKWCY{l*N/Li'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("TR?f2k", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 5, 34);
      assertArrayEquals(new byte[] {(byte)84, (byte)82, (byte)63, (byte)102, (byte)50, (byte)107}, byteArray0);
      assertEquals("5:    dmul\n", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "!z]vpU+DAP['D";
      stringArray0[1] = "!z]vpU+DAP['D";
      stringArray0[2] = "!z]vpU+DAP['D";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("!z]vpU+DAP['D", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:['D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte) (-11), 238);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Illegally nested brackets:");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("d2i", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d2i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("VO' XV[^CKxuY;");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.decode("Q2ldGoN#xy&$;Fe3X>X", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Q2ldGoN#xy&$;Fe3X>X", "Q2ldGoN#xy&$;Fe3X>X", "Q2ldGoN#xy&$;Fe3X>X", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q2ldGoN#xy&$;Fe3X>X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      try { 
        Utility.methodSignatureReturnType("NH82(F0{~mQjP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NH82(F0{~mQjP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[10] = (byte) (-85);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (-45));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   lookupswitch\tdefault = 10, npairs = 0 ()\n", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">|zWgD,^0cb{cSZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >|zWgD,^0cb{cSZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Invalid StackMap frame_type: ", false);
      String string0 = Constants.CONSTRUCTOR_NAME;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4339, 186);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("UC72!P~71c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UC72!P~71c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":I1yx\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :I1yx\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byte byte0 = Utility.typeOfSignature("B{W4=");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short short0 = Constants.LADD;
      MockPrintStream mockPrintStream0 = new MockPrintStream("9|");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("9|", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.typeOfSignature("68qXWwny50&G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 68qXWwny50&G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("L]w^ChU6}LEqsa2@UX:");
      assertEquals((byte)14, byte0);
      
      short short0 = Utility.searchOpcode("L]w^ChU6}LEqsa2@UX:");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-104);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), (int) (byte) (-104));
      assertEquals("0:    nop\n1:    nop\n2:    dcmpg\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YC[;7{sw=,26Re*/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YC[;7{sw=,26Re*_/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3477), (int) (byte)17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-124);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.typeOfMethodSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("JL\"Z$g");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("~PPvex4!`duFfiM", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2477), 146);
      assertEquals("0:    iand\n1:    lastore\n2:    lastore\n3:    fneg\n4:    lsub\n5:    ishl\n6:    caload\n7:    lload_3\n8:    iadd\n9:    isub\n10:   lneg\n11:   fstore_3\n12:   fsub\n13:   lmul\n14:   astore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3599), 740);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep1
         // 1:    f2d
         // 2:    astore_1
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-115);
      byteArray0[3] = (byte)112;
      byteArray0[1] = (byte)112;
      Utility.format((-4281), (byte) (-115), true, '3');
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.typeOfMethodSignature("-4281");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -4281
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Utility.getSignature("r\u0001)8/~");
      assertEquals("Lr\u0001)8/~;", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("istore_3", string1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), (int) (byte)98);
      try { 
        Utility.methodSignatureReturnType("M1lU=e<nLBCH6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M1lU=e<nLBCH6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 109);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte) (-85);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
      
      String string1 = Utility.methodSignatureReturnType("JJ");
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("!z]vpU+DAP['D", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 10, 10);
      assertEquals("10:   dup_x2\n11:   dload_1\n12:   fstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Ez#ihjvwi61VJ,u 5n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ez#ihjvwi61VJ,u 5n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-960), (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.compactClassName("dstore_2", "BQc]", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("BQc]", false);
      assertEquals("byte", string2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The array of preixes must not be null");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = Utility.isSet((byte)14, 102);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)71;
      Utility.methodSignatureReturnType("C", true);
      Utility.typeOfSignature("C");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-79);
      byteArray0[3] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, (-654));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.setBit(81, 81);
      Utility.typeOfSignature("D\" cF@X2>q5z2>e;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("^hr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^hr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.accessToString((-4168));
      Utility.typeOfSignature("[]");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "static final synchronized transient native interface abstract strictfp annotation enum";
      objectArray0[1] = (Object) "static final synchronized transient native interface abstract strictfp annotation enum";
      objectArray0[2] = (Object) "static final synchronized transient native interface abstract strictfp annotation enum";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "static final synchronized transient native interface abstract strictfp annotation enum";
      Utility.methodTypeToSignature("/4($fWflNxV\ti", stringArray0);
      objectArray0[6] = (Object) (byte)20;
      // Undeclared exception!
      try { 
        Utility.decode("(Lstatic;)L/4($fWflNxV\ti;", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-84);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("$A$ac$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("fstore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fstore_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Constants.ITEM_Null;
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")\t");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(")\t", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.format('\'', 246, false, '\'');
      Utility.isJavaIdentifierPart('x');
      try { 
        Utility.typeOfSignature("''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''39");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''39
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Lprotected;V");
      assertEquals("protected", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Utility.getSignature("r\u0001)8/~");
      assertEquals("Lr\u0001)8/~;", string0);
      
      byte byte0 = Utility.typeOfSignature("Zf");
      assertEquals((byte)4, byte0);
      
      String string1 = Utility.getSignature("\t\t");
      assertEquals("L;", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\nAttribute(s) = ";
      stringArray0[1] = "\nAttribute(s) = ";
      String string0 = Utility.methodTypeToSignature("\nAttribute(s) = ", stringArray0);
      assertEquals("(LAttribute(s);LAttribute(s);)LAttribute(s);", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "L]w^ChU6}LEqsa2@UX:";
      Utility.typeOfSignature("L]w^ChU6}LEqsa2@UX:");
      // Undeclared exception!
      try { 
        Utility.signatureToString("G`3IY~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G`3IY~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("[&z~sDOAyd-M.6/%Rq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [&z~sDOAyd-M.6/%Rq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("jsr_w\t\t#89866752", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TR?f2k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TR?f2k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      String string0 = ")&b)aub)WHq_/";
      try { 
        Utility.typeOfSignature(")&b)aub)WHq_/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )&b)aub)WHq_/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      try { 
        Utility.typeOfSignature("K5rX6F8LZj/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K5rX6F8LZj/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      int int0 = Pattern.UNIX_LINES;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ireturn", false);
      String string0 = Constants.CONSTRUCTOR_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1419), 166);
      assertEquals("0:    ishr\n1:    arraylength\n", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-63), (byte) (-63));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "return";
      stringArray0[1] = "void";
      stringArray0[2] = "9";
      stringArray0[3] = "9";
      stringArray0[4] = "9";
      stringArray0[5] = "9";
      stringArray0[6] = "9";
      stringArray0[7] = "9";
      try { 
        Utility.methodTypeToSignature("9", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short short0 = Constants.LADD;
      String string0 = Utility.accessToString((int) (short)97, true);
      assertEquals("public volatile", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X-?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X-?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "invokestatic");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), (int) (byte) (-117));
      assertEquals("0:    f2i\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_RESET;
      Object object0 = new Object();
      Utility.clearBit(787, (byte)121);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2480), 787);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2i
         // 1:    lshl
         // 2:    lshl
         // 3:    lshl
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#[K@W(,&6?E(b026");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #[K@W(,&6?E(b026
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E|IK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E|IK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      int int0 = Pattern.UNIX_LINES;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.methodSignatureReturnType("K6|fL>~N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K6|fL>~N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.decode("!z]vpU+DAP['D", false);
      String string0 = Utility.convertString("!z]vpU+DAP['D");
      assertEquals("!z]vpU+DAP[\\'D", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\" n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \" n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1.2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1.2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-100);
      Utility.encode(byteArray0, false);
      MockFile mockFile0 = new MockFile("$A$U$9c$A");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.decode("$A$U$9c$A", false);
      try { 
        Utility.typeOfSignature("$A$U$9c$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$U$9c$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 175, (int) (byte) (-75));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "@\\0Vswb%\\y8D5<V>;";
      try { 
        Utility.typeOfSignature("@\u0000Vswb%y8D5<V>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @\u0000Vswb%y8D5<V>;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("Warning: Padding byte != 0 in ");
      try { 
        Utility.methodSignatureReturnType("f$0vZ4G(C)Q,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      Utility.equals(byteArray0, byteArray0);
      MockFile mockFile0 = new MockFile("&$7PcmZ|_MAX");
      try { 
        Utility.typeOfSignature("&$7PcmZ|_MAX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &$7PcmZ|_MAX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)103;
      byteArray1[2] = (byte) (-80);
      byteArray1[3] = (byte)20;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 287, (int) (byte)103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R?fk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R?fk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SGs|HiT;%=");
      Utility.format(851, (-827), false, 'X');
      String string0 = "(=3<N,y";
      try { 
        Utility.typeOfMethodSignature("(=3<N,y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (=3<N,y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = (byte)123;
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (int) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)41, (byte)36, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 667, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)121;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)121;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)121);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)121, (byte)0, (byte) (-121), (byte) (-121), (byte)121, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    lshl\n1:    nop\n2:    i2d\n3:    i2d\n4:    lshl\n5:    lshl\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      
      try { 
        Utility.typeOfMethodSignature("0:    lshl\n1:    nop\n2:    i2d\n3:    i2d\n4:    lshl\n5:    lshl\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lshl
         // 1:    nop
         // 2:    i2d
         // 3:    i2d
         // 4:    lshl
         // 5:    lshl
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3163), (int) (byte) (-110));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    i2c\n1:    nop\n2:    nop\n", string1);
      
      try { 
        Utility.typeOfSignature("0:    i2c\n1:    nop\n2:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    i2c
         // 1:    nop
         // 2:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('Y');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = ")$2)8?Dqge'zE";
      try { 
        Utility.typeOfSignature("!yw<\"^7My%!R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: yw<\"^7My%!R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dzs>");
      assertEquals((byte)7, byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.methodSignatureReturnType("Dzs>", true);
      assertNotNull(string0);
      assertEquals("double", string0);
      
      try { 
        Utility.typeOfSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-119);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), (int) (byte) (-119));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-119)}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    l2f\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-119)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-119)}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-119), 171);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-119)}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    l2f\n", string1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 155, (int) (byte) (-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-63), (byte) (-63));
      assertNotNull(constantNameAndType0);
      assertEquals((-63), constantNameAndType0.getSignatureIndex());
      assertEquals((-63), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-63), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)64, (byte) (-94), (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)64, (byte) (-94), (byte)0}, byteArray0);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)64, (byte) (-94), (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)64, (byte) (-94), (byte)0}, byteArray0);
      
      byte byte0 = byteSequence1.readByte();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)64, (byte) (-94), (byte)0}, byteArray0);
      assertEquals((byte)64, byte0);
      assertNotSame(byteSequence1, byteSequence0);
      
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(<;EI{_!\"u48", "(<;EI{_!\"u48", "(<;EI{_!\"u48");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<;EI{_!\"u48'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-12), (byte)75, (byte)26, (byte)82, (byte)113}, byteArray0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertNotNull(constantFloat0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-5.1232032E8F), constantFloat0.getBytes(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-12), (byte)75, (byte)26, (byte)82, (byte)113}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)75, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-76);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (-4060));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)103, (byte) (-59)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)103, (byte) (-59)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)103, (byte) (-59)}, byteArray0);
      assertEquals("dsub", string1);
      assertNotSame(byteSequence1, byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal type>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("*TD/4Gu2t\"gP(s");
      assertEquals((byte)14, byte0);
      
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)125;
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(6\"C?!N";
      String string0 = Utility.methodTypeToSignature("(6\"C?!N", stringArray0);
      assertNotNull(string0);
      assertEquals("(L(6\"C?!N;)L(6\"C?!N;", string0);
      
      String string1 = Utility.methodSignatureToString("(L(6\"C?!N;)L(6\"C?!N;", "", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(6\"C?!N ((6\"C?!N arg1)", string1);
      
      int int0 = Utility.setBit(3376, 40);
      assertEquals(3376, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("!", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L!;", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "()L!;");
      assertFalse(boolean0);
      
      String string1 = Utility.methodTypeToSignature("t(XmWzUhHmbQ/KOy", (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()Lt(XmWzUhHmbQ/KOy;", string1);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)67, (byte)67);
      assertNotNull(constantNameAndType0);
      assertEquals(67, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(67, constantNameAndType0.getSignatureIndex());
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      assertNotNull(constantNameAndType1);
      assertEquals(67, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(67, constantNameAndType0.getSignatureIndex());
      assertEquals(67, constantNameAndType1.getNameIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals(67, constantNameAndType1.getSignatureIndex());
      
      String string2 = Utility.methodSignatureToString("()L!;", (String) null, "!", false, (LocalVariableTable) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("! ! null()", string2);
      
      boolean boolean1 = Utility.isSet((byte)67, (byte)67);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.convertString("putfield");
      assertNotNull(string0);
      assertEquals("putfield", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)46;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 1141);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    iaload\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.convertString("putfield");
      assertNotNull(string0);
      assertEquals("putfield", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)46;
      byteArray0[4] = (byte)88;
      byteArray0[2] = (byte) (-62);
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1999), (int) (byte)88, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-62), (byte)0, (byte)88, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    monitorenter\n3:    nop\n4:    pop2\n5:    nop\n6:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short short0 = Utility.searchOpcode("GClss(");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = Utility.decode("The wildcard list must not be null", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), 114);
      assertNotNull(string0);
      assertEquals("0:    bastore\n1:    imul\n2:    lsub\n3:    lload_2\n4:    dneg\n5:    lmul\n6:    idiv\n7:    isub\n8:    dadd\n9:    ladd\n10:   frem\n11:   isub\n12:   lload_2\n13:   idiv\n14:   lmul\n15:   drem\n16:   ineg\n17:   lload_2\n18:   ldiv\n19:   lneg\n20:   drem\n21:   ineg\n22:   lload_2\n23:   fdiv\n24:   ddiv\n25:   ineg\n26:   lload_2\n27:   fadd\n28:   lsub\n29:   lload_2\n30:   fdiv\n31:   lneg\n32:   idiv\n33:   idiv\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("bastore", string1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)71, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)71, (byte)0}, byteArray0);
      
      byte byte0 = byteSequence1.readByte();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)71, (byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)71, (byte)0}, byteArray0);
      assertEquals("dstore_0", string0);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)106, (byte) (-65), (byte) (-128), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)106, (byte) (-65), (byte) (-128), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)106, (byte) (-65), (byte) (-128), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("fmul", string0);
      assertNotSame(byteSequence0, byteSequence1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-128)}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-128)}, byteArray0);
      assertEquals("0:    ior\n", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      assertEquals("athrow", string0);
      assertNotSame(byteSequence0, byteSequence1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("athrow", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)37, (byte)91, (byte)0, (byte)0}, byteArray0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)37, (byte)91, (byte)0, (byte)0}, byteArray0);
      assertEquals("fload_3", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)37, (byte)91, (byte)0, (byte)0}, byteArray0);
      assertEquals("dup_x2", string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.convertString("#[K@W(,&6?E(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?E(b026", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)23, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, (int) (byte)23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte)32, (byte)32}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte)32, (byte)32}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte)32, (byte)32}, byteArray0);
      assertEquals("dload_2", string0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Utility.convertString("dload_2");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("dload_2", string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)89, (byte)90, (byte) (-50)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 2278);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Utility.convertString("<init>");
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-106), (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 69, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      String string0 = Utility.methodSignatureReturnType("FiKmU#k?lA@G");
      assertNotNull(string0);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Utility.getSignature("Nchar");
      assertNotNull(string0);
      assertEquals("LNchar;", string0);
      
      byte byte0 = Utility.typeOfSignature("LNchar;");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = true;
      String string1 = Utility.methodSignatureReturnType("LNchar;", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Nchar", string1);
      
      try { 
        Utility.typeOfSignature("Nchar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nchar
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[6] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-68)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-68)}, byteArray0);
      assertEquals("lstore\t\t%0", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-68)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte byte0 = Constants.T_BOOLEAN;
      assertEquals((byte)4, byte0);
      
      try { 
        Utility.typeOfSignature("2thar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2thar
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (-45));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    lookupswitch\tdefault = 3, npairs = 0 ()\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte) (-67)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte) (-67)}, byteArray0);
      assertEquals("dload_0", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-67));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public protected static final synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte) (-67)}, byteArray0);
      assertEquals("26 26 bd", string2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-107), (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-107), (byte)0, (byte)0}, byteArray0);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("Oezr5OK`zwK8SKU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Oezr5OK`zwK8SKU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.convertString(">\"$n}+ZdewjglI");
      assertNotNull(string0);
      assertEquals(">\\\"$n}+ZdewjglI", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 889, 540);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      short short0 = Constants.ANEWARRAY_QUICK;
      assertEquals((short)222, short0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-87);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (short)222);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-87), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    ret\t\t%0\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 971, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)35, (byte)57}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)35, (byte)57}, byteArray0);
      
      int int0 = byteSequence1.available();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)35, (byte)57}, byteArray0);
      assertEquals(2, int0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)35, (byte)57}, byteArray0);
      assertEquals("fload_1", string0);
      assertNotSame(byteSequence0, byteSequence1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("breakpoint", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)114, (byte)101, (byte)97, (byte)107, (byte)112, (byte)111, (byte)105, (byte)110, (byte)116}, byteArray0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 195, 146);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)29, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)29, (byte)0}, byteArray0);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)34, (byte)81}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)34, (byte)81}, byteArray0);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G`3IY~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G`3IY~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("Qs");
      assertNotNull(string0);
      assertEquals("Qs", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-100), true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("protected static final transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)49, (-1656));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-90);
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 242, (-3727), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=M*u:>pKI)v=^G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =M*u:>pKI)v=^G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0}, byteArray0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertNotNull(constantFloat0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(1.83671E-39F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0}, byteArray0);
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 37);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    goto\t\t#0\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 563, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, (int) (byte)21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[3] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit(58, 58);
      assertEquals(67108922, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = byteSequence0.readByte();
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-97), byte0);
      assertNotSame(byteSequence0, byteSequence1);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("if_icmpeq\t\t#0", string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4!PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4!PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ARRAY;
      assertEquals((byte)117, byte0);
      
      Object[] objectArray0 = new Object[13];
      try { 
        Utility.typeOfSignature("-bEO4:nIdPFCa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -bEO4:nIdPFCa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "305";
      try { 
        Utility.typeOfSignature("305");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 305
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-95);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2496), (int) (byte) (-95));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)56, (byte)104, (byte) (-95), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    fstore\t\t%104\n3:    if_icmplt\t\t#3\n6:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    nop\n1:    fstore\t\t%104\n3:    if_icmplt\t\t#3\n6:    nop\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence1.close();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("iload_2", string0);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), 163);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("UZtCA>)3o96R$!G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UZtCA>)3o96R$!G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "Rd5\"W";
      try { 
        Utility.typeOfSignature("Rd5\"W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rd5\"W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" eNtriec\n", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)101, (byte)78, (byte)116, (byte)114, (byte)105, (byte)101, (byte)99, (byte)10}, byteArray0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 26, 146);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byte[] byteArray1 = Utility.decode("3er${sB<9WO", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)51, (byte)101, (byte)114, (byte)0, (byte)115, (byte)66, (byte)60, (byte)57, (byte)87, (byte)79}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)51, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 67, (int) (byte)51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "WbA\"*MD#}T!o|j@";
      try { 
        Utility.typeOfSignature("WbA\"*MD#}T!o|j@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WbA\"*MD#}T!o|j@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[3] = (byte) (-96);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-686), (int) (byte) (-96));
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)28, (byte)28, (byte)0, (byte) (-96), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    iload_2\n1:    iload_2\n2:    nop\n3:    if_icmpne\t\t#3\n", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(#3Ozr<%7)~'>;b7HL", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#3Ozr<%7)~'>;b7HL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 125, (int) (byte) (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = Utility.decode("M6&0~1=;_l", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte)54, (byte)38, (byte)48, (byte)126, (byte)49, (byte)61, (byte)59, (byte)95, (byte)108}, byteArray0);
      
      try { 
        Utility.typeOfSignature("M6&0~1=;_l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M6&0~1=;_l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)85;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cVJi?:W-";
      stringArray0[1] = "cVJi?:W-";
      stringArray0[2] = "cVJi?:W-";
      stringArray0[3] = "cVJi?:W-";
      stringArray0[4] = "cVJi?:W-";
      stringArray0[5] = "cVJi?:W-";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      stringArray0[6] = "cVJi?:W-";
      String string0 = Utility.methodTypeToSignature("cVJi?:W-", stringArray0);
      assertNotNull(string0);
      assertEquals("(LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;)LcVJi?:W-;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;LcVJi?:W-;)LcVJi?:W-;", false);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2034), 3319, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)6, (byte)30, (byte)30}, byteArray0);
      assertEquals("0:    nop\n1:    iconst_3\n2:    lload_0\n3:    lload_0\n", string0);
      
      byte[] byteArray1 = Utility.decode("0:    nop\n1:    iconst_3\n2:    lload_0\n3:    lload_0\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("ev6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ev6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = ":";
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)40;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0, (byte) (-126), (byte)30, (byte) (-22), (byte) (-34)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), (int) (byte) (-101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte) (-42);
      byteArray0[8] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)127, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)127, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)127, (byte)0, (byte)0}, byteArray0);
      assertEquals("land", string0);
      assertNotSame(byteSequence0, byteSequence1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 125, (int) (byte) (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-61), (byte)85, (byte) (-77), (byte) (-61), (byte) (-61), (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-61), (byte)85, (byte) (-77), (byte) (-61), (byte) (-61), (byte)0}, byteArray0);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = Utility.methodTypeToSignature("!", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L!;", string0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "()L!;");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)67;
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      try { 
        Utility.decode("!:~rEl(`+Fo$/IeN9L1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-74), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)47, (byte)32, (byte) (-1), (byte)27, (byte) (-87), (byte) (-32), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = Constants.ATTR_RUNTIMEINVISIBLE_ANNOTATIONS;
      assertEquals((byte)13, byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)27, (-341));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Utility.convertString("#[K@W(,&6?E(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?E(b026", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      String string2 = "*E";
      short short0 = Utility.searchOpcode("*E");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-117), (byte) (-91), (byte)6, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 156, (int) (byte) (-117));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-72), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertNotNull(constantFloat0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-3.0517578E-5F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertArrayEquals(new byte[] {(byte) (-72), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (int) (byte) (-72));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9536@B/:Y(I[7_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9536@B/:Y(I[7_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1891, (-4060));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      short short0 = Utility.searchOpcode("GClss(");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)65;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2079), 4515);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-53), (byte)13, (byte)65, (byte)13, (byte) (-118), (byte)65}, byteArray0);
      assertEquals("0:    lstore_2\n1:    <illegal opcode>\n2:    fconst_2\n3:    lstore_2\n4:    fconst_2\n5:    l2d\n6:    lstore_2\n", string0);
      
      short short1 = Constants.LADD;
      assertFalse(short1 == short0);
      assertEquals((short)97, short1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("+^Q3)P_~+U@}lV=),<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^Q3)P_~+U@}lV=),<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)81, (byte) (-16), (byte) (-71), (byte)45, (byte) (-90), (byte) (-66), (byte) (-49)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)81, (byte) (-16), (byte) (-71), (byte)45, (byte) (-90), (byte) (-66), (byte) (-49)}, byteArray0);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray0);
      assertEquals("lreturn", string0);
      assertNotSame(byteSequence0, byteSequence1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-76), (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), (int) (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'RE[L[?IV\"6", "");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("'RE[L[?IV\"6", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel/'RE[L[?IV\"6", mockFile0.toString());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("'RE[L[?IV\"6", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel/'RE[L[?IV\"6", mockFile0.toString());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      byte byte0 = (byte)67;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("'RE[L[?IV\"6", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[L[?IV\"6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-37);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), 1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      short short0 = Constants.ANEWARRAY_QUICK;
      assertEquals((short)222, short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (short)222);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5N=\"3}Jeh7di|e*,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5N=\"3}Jeh7di|e*,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("tqc", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)113, (byte)99}, byteArray0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)116, (byte)113, (byte)99}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 155, 155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)113;
      byteArray1[1] = (byte) (-112);
      byteArray1[2] = (byte) (-87);
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte) (-17);
      byteArray1[5] = (byte)79;
      byteArray1[6] = (byte) (-81);
      byteArray1[7] = (byte) (-114);
      byteArray1[8] = (byte) (-1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)113, 57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-75)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (-2401));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dreturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("+$", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = "dreturn";
      short short0 = Utility.searchOpcode("dreturn");
      assertEquals((short)175, short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2596, 2596, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Fw(WV");
      assertEquals((byte)6, byte0);
      
      short short0 = Constants.LADD;
      assertEquals((short)97, short0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("athrow", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)116, (byte)104, (byte)114, (byte)111, (byte)119}, byteArray0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte)63;
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-2477), (int) (byte)63);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-84), (byte)63}, byteArray1);
      assertEquals("0:    iaload\n1:    ireturn\n2:    lstore_0\n", string1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-102), (byte)20, (byte)0, (byte)0}, byteArray0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertNotNull(constantFloat0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-3.0605683E-23F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertArrayEquals(new byte[] {(byte) (-102), (byte)20, (byte)0, (byte)0}, byteArray0);
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = Utility.convertString("putfield");
      assertNotNull(string0);
      assertEquals("putfield", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)69;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-2), 1141);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)69, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    fstore_2\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|[UF]A";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 92, 528);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-68), (byte)115}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), 84);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-68), (byte)115}, byteArray0);
      assertEquals("0:    if_icmpgt\t\t#-17293\n", string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    if_icmpgt\t\t#-17293\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    if_icmpgt\t\t#-17293
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = true;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)28, 248);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)42;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)67;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (int) (byte)42);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)42, (byte)31, (byte)42, (byte)0, (byte)44, (byte)67, (byte)0}, byteArray0);
      assertEquals("0:    aload_0\n1:    lload_1\n2:    aload_0\n3:    nop\n4:    aload_2\n5:    fstore_0\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      try { 
        Utility.typeOfSignature("H4m2~ak>,AR%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H4m2~ak>,AR%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)123}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)123}, byteArray0);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, 87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)100;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)59, (byte)100}, byteArray0);
      assertEquals("$ab$3bd", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)59, (byte)100}, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Utility.decode("4z5~HE:{VC7~|:$7", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("$ab$3bd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$ab$3bd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("|[UF]A", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)124, (byte)91, (byte)85, (byte)70, (byte)93, (byte)65}, byteArray0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte) (-19);
      byteArray1[3] = (byte)30;
      byteArray1[4] = (byte)90;
      byteArray1[5] = (byte)14;
      byteArray1[6] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)30, (int) (byte)51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("|[UF]A", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)124, (byte)91, (byte)85, (byte)70, (byte)93, (byte)65}, byteArray0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)124, (byte)91, (byte)85, (byte)70, (byte)93, (byte)65}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 658, 155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      short short0 = Constants.ANEWARRAY_QUICK;
      assertEquals((short)222, short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-123);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (short)222);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-123), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    i2l\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = Utility.getSignature("r\u0001)8/~");
      assertNotNull(string0);
      assertEquals("Lr\u0001)8/~;", string0);
      
      byte byte0 = Utility.typeOfSignature("Zf");
      assertEquals((byte)4, byte0);
      
      String string1 = Utility.signatureToString("Zf");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("boolean", string1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, (int) (byte) (-60));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), 563);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-31), (byte)0, (byte)42}, byteArray0);
      assertEquals("0:    iinc\t\t%225\t0\n3:    aload_0\n", string0);
      
      String string1 = Utility.format((byte) (-31), 59, false, 'z');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz-31", string1);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte) (-31);
      byteArray1[2] = (byte)42;
      byteArray1[3] = (byte) (-124);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-31), (byte)0, (byte)42}, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-31), (byte)42, (byte) (-124)}, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        Utility.typeOfMethodSignature("$w$l$w$A$yC2$w$l$w$A$yC2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $w$l$w$A$yC2$w$l$w$A$yC2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-103), (byte) (-37), (byte)25, (byte)85, (byte) (-98), (byte) (-119)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YC[;7{sw=,26Re*/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YC[;7{sw=,26Re*_/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 788, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "~PPvex4!`duFfiM";
      byte[] byteArray0 = Utility.decode("~PPvex4!`duFfiM", false);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-127);
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte) (-28);
      byteArray1[5] = (byte) (-116);
      byteArray1[6] = (byte)64;
      byteArray1[7] = (byte) (-103);
      byteArray1[8] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-28), 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    lor
         // 2:    istore_3
         // 3:    lconst_0
         // 4:    <illegal opcode>
         // 5:    f2l
         // 6:    lstore_1
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-52);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), 180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 191, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = Utility.accessToString(7);
      assertNotNull(string0);
      assertEquals("public private protected", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "public private protected";
      stringArray0[1] = "'";
      stringArray0[2] = "public private protected";
      stringArray0[3] = "'";
      stringArray0[4] = "public private protected";
      String string1 = Utility.methodTypeToSignature("'", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(Lpublic;L';Lpublic;L';Lpublic;)L';", string1);
      
      String string2 = Utility.methodSignatureToString("(Lpublic;L';Lpublic;L';Lpublic;)L';", "|", "'", false, (LocalVariableTable) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("' ' |(public arg1, ' arg2, public arg3, ' arg4, public arg5)", string2);
      
      try { 
        Utility.methodSignatureReturnType("XA/fx/$b%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XA/fx/$b%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-59);
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte)83;
      byteArray1[6] = (byte)91;
      byteArray1[7] = (byte) (-59);
      byteArray1[8] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)93, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
