/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:46:01 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(19L);
      int int0 = rationalNumber0.intValue();
      assertEquals(19, int0);
      assertEquals(19.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toString();
      assertEquals("0", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-1));
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.1826909940282349E-7);
      assertEquals(1.1826909862625711E-7, rationalNumber0.doubleValue(), 0.01);
      assertEquals(8455294, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483647", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(388.0001051392703);
      assertEquals(388, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1641L, 1L);
      assertEquals(1641.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(1641, rationalNumber1.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2L), (-2L));
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-2.147483647E9));
      assertEquals((-2.147483647E9), rationalNumber1.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = (-2147483649L);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483649L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483649, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(3298L, 3298L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-3576.04268482945));
      rationalNumber1.toDisplayString();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1, 2147483682L);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1.0);
      String string0 = rationalNumber2.toDisplayString();
      assertEquals("-0", string0);
      
      String string1 = rationalNumber0.toString();
      rationalNumber0.negate();
      rationalNumber0.toDisplayString();
      RationalNumber.valueOf(1);
      String string2 = rationalNumber1.toString();
      assertEquals("-45658913/12768 (-3,576.043)", string2);
      
      RationalNumber rationalNumber4 = new RationalNumber(1, 1431655765);
      String string3 = rationalNumber3.toDisplayString();
      assertTrue(string3.equals((Object)string1));
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(1.0);
      assertEquals((byte)1, rationalNumber5.byteValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483649L), (-2147483649L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483649L));
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(4.656613E-10F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(4.656612875245797E-10, rationalNumber1.doubleValue(), 0.01);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-2147483649L), 1);
      String string0 = rationalNumber2.toString();
      assertEquals("2,147,483,647", string0);
      
      rationalNumber0.floatValue();
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      assertEquals((-1.0F), rationalNumber3.floatValue(), 0.01F);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(7.077323971316218E-8);
      rationalNumber0.longValue();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("-0", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-2147483649L), (-1));
      assertEquals((-2147483647), rationalNumber2.numerator);
      
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(14129634, (-6L));
      assertEquals((-2354939L), rationalNumber3.longValue());
      
      rationalNumber1.negate();
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(2.1474836459525204E9);
      assertEquals(2.147483646E9, rationalNumber4.doubleValue(), 0.01);
      
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(1, 14129634);
      assertEquals(14129634, rationalNumber5.divisor);
      
      RationalNumber rationalNumber6 = RationalNumber.valueOf(1);
      String string1 = rationalNumber6.toString();
      assertEquals("1", string1);
      
      String string2 = rationalNumber1.toString();
      assertEquals("-1/14129634 (-0)", string2);
      
      RationalNumber rationalNumber7 = rationalNumber1.negate();
      RationalNumber rationalNumber8 = new RationalNumber((-4365), 1);
      rationalNumber8.negate();
      String string3 = rationalNumber7.toDisplayString();
      assertEquals("0", string3);
  }
}
