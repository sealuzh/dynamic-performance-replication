/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:23:16 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnMinos;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnMinos_ESTest extends MnMinos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinimumState minimumState0 = new MinimumState(200);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 200);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnMinos mnMinos0 = new MnMinos((FCNBase) null, functionMinimum0, mnStrategy0);
      // Undeclared exception!
      try { 
        mnMinos0.loval(12);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, (FunctionMinimum) null);
      // Undeclared exception!
      try { 
        mnMinos0.upval((-3239));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(979);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, (MnUserTransformation) null);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, 979);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 979);
      // Undeclared exception!
      try { 
        mnMinos0.upval(979);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(271);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 271);
      MnStrategy mnStrategy0 = new MnStrategy(271);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      // Undeclared exception!
      try { 
        mnMinos0.upval(3431);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy(1575);
      mnStrategy0.setGradientNCycles(1575);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, (FunctionMinimum) null, mnStrategy0);
      // Undeclared exception!
      try { 
        mnMinos0.range(1575);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(0);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, (MnUserTransformation) null);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 0.05);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      // Undeclared exception!
      try { 
        mnMinos0.range((-3201), 0.05, (-3201));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, (FunctionMinimum) null);
      // Undeclared exception!
      try { 
        mnMinos0.lower((-2577));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(0);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, (MnUserTransformation) null);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 998.211631349981, (-574));
      functionMinimum0.add(minimumState1);
      // Undeclared exception!
      try { 
        mnMinos0.loval(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(4);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("M@Minos p+rametJr ", 4, 4);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 4);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicVector0.clone();
      mnAlgebraicVector1.toString();
      mnAlgebraicVector0.toString();
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 0.00000 \n", 1491.443810031479, 4);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 4);
      mnAlgebraicVector0.toString();
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 0.0, (-15));
      functionMinimum0.add(minimumState1);
      minimumState1.vec();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.minos(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(4);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("M@Minos p+rametJr ", 4, 4);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 4);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicVector0.clone();
      mnAlgebraicVector1.toString();
      mnAlgebraicVector0.toString();
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 0.00000 \n", 1491.443810031479, 4);
      mnAlgebraicVector1.clone();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 4);
      mnAlgebraicVector0.clone();
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 0.0, (-15));
      functionMinimum0.add(minimumState1);
      functionMinimum0.toString();
      mnAlgebraicVector0.clone();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.lower(1, 0.0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2567.0191412729, 2567.0191412729, 0.0, 2567.0191412729, 2567.0191412729).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(2);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("h[\u0000)vR5+m1LT|z", 4, 4);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      mnAlgebraicVector0.toString();
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 \n", 4, 2567.0191412729);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      functionMinimum0.toString();
      mnUserTransformation0.add("**", 0.0);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, (-15), 2);
      functionMinimum0.add(minimumState1);
      minimumState1.vec();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.range(0, 2567.0191412729);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      MinimumState minimumState0 = new MinimumState(2);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("M@Minos p+rametJr ", 4, 4);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicVector0.clone();
      mnAlgebraicVector1.toString();
      mnAlgebraicVector0.toString();
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 \n", 4, 0.0);
      mnAlgebraicVector1.clone();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      mnAlgebraicVector1.clone();
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 4, 2);
      functionMinimum0.add(minimumState1);
      mnUserTransformation0.fix("M@Minos p+rametJr ");
      minimumState1.vec();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      int int1 = 0;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        mnMinos0.lower(0, 0.0, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      MinimumState minimumState0 = new MinimumState(4);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add(">W';MtXkq6_?Y[Zj", 4);
      mnUserTransformation0.add("MnMinos parameter ", (-1662.5021463222329), (-1662.5021463222329));
      MinimumSeed minimumSeed1 = new MinimumSeed(minimumState0, (MnUserTransformation) null);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-1662.5021463222329));
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      mnAlgebraicVector0.toString();
      MnAlgebraicVector mnAlgebraicVector1 = minimumState0.vec();
      mnAlgebraicVector1.toString();
      mnAlgebraicVector1.toString();
      mnUserTransformation0.add("~\"D5/j.='b", 1491.443810031479, 4);
      MnAlgebraicVector mnAlgebraicVector2 = new MnAlgebraicVector(4);
      MnAlgebraicVector mnAlgebraicVector3 = new MnAlgebraicVector(4);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 4);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, (-391.559102), (-15));
      functionMinimum0.toString();
      minimumState0.vec();
      functionMinimum0.add(minimumState1);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.minos(0, (double) 4);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      int int1 = 2;
      MinimumState minimumState0 = new MinimumState(2);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      functionMinimum0.toString();
      mnUserTransformation0.add("", 0.0);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, (-15), 2);
      functionMinimum0.add(minimumState1);
      minimumState1.vec();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      int int2 = 0;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        mnMinos0.lower(0, 0.0, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2566.523897067893, 2566.523897067893, 0.0, 2566.523897067893, 2566.523897067893).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(2);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("M@MHnos p+rametJr ", 4, 4);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 2566.523897067893);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      mnAlgebraicVector0.toString();
      mnAlgebraicVector0.toString();
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 \n", 4, 2566.523897067893);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      functionMinimum0.toString();
      mnUserTransformation0.add("**", 4);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 4, 2);
      functionMinimum0.add(minimumState1);
      minimumState1.vec();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      mnMinos0.lower(0, 0.0, 2);
      mnMinos0.upper(0, 1333.012);
      mnMinos0.upper(0);
      mnMinos0.minos(0, 0.0, 4);
      // Undeclared exception!
      try { 
        mnMinos0.range(2, (double) 2, (-94));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
