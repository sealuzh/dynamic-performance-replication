/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:43:21 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.text.BreakIterator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.StringCharacterIterator;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("write gzipBytes error");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&v)%U");
      defaultJSONParser0.setDateFormat("d:9!&v)%U");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : d:9!&v)%U
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[c$-");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [c$-
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{<-Ti");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : <pos 1, json : {<-Ti
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ., pos 1, json : ..
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but null, pos 4, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeAccept", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",y7y+F9pg\"");
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ,, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      TreeSet<BreakIterator> treeSet0 = new TreeSet<BreakIterator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) treeSet0, (Object) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual null, pos 0, fieldName []
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+kf");
      IdentityHashMap<JavaBeanDeserializer, Insets> identityHashMap0 = new IdentityHashMap<JavaBeanDeserializer, Insets>();
      defaultJSONParser0.checkMapResolve(identityHashMap0, "+kf");
      assertTrue(identityHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&v)%U");
      defaultJSONParser0.parseExtra("d:9!&v)%U", "d:9!&v)%U");
      defaultJSONParser0.handleResovleTask("d:9!&v)%U");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 4, json : d:9!&v)%U
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+kRf");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "+kRf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+kRf");
      Object object0 = defaultJSONParser0.parse();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+kRf");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&v)%U");
      defaultJSONParser0.parseExtra("d:9!&v)%U", "d:9!&v)%U");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&v)%U");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : d:9!&v)%U
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect float, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",y7y+F9pg\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,y7y+F9pg\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ni5");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : Ni5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",y7y+F9pg\"");
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("D~)nd/J<ZHG", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(106, 106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&v)8U");
      Object object0 = defaultJSONParser0.resolveReference("d:9!&v)8U");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";[D#&QxE,CAgx3{;");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;[D#&QxE,CAgx3{;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$LGXC3\"7qR", parserConfig0, (-986));
      List<ExtraTypeProvider> list0 = new Stack<ExtraTypeProvider>();
      Object object0 = new Object();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{<-Ti]");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : <pos 1, json : {<-Ti]
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]YZv=*P");
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("V", parserConfig0);
      Feature feature0 = Feature.NonStringKeyAsString;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",y7y+F9pg\"");
      Hashtable<HttpCookie, Float> hashtable0 = new Hashtable<HttpCookie, Float>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      defaultJSONParser0.checkMapResolve(hashtable0, dateFormatSymbols0);
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedList<JSONReaderScanner> linkedList0 = new LinkedList<JSONReaderScanner>();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - +, info : pos 4, json : ,y7y+F9pg\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$LGXC3\"7qR");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "{$LGXC3\"7qR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 7, json : {$LGXC3\"7qR
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";[D#uQxE,7mp-gx3{;");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      int int0 = defaultJSONParser1.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&v)%U");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<DefaultJSONParser.ResolveTask> vector0 = new Vector<DefaultJSONParser.ResolveTask>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      StringCharacterIterator stringCharacterIterator0 = defaultJSONParser0.parseObject(class0);
      assertNull(stringCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",y7y+F9pg\"");
      defaultJSONParser0.getSymbolTable();
      String string0 = defaultJSONParser0.getInput();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("list_item_value");
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".L");
      String string0 = defaultJSONParser0.getInput();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[c$-");
      ParserConfig parserConfig0 = new ParserConfig();
      defaultJSONParser0.config = parserConfig0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "[c$-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",y7y+F9pg\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,y7y+F9pg\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.close();
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/Class;");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";[D#&QxE,CAgx3{;");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Object object0 = new Object();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Gs2c94w}([?<^d");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "JBV_*px");
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Gs2c94w}([?<^d
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setResolveStatus(58);
      assertEquals(58, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";[D#uQxE,7mp-gx3{;");
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      LinkedList<ExtraTypeProvider> linkedList0 = new LinkedList<ExtraTypeProvider>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+kRf");
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+kRz");
      Object object0 = defaultJSONParser0.getObject("+kRz");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",y7y+F9pg\"");
      TreeMap<Point, Long> treeMap0 = new TreeMap<Point, Long>();
      Byte byte0 = new Byte((byte)14);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual +
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{M-Ui");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual -
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+kRf");
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",y7y+F9pg\"");
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      defaultJSONParser0.handleResovleTask((Object) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      List<ExtraTypeProvider> list0 = new Stack<ExtraTypeProvider>();
      defaultJSONParser1.setDateFormat("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.accept(1);
      ParseContext parseContext0 = defaultJSONParser1.context;
      Dimension dimension0 = new Dimension();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-4089), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$LGXC3\"7qR");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/Class;", parserConfig0, 639);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) parserConfig0);
      ParserConfig.getGlobalInstance();
      Object object0 = defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[c$-");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/Class;");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (Ljava/lang/Class;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect string", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ni5");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : Ni5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5");
      Stack<DefaultJSONParser.ResolveTask> stack0 = new Stack<DefaultJSONParser.ResolveTask>();
      defaultJSONParser0.parse();
      Class<Short> class0 = Short.TYPE;
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-1236));
      defaultJSONParser1.parse();
      String string0 = defaultJSONParser1.getInput();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1302, 1302);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Insets insets0 = new Insets(1302, 23, (-605), 1302);
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",y7y+F9pg\"");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser0.accept(1, 1);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{M-Ui", parserConfig0, 11);
      defaultJSONParser0.getExtraTypeProviders();
      Object object0 = new Object();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1);
      parserConfig0.putDeserializer(class0, javaBeanDeserializer0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate();
      String string0 = "}7~5?0j\\*oX;j3h";
      // Undeclared exception!
      try { 
        JSON.parseObject("}7~5?0j*oX;j3h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }7~5?0j*oX;j3h
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T,3");
      defaultJSONParser0.parseKey();
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(0, jSONLexer0.pos());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "=[");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask1 = defaultJSONParser0.getLastResolveTask();
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask1);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&vz)%a[U");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      Feature feature0 = Feature.NonStringKeyAsString;
      Locale locale0 = Locale.GERMAN;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "!>[,s#");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F[8)-Net");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      TreeSet<BreakIterator> treeSet0 = new TreeSet<BreakIterator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) treeSet0, (Object) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : F[8)-Net
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Zj*kx;9;mi_u|Qb\"(T");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(list0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Zj*kx;9;mi_u|Qb\"(T
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Gs2c94w}([?<^d");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "Gs2c94w}([?<^d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName Gs2c94w}([?<^d
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".lU5");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : .lU5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.parseObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&v)%U");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("d:9!&v)%U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]''p2TbhJgX~wm;_<TA");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]''p2TbhJgX~wm;_<TA
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&v)%U");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : d:9!&v)%U
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{M-Ui");
      defaultJSONParser0.setContext((Object) "{M-Ui", (Object) "{M-Ui");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{M-Ui", parserConfig0, 0);
      Stack<ExtraTypeProvider> stack0 = new Stack<ExtraTypeProvider>();
      Object object0 = new Object();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((PropertyProcessable) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$LGXC3\"7qR", parserConfig0, 11);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d:9!&v)%U");
      defaultJSONParser0.getObject("([C)J");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("d:9!&v)%U");
      Type[] typeArray0 = new Type[2];
      Class<Double> class0 = Double.TYPE;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support type com.alibaba.fastjson.util.ParameterizedTypeImpl@4473b992
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";[D#&QxE,CAgx3{;");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ;, pos 1, json : ;[D#&QxE,CAgx3{;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.");
      BigDecimal bigDecimal0 = (BigDecimal)defaultJSONParser0.parse();
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{M-Ui");
      defaultJSONParser0.setContext((Object) "{M-Ui", (Object) "{M-Ui");
      defaultJSONParser0.resolveReference("{M-Ui");
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      Vector<DefaultJSONParser.ResolveTask> vector0 = new Vector<DefaultJSONParser.ResolveTask>();
      PageAttributes pageAttributes0 = new PageAttributes();
      defaultJSONParser0.resolveReference("3u,");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[o5`34", parserConfig0, 1);
      JSON.DEFAULT_PARSER_FEATURE = 0;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [o5`34
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$LGXC3\"7qR", parserConfig0, (-27));
      Stack<ExtraTypeProvider> stack0 = new Stack<ExtraTypeProvider>();
      Object object0 = new Object();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) bufferCapabilities_FlipContents0, (Object) null);
      Feature feature0 = Feature.NonStringKeyAsString;
      ParseContext parseContext2 = defaultJSONParser0.setContext((Object) "5", (Object) parseContext1);
      parseContext2.toString();
      PageAttributes pageAttributes0 = new PageAttributes();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      defaultJSONParser0.setContext((ParseContext) null, (Object) "$.$", (Object) mapDeserializer0);
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getObject("$.$");
      Object object0 = defaultJSONParser0.parse();
      assertEquals(5, object0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(J )K\"6", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      parserConfig0.addAccept("$.org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@27f97b39.$");
      defaultJSONParser0.resolveReference(", fieldName ");
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getResolveStatus();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType(", fieldName ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - J, info : pos 1, json : (J )K\"6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Object object0 = defaultJSONParser0.parseArrayWithType(class1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parse();
      defaultJSONParser0.getDateFormat();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      defaultJSONParser0.parseObject(class0);
      Vector<DateFormatSymbols> vector0 = new Vector<DateFormatSymbols>();
      defaultJSONParser0.getDateFormat();
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class1, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{M-Ui");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual -
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) bufferCapabilities_FlipContents0, (Object) null);
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.setContext((Object) null, (Object) parseContext1);
      Locale locale0 = Locale.GERMAN;
      defaultJSONParser0.setContext(parseContext1, (Object) bufferCapabilities0, (Object) null);
      parseContext1.toString();
      PageAttributes pageAttributes0 = new PageAttributes();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      defaultJSONParser0.setContext((Object) null, (Object) bufferCapabilities0);
      defaultJSONParser0.getDateFormat();
      Object object0 = defaultJSONParser0.resolveReference("$");
      assertSame(object0, bufferCapabilities_FlipContents0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{,L2XCq\"nqR", parserConfig0, (-27));
      Stack<ExtraTypeProvider> stack0 = new Stack<ExtraTypeProvider>();
      Object object0 = new Object();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
