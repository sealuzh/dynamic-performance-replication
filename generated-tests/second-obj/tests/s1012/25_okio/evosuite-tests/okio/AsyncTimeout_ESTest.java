/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:44:50 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      Pipe pipe0 = new Pipe(10000000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSource0.buffer();
      HashingSource.sha256(realBufferedSource0);
      asyncTimeout0.source(pipe_PipeSource0);
      Sink sink0 = asyncTimeout0.sink(realBufferedSource0.buffer);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      asyncTimeout0.deadline(10000000000000L, timeUnit0);
      asyncTimeout0.enter();
      asyncTimeout0.sink((Sink) null);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      mockIOException0.getCause();
      IOException iOException1 = asyncTimeout0.exit(iOException0);
      asyncTimeout0.newTimeoutException(iOException1);
      MockIOException mockIOException1 = new MockIOException("<2Y");
      asyncTimeout0.exit((IOException) mockIOException1);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.exit(iOException0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      asyncTimeout0.exit();
      MockIOException mockIOException0 = new MockIOException(")");
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout0.exit((IOException) mockIOException1);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.exit(iOException0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.timeout(3147L, timeUnit0);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(10000000000000L, timeUnit0);
      asyncTimeout0.enter();
      asyncTimeout0.sink((Sink) null);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(mockIOException0);
      mockIOException0.getCause();
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout0.exit((IOException) interruptedIOException0);
      asyncTimeout0.newTimeoutException(interruptedIOException1);
      MockIOException mockIOException1 = new MockIOException("AsyncTimeout.source(");
      mockIOException0.printStackTrace();
      MockIOException mockIOException2 = new MockIOException((Throwable) null);
      InterruptedIOException interruptedIOException2 = (InterruptedIOException)asyncTimeout1.newTimeoutException(mockIOException2);
      asyncTimeout1.enter();
      asyncTimeout1.exit((IOException) interruptedIOException2);
      asyncTimeout1.enter();
      AsyncTimeout asyncTimeout2 = new AsyncTimeout();
      AsyncTimeout asyncTimeout3 = AsyncTimeout.head;
      asyncTimeout3.timedOut();
  }
}
