/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 08:27:28 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 3471;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3471, (-1.0));
      int int1 = 459;
      Matrix matrix0 = Matrix.constant(3471, 459, (-1.0));
      columnMajorSparseMatrix0.equals((Object) matrix0);
      // Undeclared exception!
      columnMajorSparseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(7);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZero(matrixProcedure0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      columnMajorSparseMatrix0.transformRow(2, vectorFunction0);
      columnMajorSparseMatrix0.blank();
      SparseMatrix.diagonal(3321, 1511.967042645555);
      // Undeclared exception!
      try { 
        Matrix.fromCSV("org.la4j.Matrices$13");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(10, 93.2367);
      Matrix matrix0 = denseMatrix0.transpose();
      DecimalFormat decimalFormat0 = new DecimalFormat("Illegal");
      decimalFormat0.format(2815.916108662381);
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      matrix0.columnMajorIterator();
      matrix0.toColumnVector();
      int int0 = 711;
      Matrix.unit(711, 4);
      denseMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      matrix0.spliterator();
      matrix0.getColumn(2170);
      matrix0.toMatrixMarket();
      matrix0.minInRow((-1));
      matrix0.euclideanNorm();
      double double0 = matrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      
      matrix0.iterator();
      double double1 = matrix0.norm();
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      int int0 = (-2212);
      denseMatrix0.iteratorOfRow((-2212));
      DenseVector denseVector0 = DenseVector.fromCSV("");
      denseVector0.multiply((Matrix) denseMatrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn((-2212), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2264;
      DenseMatrix.constant(2264, 773, (-2659.4253237275852));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.zero(9);
      denseVector0.iterator();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      double double0 = matrix0.diagonalProduct();
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      Matrix matrix1 = matrix0.blankOfShape(9, 9);
      SparseVector sparseVector0 = SparseVector.zero(7, 9);
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 9;
      doubleArray2[1] = (double) 9;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      Matrix.from2DArray(doubleArray0);
      matrix1.multiply((Vector) denseVector0);
      double double1 = matrix0.trace();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Matrix matrix2 = Matrix.constant(9, 32, 9);
      assertEquals(32, matrix2.columns());
      assertEquals(9, matrix2.rows());
      
      Matrix matrix3 = Matrix.identity(7);
      assertEquals(7, matrix3.rows());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, (-500.83674827));
      int int0 = rowMajorSparseMatrix0.rank();
      assertEquals(6, int0);
      
      double[][] doubleArray0 = new double[0][0];
      Matrix.from2DArray(doubleArray0);
      boolean boolean0 = rowMajorSparseMatrix0.equals((Object) "org.la4j.iterator.CursorToVectorIterator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      Integer integer0 = new Integer(1);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(integer0, biFunction0);
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 13);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.copy();
      matrix0.removeLastRow();
      matrix1.toCSV();
      matrix1.setAll((-1226.787325));
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix1.insertColumn(1, sparseVector0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      matrix0.fold(matrixAccumulator0);
      cRSMatrix0.setAll(1715.21383842);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Matrix matrix0 = Matrix.from1DArray(0, 0, doubleArray0);
      matrix0.rank();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.rotate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.iteratorOfColumn(4);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateAt(0, 31, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(3413, 2787, 3413);
      denseMatrix0.equals((Object) null);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.ensureApplicableTo((Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(6642, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertColumn(6642, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6641
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1560, 547);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(547, 637.5566626948857);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateColumn(43, vectorFunction0);
      assertEquals(547, matrix0.columns());
      assertEquals(1560, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(16, 16);
      columnMajorSparseMatrix0.columnMajorIterator();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(16, 16);
      columnMajorSparseMatrix0.equals((Matrix) denseMatrix0, 662.2618819267232);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((-2966.845561561473));
      matrix0.power(913);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(913, 913, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 4055.7513;
      doubleArray2[1] = (-3016.21399589577);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-3016.21399589577);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1793.8);
      doubleArray4[3] = (-3016.21399589577);
      doubleArray4[4] = (-3016.21399589577);
      doubleArray4[5] = 4055.7513;
      doubleArray4[6] = (-3016.21399589577);
      doubleArray4[7] = 4055.7513;
      doubleArray4[8] = 4055.7513;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 4055.7513;
      doubleArray5[1] = 4055.7513;
      doubleArray5[2] = (-1793.8);
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, (-2146040445), (-2146040445), (-2146040445), 3, 3, (-2146043349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 3x-2146043349
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(941, 926);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(941, 1.0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 941, 7, 934, 941, 7, 151);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 934, 941
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2007.65;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2007.65;
      doubleArray2[1] = 2007.65;
      doubleArray2[2] = 2007.65;
      doubleArray2[3] = 2007.65;
      doubleArray2[4] = 2007.65;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 2007.65;
      doubleArray3[1] = 2007.65;
      doubleArray3[2] = 2007.65;
      doubleArray3[3] = 2007.65;
      doubleArray3[4] = 2007.65;
      doubleArray3[5] = 2007.65;
      doubleArray3[6] = 2007.65;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapColumns(5, 4737);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 4.0;
      doubleArray2[1] = (-871.52);
      doubleArray2[2] = (-94.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-1986.05981817313);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1050.07;
      doubleArray3[1] = (-871.52);
      doubleArray3[2] = 1172.521307882;
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 4.0;
      doubleArray4[1] = (-871.52);
      doubleArray4[2] = (-1986.05981817313);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-1986.05981817313);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 1172.521307882;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-871.52);
      doubleArray5[3] = 4.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 4.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 1740.132;
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.multiply(4105.903828486915);
      assertEquals(0, matrix0.columns());
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(17);
      int int0 = matrix0.columns();
      assertEquals(17, int0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      LinearSystemSolver linearSystemSolver0 = matrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(17, linearSystemSolver0.equations());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1165, 1165);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformColumn(528, vectorFunction0);
      // Undeclared exception!
      matrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3451.2002);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 151.251285;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1918.4959);
      doubleArray1[6] = 588.516;
      doubleArray1[7] = 66.49902892;
      doubleArray1[8] = 3059.13;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 151.251285;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 588.516;
      doubleArray2[4] = (-3451.2002);
      doubleArray2[5] = 1960.5609;
      doubleArray2[6] = 66.49902892;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.setColumn(4, 500.83674827);
      assertEquals(2, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = columnMajorSparseMatrix0.add((double) 0);
      Matrix matrix1 = Matrix.identity(1313);
      boolean boolean0 = matrix0.equals(matrix1, 0.0);
      assertFalse(boolean0);
      assertEquals(1313, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(2370);
      Matrix matrix0 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertColumn(1982, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2370. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-38.0);
      doubleArray1[1] = 84.6880138791173;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2498.5846305140008);
      doubleArray1[4] = (-2572.88152);
      doubleArray1[5] = 4.0;
      doubleArray1[6] = 4.0;
      doubleArray1[7] = 221.0;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.swapColumns(2055, 2055);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-478.98179571842);
      doubleArray1[1] = (-609.0);
      doubleArray1[2] = (-387.9524137873986);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-478.98179571842);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-478.98179571842);
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (-387.9524137873986);
      doubleArray2[7] = (-478.98179571842);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-478.98179571842);
      doubleArray3[1] = (-387.9524137873986);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-478.98179571842);
      doubleArray4[1] = (-387.9524137873986);
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (-609.0);
      doubleArray6[2] = (-478.98179571842);
      doubleArray6[3] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 1.0;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.rotate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, 6);
      Matrix.zero(6, 6);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfRows(6);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(2440);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, 4);
      columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = columnMajorSparseMatrix0.divide(4);
      columnMajorSparseMatrix0.product();
      int int1 = 9;
      RowMajorSparseMatrix.diagonal(9, 9);
      columnMajorSparseMatrix0.equals((Object) rowMajorSparseMatrix0);
      int int2 = (-1078);
      // Undeclared exception!
      try { 
        matrix0.blankOfShape((-1078), (-1078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1078x-1078
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(937, 942);
      double double0 = denseMatrix0.maxInRow(2);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, denseMatrix0);
      matrix0.columns();
      Matrix matrix1 = matrix0.kroneckerProduct(columnMajorSparseMatrix0);
      assertEquals(1.0, matrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 3489;
      SparseVector sparseVector0 = SparseVector.zero(3489);
      DenseVector denseVector0 = DenseVector.zero(1809);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      DenseVector denseVector1 = DenseVector.constant(1809, 1843);
      // Undeclared exception!
      matrix0.insertRow(1843, denseVector1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) 616;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) 48;
      Matrix matrix0 = Matrix.from1DArray(616, 48, doubleArray0);
      MockRandom mockRandom0 = new MockRandom(48);
      DenseVector denseVector0 = DenseVector.random(48, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.insertRow(0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(4, 4);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.removeRow(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      matrix0.toColumnVector();
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1, 1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) null);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 1953, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1953 rows and 1 cols at 0, 0 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(37);
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      matrix0.iterator();
      Matrix matrix1 = matrix0.hadamardProduct(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix1.removeColumn((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 172.99108;
      doubleArray1[1] = 1383.591970349444;
      doubleArray1[2] = 944.847631432;
      doubleArray1[3] = 0.9984922999086047;
      doubleArray1[4] = 1924.625843;
      doubleArray1[5] = 16.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1924.625843;
      doubleArray2[1] = 16.0;
      doubleArray2[2] = 16.0;
      doubleArray2[3] = 1383.591970349444;
      doubleArray2[4] = 944.847631432;
      doubleArray2[5] = 16.0;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.columns();
      matrix0.iteratorOfRow(6);
      matrix0.euclideanNorm();
      int int0 = (-2106);
      // Undeclared exception!
      try { 
        matrix0.power((-2106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2106.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-2663.0);
      doubleArray1[4] = 1563.84331489208;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = (-505.2);
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 16.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 16.0;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1054;
      intArray0[1] = 9;
      intArray0[2] = 1712;
      intArray0[3] = 935;
      intArray0[4] = 16;
      intArray0[5] = 924;
      intArray0[6] = (-850);
      intArray0[7] = 404;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(795, 1133, 0.0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 795;
      doubleArray2[2] = (double) 1133;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 1133;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 151;
      doubleArray3[4] = (double) 795;
      doubleArray3[5] = (double) 151;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 795;
      doubleArray4[1] = (double) 1133;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 795;
      doubleArray5[1] = (double) 1133;
      doubleArray5[2] = (double) 795;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = (double) 1133;
      doubleArray5[5] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (double) 151;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (double) 1133;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (double) 795;
      doubleArray7[1] = (-1814.84735694);
      doubleArray7[2] = (double) 795;
      doubleArray7[3] = 90.7;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = (-1615.598131);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (double) 1133;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = (-1615.598131);
      doubleArray9[1] = (-1615.598131);
      doubleArray9[2] = (double) 1133;
      doubleArray9[3] = 90.7;
      doubleArray0[8] = doubleArray9;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.zero(151, (-956));
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow(151, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 9. Should be: 1133.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-1273.16665060965);
      doubleArray0[2] = (-1245.8512799905);
      doubleArray0[3] = (-1336.6973506174);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 884.13;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      String string0 = matrix0.mkString(numberFormat0);
      assertEquals("\u221E -1,273.167 -1,245.851 -1,336.697 0 884.13\n", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 2195;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 2195;
      doubleArray0[3] = (double) 10;
      DenseMatrix.from1DArray(2195, 10, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(10);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice(10, 10, 2, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [10..2][10..10].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      mockRandom0.nextInt(17);
      mockRandom0.ints((long) 0);
      mockRandom0.longs();
      denseMatrix0.toBinary();
      int int1 = (-1426);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.transformRow((-1426), vectorFunction0);
      mockRandom0.nextBoolean();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        Matrix.from1DArray(0, (-1754), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1754
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1380.7);
      doubleArray1[1] = (-2273.5929);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1380.7);
      doubleArray2[1] = (-1380.7);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1380.7);
      doubleArray3[1] = (-2273.5929);
      doubleArray3[2] = (-1380.7);
      doubleArray3[3] = (-2273.5929);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-2273.5929);
      doubleArray4[1] = (-1380.7);
      doubleArray4[2] = (-2273.5929);
      doubleArray4[3] = (-1380.7);
      doubleArray4[4] = (-2273.5929);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-1380.7);
      doubleArray5[2] = (-2273.5929);
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.add((-1380.7));
      assertEquals(2, matrix0.columns());
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 17;
      double double0 = 1.0;
      Matrix matrix0 = Matrix.constant(17, 17, 1.0);
      matrix0.blankOfShape(17, 17);
      int int1 = 4038;
      matrix0.sum();
      Matrix matrix1 = matrix0.copyOfColumns(4038);
      // Undeclared exception!
      matrix1.multiply((double) 4038);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      Matrix matrix0 = Matrix.from1DArray(8, 8, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.copyOfColumns((-3187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 8x-3187
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 2;
      Matrix matrix0 = Matrix.identity(2);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int1 = 940;
      int int2 = 2;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, 940, 2, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 940, 2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(695, (-1.0));
      Matrix matrix0 = denseVector0.toRowMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1661, 1126, 2000);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2000;
      doubleArray2[1] = (double) 2000;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (double) 1126;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (double) 1126;
      doubleArray2[6] = (double) 695;
      doubleArray2[7] = (double) 2000;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 695;
      doubleArray3[1] = (double) 2000;
      doubleArray3[2] = (double) 2000;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, (-1833), 1661, 1403, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1833, 1661
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(768, 0.0);
      Matrix matrix0 = columnMajorSparseMatrix0.blankOfShape(768, 441);
      Matrix.constant(749, 1514, 0.0);
      Matrix.identity(1993);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 441, 768);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 441 rows and 768 cols at 0, 0 in a 768x441 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("      ");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 261.3933934222592;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-397.67097609685334);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-397.67097609685334);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 261.3933934222592;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = (-397.67097609685334);
      doubleArray2[5] = (-397.67097609685334);
      doubleArray2[6] = 261.3933934222592;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-397.67097609685334);
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = 261.3933934222592;
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = (-397.67097609685334);
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-397.67097609685334);
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 261.3933934222592;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = (-397.67097609685334);
      doubleArray5[5] = 428.29373;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = 0.0;
      doubleArray0[5] = doubleArray6;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      assertSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 10;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(10, 10);
      Matrix matrix0 = denseMatrix0.copy();
      matrix0.toRowMajorSparseMatrix();
      denseMatrix0.shuffle();
      int int1 = 2715;
      // Undeclared exception!
      try { 
        denseMatrix0.slice((-2084322363), 1926, 2715, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-2084322363..2715][1926..10].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-790.875949);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.sum();
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.columnMajorIterator();
      Matrix matrix1 = matrix0.shuffle();
      int int0 = 2488;
      // Undeclared exception!
      try { 
        matrix1.iteratorOfRow(2488);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2488
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1719, 1719);
      int int0 = (-54);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow((-54), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1718
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1000, 1000, 1000);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(1000, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      Matrix.diagonal(0, 117.34557625132);
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 117.34557625132;
      doubleArray1[2] = 117.34557625132;
      doubleArray1[3] = 117.34557625132;
      doubleArray1[4] = 117.34557625132;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 1124;
      Matrix matrix0 = Matrix.identity(1124);
      // Undeclared exception!
      matrix0.product();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 8;
      DenseVector denseVector0 = DenseVector.zero(8);
      denseVector0.iterator();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      matrix0.diagonalProduct();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      int int1 = 669;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.blankOfShape(669, 8);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 669;
      doubleArray2[1] = (double) 8;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).fail("Illegal");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 4.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 968.7432;
      doubleArray2[5] = 869.1632054682798;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 869.1632054682798;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 504.63605;
      doubleArray3[4] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 869.1632054682798;
      doubleArray4[1] = 3047.136489;
      doubleArray4[2] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 869.1632054682798;
      doubleArray5[1] = 968.7432;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 4.0;
      doubleArray5[4] = (-836.2);
      doubleArray5[5] = 4.0;
      doubleArray5[6] = 1.0;
      doubleArray5[7] = 4.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 3047.136489;
      doubleArray6[1] = 869.1632054682798;
      doubleArray6[2] = 504.63605;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = (-836.2);
      doubleArray6[5] = 4.0;
      doubleArray6[6] = 968.7432;
      doubleArray6[7] = (-1084.8589661391657);
      doubleArray6[8] = 968.7432;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double double0 = denseMatrix0.minInRow(2607);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 37;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 37;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(37, 37, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.toMatrixMarket();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 9;
      MockRandom mockRandom0 = new MockRandom(9);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(9, mockRandom0);
      Matrix matrix0 = denseMatrix0.removeLastColumn();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      denseMatrix0.sum();
      // Undeclared exception!
      try { 
        matrix0.subtract((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 9x8 does not equal to 9x9.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 197;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 197);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Matrix matrix1 = matrix0.subtract((Matrix) rowMajorSparseMatrix0);
      matrix1.sum();
      DecimalFormat decimalFormat0 = new DecimalFormat("Cv{ClMHa}TAFgb@6");
      NumberFormat.getPercentInstance();
      Locale locale0 = Locale.CHINESE;
      NumberFormat.getNumberInstance(locale0);
      // Undeclared exception!
      matrix0.mkString((NumberFormat) decimalFormat0, "NO_PIVOT_GAUSS", ")H8:N-[");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 487.069182953011;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      double double0 = (-1132.594441350101);
      doubleArray1[5] = (-1132.594441350101);
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      matrix0.removeLastRow();
      int int0 = 3;
      // Undeclared exception!
      try { 
        matrix0.add((Matrix) rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 6x1 does not equal to 1x6.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(5, 532.773308);
      Matrix matrix0 = denseVector0.toRowMatrix();
      double double0 = matrix0.max();
      assertEquals(532.773308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1596.9452976949801;
      doubleArray1[2] = (-966.0);
      doubleArray1[3] = 433.1961;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-966.0);
      doubleArray2[2] = 433.1961;
      doubleArray2[3] = 3733.8;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      String string0 = matrix0.toString();
      assertEquals("-1.000 1596.945 -966.000  433.196\n-1.000 -966.000  433.196 3733.800\n", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3);
      Matrix matrix0 = rowMajorSparseMatrix0.copy();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix1 = rowMajorSparseMatrix0.transform(matrixFunction0);
      double double0 = rowMajorSparseMatrix0.trace();
      assertEquals(0.0, double0, 0.01);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      matrix1.withSolver(linearAlgebra_SolverFactory0);
      assertTrue(matrix1.equals((Object)matrix0));
      
      rowMajorSparseMatrix0.rows();
      assertNotSame(rowMajorSparseMatrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.9984922999086047;
      doubleArray1[4] = (-52.0);
      doubleArray1[5] = 1355.45248333;
      doubleArray1[6] = (-2320.2167511);
      doubleArray1[7] = 204.32232182782;
      doubleArray1[8] = 2.22416195803099E-11;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1355.45248333;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 907.411;
      doubleArray4[1] = (-52.0);
      doubleArray4[2] = 204.32232182782;
      doubleArray4[3] = 16.0;
      doubleArray4[4] = (-52.0);
      doubleArray4[5] = (-2320.2167511);
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-1706.3662944920222);
      doubleArray5[1] = 2402.234317;
      doubleArray5[2] = 1355.45248333;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (-52.0);
      doubleArray7[1] = 204.32232182782;
      doubleArray7[2] = 1355.45248333;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 1.0;
      doubleArray8[1] = 16.0;
      doubleArray8[2] = (-2320.2167511);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = (-1706.3662944920222);
      doubleArray0[8] = doubleArray9;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(919, 2, mockRandom0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      double double0 = matrix0.norm();
      assertEquals(919, matrix0.rows());
      assertEquals(22.8681000522562, double0, 0.01);
      assertEquals(2, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom((-315L));
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(5, 1.0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      matrix0.rank();
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0L, 1.0, (-1046.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 1453;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1453);
      Matrix matrix0 = columnMajorSparseMatrix0.add((double) 1453);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1453;
      doubleArray0[1] = (double) 1453;
      doubleArray0[2] = (double) 1453;
      doubleArray0[3] = (double) 1453;
      doubleArray0[4] = (double) 1453;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insertRow(1453, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1452
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(9, 48);
      DenseMatrix denseMatrix1 = DenseMatrix.identity(9);
      denseMatrix0.insert((Matrix) denseMatrix1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.transformRow(48, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 816;
      Matrix matrix0 = Matrix.constant(666, 816, 4100.3);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(666, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      matrix0.insert((Matrix) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(919, 2, mockRandom0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      rowMajorSparseMatrix0.divide(603.0);
      rowMajorSparseMatrix0.columnMajorIterator();
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = 603.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 603.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 8;
      doubleArray3[1] = 603.0;
      doubleArray3[2] = 603.0;
      doubleArray3[3] = (double) 8;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 8;
      doubleArray4[1] = (double) 8;
      doubleArray4[2] = (double) 8;
      doubleArray4[3] = (double) 8;
      doubleArray4[4] = (double) 8;
      doubleArray4[5] = (double) 8;
      doubleArray4[6] = (double) 8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 603.0;
      doubleArray5[1] = 603.0;
      doubleArray5[2] = 603.0;
      doubleArray5[3] = (double) 8;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (double) 8;
      doubleArray6[1] = 603.0;
      doubleArray6[2] = (double) 8;
      doubleArray6[3] = 603.0;
      doubleArray6[4] = (double) 8;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 603.0;
      doubleArray7[1] = 603.0;
      doubleArray7[2] = 603.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = 603.0;
      doubleArray8[1] = 603.0;
      doubleArray8[2] = (double) 8;
      doubleArray8[3] = (double) 8;
      doubleArray8[4] = (double) 8;
      doubleArray8[5] = 603.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = 1.0;
      doubleArray9[1] = (double) 8;
      doubleArray9[2] = (double) 8;
      doubleArray9[3] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = doubleArray9;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(2, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(9, 9);
      matrix0.removeFirstColumn();
      matrix0.toBinary();
      Matrix matrix1 = matrix0.copyOfRows(1931);
      matrix0.removeLastRow();
      matrix1.iteratorOfColumn(1931);
      int int0 = (-1421);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 9, (-1421), 1931, 1931, (-1421), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1421x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 7;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 7);
      Matrix matrix0 = Matrix.random(7, 7, mockRandom0);
      matrix0.equals((Object) mockRandom0);
      String string0 = "cb>|'";
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("cb>|'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"cb>|'\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(32, 32);
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow((-696));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..31
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-376.5737744499808);
      doubleArray1[1] = 4.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-628.713808946024);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1915.43132285);
      doubleArray1[7] = 734.89581;
      doubleArray1[8] = 999.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(8, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 4;
      int int1 = 4696;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4, 4696);
      int int2 = 91;
      SparseMatrix.diagonal(1819, (-3569.978));
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      sparseMatrix0.swapRows(91, 91);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      sparseMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(6);
      cRSMatrix0.toBinary();
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      
      cRSMatrix0.swapRows(6, 6);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom(3281L);
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.random(4, 4, mockRandom0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      int int1 = 8;
      matrix0.multiplyByItsTranspose();
      denseMatrix0.infinityNorm();
      // Undeclared exception!
      try { 
        matrix0.updateColumn(8, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 17;
      DenseMatrix.fromCSV("   ");
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("   ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(9, 9, 9);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(1.0);
      int int0 = (-942);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateRow((-942), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-942' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(68, 68);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.identity(68);
      boolean boolean0 = columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      assertFalse(boolean0);
      
      SparseMatrix sparseMatrix0 = columnMajorSparseMatrix1.toSparseMatrix();
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(63, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 263;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(263, 263);
      int int1 = 1932;
      columnMajorSparseMatrix0.blankOfColumns(1932);
      columnMajorSparseMatrix0.iteratorOrNonZeroColumns();
      // Undeclared exception!
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 16;
      Matrix matrix0 = Matrix.identity(16);
      int int1 = (-1178);
      // Undeclared exception!
      try { 
        matrix0.get((-1178), (-1178));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1178' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.nextFloat();
      Matrix matrix0 = Matrix.randomSymmetric(37, mockRandom0);
      assertEquals(37, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 37;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(37, 2.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      Matrix.identity(37);
      denseMatrix0.manhattanNorm();
      // Undeclared exception!
      denseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-870.764359377);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-870.764359377);
      doubleArray2[1] = (-870.764359377);
      doubleArray2[2] = (-870.764359377);
      doubleArray2[3] = (-870.764359377);
      doubleArray2[4] = (-870.764359377);
      doubleArray2[5] = (-870.764359377);
      doubleArray2[6] = (-870.764359377);
      doubleArray2[7] = (-870.764359377);
      doubleArray2[8] = (-870.764359377);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-870.764359377);
      doubleArray3[1] = (-870.764359377);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-870.764359377);
      doubleArray4[1] = (-870.764359377);
      doubleArray4[2] = (-870.764359377);
      doubleArray4[3] = (-870.764359377);
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-3795.218164941);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-3795.218164941);
      doubleArray2[2] = (-3795.218164941);
      doubleArray2[3] = (-3795.218164941);
      doubleArray2[4] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-3795.218164941);
      doubleArray3[2] = 1513.88;
      doubleArray3[3] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 663.2618819267232;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = (-3795.218164941);
      doubleArray4[6] = (-3795.218164941);
      doubleArray4[7] = 1513.88;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 1513.88;
      doubleArray5[1] = 1513.88;
      doubleArray5[2] = (-3795.218164941);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-3795.218164941);
      doubleArray6[1] = 663.2618819267232;
      doubleArray6[2] = 3.336242937046485E-11;
      doubleArray6[3] = 663.2618819267232;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-3795.218164941);
      doubleArray7[1] = 3.336242937046485E-11;
      doubleArray7[2] = (-3795.218164941);
      doubleArray7[3] = (-970.847279);
      doubleArray7[4] = 0.75;
      doubleArray0[6] = doubleArray7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.diagonal((-2781), 2493.312);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 64;
      MockRandom mockRandom0 = new MockRandom(64);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(64, 0.0, (Random) mockRandom0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      // Undeclared exception!
      sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 454;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(454);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInRow(454);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(2360);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.setRow(3452, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, 1);
      Matrix matrix0 = columnMajorSparseMatrix0.subtract(4373.4012586);
      matrix0.mkString((String) null, (String) null);
      matrix0.hashCode();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.transformColumn(1, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      // Undeclared exception!
      try { 
        Matrix.unit(1886, (-746));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      matrix0.toCSV();
      matrix0.rotate();
      denseMatrix0.toColumnMajorSparseMatrix();
      matrix0.equals((Object) denseMatrix0);
      denseMatrix0.power(8);
      Matrix matrix1 = denseMatrix0.shuffle();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      matrix1.hashCode();
      matrix1.toString();
      // Undeclared exception!
      try { 
        matrix1.removeColumn((-926));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(856);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn((-514));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-514' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Matrix.identity(0);
      Matrix matrix0 = Matrix.identity(0);
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 1514;
      int int1 = 0;
      Matrix matrix0 = Matrix.constant(1514, 0, 1514);
      // Undeclared exception!
      try { 
        matrix0.setColumn(0, (double) 1514);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DenseMatrix.constant(2551, 37, 37);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 1000;
      int int1 = (-1666);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(1000, (-1666), (-626));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1000x-1666
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 691;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 691;
      DenseMatrix.from1DArray(691, 691, doubleArray0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int1 = (-2035);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray((-2035), 691, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2035x691
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Matrix matrix0 = Matrix.from1DArray(3761, 3761, (double[]) null);
      Matrix matrix1 = matrix0.copyOfShape(0, 3761);
      Matrix matrix2 = matrix1.blankOfRows(32);
      assertEquals(32, matrix2.rows());
      assertEquals(3761, matrix2.columns());
      
      matrix1.swapColumns(0, 0);
      assertEquals(3761, matrix0.columns());
      assertEquals(3761, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 1143;
      int int1 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1143, 1143, 10);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1144' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1235.8064010165547);
      doubleArray0[2] = 2627.517766956355;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      CompressedVector compressedVector0 = (CompressedVector)matrix0.toRowVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(17, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-221.63325);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-221.63325);
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(1, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.rows());
      
      denseMatrix0.minInColumn(6);
      assertEquals(0, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(0);
      Matrix matrix1 = matrix0.blankOfColumns(0);
      assertEquals(0, matrix0.rows());
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero(132, (-1451));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 756;
      MockRandom mockRandom0 = new MockRandom(754L);
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(756, (-128.4698835793), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -73425163.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(6, 6);
      Matrix.zero(6, 6);
      int int0 = new Integer(6);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 425;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(425, 425);
      denseMatrix0.trace();
      // Undeclared exception!
      denseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 755;
      MockRandom mockRandom0 = new MockRandom(755);
      int int1 = 8;
      mockRandom0.ints(8, 755);
      // Undeclared exception!
      Matrix.random(755, 755, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 2;
      DenseVector denseVector0 = DenseVector.zero(2);
      denseVector0.toDiagonalMatrix();
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) null, denseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("=eBr,8rR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 17;
      SparseVector.zero(17);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      String string0 = "wbX*";
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("wbX*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("         ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.identity((-1993));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1288.14449910338;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-1075.346939);
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1288.14449910338;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1288.14449910338;
      doubleArray4[3] = (-1075.346939);
      doubleArray4[4] = 1.0;
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-1075.346939);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (-1389.096);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray6[5] = (-1.0);
      doubleArray6[6] = 1.0;
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 15;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(15, 3324.89);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      Matrix matrix1 = columnMajorSparseMatrix0.removeFirstRow();
      Matrix matrix2 = matrix1.removeFirstRow();
      matrix2.iterator();
      Matrix.zero(15, 2239);
      matrix0.maxInRow(12);
      columnMajorSparseMatrix0.trace();
      columnMajorSparseMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.determinant();
      matrix0.update(matrixFunction0);
  }
}
