/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:49:39 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-]", (-2656));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      try { 
        Parser.parse("|)\"k} 3*Pm5\"*", 3912);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      Regexp regexp0 = Parser.parse("&.=", (-772));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "{?P";
      int int0 = (-4415);
      try { 
        Parser.parse("{?P", (-4415));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Parser.parse("*oSx$jS9fLD", 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 2480;
      try { 
        Parser.parse("m+)|V400", 2480);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = Parser.parse("\"", 5);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp1.flags = 52;
      Regexp[] regexpArray0 = new Regexp[24];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[6] = regexp0;
      regexpArray0[8] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-17), 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "+2nY[x";
      try { 
        Parser.parse("+2nY[x", 292);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "";
      int int0 = 57;
      try { 
        Parser.parse("(q", 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = (-483);
      try { 
        Parser.parse("[:-", (-483));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        Parser.parse(".(?P<(?WP", 1529);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?WP`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Parser parser0 = new Parser("9.", 6464);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("9.", 6464);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[5] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[6] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 6464, 2323);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[10];
      try { 
        Parser.parse("'):OvWo/kK", 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "\\C";
      Regexp regexp0 = Parser.parse("C", 972);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int0 = 4;
      int int1 = (-2226);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("(?P<", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op1);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("PP@$", (-772));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-772), (-18));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -772
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^0", 43065);
      assertNotNull(regexp0);
      
      int int0 = 54;
      Parser parser0 = new Parser("^0", 54);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 43065, 124);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.name = "Diacritic";
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("8^Zd", (-475));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 1603;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-5087), 1603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5087
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Parser.parse("pS[", (-2235));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("\\b", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = Parser.parse("\b", 64);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p", (-32));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1096;
      Regexp regexp0 = Parser.parse("v", 1096);
      assertNotNull(regexp0);
      
      String string0 = "?A5w:GJH&IX$";
      try { 
        Parser.parse("?A5w:GJH&IX$", 1096);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1868;
      int int1 = 60;
      int int2 = 226;
      String string0 = "\\x";
      Regexp regexp0 = Parser.parse("x", 60);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 65505;
      try { 
        Parser.parse("+FvSk;us4fSqa+25=>}", 65505);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Parser parser0 = new Parser("PP\\6", (-2245));
      assertNotNull(parser0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("?", (-643));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-4545);
      String string0 = "ve@eD.=*1UTdb\"8Luq";
      int int1 = (-221);
      String string1 = "$uJ^\\Ta+:=y)(";
      int int2 = 3840;
      try { 
        Parser.parse("$uJ^Ta+:=y)(", 3840);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 8;
      try { 
        Parser.parse(")d[TrAQ", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Px7f`Ua.h", 977);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("pAPPP2\\1\"6", 10176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\1`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "(W";
      int int0 = 885;
      try { 
        Parser.parse("(W", 885);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(W`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        Parser.parse("-(", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `-(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp1 = Parser.parse("D", 120);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 2244);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp1.name = null;
      regexp1.max = 2244;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "(?P<(?WP";
      Regexp regexp0 = Parser.parse("(?P<(?WP", (-4545));
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals("m2t?~{O%3>Eir|l. ");
      assertFalse(boolean0);
      
      String string1 = regexp0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("(?i:\\(\\?P<\\(\\?WP)", string1);
      assertNotNull(string1);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string2 = "[::]";
      Regexp regexp2 = Parser.parse("[::]", (-1667));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      int int0 = 57;
      Regexp[] regexpArray0 = new Regexp[0];
      int int1 = 22;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 22, 9);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 2817;
      try { 
        Parser.parse("[:x0u-&vRx{10F5F}]", 2817);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `u-&`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        Parser.parse("G[", 2000);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "(?-:$)";
      try { 
        Parser.parse("(?-:$)", 2000);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      try { 
        Parser.parse("(?i9", (-1855));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?i9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 10712;
      String string0 = "(?i:";
      try { 
        Parser.parse("(?i:", 10712);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 92;
      String string0 = "()";
      Regexp regexp0 = Parser.parse("()", 92);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 92;
      intArray0[1] = 92;
      intArray0[2] = (-1470);
      intArray0[3] = 92;
      intArray0[4] = 92;
      regexp1.runes = intArray0;
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexp2.reinit();
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 209, 1635);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 209
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", (-700));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 61);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      int int0 = 1243;
      int int1 = 115;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp regexp0 = Parser.parse("invalid character class range", 3190);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("o|<Co&s*|Y[", (-589));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      try { 
        Parser.parse("o|<Co&s*|Y[", 120656);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A|d", 292);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|F", 285);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^VA|d", 292);
      assertNotNull(regexp0);
      
      regexp0.runes = null;
      regexp0.name = "^VA|d";
      String string0 = regexp0.name;
      assertEquals("^VA|d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 1840;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      boolean boolean0 = regexp1.equals("6|E-):PG$0&&");
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(boolean0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexp0.cap = (-1618);
      String string0 = "^f#*[J\\6NHM";
      try { 
        Parser.parse("6|E-):PG$0&&", 1840);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "m";
      String string1 = "??-:$";
      int int0 = 468;
      Regexp regexp0 = Parser.parse("m", 468);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("??-:$", 468);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `??`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 1458;
      int int1 = 2269;
      String string0 = "NO_WORD_BOUNDARY";
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int2 = 8120;
      int int3 = (-1523);
      try { 
        Parser.parse("[:", (-1523));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      try { 
        Parser.parse("_{+G2XsG')m_a.>.0z", (-1040));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("{2", (-911));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("{2", (-911));
      assertNotNull(parser0);
      
      int int0 = 4221;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 100, 4221);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "p$9[-G?";
      int int0 = 60;
      int int1 = (-1511);
      try { 
        Parser.parse("p$9[-G?", 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-G?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "p$_9[-G?";
      int int0 = 84;
      try { 
        Parser.parse("p$_9[-G?", 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-G?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:;]0bHh>l*l7", 114);
      assertNotNull(regexp0);
      
      int int0 = 1;
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp1 = Parser.parse("s", (-1567));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1548, (-1567));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "|h2)Tk}e3*?m5\"*";
      int int0 = (-148);
      try { 
        Parser.parse("|h2)Tk}e3*?m5\"*", (-148));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "\\";
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      int int0 = 92;
      Regexp regexp0 = Parser.parse("", 92);
      assertNotNull(regexp0);
      
      regexp0.min = int0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      try { 
        Parser.parse(string0, regexp0.min);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp regexp0 = Parser.parse("O\u0002TEDw|@lM^", 44);
      assertNotNull(regexp0);
      
      String string0 = "6`:!6bTK";
      int int0 = (-2327);
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Parser.parse("(?-Jm:$)", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-J`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 3948;
      try { 
        Parser.parse("(?-m", 3948);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "[^\\x00-\\x{1V,0FFF}]";
      int int0 = 4912;
      Regexp regexp0 = Parser.parse("[^x00-x{1V,0FFF}]", 4912);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      String string1 = "Balinese";
      Parser parser0 = new Parser(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(parser0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x{1V`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-2868);
      String string0 = "\\3AP\\PP\\\\\"6";
      Regexp regexp0 = Parser.parse("\u0003APPP\\\"6", (-2868));
      assertNotNull(regexp0);
      
      String string1 = "\\p\\4hPZkt";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\p\\`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = null;
      int int0 = 65490;
      String string1 = "\\P";
      String string2 = "ld\\1{X-K-59|";
      Regexp regexp0 = Parser.parse("ld\u0001{X-K-59|", (-2163));
      assertNotNull(regexp0);
      
      String string3 = "(?(?-m:$)";
      int int1 = (-2482);
      // Undeclared exception!
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-3119);
      try { 
        Parser.parse("5{2\u0005j5161![cf[", 1529);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[cf[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\f", (-331));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("^FO0)KH{", (-331));
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 2073, 2073);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp regexp0 = Parser.parse("ppAPPP2\\1\"6", 42);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("'?6{qq^A&", 42);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("\r", 6156);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("emhKlk=JB_;XYMx", 42);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 42, 42);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^I00-x{10FFFF}]", 977);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "\\5";
      int int0 = (-483);
      Regexp regexp0 = Parser.parse("\u0005", (-483));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      String string1 = "[:::;]0bHh>l*l7";
      Regexp regexp4 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      Regexp regexp5 = new Regexp(regexp4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      
      Regexp[] regexpArray0 = regexp0.subs;
      assertNull(regexpArray0);
      
      String string2 = "[:UPip";
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:UPip`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A|d", (-469));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      String string0 = "I|";
      Regexp regexp4 = Parser.parse("I|", 2348);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      
      Regexp regexp5 = new Regexp(regexp2);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp0));
      assertNotNull(regexp5);
      
      Regexp regexp6 = new Regexp(regexp5);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp5));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp5));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertNotNull(regexp6);
      
      Regexp regexp7 = Parser.parse("A|d", (-469));
      assertTrue(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp1));
      assertTrue(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp6));
      assertNotNull(regexp7);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-405));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "\\P\\15\\+sfZ?F\\1";
      int int0 = (-3103);
      int int1 = (-2088);
      Regexp regexp0 = Parser.parse("\u0006", (-3103));
      assertNotNull(regexp0);
      
      String string1 = "K8";
      String string2 = "PEf!Y";
      Regexp regexp1 = Parser.parse(string2, int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\P\\`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int0 = 368;
      Regexp regexp0 = Parser.parse("r{26&2Bi4ptwV", 3);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("r{26&2Bi4ptwV", 128);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("r{26&2Bi4ptwV", (-306));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray1 = regexp0.subs;
      assertNull(regexpArray1);
      
      Regexp[] regexpArray2 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray2);
      assertSame(regexpArray2, regexpArray0);
      
      Regexp[] regexpArray3 = regexp1.subs;
      assertNull(regexpArray3);
      
      String string0 = "\\7";
      Regexp regexp2 = Parser.parse("\u0007", 3144);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "P-\\5&";
      int int0 = 17;
      Regexp regexp0 = Parser.parse("P-\u0005&", 17);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "Katakana";
      int int0 = (-2451);
      int int1 = (-1787);
      Regexp regexp0 = Parser.parse("Katakana", (-1787));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      regexp0.op = regexp_Op0;
      regexp0.op = regexp_Op0;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      int int2 = 65535;
      Regexp regexp2 = Parser.parse("JvCoPb4kqx+&]02", (-1729));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string1 = "\\B";
      Regexp regexp3 = new Regexp(regexp0.op);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("B", (-2451));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("t{Hc8ks_PJJLawFLF7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.t{Hc8ks_PJJLawFLF7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("\\A", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = Parser.parse("A", 92);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      int int0 = 64;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Parser parser0 = new Parser("(?(?P<(?-m:$)", (-659));
      assertNotNull(parser0);
      
      String string1 = regexp1.toString();
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("A", string1);
      assertNotNull(string1);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 92, (-2388));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", (-891));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 6688);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("a", 6688);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("", 6688);
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P{~", 10193);
      assertNotNull(regexp0);
      
      String string0 = "sz1lN)o)0J{N$hN";
      int int0 = 274;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "\\0";
      int int0 = (-196);
      Regexp regexp0 = Parser.parse("\u0000", (-196));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      regexpArray0[0] = regexp1;
      int int1 = 320;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-196), 320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -196
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 40;
      Regexp regexp0 = Parser.parse("\u0000P\u0006", 40);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      int int0 = 365;
      try { 
        Parser.parse("cJEz=)'c", (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 94;
      int int1 = 42;
      String string0 = "9[6.1c0p\\";
      Regexp[] regexpArray0 = new Regexp[0];
      int int2 = 637;
      try { 
        Parser.parse("9[6.1c0p", 637);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[6.1c0p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP.6", 1241);
      assertNotNull(regexp0);
      
      regexp0.min = 90;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = null;
      int int0 = (-3705);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 1241, 58);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 638;
      Regexp regexp0 = Parser.parse("A|d", 638);
      assertNotNull(regexp0);
      
      String string0 = ",]UBEAmP,+t\"";
      int int1 = 4052;
      Regexp regexp1 = Parser.parse("x{", 4052);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      int int2 = (-1953);
      Regexp regexp3 = Parser.parse(string0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp3;
      String string1 = "=,*|9Xd16AAf";
      Regexp regexp4 = Parser.parse(string1, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      regexpArray0[1] = regexp4;
      regexpArray0[2] = regexp0;
      int int3 = (-3237);
      regexp4.min = int3;
      regexpArray0[3] = regexp0;
      int int4 = 1114111;
      regexp1.cap = int4;
      Regexp regexp5 = new Regexp(regexp4);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp5);
      
      regexpArray0[4] = regexp5;
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp2;
      regexpArray0[8] = regexp3;
      int int5 = 124;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = new Parser("[:x00-x{10FFFF}]", (-396));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 45);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[:x00-x{10FFFF}]", (-396));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("oJI|U'2De@Uv2t*", 3314);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      Regexp regexp5 = Parser.parse("1~[;]0bHh>l*l7", 45);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 120094, 3314);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 292;
      try { 
        Parser.parse("k[zk:z-x\"=5", 292);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `z-x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:;]bh>l7", (-2235));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("[:;]bh>l7", (-2235));
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-2498), (-2498));
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "[a\\xN0-\\x{10FFFF}}";
      int int0 = (-396);
      Parser parser0 = new Parser("[axN0-x{10FFFF}}", (-396));
      assertNotNull(parser0);
      
      int int1 = 45;
      try { 
        Parser.parse("[axN0-x{10FFFF}}", 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[axN0-x{10FFFF}}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 124;
      String string0 = "ijYC8 0(?)pj#)%05";
      Parser parser0 = new Parser("ijYC8 0(?)pj#)%05", 124);
      assertNotNull(parser0);
      
      try { 
        Parser.parse("ijYC8 0(?)pj#)%05", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int[] intArray0 = new int[9];
      Regexp regexp2 = Parser.parse("\n", (-584));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse("oBI%(q", 2470);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = Parser.parse("Q;<k", 84);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      
      Regexp regexp5 = Parser.parse("<91b@H$QMq", (-1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":x00-x{10FFFF}]", 45);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i::X00-X\\{10FFFF\\}\\])", string0);
      assertNotNull(string0);
      
      try { 
        Parser.parse("(?i::x00-x{10ffff}])", 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 24);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("[0-x\\{\\}]", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp2 = Parser.parse("(?s:.)", 509);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("r{26&2Bi4ptwV", 368);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Parser parser0 = new Parser("Batak", 3368);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("=gu}DD0\th!__3v", 3368);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = regexp0.equals(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean0);
      assertNotSame(object1, object0);
      
      String string0 = "\\E";
      int int0 = 2285;
      Regexp regexp1 = Parser.parse("E", 2285);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean1 = regexp0.equals(object2);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      int int1 = (-1097);
      int int2 = (-1715);
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\E`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("invalid r unsupported Perl synta", 49);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp[] regexpArray1 = new Regexp[2];
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      regexpArray1[0] = regexp0;
      regexpArray1[1] = regexp0;
      String string0 = regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      assertEquals("(?i:INVALID R UNSUPPORTED PERL SYNTA)", string0);
      assertNotNull(string0);
      assertNotSame(regexp0, regexp1);
      
      Regexp regexp2 = Parser.parse("[:::;]0bHh>l*l7", (-1734));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp[] regexpArray2 = new Regexp[7];
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      
      regexpArray2[0] = regexp1;
      regexpArray2[1] = regexp3;
      regexpArray2[3] = regexp1;
      Regexp[] regexpArray3 = Regexp.EMPTY_SUBS;
      assertFalse(regexpArray3.equals((Object)regexpArray2));
      assertFalse(regexpArray3.equals((Object)regexpArray1));
      assertNotNull(regexpArray3);
      assertSame(regexpArray3, regexpArray0);
      assertNotSame(regexpArray3, regexpArray2);
      assertNotSame(regexpArray3, regexpArray1);
      
      Regexp[] regexpArray4 = Regexp.EMPTY_SUBS;
      assertFalse(regexpArray4.equals((Object)regexpArray1));
      assertFalse(regexpArray4.equals((Object)regexpArray2));
      assertNotNull(regexpArray4);
      assertSame(regexpArray4, regexpArray0);
      assertSame(regexpArray4, regexpArray3);
      assertNotSame(regexpArray4, regexpArray1);
      assertNotSame(regexpArray4, regexpArray2);
      
      Regexp regexp4 = Parser.parse("AHXM_|.", 16);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      
      Regexp[] regexpArray5 = Parser.subarray(regexpArray2, 49, 49);
      assertFalse(regexpArray5.equals((Object)regexpArray2));
      assertFalse(regexpArray5.equals((Object)regexpArray3));
      assertFalse(regexpArray5.equals((Object)regexpArray0));
      assertFalse(regexpArray5.equals((Object)regexpArray1));
      assertFalse(regexpArray5.equals((Object)regexpArray4));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray4));
      assertFalse(regexpArray2.equals((Object)regexpArray3));
      assertNotNull(regexpArray5);
      assertNotSame(regexpArray5, regexpArray2);
      assertNotSame(regexpArray5, regexpArray3);
      assertNotSame(regexpArray5, regexpArray0);
      assertNotSame(regexpArray5, regexpArray1);
      assertNotSame(regexpArray5, regexpArray4);
      assertNotSame(regexpArray2, regexpArray1);
      assertNotSame(regexpArray2, regexpArray0);
      assertNotSame(regexpArray2, regexpArray4);
      assertNotSame(regexpArray2, regexpArray5);
      assertNotSame(regexpArray2, regexpArray3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1413;
      Regexp regexp0 = Parser.parse("[:x00-x{10FFF}]", 1413);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 69631, 1413);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D-TQ\u0004><7koRbgIb", 1529);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      String string0 = "\\p:punct:]";
      int int0 = 3486;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = " Xos7";
      int int1 = 86;
      Regexp regexp2 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      String string2 = "";
      int int2 = 13;
      Regexp regexp4 = Parser.parse(string2, int2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp2;
      int int3 = 490;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("[:\u0000-x{10FFFF}]", 424);
      assertNotNull(regexp0);
      
      int int0 = 67;
      Regexp regexp1 = Parser.parse("Any", 67);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int1 = (-2804);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2804), 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2804
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:\u00009-x{10FFFF}]", 24);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[5] = regexp0;
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 1023;
      Parser parser0 = new Parser("_D[fsQv5O", 1023);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      int int1 = 1276;
      try { 
        Parser.parse("_D[fsQv5O", 1276);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[fsQv5O`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("#L0>w|#i5", 2000);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1587, (-3090));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "r{26&2Bi4ptwV";
      int int0 = 92;
      try { 
        Parser.parse("`ApaCo(3Dg|3", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): ``ApaCo(3Dg|3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-3103);
      Regexp regexp0 = Parser.parse("P\r+sfZ?F\u0001", (-3103));
      assertNotNull(regexp0);
      
      String string0 = "PEf!Y";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = regexp0.toString();
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("(?i:P)(?i:\\r)+?(?i:SF)(?i:Z)??(?i:F\\x01)", string1);
      assertNotNull(string1);
      assertNotSame(regexp0, regexp1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp1.equals(object0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(boolean0);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      int int1 = (-3705);
      int int2 = 4;
      Regexp[] regexpArray0 = regexp0.subs;
      assertNotNull(regexpArray0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
