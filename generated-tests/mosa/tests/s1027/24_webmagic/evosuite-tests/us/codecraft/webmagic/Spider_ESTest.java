/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:36:30 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "!1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("!1");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("kIp+KY~2GeAybjJi;^:", "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kIp+KY~2GeAybjJi;^:";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("KrN:+<S31XznA}4}'h");
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      Spider spider3 = spider2.setUUID((String) null);
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider2 = spider1.startRequest(list0);
      spider1.getStartTime();
      boolean boolean0 = spider2.isSpawnUrl();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider1.setEmptySleepTime(5);
      Spider spider2 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(true);
      spider0.clearPipeline();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.setUUID(" stop success!");
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("kIp+KY~2GeAybjJi;^:", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.setSpawnUrl(false);
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request("us.codecraft.webmagic.Spider");
      Request request1 = request0.setUrl("us.codecraft.webmagic.Spider");
      Request request2 = request1.setCharset("us.codecraft.webmagic.Spider");
      request2.getExtras();
      Request request3 = request2.setExtras((Map<String, Object>) null);
      Request request4 = request3.putExtra("_cycle_tried_times", request2);
      requestArray0[0] = request4;
      Request request5 = request1.setPriority((-1918L));
      requestArray0[1] = request5;
      Request request6 = request3.addHeader("_cycle_tried_times", "_cycle_tried_times");
      requestArray0[2] = request6;
      Request request7 = new Request();
      requestArray0[3] = request7;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Request request0 = new Request();
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider.Status.fromValue((-1));
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider is already running!", "kIp+KY~2GeAybjJi;^:");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "kIp+KY~2GeAybjJi;^:";
      stringArray0[1] = "Spider is already running!";
      stringArray0[2] = "kIp+KY~2GeAybjJi;^:";
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.setSpiderListeners(linkedList0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = "kIp+KY~2GeAybjJi;^:";
      String string1 = "";
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, (-1022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.setUUID(" stop success!");
      Scheduler scheduler0 = null;
      Spider spider3 = spider2.scheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider3.thread((-2759));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Request request0 = new Request();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1113);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("tvVl(DtRt@Ag\"^$;,$");
      Spider spider0 = Spider.create(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.addPipeline(collectorPipeline0);
      spider0.stop();
      spider1.getStatus();
      boolean boolean0 = spider1.isExitWhenComplete();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("_");
      Spider spider2 = spider1.setExitWhenComplete(true);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider3 = spider2.startRequest(list0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 3);
      // Undeclared exception!
      try { 
        spider4.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.setUUID((String) null);
      spider1.getStartTime();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!1");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1113);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("iC4r8y");
      Spider spider0 = Spider.create(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.addPipeline(collectorPipeline0);
      Spider spider2 = spider1.thread(1113);
      spider2.stop();
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "d";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("d");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("{e_rH~R3# 7!_|v=oBx", "Spider {} started!");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider2.addPipeline(multiPagePipeline0);
      Page page0 = Page.fail();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      assertTrue(spider2.isExitWhenComplete());
      
      page0.setRequest((Request) null);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) linkedBlockingQueue0);
      spider2.startRequest(list0);
      Request[] requestArray1 = new Request[0];
      spider1.addRequest(requestArray1);
      Spider spider3 = spider0.setScheduler(queueScheduler0);
      long long0 = spider3.getPageCount();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      spider1.setEmptySleepTime(5);
      Spider spider2 = spider1.scheduler((Scheduler) null);
      spider1.addPipeline(consolePipeline0);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("kIp+KY~2GeAybjJi;^:", "?Y");
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("kIp+KY~2GeAybjJi;^:");
      spider0.scheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("kIp+KY~2GeAybjJi;^:", "");
      spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      spider0.getScheduler();
      Request request0 = new Request();
      boolean boolean0 = false;
      Request request1 = request0.setBinaryContent(false);
      Request request2 = request1.setCharset("_cycle_tried_times");
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download(request2, (Task) spider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("kIp+KY~2GeAybjJi;^:", "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kIp+KY~2GeAybjJi;^:";
      spider0.setEmptySleepTime(125);
      Spider spider1 = spider0.thread(125);
      spider1.isExitWhenComplete();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" s.top success!");
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(", statusCode=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID(", statusCode=");
      spider0.stop();
      spider0.runAsync();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HwqBX!", ".html");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HwqBX!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      Spider spider3 = spider2.addPipeline((Pipeline) null);
      Spider spider4 = spider3.setUUID("");
      spider4.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider1.setEmptySleepTime(5);
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(";uw{");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      spider0.runAsync();
      assertEquals(0L, spider0.getPageCount());
      
      Request request0 = new Request();
      request0.setMethod(";uw{");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("y=?", "y=?");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.pipeline(multiPagePipeline0);
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("dK$B");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, (String) null);
      phantomJSDownloader1.setRetryNum(30000);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Stopped", "$VALUES");
      spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list1 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider1.getAll((Collection<String>) list1);
      spider1.setUUID("Stopped");
      spider1.getStartTime();
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "!1");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.sleep(3);
      spider0.executorService = (ExecutorService) forkJoinPool0;
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(3982);
      spider0.setDownloader(phantomJSDownloader1);
      spider0.uuid = "wUyj{j7$i/lv=xjvo:";
      page0.setRawText("");
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("QgAU/;1j-%k+");
      spider1.scheduler(fileCacheQueueScheduler0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.addPipeline(resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list0 = spider0.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.startRequest(list0);
      List<String> list1 = spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider2 = spider1.startUrls(list1);
      Page page0 = Page.fail();
      page0.setRawText((String) null);
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.addPipeline(multiPagePipeline0);
      Page.fail();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      spider0.getThreadAlive();
      SimplePageProcessor simplePageProcessor1 = null;
      try {
        simplePageProcessor1 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Stopped", "$VALUES");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      phantomJSDownloader0.setThread(30000);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.addPipeline(resultItemsCollectorPipeline0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.setUUID("Stopped");
      spider4.close();
      spider2.getStartTime();
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GocVPk+i");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Page page0 = Page.fail();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, (String) null);
      phantomJSDownloader1.setRetryNum(30000);
      PhantomJSDownloader phantomJSDownloader2 = new PhantomJSDownloader(".html", "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader2);
      phantomJSDownloader0.setRetryNum((-9));
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Page page1 = page0.setRawText((String) null);
      spider1.extractAndAddRequests(page1, false);
      spider0.getSite();
      spider3.start();
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider {} started!", "{e_rH~R3# 7!_|v=oBx");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("{e_rH~R3# 7!_|v=oBx");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Spider {} started!");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.scheduler(duplicateRemovedScheduler0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider5 = spider4.startRequest(linkedList0);
      spider5.setDownloader(phantomJSDownloader0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider2.addPipeline(multiPagePipeline0);
      Page.fail();
      spider0.run();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GocVPk+i");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, (String) null);
      phantomJSDownloader1.setRetryNum(30000);
      PhantomJSDownloader phantomJSDownloader2 = new PhantomJSDownloader(".html", "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader2);
      page0.setSkip(false);
      List<Pipeline> list0 = spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider3 = spider2.setPipelines(list0);
      List<String> list1 = spider3.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider4 = spider3.startUrls(list1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider5 = spider4.scheduler(priorityScheduler0);
      Page page1 = Page.fail();
      page1.setRawText(".html");
      Spider spider6 = new Spider(simplePageProcessor0);
      spider0.stop();
      spider2.runAsync();
      Spider spider7 = spider5.clearPipeline();
      List<Request> list2 = spider7.getAll((Collection<String>) list1);
      spider0.startRequest(list2);
      Spider.Status spider_Status0 = Spider.Status.fromValue((-1508));
      assertEquals(Spider.Status.Init, spider_Status0);
  }
}
