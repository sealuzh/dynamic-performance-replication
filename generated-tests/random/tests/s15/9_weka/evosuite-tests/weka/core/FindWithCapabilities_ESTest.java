/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:35:28 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ":(5[IR?H!Wgk+";
      stringArray0[1] = "F";
      stringArray0[2] = "k=W2\r#HCQ9";
      stringArray0[3] = "?t";
      stringArray0[4] = "nD|=.";
      stringArray0[5] = "-W";
      stringArray0[6] = "weka.core.WekaEnumeration";
      stringArray0[7] = "-c <num>";
      stringArray0[8] = "bc_C";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class 'weka.core.WekaEnumeration' is not a CapabilitiesHandler!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "3Y_1bb";
      findWithCapabilities0.m_Superclass = "3Y_1bb";
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.setFilename("3Y_1bb");
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      findWithCapabilities0.getNotCapabilities();
      vector0.add("F`84hvL9CLM1=YA^2");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.enable(capabilities_Capability2);
      assertEquals("3Y_1bb", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"./3Y$iX?0atTE<!");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "\"./3Y$iX?0atTE<!";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.setClassIndex("\tRetrieves the package list from the GenericPropertiesCreator\n\tfor the given superclass. (overrides -packages <list>).");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Capabilities.PROPERTIES = (Properties) protectedProperties1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities1);
      Capabilities.PROPERTIES = null;
      capabilities1.enableAllClasses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-only-multiinstance";
      stringArray0[1] = "el;H$ON";
      stringArray0[2] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      capabilities0.getAttributeCapabilities();
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      capabilities0.enableAll();
      hashSet0.add(capabilities_Capability0);
      capabilities0.m_Capabilities = hashSet0;
      capabilities0.enable(capabilities_Capability0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability4);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      assertFalse(capabilities1.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\tSpecifies list of columns to used in the calculation of the \n\tdistance. 'first' and 'last' are valid indices.\n\t(default: first-last)";
      stringArray0[1] = "mvbGW;=^'?";
      stringArray0[2] = "H_3NH~CBk\"T";
      stringArray0[3] = "-W";
      stringArray0[4] = "DATE_ATTRIBUTES";
      stringArray0[5] = "1|%oxH>&Pa";
      stringArray0[6] = "401!cUzVBI";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-not-unary-class");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      singleIndex0.m_SelectedIndex = (-1842727113);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("]r`X5dv hB>LbiDk");
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename(".arff");
      Random.setNextRandom(1123);
      FindWithCapabilities.main(stringArray0);
      assertEquals(".arff", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ":";
      stringArray0[1] = "-not-relational-atts";
      stringArray0[2] = "G|CbNd,pT-D)>96";
      stringArray0[3] = "-not-relational-class";
      stringArray0[4] = "-not-relational-class";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(".SFSep");
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertEquals(".SFSep", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<.TEfd1@Nw7LFFIPSu[";
      stringArray0[1] = "q3?N/[pP:";
      stringArray0[2] = "_O_b)";
      stringArray0[3] = ")]2G({|NtK<PA(";
      stringArray0[4] = "-not-date-class";
      stringArray0[5] = "y/W9A`[P'sP'DN";
      stringArray0[6] = "Class '";
      stringArray0[7] = "I2eayV,9pF3";
      FindWithCapabilities.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = ".arff";
      stringArray0[2] = "Q]/qrvg|uLF2";
      stringArray0[3] = "-unary-atts";
      stringArray0[4] = " =M3,B@J)<BC ?a4/";
      stringArray0[5] = "}2a.tI$~^l}rl!X8u";
      stringArray0[6] = "!-fM#aCX=@})0";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Str";
      stringArray0[1] = "-not-missing-att-values";
      stringArray0[2] = "QghAwnT";
      stringArray0[3] = "-unary-atts";
      stringArray0[4] = " 1";
      stringArray0[5] = "@end ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      vector0.remove((Object) capabilities_Capability1);
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.setFilename("DoNotLoadIfClassNotPresent");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      findWithCapabilities0.setClassIndex("$LQ'BA>!Z{| hy~");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertEquals("DoNotLoadIfClassNotPresent", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-not-numeric-atts";
      stringArray0[1] = "weka/core/Capabilities.props";
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Dependencies;
      capabilities0.m_Dependencies = hashSet0;
      stringArray0[2] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.getAttributeCapabilities();
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      capabilities0.enableAll();
      hashSet0.add(capabilities_Capability0);
      capabilities0.m_Capabilities = hashSet0;
      capabilities0.enable(capabilities_Capability0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability4);
      assertNotSame(capabilities_Capability4, capabilities_Capability0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities2;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities3 = Capabilities.forInstances(instances0);
      findWithCapabilities0.m_Capabilities = capabilities3;
      capabilities0.setOwner(findWithCapabilities1);
      findWithCapabilities0.listOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.find();
      Instance instance0 = instances0.lastInstance();
      instances0.add(instance0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "numeric-atts";
      stringArray0[1] = "'[<\"E]kXy\"";
      stringArray0[2] = "-missing-class-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2";
      stringArray0[1] = "-date-atts";
      stringArray0[2] = "fKs\"ne/J[";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[3] = "&k(Y>'=>:b";
      stringArray0[4] = ":I[+W";
      stringArray0[5] = "IXdcfI2Uh9HNYp@?";
      stringArray0[6] = "x!\"jWFW";
      stringArray0[7] = "f&ao,yPA";
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities1.setClassIndex("b`k3");
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      assertNotSame(findWithCapabilities0, findWithCapabilities1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      stringArray0[0] = "kx'cG?'|[dQ";
      stringArray0[1] = "6{";
      stringArray0[2] = "-not-nominal-atts";
      stringArray0[3] = "ClassType: ";
      stringArray0[4] = "Couldn't compress nominal attribute value - storing uncompressed.";
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      stringArray0[5] = "<qz[OmTz-)Io0S";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      findWithCapabilities0.m_Packages = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      vector0.add("l]g");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add("+tyUePy");
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getNotCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.disable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nominal-class";
      stringArray0[1] = " class that didn't match the criteria:\n";
      stringArray0[2] = "}[#dACNa$";
      stringArray0[3] = "-W <classname>";
      stringArray0[4] = "/?,JS`*r*3:CF8*l|";
      stringArray0[5] = "-relational-atts";
      stringArray0[6] = "}[#dACNa$";
      stringArray0[7] = "HxRCn";
      FindWithCapabilities.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("^$");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities0.enableAllClassDependencies();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      capabilities0.toSource("}Jt)OB~.6", (-167));
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Matches = vector0;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability2);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities1.enableAll();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      System.setCurrentTimeMillis((-999L));
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector0 = new Vector<String>();
      vector0.addElement("4MO");
      vector0.add(" because it is not compatible with Weka ");
      hashtable0.put("K=GKO[v", vector0);
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.setFilename("systemDialogs");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      capabilities0.setMinimumNumberInstances(612);
      findWithCapabilities0.getCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g";
      stringArray0[1] = "-not-relational-atts";
      stringArray0[2] = "G|CbNd,pT-D)>96";
      stringArray0[3] = "tDys%xb-V*";
      stringArray0[4] = "=Hrwy#]SAkS$>T,z7";
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[0] = "file";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      stringArray0[1] = "6[~";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unary-class");
      stringArray0[2] = "Unknown attribute type '";
      stringArray0[3] = "-not-unary-class";
      stringArray0[4] = "+<Nb#<-cVUFJTIt";
      stringArray0[5] = "{Nkh}ZZ+!%}P{A;K";
      stringArray0[6] = "Type";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      SingleIndex singleIndex0 = new SingleIndex("1o3\"D [WTiyC");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(1L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-no-class";
      String string0 = "C9&";
      stringArray0[1] = "C9&";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "eJ,DF@|icyXhCxiE";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"position\" is numeric: ");
      stringArray0[1] = "last";
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      stringArray0[2] = "u>UdEA\"?=";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[3] = "8034";
      stringArray0[4] = "0CVWr,LpAOH";
      stringArray0[5] = "3Mu'MXGSDq<az";
      stringArray0[6] = "-not-binary-atts";
      stringArray0[7] = "ctP";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-date-class";
      stringArray0[1] = "=<:q7l.D'D4K^RJIG+";
      stringArray0[2] = " appears to be missing.";
      stringArray0[3] = "ckwZNeb";
      stringArray0[4] = "}";
      stringArray0[5] = "<,}zkKM\"?yV9Z;$0KE:";
      stringArray0[6] = "we5";
      stringArray0[7] = "OY";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "6{wmY|.lC";
      stringArray0[1] = "Mw;sn|J<dJ";
      stringArray0[2] = "'b";
      stringArray0[3] = "\n\nNew string:\n";
      stringArray0[4] = "\"position\" is string: ";
      stringArray0[5] = "nominal-class";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("-relational-class");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      String[] stringArray1 = new String[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray1[0] = "-relational-class";
      stringArray1[1] = "8034";
      stringArray1[2] = "8034";
      stringArray1[3] = "-relational-class";
      stringArray1[4] = "8034";
      stringArray1[5] = "-relational-class";
      stringArray1[6] = "-relational-class";
      stringArray1[7] = "-relational-class";
      stringArray1[8] = "' ";
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[0] = "-c <num>";
      stringArray0[1] = ", ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "M9c&y";
      stringArray0[3] = "-string-atts";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "H6EM|$Q~(tYW/m";
      stringArray0[1] = "TpF(q.:$u,B:Ph0Oy";
      stringArray0[2] = "}nI Q2TfaE|CD 5e\"} ";
      stringArray0[3] = "\tMust handle binary attributes.";
      stringArray0[4] = "]zBCAfJ";
      stringArray0[5] = "-not-missing-class-values";
      stringArray0[6] = "-c <num>";
      stringArray0[7] = "not-missing-att-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Random.setNextRandom((-1));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fys%2z7._Z!;3~&m+";
      stringArray0[1] = "not-missing-class-values";
      findWithCapabilities0.m_Superclass = "fys%2z7._Z!;3~&m+";
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      stringArray0[2] = "xerXv90!\"tqZMLzG|_";
      String string0 = "-unary-atts";
      stringArray0[3] = "-unary-atts";
      stringArray0[4] = "\tMust handle numeric attributes.";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "-relational-date";
      stringArray0[1] = ";n@%~=+";
      stringArray0[2] = "T'";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.setFilename(";2DXSt3");
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.setFilename("T'");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.handles(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.getRevision();
      findWithCapabilities1.getMatches();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      assertEquals("T'", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-string-class";
      stringArray0[1] = "aEiHJ";
      stringArray0[2] = ">MAoPND5VqoY|";
      stringArray0[3] = "`";
      stringArray0[4] = "org.pentaho.packageManagement.PackageManager";
      stringArray0[5] = "V`VQ*$(1.dcCI=&f";
      stringArray0[6] = "Unary class";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      stringArray0[7] = "Missing class values";
      stringArray0[8] = ")^";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.m_Handler = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.m_ClassIndex = null;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      vector0.removeElement((Object) null);
      hashtable0.put("=~hkWFljtp6i[;x3:!'", vector0);
      hashtable0.put("=~hkWFljtp6i[;x3:!'", vector0);
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getClassIndex();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getClassIndex();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("el;H$ON");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "3Y_1bb";
      findWithCapabilities0.m_Superclass = "3Y_1bb";
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.setFilename("3Y_1bb");
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      findWithCapabilities0.getNotCapabilities();
      vector0.add("F`84hvL9CLM1=YA^2");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getCapabilities();
      assertEquals("3Y_1bb", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "4.";
      stringArray0[1] = "124-133";
      stringArray0[2] = "\"N/1?";
      stringArray0[3] = "-c <num>";
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      stringArray0[4] = ">MAoPND5VqoY|";
      stringArray0[5] = "-unary-class";
      stringArray0[6] = "Original array (ints): ";
      stringArray0[7] = "t~YL\"I;3";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.setClassIndex("t~YL\"I;3");
      findWithCapabilities0.setFilename("\tSkipped properties.\n\t(default: capabilities,options)");
      ClassDiscovery.m_Cache = hashtable0;
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      ClassDiscovery.m_Cache.put("t~YL\"I;3", vector0);
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("t~YL\"I;3");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      assertEquals("\tSkipped properties.\n\t(default: capabilities,options)", findWithCapabilities0.getFilename());
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.setClassIndex("-1");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      SingleIndex singleIndex0 = new SingleIndex("8034");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2$,T6T>]";
      stringArray0[1] = "TNm,5:&R";
      stringArray0[2] = "Wdi";
      stringArray0[3] = "iW\"@,f";
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringArray0[4] = "]D'~NS**J4/}H)/";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[5] = "-not-date-atts";
      capabilities1.and(capabilities0);
      stringArray0[6] = "~~4aR%D4IM%#uK8";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TNm,5:&R");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector1;
      vector1.add("$6G0=CR1gI5c6%v;x");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.m_Superclass = "O";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename(" <classname> <packagename(s)>");
      vector0.add(", ");
      vector0.add("=[%#)V@sBrd!7GkQ _");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities1.enableAll();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("\tThe Capabilities handler to base the handling on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler. Additional parameters for\n\thandler can be passed on after the '--'.\n\tEither '-W' or '-t' can be used.");
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "=~v!cj?/jm1FWG7Z";
      stringArray0[1] = "\tFull name of the OptionHandler analysed.\n\teg: weka.classifiers.rules.ZeroR\n\t(default weka.classifiers.rules.ZeroR)";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1213);
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Packages = vector0;
      arrayList0.trimToSize();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.getMisses();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "Copy with third attribute deleted and inserted: ";
      findWithCapabilities0.setClassIndex("Copy with third attribute deleted and inserted: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "a|#{^Qivhq";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1281);
      Instances instances0 = binarySparseInstance0.m_Dataset;
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.m_Superclass = "b`k3";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      findWithCapabilities0.setFilename("b`k3");
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      Instances instances0 = null;
      try {
        instances0 = new Instances((String) null, arrayList0, (-1450507752));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1450507752
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
