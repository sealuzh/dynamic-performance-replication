/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:42:23 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ChebyshevDistance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("ry");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]t^&48wo1\" c [y";
      stringArray0[1] = "]T'}";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      stringArray0[2] = "[";
      findWithCapabilities0.listOptions();
      stringArray0[3] = "P3\"(k[emN-`^^5";
      stringArray0[4] = "";
      stringArray0[5] = "~2q 4)ye!S'~ enaz]";
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "[";
      stringArray0[6] = "`F09H(^pL";
      stringArray0[7] = "-binary-atts";
      findWithCapabilities0.getOptions();
      stringArray0[8] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ")K$Vt";
      stringArray0[2] = "";
      stringArray0[3] = "@6 I@q";
      stringArray0[4] = "-not-missing-class-values";
      stringArray0[5] = " class that didn't match the criteria:\n";
      stringArray0[6] = "[_s]C3RIv--psJx.v";
      stringArray0[7] = "";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities0.find();
      assertEquals(10, vector1.capacity());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      capabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getNotCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("#*Gc/{4WA\"<<\"\"");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("#*Gc/{4WA\"<<\"\"");
      assertEquals("#*Gc/{4WA\"<<\"\"", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.m_Filename = "weka/core/Capabilities.props";
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.m_Superclass = "Missing class values";
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("3X");
      boolean boolean0 = false;
      int int0 = (-2306);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2306);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (-2866.15835);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-1);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2306);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-2245);
      intArray0[4] = (-2306);
      intArray0[5] = (-2);
      intArray0[6] = (-2306);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-2306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "last";
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getFilename();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("P,,^s-8eri<");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.find();
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.getMisses();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("Median (ints): ");
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      Enumeration enumeration0 = new StringTokenizer("weka/core/Capabilities.props", "Median (ints): ");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getNotCapabilities();
      TestInstances.listToArray("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      assertNotSame(capabilities_Capability2, capabilities_Capability0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-date-class";
      stringArray0[1] = "%e~tkAp@";
      stringArray0[2] = "-1";
      stringArray0[3] = "QrXctnLP2q97t ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Matches = vector0;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      vector0.add("vewf&");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("iwx@0k8%Q1'J5rZH,;");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "iwx@0k8%Q1'J5rZH,;";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "iwx@0k8%Q1'J5rZH,;";
      stringArray0[3] = "iwx@0k8%Q1'J5rZH,;";
      stringArray0[4] = "vewf&";
      stringArray0[5] = "vewf&";
      stringArray0[6] = "vewf&";
      stringArray0[7] = "iwx@0k8%Q1'J5rZH,;";
      stringArray0[8] = "iwx@0k8%Q1'J5rZH,;";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.setClassIndex("");
      assertNotSame(findWithCapabilities0, findWithCapabilities2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setFilename("X w}7R^?");
      findWithCapabilities0.setNotCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Random.setNextRandom((-2));
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = "!OuMQa+x2.8869i[j";
      stringArray0[2] = "9l|0X%D$B}wM|5";
      stringArray0[3] = ".!GtEN@qoJa>`l";
      stringArray0[4] = "::[dgc;bfG^`xLH";
      stringArray0[5] = "mv/-@+{*$#RGI97";
      stringArray0[6] = "misses";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "FFAGeSKAqG#&w$!!T";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertNotSame(capabilities_Capability1, capabilities_Capability0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = TestInstances.listToArray("true");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("true");
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.getHandler();
      findWithCapabilities0.setClassIndex("af?a}I5S>Z2pBh(");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ":1ACfj";
      stringArray0[1] = "af?a}I5S>Z2pBh(";
      stringArray0[2] = "-missing-att-values";
      stringArray0[3] = "2.4X@)yMIDC";
      stringArray0[4] = ":1ACfj";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.setClassIndex(":1ACfj");
      assertNotSame(findWithCapabilities0, findWithCapabilities1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "\tMust handle date classes.";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashSet<Capabilities.Capability> hashSet0 = new HashSet<Capabilities.Capability>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.find();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      vector0.add("-relational-nominal");
      testInstances0.setMultiInstance(false);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      capabilities0.toSource("udqC8*;,V!&NCZ|,~<f");
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      findWithCapabilities2.getNotCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities2.setFilename("-relational-nominal");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities2.handles(capabilities_Capability1);
      assertEquals("-relational-nominal", findWithCapabilities2.getFilename());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.find();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities1.listOptions();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      vector0.add(" ");
      vector0.add("superclass");
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getHandler();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      Capabilities capabilities0 = findWithCapabilities2.getCapabilities();
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.getFilename();
      findWithCapabilities3.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.getFilename();
      findWithCapabilities2.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Vector<String> vector1 = findWithCapabilities6.find();
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.find();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      vector0.add("|}3)7r3ms");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector1 = findWithCapabilities1.m_Matches;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "weka.core.Instances";
      findWithCapabilities0.setClassIndex("C[");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "C[";
      stringArray0[1] = "C[";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("weka.core.Instances");
      TestInstances.listToArray("C[");
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.setFilename("FU>YPiWf&;Bf'_p 0r");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      testInstances0.setRelationalClassFormat(instances0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Vector<String> vector1 = new Vector<String>();
      Vector<String> vector2 = findWithCapabilities2.m_Packages;
      vector2.add(" ");
      vector0.add((String) null);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getOptions();
      findWithCapabilities3.getHandler();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities3.getCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.find();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities2.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.find();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      vector1.add((String) null);
      vector0.add((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.getFilename();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.setFilename("weka/core/Capabilities.props");
      findWithCapabilities2.setFilename("weka/core/Capabilities.props");
      assertEquals("weka/core/Capabilities.props", findWithCapabilities2.getFilename());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("~+ec@bT^");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.find();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.setClassIndex("superclass");
      findWithCapabilities0.getOptions();
      findWithCapabilities1.getCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities3.enable(capabilities_Capability3);
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.find();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      vector0.add("[DefaultPackageManager] can't delete file ");
      vector0.add("/o");
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities4.setFilename("");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities3.getFilename();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Vector<String> vector1 = findWithCapabilities5.find();
      assertEquals(0, vector1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.getRevision();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(testInstances1.DEFAULT_WORDS);
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "\tMust handle date classes.";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.m_Data;
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance((Instances) null);
      Range range0 = chebyshevDistance0.m_AttributeIndices;
      Vector vector0 = range0.m_RangeStrings;
      vector0.add(" ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex("@data");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setHandler(findWithCapabilities2);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.getRevision();
      assertEquals("\tMust handle date classes.", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("dQ");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("7AV'pZ)yWhJ");
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability4);
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities3.getRevision();
      findWithCapabilities2.getRevision();
      String string0 = findWithCapabilities2.getRevision();
      assertEquals("8034", string0);
  }
}
