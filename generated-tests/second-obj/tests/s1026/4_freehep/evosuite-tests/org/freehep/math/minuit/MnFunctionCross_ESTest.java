/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:38:07 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1005.522775198)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(473.553600716839);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, (-911.3), mnStrategy0, 5.1000000000000005);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 473.553600716839, 2142909215);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-364.79923);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy((-1168));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2400.6922622355582, mnStrategy0, 3.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 2150);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1005.522775198), (-1005.522775198), 473.553600716839, 5.1000000000000005, 219.6356440517874).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(5.1000000000000005);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 599.537152498745, mnStrategy0, 1012.7);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-986), 2126239760);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3849.407635, (-2337.4007078), 3849.407635).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-4675.276698124083), mnStrategy0, (-4675.276698124083));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3849.407635, 1115);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1005.522775198), 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance((-1005.522775198));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, (-911.3), mnStrategy0, 5.1000000000000005);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-0.41289793706171096);
      doubleArray1[1] = (-911.3);
      doubleArray1[2] = (-911.3);
      doubleArray1[3] = (-1005.522775198);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-295.424275782), (-2397));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1.0, (-2403.163538698), 1.0E-4, 1.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1012.7, mnStrategy0, 3849.407635);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-233.499221012), 2150);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1.0, 0.51, 0.51, 1.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 4.4;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1879.7554), mnStrategy0, 0.0);
      int[] intArray0 = new int[3];
      doubleArray0[0] = (double) 1;
      intArray0[1] = 1;
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, 1105);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.51;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), 0.51, 0.51, 0.2).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 3849.407635;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int int0 = 1;
      MnStrategy mnStrategy0 = new MnStrategy(1);
      mnUserParameterState0.setUpperLimit(1, (-2359.2939984011));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1844.7777879362964), mnStrategy0, 0.0);
      int[] intArray0 = new int[3];
      doubleArray0[0] = (double) 1;
      intArray0[1] = 1;
      int int1 = 1123;
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), 1123);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), (-1.0), (-1.0), (-1.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      mnStrategy0.setHighStrategy();
      mnUserParameterState0.setUpperLimit(1, (-2359.2939984011));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1811.8179823755959), mnStrategy0, 3849.407635);
      mnUserParameterState0.add("LZP", 0.0, (-1811.8179823755959));
      int[] intArray0 = new int[3];
      doubleArray0[0] = (double) 1;
      intArray0[1] = 1;
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2990.78011577502), 1154325513);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1006.5084190893484), (-1006.5084190893484), 473.553600716839, 5.1000000000000005, (-1006.5084190893484)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianStepTolerance((-1));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-4625.266663531569), mnStrategy0, (-2.11084519010712));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1006.5084190893484), 2142909215);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1006.5084190893484), (-1006.5084190893484), 473.553600716839, 5.1000000000000005, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(5.1000000000000005);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2.2, mnStrategy0, 2.2);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.2, (-1));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-982.0)).when(fCNBase2).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase2, mnUserParameterState0, 826.1289073, mnStrategy0, 4.162);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, (-59));
      mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 5.1000000000000005, (-1));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-91.4556), (-59));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), 0.51, 0.51, 0.51).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3849.407635;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int int0 = 1;
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHighStrategy();
      mnUserParameterState0.setUpperLimit(1, 3849.407635);
      double double0 = 0.0;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3849.407635, mnStrategy0, 0.0);
      int[] intArray0 = new int[3];
      doubleArray0[0] = (double) 1;
      int int1 = 1152;
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), 1152);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1005.522775198), (-1005.522775198), 473.553600716839, 5.1000000000000005, 219.6356440517874).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(1012.7);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-762), mnStrategy0, 1012.7);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1689.4577036369337), (-1661));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianStepTolerance(1.3719881320555523);
      mnStrategy1.setHessianStepTolerance(1.3719881320555523);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-4940.715328), (-1082.8410715), 99.60000000000001, 1.3719881320555523, 1.3719881320555523).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, (-32.8800898822204));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 430);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), (-1.0), (-1.0), (-1.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3849.407635;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      mnUserParameterState0.setUpperLimit(1, 3849.407635);
      mnStrategy0.setGradientTolerance(3849.407635);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1844.7777879362964), mnStrategy0, 3849.407635);
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      mnStrategy0.setLowStrategy();
      mnStrategy0.setLowStrategy();
      mnStrategy0.setHessianG2Tolerance((-1165.792745));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1848.75580814), 274);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3849.407635;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      mnStrategy0.setHighStrategy();
      mnUserParameterState0.setUpperLimit(1, (-2359.2939984011));
      mnStrategy0.setGradientTolerance(3849.407635);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1844.7777879362964), mnStrategy0, 1114.8381);
      int[] intArray0 = new int[3];
      doubleArray0[0] = (double) 1;
      intArray0[1] = 1;
      mnStrategy0.setLowStrategy();
      mnStrategy0.setLowStrategy();
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1848.75580814), 256);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.51;
      double double1 = 0.2;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), 0.51, 0.51, 0.2).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      double double2 = 3849.407635;
      doubleArray0[1] = 0.2;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      double double3 = (-1879.7554);
      int int0 = 1;
      MnStrategy mnStrategy0 = new MnStrategy(1);
      mnUserParameterState0.setUpperLimit(1, (-4503.76025));
      double double4 = 0.0;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1879.7554), mnStrategy0, 0.0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int int1 = 1152;
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), 1152);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3849.407635;
      doubleArray0[2] = 3849.407635;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      mnUserParameterState0.setUpperLimit(1, (-4503.7602476));
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 1.2, mnStrategy0, 1.2);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 415.9552240637497, (-2125879184));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2812.6468), 2126239760);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1005.522775198), (-1005.522775198), 473.553600716839, 5.1000000000000005).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 490.6127, mnStrategy0, (-4019.309623503655));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.2, 2126239760);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross((int[]) null, doubleArray0, doubleArray0, 2126239760, 1357);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1005.522775198), (-1005.522775198), (-1005.522775198), 5.1000000000000005, (-1005.522775198)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianGradientNCycles((-1));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2.2, mnStrategy0, 2.2);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-986), 3246);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1005.522775198), (-1525.907415), 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance((-1005.522775198));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, (-911.3), mnStrategy0, 5.1000000000000005);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-0.41289793706171096);
      doubleArray1[1] = (-911.3);
      doubleArray1[2] = (-911.3);
      doubleArray1[3] = (-1005.522775198);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-295.424275782), (-2397));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 1389.0351279, 0.51, 0.51, 0.2).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = 0.51;
      doubleArray0[2] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setUpperLimit(1, (-4503.7602476));
      mnStrategy0.setMediumStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1879.7554), mnStrategy0, (-8.185528955315101));
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-8.185528955315101);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-1.0), 1);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianGradientNCycles((-1));
      mnStrategy0.setHessianStepTolerance(5.1000000000000005);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(473.553600716839, (-1006.5084190893484), (-1.5699878726925216), 4.162, (-1006.5084190893484)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-986), mnStrategy0, 4.0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.2, 11);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[2] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.setPrecision(0.0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setUpperLimit(1, 0.0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1389.0351279, 10.000000000000002, 5.2, 2080.71950339467, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1389.0351279, mnStrategy0, 1389.0351279);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, (-1908874353));
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), 3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1006.5084190893484)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(5.1000000000000005);
      mnStrategy0.setHessianNCycles((-1));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 16.801055793315772, mnStrategy0, 16.801055793315772);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.162, 473.553600716839, 16.801055793315772, 473.553600716839, 16.801055793315772).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 4.0, mnStrategy0, 0.5);
      mnUserParameterState0.clone();
      mnStrategy0.setLowStrategy();
      mnStrategy0.setHessianNCycles(1105);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.162, 1105);
      mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 0.1871020629382889, (-1559));
      mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, (-1006.5084190893484), 2);
      mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 5.1000000000000005, 2822);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), 0.51, 0.51, (-1.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3849.407635;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      mnStrategy0.setGradientTolerance(0.2);
      mnUserParameterState0.setUpperLimit(1, (-4503.76025));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1879.7554), mnStrategy0, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1, 1);
      int[] intArray1 = new int[3];
      mnUserParameterState0.add("", 3849.407635);
      intArray1[0] = 1;
      intArray1[1] = 1;
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 1.0, 1);
      mnUserParameterState0.setLowerLimit(1, (-1.0));
      mnUserParameterState0.setError(1, (double) 1);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, 3849.407635, 0.51, (double)1, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 1.2, mnStrategy0, 1.2);
      mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 1, (-652));
      mnFunctionCross1.cross(intArray1, doubleArray0, doubleArray0, 762.85026461314, 1);
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, (-1.0), 2126239760);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1006.5084190893484), (-2880.9232736069503), 413.8, (-1006.5084190893484), 473.553600716839).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(5.1000000000000005);
      mnStrategy0.setHessianNCycles((-1));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2.2, mnStrategy0, 2.2);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.162, 473.553600716839, 2.2, 473.553600716839, 2.2).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 4.0, mnStrategy0, 385.6564763328);
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      mnUserParameterState1.add("G3dGRc2", (-373.8512), 4.162);
      mnFunctionCross1.cross(intArray0, (double[]) null, doubleArray0, 0.5, (-1840));
      mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, 1105, 926);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1840);
      doubleArray1[1] = (double) 926;
      doubleArray1[2] = 2.2;
      mnFunctionCross0.cross(intArray0, doubleArray1, (double[]) null, (-1309.51057891225), 2);
      int[] intArray1 = new int[0];
      mnFunctionCross1.cross(intArray1, (double[]) null, (double[]) null, (-1163.5192), (-1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = (-1.0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 1389.0351279, (-1.0), (-1.0), 0.2).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      double double1 = (-1879.7554);
      int int0 = 1;
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      double double2 = (-4503.7602476);
      mnUserParameterState0.setUpperLimit(1, (-4503.7602476));
      mnStrategy0.setMediumStrategy();
      mnUserParameterState0.setValue(1, (-1.0));
      double double3 = (-8.185528955315101);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1879.7554), mnStrategy0, (-8.185528955315101));
      int[] intArray0 = new int[3];
      mnUserParameterState0.setLimits(1, (-1.0), 0.001);
      intArray0[0] = 1;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-8.185528955315101);
      int int1 = (-1559);
      mnStrategy0.setHessianNCycles((-1559));
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-1.0), 1105);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), 0.51, 0.51, 0.51).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3849.407635;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      mnStrategy0.setHighStrategy();
      mnUserParameterState0.setUpperLimit(1, (-2359.2939984011));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1844.7777879362964), mnStrategy0, 0.0);
      int[] intArray0 = new int[3];
      mnStrategy0.setLowStrategy();
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 842.364, 152);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1336, 915);
  }
}
