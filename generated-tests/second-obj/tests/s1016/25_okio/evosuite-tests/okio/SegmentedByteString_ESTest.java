/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:45:17 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe0.sourceClosed = true;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(1535L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pipe pipe0 = new Pipe(1508L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe_PipeSink0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pipe pipe0 = new Pipe(1508L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pipe pipe0 = new Pipe(1234L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pipe pipe0 = new Pipe(1508L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pipe pipe0 = new Pipe(1526L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      segmentedByteString0.rangeEquals(2, (byte[]) null, (int) (byte) (-119), (-269));
      String string0 = segmentedByteString0.toString();
      assertEquals(1, segmentedByteString0.size());
      assertEquals("[hex=01]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pipe pipe0 = new Pipe(1541L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      byte[] byteArray0 = new byte[4];
      segmentedByteString0.endsWith(byteArray0);
      segmentedByteString0.sha256();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      pipe_PipeSink0.flush();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      segmentedByteString0.equals(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pipe pipe0 = new Pipe(1508L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      pipe_PipeSink0.flush();
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(3855);
      bufferedSink0.writeInt((-11));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(((RealBufferedSink) bufferedSink0).buffer, 2);
      ByteString byteString0 = ByteString.EMPTY;
      segmentedByteString0.rangeEquals((-2114), byteString0, (-11), 3855);
      segmentedByteString0.write(buffer0);
      assertEquals(10L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe_PipeSink0.flush();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      segmentedByteString0.write(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pipe pipe0 = new Pipe(1508L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      segmentedByteString0.write(outputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer();
      pipe_PipeSink0.close();
      realBufferedSink0.buffer.md5();
      realBufferedSink0.buffer.writeByte(69);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      boolean boolean0 = segmentedByteString0.equals(realBufferedSink0.buffer);
      assertFalse(boolean0);
      
      segmentedByteString0.write(realBufferedSink0.buffer);
      assertEquals(1, segmentedByteString0.size());
      
      String string0 = segmentedByteString0.base64();
      assertEquals("RQ==", string0);
      
      segmentedByteString0.hashCode();
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = segmentedByteString0.rangeEquals(69, byteArray0, 2, 1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pipe pipe0 = new Pipe(1526L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      boolean boolean0 = pipe0.sourceClosed;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      HashingSource.md5(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pipe pipe0 = new Pipe(1885L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer();
      pipe_PipeSink0.flush();
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(3855);
      bufferedSink0.outputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(((RealBufferedSink) bufferedSink0).buffer, 1);
      ByteString byteString0 = segmentedByteString0.sha256();
      segmentedByteString0.rangeEquals(379, byteString0, 665, 379);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      Buffer buffer1 = pipe0.buffer;
      realBufferedSink0.timeout();
      pipe_PipeSink0.flush();
      realBufferedSink0.buffer.writeByte(70);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      segmentedByteString0.write(outputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.write(buffer1);
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pipe_PipeSink0.flush();
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer1.writeLong(1525L);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals(1, byteArray0, 1, (-3544));
      assertTrue(boolean0);
      
      segmentedByteString0.hmacSha1(byteString0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Pipe pipe0 = new Pipe(1506L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pipe_PipeSink0.flush();
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      boolean boolean0 = segmentedByteString0.startsWith((ByteString) segmentedByteString0);
      assertEquals(1, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pipe pipe0 = new Pipe(1537L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.endsWith(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pipe_PipeSink0.flush();
      boolean boolean0 = pipe0.sourceClosed;
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Pipe pipe0 = new Pipe(1546L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)0, byteArray0, 723, (-1768));
      assertTrue(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Pipe pipe0 = new Pipe(1526L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pipe_PipeSink0.flush();
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      HashingSource.md5(realBufferedSink0.buffer);
      boolean boolean0 = pipe0.sourceClosed;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)72;
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean1 = segmentedByteString0.equals(byteString0);
      assertFalse(boolean1);
      
      segmentedByteString0.sha1();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer.md5();
      realBufferedSink0.buffer.writeByte(69);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      segmentedByteString0.equals(realBufferedSink1.buffer);
      segmentedByteString0.write(realBufferedSink1.buffer);
      segmentedByteString0.base64();
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.writeLongLe(1525L);
      pipe_PipeSink0.flush();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 6);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(realBufferedSink0.buffer, 6);
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString0);
      assertEquals(6, segmentedByteString1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.writeByte(69);
      pipe0.sinkClosed = true;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteString byteString0 = ByteString.encodeUtf8("v");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      segmentedByteString0.equals(byteString0);
      // Undeclared exception!
      try { 
        buffer0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Pipe pipe0 = new Pipe(1526L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      boolean boolean0 = pipe0.sourceClosed;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      HashingSource.md5(realBufferedSink0.buffer);
      ByteString byteString0 = segmentedByteString0.sha256();
      segmentedByteString0.compareTo(byteString0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Pipe pipe0 = new Pipe(1537L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer();
      boolean boolean0 = pipe0.sourceClosed;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeByte(1);
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      boolean boolean1 = pipe0.sourceClosed;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Pipe pipe0 = new Pipe(1537L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString0 = ByteString.EMPTY;
      segmentedByteString0.compareTo(byteString0);
      boolean boolean0 = pipe0.sourceClosed;
      byteString0.startsWith((ByteString) segmentedByteString0);
      segmentedByteString0.asByteBuffer();
      int int1 = 4984;
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer0, 4984);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=4984
         //
         verifyException("okio.Util", e);
      }
  }
}
