/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:14:28 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.store.replication.master.MasterFactory;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.AbstractSavepoint;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.expression.Function;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.hsqldb.rowio.RowOutputTextLog;
import org.hsqldb.rowio.RowOutputTextQuoted;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.normalize("alter materialized viewupdatez", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#i(sZ9E4n]p*N}";
      stringArray0[1] = "#i(sZ9E4n]p*N}";
      stringArray0[2] = "#i(sZ9E4n]p*N}";
      stringArray0[3] = "#i(sZ9E4n]p*N}";
      stringArray0[6] = "#i(sZ9E4n]p*N}";
      stringArray0[7] = "#i(sZ9E4n]p*N}";
      stringArray0[8] = "#i(sZ9E4n]p*N}";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "#i(sZ9E4n]p*N}", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT #i(sZ9E4n]p*N} PRIMARY KEY (#i(sZ9E4n]p*N}, #i(sZ9E4n]p*N}, #i(sZ9E4n]p*N}, #i(sZ9E4n]p*N}, , , #i(sZ9E4n]p*N}, #i(sZ9E4n]p*N}, #i(sZ9E4n]p*N})", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.normalize("mXzKj]8", true);
      SQLUtil.substituteMarkers("mXzKj ] 8", "mXzKj ] 8", "mXzKj ] 8");
      StringBuilder stringBuilder0 = new StringBuilder(37);
      SQLUtil.addOptionalCondition("mXzKj]8", stringBuilder0);
      assertEquals("mXzKj]8", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UP<Li{p>";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("875F.q ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DBDataType dBDataType0 = DBDataType.getInstance(1, "SFWRT+cSdm");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename$ jo  ddto % jw8 * !)", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(":lAyPc.3Pr", (DBTable) null, 1, "truncate");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("MkK1or+", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("MkK1or+", (DBTable) null, dBDataType0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("rename$ jo  ddto % jw8 * !), :lAyPc.3Pr, MkK1or+, MkK1or+", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      TableContainer tableContainer0 = new TableContainer("selectqg&aqr+ef>4+t");
      tableContainer0.getTable("BaiDN?");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c|)cqY", (DBTable) null, (-3774), "*/");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      RowOutputBinary rowOutputBinary1 = new RowOutputBinary();
      System.setCurrentTimeMillis(0);
      SQLUtil.mutatesStructure("Yd<E");
      rowOutputBinary1.write(1);
      rowOutputBinary0.writeType(454);
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary1);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Yd<E", defaultDBTable0, 0, "Yd<E");
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer0 = new Integer(0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder(454);
      SQLUtil.addRequiredCondition("Yd<E YD<E NULL", stringBuilder0);
      assertEquals("Yd<E YD<E NULL", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("selectqg&aqr+ef>4+t");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      stringBuilder1.append((String) null);
      SQLUtil.addOptionalCondition("execqg&aqr+ef>4+t", stringBuilder1);
      System.setCurrentTimeMillis((-833L));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(3833L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "2;t?DE.3R3YtdsS)", true, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(3833L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "2;t?DE.3R3YtdsS)", true, (String[]) null);
      dBPrimaryKeyConstraint0.toString();
      // Undeclared exception!
      try { 
        dBPrimaryKeyConstraint0.addColumnName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      TableContainer tableContainer0 = new TableContainer("Qg&aQr+eF>4+T");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]\"?'Nry}f]");
      DBDataType dBDataType0 = DBDataType.getInstance(1010, "]\"?'Nry}f]");
      Integer integer0 = new Integer(0);
      int int0 = Function.INSTR;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Qg&aQr+eF>4+T", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("]\"?'NRY}F](0)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      SQLUtil.renderValue(valueDecimal0);
      SQLUtil.normalize("Sd", true);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("alter table", (String[]) null, "execute", "K", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("ild$7743[2R@ ");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ild$7743[2R@ ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ild$7743[2R@ ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "185e801c-0103-0e39-b8e7-00000010f010", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      stringArray0[1] = "ild$7743[2R@ ";
      stringArray0[3] = "XSRSA.S";
      stringArray0[4] = "ild$7743[2R@ ";
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.normalize("ild$7743[2R@ ", true);
      assertEquals("ild $ 7743 [ 2R @", string0);
      
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "42Z85.U";
      stringArray0[1] = "42Z85.U";
      stringArray0[2] = "42Z85.U";
      stringArray0[3] = "42Z85.U";
      stringArray0[4] = "42Z85.U";
      stringArray0[5] = "42Z85.U";
      stringArray0[6] = "42Z85.U";
      stringArray0[7] = "42Z85.U";
      stringArray0[8] = "gh1tjwM zId&[PIp";
      String string0 = SQLUtil.renderColumnListWithTableName("42Z85.U", stringArray0);
      assertEquals("42Z85.U.42Z85.U, 42Z85.U.42Z85.U, 42Z85.U.42Z85.U, 42Z85.U.42Z85.U, 42Z85.U.42Z85.U, 42Z85.U.42Z85.U, 42Z85.U.42Z85.U, 42Z85.U.42Z85.U, 42Z85.U.gh1tjwM zId&[PIp", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "selectqg&aqr+ef>4+t";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "selectqg&aqr+ef>4+t";
      stringArray1[2] = "selectqg&aqr+ef>4+t";
      stringArray1[3] = "updatez#7th! 5''<";
      SQLUtil.renderWhereClause(stringArray1, stringArray1);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("U5]D/&cAp 685N=f");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.isDML("'xPmqioc%&6*eqCWS?");
      SQLUtil.substituteMarkers("Look at a column before testing null.", "create materialized viewexecute$joddto%jw8*!)", "create materialized viewexecute$joddto%jw8*!)");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view$q=a~!'.!");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.normalize("ResultSet type: ", true);
      assertEquals("ResultSet type :", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("z#7TH! 5''<");
      assertNull(boolean0);
      
      String string1 = SQLUtil.substituteMarkers("ResultSet type: ", "z#7TH! 5''<", "ResultSet type: ");
      assertEquals("ResultSet type: ", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UP<Lip>";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.normalize("UP<Lip> = 'UP<Lip>'", false);
      SQLUtil.mutatesDataOrStructure("~zn");
      String string0 = FBConnectionProperties.BUFFERS_NUMBER_PROPERTY;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      boolean boolean0 = SQLUtil.isQuery("update");
      Integer integer0 = new Integer(0);
      int int0 = Function.INSTR;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      System.setCurrentTimeMillis(58);
      boolean boolean1 = SQLUtil.isDML("insert");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = Optimizer.USE_STATISTICS;
      SQLUtil.mutatesDataOrStructure("updatez");
      SQLUtil.removeComments("derby.language.useStatistics");
      SQLUtil.parseColumnTypeAndSize("alter table1.7.0");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("truncateupdae", true, "insert", "updatez#7t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "callexecute$jo\\ddto%jw8*!)";
      SQLUtil.removeComments("callexecute$joddto%jw8*!)");
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isQuery("update");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert", (DBSchema) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "null = null AND null = null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("WHERE", (String) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#i(sZ9E4n]p*N}";
      String string0 = SQLUtil.normalize("#i(sZ9E4n]p*N}", false);
      assertEquals("# i (sZ9E4n ] p * N }", string0);
      
      String string1 = SQLUtil.innerJoin("#i(sZ9E4n]p*N}", stringArray0, "tqWF?154pD!D ", " WHERE ", stringArray0);
      assertEquals("tqWF?154pD!D  as  WHERE  on #i(sZ9E4n]p*N}.#i(sZ9E4n]p*N} =  WHERE .#i(sZ9E4n]p*N} and #i(sZ9E4n]p*N}.null =  WHERE .null and #i(sZ9E4n]p*N}.null =  WHERE .null and #i(sZ9E4n]p*N}.null =  WHERE .null and #i(sZ9E4n]p*N}.null =  WHERE .null and #i(sZ9E4n]p*N}.null =  WHERE .null and #i(sZ9E4n]p*N}.null =  WHERE .null and #i(sZ9E4n]p*N}.null =  WHERE .null and #i(sZ9E4n]p*N}.null =  WHERE .null", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.normalize("\r~-am*zX", true);
      System.setCurrentTimeMillis((-833L));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = TypeId.NATIONAL_LONGVARCHAR_NAME;
      System.setCurrentTimeMillis(1L);
      String string1 = AbstractSavepoint.SAVEPOINT_ID_PREFIX;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string2);
      assertEquals("table null", string2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SELECT * FROM INFORMATION_SCHEMA.SESSION_STATE");
      SQLUtil.normalize("alter materialized viewupdatez", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "can't perform query to fetch xids");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized viewupdatez");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewupdatez", defaultDBTable0, 90022, "alter materialized viewupdatez");
      SQLUtil.typeAndName(defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("column alter materialized viewupdatez", false, "alter materialized viewupdatez", "can't perform query to fetch xids");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[2] = stringArray0[6];
      SQLUtil.join((String) null, "select", stringArray0, "create unique indexupdaterow", (String) null, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery(stringArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", (DBTable) null, (-3297), "NCLOB");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType.getInstance(1924, "NCLOB");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      StringBuilder stringBuilder0 = new StringBuilder(1924);
      stringBuilder0.append("x4qafK>JUW1L");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("x4qafK>JUW1L", stringBuilder0);
      stringBuilder1.append((float) (-3297));
      char[] charArray0 = new char[0];
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("*(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: *(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into- 0");
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "select into- 0";
      stringArray0[2] = null;
      stringArray0[3] = "select into- 0";
      stringArray0[4] = "select into- 0";
      stringArray0[5] = "select into- 0";
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, select into- 0, , select into- 0, select into- 0, select into- 0, , )", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "#i(sZ9E4n]p*N}";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " or: ", true, stringArray0);
      String string0 = SQLUtil.join(" or: ", "alter session", stringArray0, "#i(sZ9E4n]p*N}", "#i(sZ9E4n]p*N}", stringArray0);
      assertEquals(" or:  join #i(sZ9E4n]p*N} as #i(sZ9E4n]p*N} on alter session.null = #i(sZ9E4n]p*N}.null and alter session.#i(sZ9E4n]p*N} = #i(sZ9E4n]p*N}.#i(sZ9E4n]p*N} and alter session.null = #i(sZ9E4n]p*N}.null and alter session.null = #i(sZ9E4n]p*N}.null and alter session.null = #i(sZ9E4n]p*N}.null and alter session.null = #i(sZ9E4n]p*N}.null and alter session.null = #i(sZ9E4n]p*N}.null and alter session.null = #i(sZ9E4n]p*N}.null and alter session.null = #i(sZ9E4n]p*N}.null", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \" or: \" ", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("null = null");
      SQLUtil.removeComments("null = null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      assertEquals("SELECT * FROM null WHERE null = 'null = null'", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#i(sZ9E4n]p*N}";
      stringArray0[1] = "#i(sZ9E4n]p*N}";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "#i(sZ9E4n]p*N}";
      stringArray0[3] = "#i(sZ9E4n]p*N}";
      stringArray0[4] = "#i(sZ9E4n]p*N}";
      stringArray0[6] = "#i(sZ9E4n]p*N}";
      stringArray0[8] = "#i(sZ9E4n]p*N}";
      DBDataType dBDataType0 = DBDataType.getInstance((-1448), "#i(sZ9E4n]p*N}");
      Integer integer0 = new Integer((-599));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#i(sZ9E4n]p*N}", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      System.setCurrentTimeMillis((-599));
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("mX)Kj]8", false);
      assertEquals("mX) Kj ] 8", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.mutatesStructure("call");
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "#i(sZ9E4n]p*N}";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " or: ", true, stringArray0);
      String string0 = Page.DIAG_NUMOVERFLOWED;
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.normalize("CONSTRAINT \" or: \" ", true);
      System.setCurrentTimeMillis(15);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBTable0.setDoc("$joddto%j");
      String string0 = Optimizer.USE_STATISTICS;
      SQLUtil.normalize(".rihn*[~(zezaE3c9;9", false);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      StringReader stringReader0 = new StringReader("$JoddTo%Jw8*!)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.parseColumnTypeAndSize("select into$ jo  ddto % jw8 * !)");
      rowOutputBinary0.write((-4));
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = TypeId.NATIONAL_LONGVARCHAR_NAME;
      SQLUtil.normalize("x%8^ww!.3tr;", true);
      System.setCurrentTimeMillis((-1101L));
      String string1 = AbstractSavepoint.SAVEPOINT_ID_PREFIX;
      SQLUtil.mutatesDataOrStructure("LONG NVARCHAR");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "svpt";
      stringArray0[1] = "x % 8 ^ ww !.3tr ;";
      stringArray0[2] = "LONG NVARCHAR";
      stringArray0[3] = "x%8^ww!.3tr;";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("x % 8 ^ ww !.3tr ;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("selectqg&aqr+ef>4+t");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = Page.DIAG_NUMOVERFLOWED;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-1);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      assertEquals(0, rowOutputBinary0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      SQLUtil.normalize("ys{{uRqf\u0002O9f/%=", false);
      System.setCurrentTimeMillis((-227325153));
      String string0 = AbstractSavepoint.SAVEPOINT_ID_PREFIX;
      SQLUtil.mutatesDataOrStructure("ys{{uRqf\u0002O9f/%=");
      DBDataType dBDataType0 = DBDataType.getInstance(620, "null = null ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4h\"QV ssouU> rDT|ub", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isProcedureCall("svpt");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("ys{{uRqf\u0002O9f/%=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#i(sZ9E4n]p*N}";
      stringArray0[1] = "#i(sZ9E4n]p*N}";
      stringArray0[2] = "#i(sZ9E4n]p*N}";
      stringArray0[3] = "#i(sZ9E4n]p*N}";
      stringArray0[4] = "#i(sZ9E4n]p*N}";
      stringArray0[6] = "#i(sZ9E4n]p*N}";
      stringArray0[7] = "#i(sZ9E4n]p*N}";
      stringArray0[2] = "#i(sZ9E4n]p*N}";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "#i(sZ9E4n]p*N}", true, stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[3] = (byte) (-3);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#i(sZ9E4n]p*N}";
      stringArray0[5] = "#i(sZ9E4n]p*N}";
      stringArray0[7] = "#i(sZ9E4n]p*N}";
      defaultDBTable0.getCheckConstraints();
      stringArray0[3] = "#i(sZ9E4n]p*N}";
      stringArray0[4] = "#i(sZ9E4n]p*N}";
      stringArray0[6] = "#i(sZ9E4n]p*N}";
      stringArray0[7] = "#i(sZ9E4n]p*N}";
      DBDataType dBDataType0 = DBDataType.getInstance(57, "#i(sZ9E4n]p*N}");
      Integer integer0 = RawTransaction.COMMIT;
      dBDataType0.isNumber();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#i(sZ9E4n]p*N}", defaultDBTable0, dBDataType0, integer1);
      String string0 = TypeId.NATIONAL_VARCHAR_NAME;
      Integer.compareUnsigned(152, 82);
      System.setCurrentTimeMillis(82);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      ArrayList<DBColumn> arrayList1 = new ArrayList<DBColumn>();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, 849, "NATIONAL CHAR VARYING");
      arrayList0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setDoc("isVarArgs");
      String string0 = Optimizer.USE_STATISTICS;
      defaultDBTable0.getPrimaryKeyConstraint();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      mockPrintWriter0.println((Object) valueDecimal0);
      mockPrintWriter0.print('6');
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isQuery("derby.language.useStatistics");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = TypeId.NATIONAL_LONGVARCHAR_NAME;
      String string1 = TypeId.DOUBLE_NAME;
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      SQLUtil.mutatesDataOrStructure("alter session");
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string0 = "alter sessionselectqg&aqr+ef>4+t";
      stringArray0[2] = "alter sessionselectqg&aqr+ef>4+t";
      stringArray0[3] = null;
      stringArray0[4] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("?)iT#a;T!V3/T'7k_");
      SQLUtil.mutatesDataOrStructure("executeselectqg&aqr+ef>4+t");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint("drop index#i(sz9e4n]p*n}");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("selectqg&aqr+ef>4+t");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      stringBuilder1.append((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";Bs~Lb?/. K6@aTB");
      String string0 = FBConnectionProperties.TYPE_PROPERTY;
      StringBuilder stringBuilder2 = new StringBuilder();
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(";Bs~Lb?/. K6@aTB", compositeDBObject0);
      tableContainer0.getTable((String) null);
      System.setCurrentTimeMillis((-1L));
      StringBuilder stringBuilder3 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance((-1142), "BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = RawStoreFactory.LOG_ENCRYPT_ALGORITHM_VERSION;
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0SC,-$RCNeXVo8R<JDG");
      String string0 = SQLUtil.normalize("c{(qrNz,9", true);
      assertEquals("c { (qrNz, 9", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("-- dump: ", false, defaultDBTable0, "-XB");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.mutatesDataOrStructure("Jk0cV%+*'");
      SQLUtil.mutatesDataOrStructure("a1qA43");
      SQLUtil.normalize("CHECK -XB", true);
      DBCheckConstraint dBCheckConstraint1 = null;
      try {
        dBCheckConstraint1 = new DBCheckConstraint("a1qA43", false, defaultDBTable0, "-- dump: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "alter materialized viewunmapped type";
      SQLUtil.isProcedureCall("alter materialized viewunmapped type");
      String string1 = "0Dt\"@{[p|K";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0Dt\"@{[p|K");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance(420, "0Dt\"@{[p|K");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewunmapped type", defaultDBTable0, dBDataType0);
      defaultDBColumn0.isIdentical(defaultDBTable0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDBColumn0.setOwner((CompositeDBObject<?>) null);
      defaultDBColumn0.setDefaultValue("alter materialized viewunmapped type");
      SQLUtil.renderColumn(defaultDBColumn0);
      String string2 = null;
      // Undeclared exception!
      try { 
        DBDataType.getInstance(420, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "$JoddTo%Jw8*!)";
      stringArray0[2] = "$JoddTo%Jw8*!)";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.mutatesStructure("5Vw&xau1");
      SQLUtil.isProcedureCall("na-|{T]kb ^_");
      SQLUtil.mutatesDataOrStructure("tu+fO=&Pc_O");
      String string0 = AbstractSavepoint.SAVEPOINT_ID_PREFIX;
      SQLUtil.mutatesDataOrStructure("TOPIC");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray1 = new String[4];
      stringArray1[2] = "updateRow";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[0], false, stringArray1);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable1);
      dBPrimaryKeyConstraint0.setDoc("svpt");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.removeComments("isVarArgs");
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = LogToFile.DUMP_LOG_FROM_LOG_FILE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = MasterFactory.REPLICATION_MODE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      System.setCurrentTimeMillis(1);
      Boolean boolean0 = new Boolean("executeys{{urqf\u0002o9f/%=");
      boolean boolean1 = SQLUtil.isQuery("select into");
      String string2 = Dependable.PERM;
      boolean boolean2 = SQLUtil.isDML("executeys{{urqf\u0002o9f/%=");
      assertTrue(boolean2 == boolean1);
      
      defaultDBTable0.toString();
      boolean boolean3 = FileUtil.fsNormalizesPosixSeparator;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "HJg5";
      stringArray0[1] = null;
      stringArray0[2] = "HJg5";
      String string3 = SQLUtil.innerJoin("=#ItUX~Mv_yzC", stringArray0, "aVL_C", "HJg5", stringArray0);
      assertEquals("aVL_C as HJg5 on =#ItUX~Mv_yzC.HJg5 = HJg5.HJg5 and =#ItUX~Mv_yzC.null = HJg5.null and =#ItUX~Mv_yzC.HJg5 = HJg5.HJg5", string3);
      
      boolean boolean4 = FBBlob.SEGMENTED;
      String string4 = SQLUtil.substituteMarkers("=#ItUX~Mv_yzC", "aVL_C", "HJg5");
      assertEquals("=#ItUX~Mv_yzC", string4);
      
      String string5 = SQLUtil.leftJoin("#i(sz9e4n]", stringArray0, "executeys{{urqf\u0002o9f/%=", "null = n", stringArray0);
      assertEquals("left join executeys{{urqf\u0002o9f/%= as null = n on #i(sz9e4n].HJg5 = null = n.HJg5 and #i(sz9e4n].null = null = n.null and #i(sz9e4n].HJg5 = null = n.HJg5", string5);
      
      String string6 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string6);
      assertEquals("table null", string6);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      Boolean boolean0 = Boolean.FALSE;
      RowOutputBinary rowOutputBinary1 = new RowOutputBinary();
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      DataOutputStream dataOutputStream1 = new DataOutputStream(rowOutputTextLog0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(rowOutputBinary0);
      mockPrintWriter1.println('{');
      String string0 = "!,Su\"T\\w|";
      SQLUtil.mutatesStructure("!,Su\"Tw|");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HJg5");
      String string1 = Dependable.PERM;
      String string2 = "/*";
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = File.pathSeparator;
      String string1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("executeys{{urqf\u0002o9f/%=", true);
      Boolean boolean0 = new Boolean(":");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      SQLUtil.normalize("Y<rE1", true);
      RowOutputBinary rowOutputBinary1 = new RowOutputBinary();
      StringReader stringReader0 = new StringReader("?.\"so");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(1);
      SQLUtil.renderNumber(streamTokenizer0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Y<rE1", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.leftJoin("Y < rE1", stringArray0, "executeys { { urqf  2o9f / % =", "Qi[/Gz+wVoS~akE#tk", stringArray0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      RowOutputBinary rowOutputBinary1 = new RowOutputBinary();
      System.setCurrentTimeMillis(1);
      Boolean boolean0 = SQLUtil.mutatesStructure("JepXxtW2)");
      assertFalse(boolean0);
      
      RowOutputBinary rowOutputBinary2 = new RowOutputBinary((byte[]) null);
      rowOutputBinary1.writeType((-59));
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JepXxtW2)", defaultDBTable0, 1, "CLOB");
      mockPrintWriter0.println((float) 1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, 0, "Y<rE1");
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("null Y<RE1 NULL", string0);
      
      dataOutputStream0.flush();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Integer integer0 = new Integer(1);
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance(1, "null Y<RE1 NULL");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Y<rE1", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn2);
      assertEquals("null.Y<rE1", string1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      SQLUtil.normalize("fTY-+?rFD", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesStructure("1.7.0");
      RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted("1.7.0", "fTY-+?rFD", "org.h2.command.ddl.AlterUser", false, "fTY - + ? rFD");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputTextQuoted0, 64);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-110);
      bufferedOutputStream0.write(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      mockPrintWriter0.println((float) 0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.command.ddl.AlterUser");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PrintWriter printWriter0 = mockPrintWriter0.append('b');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "setCursorName", false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("--", false);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      System.setCurrentTimeMillis(0);
      DBSchema dBSchema0 = new DBSchema("$Q=a~!'.!");
      dBSchema0.setCatalog((DBCatalog) null);
      StringReader stringReader0 = new StringReader("5vcT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.parseColumnTypeAndSize("-pcC&3f~");
      rowOutputBinary0.write((-4));
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(rowOutputTextLog0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
  }
}
