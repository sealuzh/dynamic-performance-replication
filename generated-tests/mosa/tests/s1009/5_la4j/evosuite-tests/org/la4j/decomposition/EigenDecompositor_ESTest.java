/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:44:19 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(4, 4, 4);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(21, 21, 21);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      double[][] doubleArray0 = new double[7][0];
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix1;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 13;
      Random.setNextRandom(13);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom(13);
      DenseMatrix denseMatrix0 = DenseMatrix.random(13, 13, mockRandom0);
      mockRandom0.nextLong();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply(denseMatrix0, (DenseMatrix) basic2DMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(basic2DMatrix1);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Random.setNextRandom(13);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom((-1L));
      DenseMatrix.random(13, 13, mockRandom0);
      MockRandom mockRandom1 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(13, 13, mockRandom1);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }
}
