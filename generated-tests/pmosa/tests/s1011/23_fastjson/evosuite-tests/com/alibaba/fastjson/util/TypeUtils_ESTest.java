/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 19:00:21 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.chrono.HijrahDate;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.getSerializeFeatures(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      String string0 = "(FZ)V";
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      mockIllegalStateException0.getStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(FZ)V", mockIllegalStateException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLSyntaxErrorException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      mockIllegalStateException0.initCause(sQLNonTransientException0);
      batchUpdateException0.getLargeUpdateCounts();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.BatchUpdateException: java.sql.SQLSyntaxErrorException: (FZ)V
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      TypeUtils.loadClass("X qYP7u6$]Lv", classLoader1);
      classLoader1.setClassAssertionStatus("fCdY%:B?{V", false);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("3StYk=jcS*");
      Class<Double> class0 = Double.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      TypeUtils.castToBoolean((Object) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) javaBeanDeserializer0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.fnv1a_64("~4e");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      Class<UUID> class0 = UUID.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getKoltinConstructorParameters(class0);
      Date date0 = new Date((-1L));
      LocalDate localDate0 = date0.toLocalDate();
      date0.getTime();
      Date date1 = Date.valueOf(localDate0);
      TypeUtils.isTransient((Method) null);
      // Undeclared exception!
      try { 
        date1.toInstant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockThread mockThread0 = new MockThread("java.time.");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("YID.ghJ?75P/)X", classLoader0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, linkedHashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("0j>Qlw)_", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.deny", class1, class2, class1, (Field) null, 45, 0, (byte) (-78));
      parserConfig0.createFieldDeserializer((ParserConfig) null, javaBeanInfo0, fieldInfo0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) byte0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      Class<Byte> class1 = Byte.TYPE;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class1, (PropertyNamingStrategy) null);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Object object0 = new Object();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast(object0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TypeUtils.isNumber("Ydow\"\"U");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Ydow\"\"U");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.loadClass("Ljava.awt.Color");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getParserFeatures(class0);
      System.setCurrentTimeMillis((-2221L));
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils.fnv1a_64("j");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.keySet();
      linkedHashMap0.values();
      linkedHashMap0.entrySet();
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazer", "qeqF?N4Ms%)!BlqM=");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      linkedHashMap0.put("Ljava.lang.AutoCloseable", "can not cast to Date, value : ");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("", biFunction0);
      linkedHashMap0.put("can not cast to Date, value : ", "_<&");
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      TypeUtils.loadClass("sh0%B]Z");
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      TypeUtils.isNumber("}8'YUVG5Lw");
      Class<?> class0 = TypeUtils.loadClass("[J");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeSupport", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.loadClass("fD@9i&3G>GCSeQ-0yW-B");
      TypeUtils.castToBytes("fD@9i&3G>GCSeQ-0yW-B");
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      Class<Long> class0 = Long.TYPE;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[4]);
      ParserConfig parserConfig0 = new ParserConfig();
      Insets insets0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(insets0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.loadClass("t-+lCgNSS3+#T4Qm3");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Collator> class0 = Collator.class;
      TypeUtils.getKoltinConstructorParameters((Class) null);
      TypeUtils.isHibernateInitialized(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.aliba\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.fnv1a_64("_{*");
      TypeUtils.getClassFromMapping("_{*");
      TypeUtils.loadClass("_{*");
      TypeUtils.castToLong((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class1);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Hijrah-umalqura AH 1435-04-14
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize("<nk5bHJ9H");
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.isHibernateInitialized(class0);
      Class<Locale> class2 = Locale.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayList<NoClassDefFoundError> arrayList0 = new ArrayList<NoClassDefFoundError>();
      Class<Integer> class0 = Integer.TYPE;
      String string0 = TypeUtils.decapitalize("org.springframework.security.authentication.UsernamePasswordAuthenticationToken");
      assertEquals("org.springframework.security.authentication.UsernamePasswordAuthenticationToken", string0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Color");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Color");
      assertFalse(boolean0);
      
      TypeUtils.cast((Object) null, (Type) null, (ParserConfig) null);
      String string0 = TypeUtils.decapitalize("Ljava.awt.Color");
      assertEquals("ljava.awt.Color", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "Ljava.awt.Rectangle";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader1.setPackageAssertionStatus("Ljava.awt.Rectangle", false);
      TypeUtils.loadClass("Ljava.awt.Rectangle", classLoader1, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      TypeUtils.isKotlin(class1);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      point1.y = 35;
      point1.setLocation(177, 35);
      point0.translate(2204, 2204);
      point1.move(2204, 2204);
      point1.translate(2204, 35);
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point1, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<InternalError> class0 = InternalError.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<VerifyError> class1 = VerifyError.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils.loadClass("X");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "X", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.loadClass("e");
      TypeUtils.isNumber("e");
      byte[] byteArray0 = TypeUtils.castToBytes("e");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 30);
      jSONReaderScanner0.scanUUID('%');
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "j";
      TypeUtils.loadClass("j");
      TypeUtils.getCollectionItemClass((Type) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      mockIllegalStateException0.fillInStackTrace();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      noSuchFieldError0.getLocalizedMessage();
      mockIllegalStateException0.initCause(noSuchFieldError0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("j", mockIllegalStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransactionRollbackException: j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.isNumber("Ydow\"\"U");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ydow\"\"U", "Ydow\"\"U");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TypeUtils typeUtils0 = new TypeUtils();
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Av%eelIW&Si`|WD");
      Constructor<MockJapaneseDate>[] constructorArray0 = (Constructor<MockJapaneseDate>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<Float> class0 = Float.class;
      TypeUtils.isProxy(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("_N640R+NnGU", "Av%eelIW&Si`|WD");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, false, propertyNamingStrategy0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<DataTruncation> class2 = DataTruncation.class;
      TypeUtils.getSuperMethodAnnotation(class2, (Method) null);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("LTEA;+L\"", (Method) null, (Field) null, class1, parameterizedTypeImpl0, 45, 45, 45, (JSONField) null, (JSONField) null, "LTEA;+L\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Locale locale0 = TypeUtils.toLocale("_2~c?9`%bl'tx[");
      assertEquals("_2~C?9`%BL'TX[", locale0.toString());
      
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float((-1781.9715));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -1781.9716
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kotlin.ranges.CharRange");
      Class<Long> class0 = Long.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      TypeUtils.isKotlin(class1);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      point1.y = 35;
      point1.setLocation(177, 35);
      int int0 = 2204;
      point0.translate(2204, 2204);
      point1.move(2204, 2204);
      point1.translate(2204, 35);
      ParserConfig parserConfig0 = null;
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      Class<Locale> class1 = Locale.class;
      TypeUtils.castToJavaBean((Object) null, class1);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Class<TimeDeserializer> class2 = TimeDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<MockHijrahDate> class3 = MockHijrahDate.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class3, (Type) class3, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockHijrahDate.now();
      InstantiationException instantiationException0 = new InstantiationException();
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.fnv1a_64(")y");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("~i6ncrjiMr6!QV1N_", (ClassLoader) aSMClassLoader0);
      TypeUtils.loadClass("~i6ncrjiMr6!QV1N_");
      TypeUtils.getCollectionItemType((Type) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("~i6ncrjiMr6!QV1N_", "n-DyfVB/d(?0", 186, (Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLFeatureNotSupportedException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.keySet();
      linkedHashMap0.values();
      linkedHashMap0.entrySet();
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazer", "qeqF?N4Ms%)!BlqM=");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      linkedHashMap0.put("Ljava.lang.AutoCloseable", "can not cast to Date, value : ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("", biFunction0);
      linkedHashMap0.put("can not cast to Date, value : ", "_<&");
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy1, false);
      TypeUtils.decapitalize((String) null);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(parserConfig0);
      TimeDeserializer timeDeserializer0 = TypeUtils.castToJavaBean(map0, class0, parserConfig1);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getClass((Type) genericArrayType0);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      TypeUtils.loadClass("org.apache.ibatis.javassist.util.proxy.ProxyObject");
      boolean boolean0 = TypeUtils.isNumber(".@2+%C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      MockHijrahDate.now();
      TreeMap<DecimalFormat, InternalError> treeMap0 = new TreeMap<DecimalFormat, InternalError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isNumber("1k[1$YT$M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass(":U-Oj", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils typeUtils0 = new TypeUtils();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.loadClass("Ljava.awt.Color");
      TypeUtils.isNumber("java.time.temporal.TemporalAdjuster");
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      String string0 = TypeUtils.castToString(locale0);
      assertNotNull(string0);
      
      String string1 = TypeUtils.decapitalize("SELF_SUPPRESSION_MESSAGE");
      assertEquals("SELF_SUPPRESSION_MESSAGE", string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("getgetNextException");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TypeUtils.castToBytes("getgetNextException");
      String string0 = "byte";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<BreakIterator> class0 = BreakIterator.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils.loadClass("e");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("throwException", (ClassLoader) aSMClassLoader0, false);
      TypeUtils.decapitalize("0");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) concurrentHashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      MockHijrahDate.now();
      TypeUtils.loadClass("java.time.chrono.HijrahDate");
      TypeUtils.isNumber("java.time.chrono.HijrahDate");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("java.time.chrono.HijrahDate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.time.chrono.HijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils.toLocale(",6.e\u0001_2bv_1S)G7");
      Integer integer0 = new Integer(91);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 91
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Type type0 = TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.unwrapOptional(class0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("f9&Bjx9ta::");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.lang.MockThrowable: f9&Bjx9ta::
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      MockThread mockThread0 = new MockThread();
      mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(":U-Oj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : :U-Oj
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", property ");
      Class<InternalError> class0 = InternalError.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.getCollectionItemType(class0);
      ThreadGroup threadGroup0 = new ThreadGroup("getgetCause");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, ", property ", (-307L));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("getgetCause", classLoader0, false);
      HashMap<NumberDeserializer, PropertyNamingStrategy> hashMap0 = new HashMap<NumberDeserializer, PropertyNamingStrategy>();
      TypeUtils.castToBigDecimal(hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(198);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "e", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils.isNumber("Ydow\"\"U");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ydow\"\"U", "Ydow\"\"U");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLSyntaxErrorException: Ydow\"\"U
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.isNumber("7+*:MkJIrOZRk");
      TypeUtils.loadClass("MMkeD{R");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("MMkeD{R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : MMkeD{R
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.isNumber("7+*:MkJIrOZRk");
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("7+*:MkJIrOZRk", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getClass((Type) genericArrayType0);
      Locale locale0 = TypeUtils.toLocale("Ljava.awt.Rectangle");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : ljava.awt.rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      MockHijrahDate.now();
      TypeUtils.isNumber("8u(6P<XA4TB\"RMgm>`");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("8u(6P<XA4TB\"RMgm>`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.toLocale("_2~c?9`%bl'tx[");
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      MockThread mockThread0 = new MockThread("to");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeSupport", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "X", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.toLocale("_2~c?9`%bl'tx[");
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.isNumber("_2~c?9`%bl'tx[");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.clearClassMapping();
      TypeUtils.decapitalize("");
      TypeUtils.castToSqlTime("");
      Class<SQLException> class0 = SQLException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>((byte)36, (byte)3);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      long long0 = TypeUtils.fnv1a_64_lower("A6a");
      assertEquals((-1842064499118670691L), long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Ydow\"\"U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ydow\"\"U
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockHijrahDate.now();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Ydow\"\"U");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ydow\"\"U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockHijrahDate.now();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("javax.xml.datatype.XMLGregorianCalendar", classLoader1);
      ArrayList<PropertyProcessableDeserializer> arrayList0 = new ArrayList<PropertyProcessableDeserializer>();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addAccept("%");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "}_j", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}_j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      TypeUtils.loadClass("e");
      TypeUtils.toLocale("WHR");
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      TypeUtils.isPath(class1);
      AtomicInteger atomicInteger0 = new AtomicInteger(4140);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, typeArray0[4]);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicInteger0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(treeMap0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("o'hFI;");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable: o'hFI;
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeUtils.loadClass("e");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      InstantiationError instantiationError0 = new InstantiationError("GdpVI4*-;=OP");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.InstantiationError: GdpVI4*-;=OP
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockHijrahDate.now();
      InstantiationException instantiationException0 = new InstantiationException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      ThreadGroup threadGroup0 = new ThreadGroup("javax.persstence.ManyToMany");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "javax.persstence.ManyToMany", fieldArray0);
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.getParserFeatures(class0);
      Type type0 = TypeUtils.unwrapOptional(class0);
      Type type1 = TypeUtils.getCollectionItemType(class0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type1;
      typeArray0[1] = type0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = type1;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<StackOverflowError> class1 = StackOverflowError.class;
      parserConfig0.checkAutoType((String) null, class1);
      typeArray0[4] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type1, typeArray0[1]);
      typeArray0[5] = (Type) parameterizedTypeImpl0;
      typeArray0[6] = type1;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      ParserConfig parserConfig1 = new ParserConfig();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.autoTypeSupport", intArray0);
      SQLException sQLException0 = new SQLException(batchUpdateException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLException0, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class java.sql.SQLException, write javaBean error, fastjson version 1.2.46, class java.sql.BatchUpdateException, fieldName : cause, create asm serializer error, class long
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockThread mockThread0 = new MockThread("q][m7Q~");
      TypeUtils.loadClass("getMessage");
      Integer integer0 = new Integer((-89072757));
      TypeUtils.castToFloat(integer0);
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.loadClass("QMdQPhs}Tl^;r");
      Insets insets0 = new Insets((-1937470526), 11, (-603), 13);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ConcurrentHashMap<Double, SQLClientInfoException> concurrentHashMap0 = new ConcurrentHashMap<Double, SQLClientInfoException>();
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      OutOfMemoryError outOfMemoryError0 = TypeUtils.cast((Object) concurrentHashMap0, class0, parserConfig0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.toLocale("_2~c?9`%bl'tx[");
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("_2~c?9`%bl'tx[");
      TypeUtils.castToShort((Object) null);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VRaxt4yo");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TypeUtils.castToString(numberFormatException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.autoTypeSupport", mockIllegalArgumentException0);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLRecoverableException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isNumber("null");
      Class<NoSuchMethodError> class1 = NoSuchMethodError.class;
      TypeUtils.castToJavaBean((Object) "null", class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils.loadClass("e");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("serialize exceeded MAX_OUTPUT_LENGTH=", linkedHashMap0);
      Class<BitSet> class0 = BitSet.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("serialize exceeded MAX_OUTPUT_LENGTH=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : serialize exceeded MAX_OUTPUT_LENGTH=
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      TypeUtils.loadClass("org.apache.ibatis.javassist.util.proxy.ProxyObject");
      TypeUtils.toLocale("IxD");
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeUtils.isPath(class2);
      AtomicInteger atomicInteger0 = new AtomicInteger(4140);
      TypeUtils.getCollectionItemType(class2);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class2);
      ParserConfig parserConfig0 = new ParserConfig();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLInvalidAuthorizationSpecException -> org.evosuite.runtime.mock.java.util.MockGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TypeUtils.loadClass("e");
      ThreadGroup threadGroup0 = new ThreadGroup(" A`}61u&Q=3a");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, " A`}61u&Q=3a");
      MockThread mockThread0 = new MockThread(threadGroup1, "]((\u0006m9yM");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TypeUtils.isNumber("\"\"_r*K#~");
      TypeUtils.castToFloat((Object) null);
      HashMap<Dimension, PropertyNamingStrategy> hashMap0 = new HashMap<Dimension, PropertyNamingStrategy>();
      Dimension dimension0 = new Dimension();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      hashMap0.put(dimension0, propertyNamingStrategy0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) hashMap0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.awt.Dimension cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      parserConfig0.addAccept("MeD{R");
      Properties properties0 = new Properties();
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) properties0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils.getClassFromMapping("j");
      Class<Throwable> class0 = Throwable.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TypeUtils.castToString((Object) null);
      TypeUtils.toLocale("(Ljava/lang/Object;Ljava/lang/String;)V");
      TypeUtils.castToDouble((Object) null);
      TypeUtils.castToChar("j");
      TypeUtils.castToDate((Object) null);
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      TypeUtils.castToJavaBean((Object) null, class1);
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils typeUtils0 = new TypeUtils();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockThread mockThread0 = new MockThread("q][m7Q~");
      ClassLoader.getSystemClassLoader();
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("q][m7Q~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : q][m7Q~
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      MockHijrahDate.now();
      MockThread mockThread0 = new MockThread("[x*uj9g{]^XM*Z})E`");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      Class<SecurityException> class0 = SecurityException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[8], typeArray0[2]);
      ParserConfig parserConfig1 = new ParserConfig();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("OwnGNrpjm", "+");
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class0 = Double.TYPE;
      TypeUtils.unwrapOptional(class0);
      String string0 = "java.awt.Point";
      TypeUtils.fnv1a_64("java.awt.Point");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("java.awt.Point");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HttpCookie> class0 = HttpCookie.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToBigDecimal((Object) null);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.loadClass("e");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      Type[] typeArray0 = new Type[7];
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass((Class<?>) null, jSONType0);
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) null;
      typeArray0[5] = (Type) null;
      typeArray0[6] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[3]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, (Type) null, parameterizedTypeImpl0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalMonitorStateException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@f449711f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<Collator> class0 = Collator.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.global;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(objectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.getParserFeatures(class0);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class1;
      TypeUtils.fnv1a_64_lower("$_65Va`JJ");
      HashMap<String, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, String>((-36872586), 1790.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -36872586
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "GhhV(2Iz?\"x$ `)\\1s";
      TypeUtils.fnv1a_64_lower("GhhV(2Iz?\"x$ `)\u0001s");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("GhhV(2Iz?\"x$ `)\u0001s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : GhhV(2Iz?\"x$ `)\u0001s
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) genericArrayType0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) genericArrayType0;
      Class<VerifyError> class1 = VerifyError.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("C9u`&f#Fs&%oa", classLoader0, false);
      int int0 = 178;
      FieldInfo fieldInfo0 = new FieldInfo("C9u`&f#Fs&%oa", class1, class0, (Type) null, (Field) null, (-1), 2154, 178);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      typeArray0[6] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[6]);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) genericArrayType0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class $java.lang.reflect.GenericArrayType$$EnhancerByMockitoWithCGLIB$$2f30fb9c, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.creation.cglib.MethodInterceptorFilter, fieldName : 0, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.handler.InvocationNotifierHandler, fieldName : handler, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TypeUtils.loadClass("e");
      ThreadGroup threadGroup0 = new ThreadGroup(" A`}61u&Q=3a");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, " A`}61u&Q=3a");
      MockThread mockThread0 = new MockThread(threadGroup1, " A`}61u&Q=3a");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TypeUtils.loadClass("t-+lCgNSS3+#T4Qm3");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)101;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bigInteger0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.ClientInfoStatus
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("L");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.loadClass("MMkeD{R");
      String string0 = "Ljava.awt.Font";
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("Ljava.awt.Font");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("7+*:MkJIrOZRk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7+*:MkJIrOZRk\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<Dimension, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<Dimension, SQLTimeoutException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TypeUtils.loadClass("");
      Boolean boolean0 = TypeUtils.castToBoolean("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "X";
      TypeUtils.loadClass("X");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "X", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getClass((Type) genericArrayType0);
      TypeUtils.castToChar((Object) null);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.decapitalize("uL`{]N}H");
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = File.pathSeparator;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("_2~c?9`%bl'tx[");
      TypeUtils.castToShort((Object) null);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VRaxt4yo");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TypeUtils.castToString(numberFormatException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":", mockIllegalArgumentException0);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      TypeUtils.unwrapOptional((Type) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLRecoverableException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isNumber("null");
      Boolean boolean0 = TypeUtils.castToBoolean("null");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      ThreadGroup threadGroup0 = new ThreadGroup("kotlin.ranges.ClosedDoubleRange");
      MockThread mockThread0 = new MockThread(threadGroup0, "kotlin.ranges.ClosedDoubleRange");
      MockThread mockThread1 = new MockThread(mockThread0, "m6=:0");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : Thread[kotlin.ranges.ClosedDoubleRange,5,kotlin.ranges.ClosedDoubleRange]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("X");
      MockThread mockThread0 = new MockThread(threadGroup0, "ownerContext");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "n)((Z,_r");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "W%|E'I#H`");
      mockThread0.setUncaughtExceptionHandler(threadGroup1);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Float float0 = new Float((-315.0F));
      Class<Character> class0 = Character.TYPE;
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : -315.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"asmEnable\":true,\"autoTypeSupport\":false,\"compatibleWithJavaBean\":true,\"deserializers\":{},\"fieldBased\":false,\"symbolTable\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[{}],\"rawType\":{},\"typeName\":\"java.util.List<java.lang.String>\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "X";
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "X");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig();
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : Thread[X,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setPackageAssertionStatus("com.alibaba.fastjson.parser.JSONToken", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.ParserConfig@97
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils.castToByte("");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Collator> class0 = Collator.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Insets> class0 = Insets.class;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, (PropertyNamingStrategy) null, false);
      Class<Locale> class1 = Locale.class;
      MockThread mockThread0 = new MockThread((Runnable) null);
      mockThread0.getContextClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) illegalAccessError0, class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "%";
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addAccept("%");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "}_j", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}_j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockHijrahDate.now();
      AtomicInteger atomicInteger0 = new AtomicInteger(2147483645);
      Boolean boolean0 = TypeUtils.castToBoolean(atomicInteger0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<Integer> class0 = Integer.TYPE;
      Date date0 = new Date((-1L));
      LocalDate localDate0 = date0.toLocalDate();
      Date.valueOf(localDate0);
      MockDateFormat.getTimeInstance();
      SQLDataException sQLDataException0 = new SQLDataException("N!vPE_h8:Sjx)5UE");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("getMetaClass", "getMetaClass", (-1847115407), sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException(sQLTimeoutException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(sQLDataException1);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalStateException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLDataException: java.sql.SQLTimeoutException: getMetaClass
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Float> class0 = Float.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(locale0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
