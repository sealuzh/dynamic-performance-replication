/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:06:00 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":7mP;Hg83*SK44f[d");
      Token token0 = xPathLexer0.dollar();
      assertEquals(":", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("7", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("P", token3.getTokenText());
      
      char char0 = xPathLexer0.LA((-1));
      assertEquals('m', char0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN?;GFm'rc+");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.at();
      token1.toString();
      xPathLexer0.div();
      token0.toString();
      Token token2 = xPathLexer0.doubleColon();
      token1.toString();
      token2.toString();
      token0.toString();
      Token token3 = xPathLexer0.number();
      token2.toString();
      token0.toString();
      token3.toString();
      token2.toString();
      token0.toString();
      token3.toString();
      token0.toString();
      token2.toString();
      xPathLexer0.setPreviousToken(token3);
      token1.toString();
      token1.toString();
      token3.toString();
      xPathLexer0.plus();
      token0.toString();
      xPathLexer0.setXPath("dh<}SqOeLYrkz<");
      xPathLexer0.nextToken();
      xPathLexer0.consume(2769);
      assertEquals("dh<}SqOeLYrkz<", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("3|-HD^&LzfYGQ");
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('.');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.setXPath("asL##65ZD");
      xPathLexer0.and();
      Token token0 = xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      Token token1 = new Token(29, "asL##65ZD", (-3080), 29);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("%yO");
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('7');
      xPathLexer0.consume((-11));
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.star();
      token1.toString();
      token0.toString();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4*Rv!D:Bp3Of(0S ");
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer(">TZ");
      xPathLexer1.setXPath(">TZ");
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer2.leftParen();
      xPathLexer0.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T_eT=fP*lN)0");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1xU#5]p]");
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('7');
      xPathLexer0.rightBracket();
      xPathLexer0.star();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = new Token(6, ") (", 6, 33);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("C");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertNull(token2);
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T_eT=fP*lN)0");
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer1.consume();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("_eT", token3.getTokenText());
      
      xPathLexer1.getPreviousToken();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("=", token4.getTokenText());
      
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer1.leftParen();
      xPathLexer0.setXPath("`M");
      xPathLexer1.leftParen();
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierChar('j');
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.setXPath(">JSU!|t)In[ZP");
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      Token token0 = xPathLexer0.dollar();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer2.identifierOrOperatorName();
      Token token1 = xPathLexer1.getPreviousToken();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sDYz[$5{<)&gAwb}");
      xPathLexer0.not();
      xPathLexer0.isIdentifierChar('k');
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      xPathLexer0.setXPath("Q$>@VTzx`Gd?`?b7.:T");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4*Rv!D:Bp3Of(0S ");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("4", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(20, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1xU#5]p]");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('7');
      assertFalse(boolean0);
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("x", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      String string0 = token2.toString();
      assertEquals("[ (20) (U)", string0);
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token4 = xPathLexer0.dollar();
      assertEquals("#", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.or();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.setXPath("z >DKiL");
      Token token1 = xPathLexer0.leftParen();
      assertEquals("z", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(9, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("D", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("K", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("i", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("asL##65ZD");
      xPathLexer1.colon();
      xPathLexer1.slashes();
      xPathLexer1.nextToken();
      xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xo`%eiH*3=m5C{3S~{tG");
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('7');
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1280));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T_eT=fP*lN)0");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer0.setXPath("G+R-R7H&%}%");
      xPathLexer0.nextToken();
      xPathLexer0.setXPath(")");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.rightBracket();
      XPathLexer xPathLexer3 = new XPathLexer(")");
      assertFalse(xPathLexer3.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D1<dj`Xk");
      xPathLexer0.number();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.relationalOperator();
      assertEquals("<", token1.getTokenText());
      assertEquals(7, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN?;GFZmrc+");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.slashes();
      Token token1 = xPathLexer1.number();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer0.mod();
      xPathLexer1.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l@kxtPyf.%cm");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("l@kxtPyf.%cm");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.whitespace();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ijzm!7a");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      Token token1 = xPathLexer0.notEquals();
      String string0 = token0.toString();
      assertEquals("[ (13) (I)", string0);
      
      Token token2 = xPathLexer0.nextToken();
      Token token3 = xPathLexer0.not();
      assertEquals("!", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      token1.toString();
      Token token4 = xPathLexer0.minus();
      assertEquals("7", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      String string1 = token1.toString();
      assertEquals("[ (22) (jz)", string1);
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("a", token5.getTokenText());
      
      String string2 = token2.toString();
      assertEquals("[ (15) (m)", string2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "\">;DIw|[`gOf_Dp";
      XPathLexer xPathLexer0 = new XPathLexer("\">;DIw|[`gOf_Dp");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{|0vA@+8j~AhZJx}UQ");
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.consume((-2019));
      token0.toString();
      xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("g0Qtut#$]72");
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer0.equals();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.operatorName();
      xPathLexer1.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xo`%eiH*3=m5C{3S~{tG");
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("\">;DIw|[`gf_Dp");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.number();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("_FCLM");
      xPathLexer1.at();
      xPathLexer0.pipe();
      XPathLexer xPathLexer6 = new XPathLexer("-4CMV");
      xPathLexer4.mod();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer6.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer("\">;DIw|[`gf_Dp");
      Token token0 = xPathLexer5.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wwb:L'6n3?\"wq!n7a");
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("");
      Token token0 = xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=:@@R;j");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.literal();
      xPathLexer0.comma();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer1.number();
      xPathLexer2.colon();
      xPathLexer2.mod();
      xPathLexer2.getXPath();
      String string0 = xPathLexer0.getXPath();
      assertEquals("=:@@R;j", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN?;GFZmrc+");
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      token0.toString();
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.whitespace();
      token2.toString();
      token0.toString();
      String string0 = token2.toString();
      assertEquals("[ (-2) ()", string0);
      
      Token token3 = xPathLexer0.star();
      assertEquals("?", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.or();
      String string1 = token0.toString();
      assertEquals("[ (4) (c)", string1);
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals(";", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1xU#5]p]");
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":7mP;Hg83*SK44f[l");
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "cN?;GFZmrc+";
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      xPathLexer0.setXPath(") (");
      XPathLexer xPathLexer1 = new XPathLexer(")");
      xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN?;GFZmrc+");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      xPathLexer0.equals();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("[ (17) (c)");
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.plus();
      token1.toString();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer(".p");
      xPathLexer1.number();
      token1.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      Token token2 = xPathLexer0.operatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("obU^!iZ0wvn3@f");
      Token token0 = xPathLexer0.notEquals();
      String string0 = token0.toString();
      assertEquals("[ (22) (ob)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("U", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("!", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\">;DIw|[`gOf_Dp");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("\"", token0.getTokenText());
      
      Token token1 = xPathLexer0.relationalOperator();
      assertNotNull(token1);
      
      token1.toString();
      Token token2 = xPathLexer0.equals();
      String string0 = token1.toString();
      assertEquals("[ (9) (>)", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (21) (;)", string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(". qdGG|fNe");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'o`%%H*3QU5O{3;~{tG");
      xPathLexer0.setXPath("'");
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("ngM8 nA4H3");
      Token token1 = xPathLexer0.literal();
      assertEquals("gM8 ", token1.getTokenText());
      assertNotNull(token1);
      assertEquals(27, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(":7mP;H82*SK=|kf[l");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(":7mP;H82*SK=|kf[l");
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      xPathLexer1.slashes();
      xPathLexer2.and();
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath(":7mP;H82*SK=|kf[l");
      xPathLexer1.minus();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer2.mod();
      xPathLexer0.identifierOrOperatorName();
      String string0 = xPathLexer2.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN?;GFZmrc+");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("[ (21) (c)");
      xPathLexer0.relationalOperator();
      xPathLexer1.getXPath();
      xPathLexer0.identifierOrOperatorName();
      token1.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.equals();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN?;GFZmrc+");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.rightParen();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1xU#5]p]");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("U", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("5", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.equals();
      assertEquals("]", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("p", token8.getTokenText());
      
      token1.toString();
      Token token9 = xPathLexer0.getPreviousToken();
      assertEquals("p]", token9.getTokenText());
      
      Token token10 = xPathLexer1.dollar();
      assertEquals(26, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-1426));
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3wpP`i;3xZ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("3", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("w", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T_eT=fP*lN)0");
      XPathLexer xPathLexer1 = new XPathLexer("`2wY1e{wF7");
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.leftParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2152));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@QcUy, gsn*~");
      Token token0 = xPathLexer0.dots();
      assertEquals("{", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("@", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("Q", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("932bd*a");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("932", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("932bd*a");
      xPathLexer0.setXPath(")");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(")", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("9", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.number();
      xPathLexer0.at();
      xPathLexer0.setXPath("fYPO:)s\"}l+=");
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H$:~~wZBJ?riqIadQ");
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.minus();
      assertEquals("$", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(":", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("~", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("H", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@QcUy, gsn*~");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals("{@QcUy, gsn*~", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("obU^!iZ0wvn3@f");
      Token token0 = xPathLexer0.colon();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.setXPath("Q$>@VTzx`Gd?`?b7.:T");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN?;GFZmrc+");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      Token token1 = xPathLexer0.rightParen();
      String string0 = token0.toString();
      assertEquals("[ (5) (c)", string0);
      
      Token token2 = xPathLexer0.at();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(16, token2.getTokenType());
      assertEquals("?", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(";", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.or();
      xPathLexer2.relationalOperator();
      String string1 = token1.toString();
      assertEquals("[ (2) (N)", string1);
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      int int0 = xPathLexer3.endPosition();
      assertEquals(3, int0);
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("cN?;GFZmrc+");
      Token token8 = xPathLexer4.number();
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token9 = xPathLexer4.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer3.consume();
      XPathLexer xPathLexer8 = new XPathLexer();
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('<');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N?GFZmrc+");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.leftBracket();
      String string0 = token0.toString();
      assertEquals("[ (22) (N?)", string0);
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      String string1 = token1.toString();
      assertEquals("[ (15) (FZmrc)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (3) (+)", string2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "Ob]d8EpX&lP";
      XPathLexer xPathLexer1 = new XPathLexer("Ob]d8EpX&lP");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer1.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("Ob]d8EpX&lP");
      xPathLexer2.nextToken();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<LvvA;aEo^<-");
      Token token0 = xPathLexer0.minus();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      token0.toString();
      xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer1.identifier();
      xPathLexer0.star();
      Token token1 = xPathLexer1.pipe();
      xPathLexer1.whitespace();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("uUW44N) e3");
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.getPreviousToken();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      Token token2 = xPathLexer0.and();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":7mP;Hg83*SK44f[d");
      Token token0 = xPathLexer0.dollar();
      assertEquals(":", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("mP", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.not();
      assertEquals(";", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      char char0 = xPathLexer0.LA((-1));
      assertEquals(';', char0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("g=5*)3IqW");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("y|d4q+.m(`GiWacjL");
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer2.or();
      Token token3 = xPathLexer4.nextToken();
      assertEquals("y", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.setPreviousToken(token1);
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("obU^!iZ0wvn3@f");
      xPathLexer0.or();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) (b)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      int int0 = xPathLexer0.endPosition();
      assertEquals(14, int0);
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("U", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("obU^!iZ0wvn3@f");
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("o", token3.getTokenText());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer("4$oLTOsj;y@k~T`");
      Token token4 = xPathLexer3.number();
      assertEquals("4", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.and();
      Token token5 = xPathLexer3.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer1.setXPath("obU^!iZ0wvn3@f");
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer6.or();
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token7 = xPathLexer1.whitespace();
      assertEquals("", token7.getTokenText());
      assertEquals((-2), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".)lmw%.b<NwuLPr_");
      xPathLexer0.and();
      Token token0 = xPathLexer0.number();
      assertEquals(31, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("lm", token2.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer(".)lmw%.b<NwuLPr_");
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer(".)lmw%.b<NwuLPr_");
      XPathLexer xPathLexer7 = new XPathLexer("vx/PBp(Q|]");
      Token token4 = xPathLexer7.dollar();
      assertEquals("v", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer6.setXPath(".)lmw%.b<NwuLPr_");
      Token token5 = xPathLexer2.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer1.equals();
      Token token6 = xPathLexer5.plus();
      assertEquals(".", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.setPreviousToken((Token) null);
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token7 = xPathLexer7.slashes();
      assertEquals("x/", token7.getTokenText());
      assertEquals(12, token7.getTokenType());
      
      int int0 = xPathLexer9.endPosition();
      assertEquals(0, int0);
      
      XPathLexer xPathLexer10 = new XPathLexer(".)lmw%.b<NwuLPr_");
      Token token8 = xPathLexer10.whitespace();
      assertEquals((-2), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-&h2,crz2jcIQ9J4");
      xPathLexer0.or();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.plus();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.getXPath();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.consume(17);
      xPathLexer0.or();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fIA]UQ.0Gt8XlN:<6\"");
      Token token0 = xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.setPreviousToken(token0);
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.and();
      String string0 = null;
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g,V-");
      Token token0 = xPathLexer0.plus();
      xPathLexer0.whitespace();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fIA]UQ.0Gt8XlN:<6\"");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer1.rightParen();
      xPathLexer1.equals();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      Token token0 = new Token(29, "fIA]UQ.0Gt8XlN:<6\"", 1, 4669);
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer3.getPreviousToken();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^<6'\"");
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("^", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("<", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("'", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.getXPath();
      xPathLexer0.hasMoreChars();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6=7=3JK-Gl=4t");
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.consume();
      assertEquals("6=7=3JK-Gl=4t", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      int int0 = xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("z >DKiL");
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      int int1 = xPathLexer0.endPosition();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D1<dj`Xk");
      xPathLexer0.number();
      xPathLexer0.minus();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("<LvvA;NoH2K^O<-");
      xPathLexer1.or();
      xPathLexer1.leftBracket();
      xPathLexer0.and();
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer2.doubleColon();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.getPreviousToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("atL##65ZD");
      xPathLexer0.comma();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("<");
      Token token1 = xPathLexer4.nextToken();
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer1.or();
      Token token3 = xPathLexer4.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("a", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("kFVATdr\"");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.operatorName();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer2.identifierOrOperatorName();
      token1.toString();
      XPathLexer xPathLexer3 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nC%ybX|_*qxsm;");
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      xPathLexer0.consume(31);
      xPathLexer0.or();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3552));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN?;GFZmrc+");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.slashes();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer1.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.getXPath();
      xPathLexer0.leftParen();
      xPathLexer0.getPreviousToken();
      xPathLexer0.getXPath();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("o8");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightBracket();
      xPathLexer1.operatorName();
      xPathLexer3.rightBracket();
      xPathLexer3.not();
      xPathLexer1.leftParen();
      xPathLexer3.mod();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer1.whitespace();
      String string0 = xPathLexer2.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN?;GFZmrc+");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.whitespace();
      token0.toString();
      Token token1 = xPathLexer0.pipe();
      Token token2 = xPathLexer0.nextToken();
      Token token3 = xPathLexer0.getPreviousToken();
      token3.toString();
      token3.toString();
      xPathLexer0.slashes();
      xPathLexer0.div();
      token1.toString();
      token3.toString();
      xPathLexer0.dots();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("S=< OvwdR<k%");
      xPathLexer1.setPreviousToken(token3);
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      token1.toString();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.leftParen();
      token2.toString();
      xPathLexer1.relationalOperator();
      xPathLexer2.number();
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IjQGzm!7a");
      xPathLexer0.star();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setXPath(".8D");
      Token token1 = xPathLexer0.at();
      token0.toString();
      Token token2 = xPathLexer0.nextToken();
      token2.toString();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer1.rightBracket();
      Token token3 = xPathLexer1.doubleColon();
      String string0 = "";
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i(T_N2=fJ%yC");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      Token token0 = new Token(18, "i(T_N2=fJ%yC", 18, 18);
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IjxGzm!7a");
      Token token0 = xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.slashes();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("MYJpubmLK");
      xPathLexer3.nextToken();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("[ (11) (j)");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("g{Bzm'~lK");
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".)lmw%.b<NwuLPr_");
      Token token0 = xPathLexer0.number();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.div();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer1.identifier();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fIA]UQ.0Gtq8XlN:<6\"");
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer1.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer("/9S8");
      xPathLexer2.number();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
