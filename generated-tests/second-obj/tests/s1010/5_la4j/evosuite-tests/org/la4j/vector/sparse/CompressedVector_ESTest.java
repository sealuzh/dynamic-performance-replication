/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:54:37 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      String string0 = compressedVector0.toString();
      assertEquals("", string0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(295);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      Vector vector0 = compressedVector0.copyOfLength(0);
      vector0.toString();
      compressedVector0.sliceLeft(0);
      compressedVector0.toSparseVector();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(2793, 2793);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2793' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("o8kDDpbM.p9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18);
      compressedVector0.setAll(18);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(18, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)37).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-481), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[5] = 3179.2354228;
      doubleArray0[6] = 583.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.2857142857142857, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1274, 1274);
      compressedVector0.nonZeroIterator();
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)4, (byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 9;
      MockRandom mockRandom0 = new MockRandom(9);
      // Undeclared exception!
      try { 
        CompressedVector.random(9, (-27.135), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.subtract(1336.783362193336);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(1, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(1274, 2809);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2809.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Double double0 = new Double((-1));
      hashMap0.put(integer0, double0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1353), vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.longs();
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      compressedVector0.setAll(0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2);
      // Undeclared exception!
      try { 
        CompressedVector.random(2, (double) 2, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-3817);
      int int1 = 13;
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.shuffle();
      MockRandom mockRandom0 = new MockRandom(120L);
      // Undeclared exception!
      try { 
        SparseVector.random((-3817), 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3817
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = 0;
      CompressedVector compressedVector0 = (CompressedVector)Vector.fromMap(hashMap0, 9);
      compressedVector0.setAll(726.4412);
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = 32;
      CompressedVector compressedVector0 = (CompressedVector)Vector.fromMap(hashMap0, 32);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 18;
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(18, compressedVector0.length());
      
      double double0 = compressedVector0.get(16);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(18, compressedVector0.length());
      
      compressedVector0.setAll(18);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(18, compressedVector0.cardinality());
      assertEquals(18, compressedVector0.length());
      
      double double1 = compressedVector0.norm();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(76.36753236814714, double1, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(18, compressedVector0.cardinality());
      assertEquals(18, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double((-1333.902));
      assertNotNull(double0);
      assertEquals((-1333.902), (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList0.removeFirstOccurrence(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      
      double[] doubleArray0 = new double[3];
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(3, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector2.each(vectorProcedure1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(3, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CompressedVector.zero(5049, (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -5.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 18;
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      compressedVector0.setAll(2);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, 1588.676583809083).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        Vector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 583.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 583.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 583.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(18, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(18);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(18, compressedVector0.cardinality());
      assertEquals(18, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(18, compressedVector0.cardinality());
      assertEquals(18, compressedVector0.length());
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(18, compressedVector0.cardinality());
      assertEquals(18, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(6, (-2298));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(48, 48);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 48);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(48, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toRowMatrix();
      assertNotNull(cRSMatrix0);
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.divideUnsigned(0, 48);
      assertEquals(0, int0);
      
      Byte byte0 = new Byte((byte) (-73));
      assertNotNull(byte0);
      assertEquals((byte) (-73), (byte)byte0);
      
      long long0 = Byte.toUnsignedLong((byte)35);
      assertEquals(35L, long0);
      
      int int1 = Byte.compare((byte) (-73), (byte) (-23));
      assertFalse(int1 == int0);
      assertEquals((-50), int1);
      
      Byte byte1 = hashMap0.replace(integer0, byte0);
      assertNull(byte1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double[] doubleArray0 = new double[1];
      double double0 = compressedVector0.euclideanNorm();
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(48, compressedVector0.length());
      
      doubleArray0[0] = (double) 48;
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {48.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      
      double double1 = compressedVector2.getOrElse(0, 1635.0155901469);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {48.0}, doubleArray0, 0.01);
      assertEquals(48.0, double1, 0.01);
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      
      compressedVector1.set(1, (byte)35);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(48, compressedVector1.length());
      assertEquals(0.020833333333333332, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = 580;
      CompressedVector compressedVector0 = new CompressedVector(580);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      compressedVector0.nonZeroIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1053.241986941972).when(vectorAccumulator0).accumulate();
      Locale locale0 = new Locale("Wrong input file format: can not read header '%%MatrixMarket'.", "#", "Check your map: Index must be 0..n-1");
      NumberFormat.getCurrencyInstance(locale0);
      compressedVector0.fold(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1333.902)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(580, vectorFunction0);
      compressedVector0.nonZeroAt(580);
      int int1 = 573;
      compressedVector0.getOrElse(573, (-1939.0));
      int int2 = 910;
      CompressedVector compressedVector1 = CompressedVector.zero(3);
      compressedVector1.toBinary();
      CompressedVector compressedVector2 = new CompressedVector(910);
      // Undeclared exception!
      try { 
        compressedVector2.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 18;
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      compressedVector0.setAll(2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        Vector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      compressedVector0.norm();
      int int0 = 0;
      Integer.sum((-1), 0);
      Long long0 = new Long(2672L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, long0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 76.36753236814714;
      doubleArray0[1] = (double) 2672L;
      Vector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2672L).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-1), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 18;
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      compressedVector0.norm();
      Integer.sum(0, 0);
      Long long0 = new Long(2672L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, long0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2672L).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      compressedVector0.norm();
      Integer.sum(8, 0);
      Long long0 = new Long(2672L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(8);
      hashMap0.put(integer0, long0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 76.36753236814714;
      doubleArray0[1] = (double) 2672L;
      Vector vector0 = Vector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Vector vector1 = vector0.transform(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction1);
      vector1.manhattanNorm();
      compressedVector0.equals(vector0, (double) 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      compressedVector0.swapElements((-4513), 1217);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 482;
      Integer integer0 = new Integer(1676);
      Integer integer1 = new Integer(253);
      hashMap0.put(integer0, integer1);
      Integer integer2 = new Integer(482);
      hashMap0.put(integer2, integer2);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 528);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      compressedVector0.norm();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.set(8, 18);
      compressedVector0.swapElements(8, 8);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-3817), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = 574;
      CompressedVector compressedVector0 = CompressedVector.zero(574, 32);
      compressedVector0.setAll(583.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(587);
      compressedVector0.setAll(587);
      compressedVector0.setAll(587);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure1);
      compressedVector0.swapElements((-419), (-2996));
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-4240.1392083));
      Double.min(92.404, 4312.20121716023);
      linkedList0.add(double0);
      Double.isFinite(92.404);
      linkedList0.offer(double0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      linkedList0.add(double0);
      compressedVector0.innerProduct(sparseVector0);
      compressedVector0.toDenseVector();
      compressedVector0.shuffle();
      CompressedVector compressedVector1 = CompressedVector.fromCSV("");
      compressedVector1.nonZeroIterator();
      compressedVector1.infinityNorm();
      int int0 = 3;
      CompressedVector compressedVector2 = CompressedVector.zero(10, 3);
      compressedVector1.iterator();
      compressedVector2.nonZeroAt(3);
      CompressedVector.zero(10, 10);
      // Undeclared exception!
      try { 
        compressedVector1.swapElements(10, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 18;
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      compressedVector0.norm();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale0 = Locale.ROOT;
      NumberFormat.getPercentInstance(locale0);
      int int1 = 2;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2290), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 18;
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      compressedVector0.norm();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale0 = Locale.ROOT;
      NumberFormat.getPercentInstance(locale0);
      int int1 = 2;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(546, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 9;
      intArray0[2] = 8;
      intArray0[3] = 511;
      intArray0[4] = 534;
      intArray0[5] = 8;
      intArray0[6] = 2;
      intArray0[7] = 2;
      CompressedVector compressedVector0 = new CompressedVector(8, 2, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure1);
      org.evosuite.runtime.Random.setNextRandom((-2151));
      compressedVector0.nonZeroAt(13);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector0 = new CompressedVector(574);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getDecimalFormatSymbols();
      compressedVector0.nonZeroIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1333.902)).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1333.902)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(255, vectorFunction0);
      compressedVector0.manhattanNorm();
      compressedVector0.swapElements(255, 552);
      int[] intArray0 = new int[8];
      intArray0[0] = 552;
      intArray0[1] = 552;
      intArray0[2] = 552;
      intArray0[3] = 552;
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.nonZeroAt(324);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector0 = new CompressedVector(574);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      compressedVector0.nonZeroIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1053.241986941972).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1333.902)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(255, vectorFunction0);
      compressedVector0.swapElements(255, 552);
      compressedVector0.swapElements(552, 574);
      DenseVector denseVector0 = DenseVector.zero(552);
      // Undeclared exception!
      try { 
        compressedVector0.subtract((Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 574 does not equal to 552.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(8);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 2672L;
      Vector vector0 = Vector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 5392.8302).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      vector0.transform(vectorFunction0);
      SparseVector.fromArray(doubleArray0);
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      CompressedVector compressedVector1 = CompressedVector.random(331, 1.0, (Random) mockRandom0);
      compressedVector1.set(8, 0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      compressedVector0.norm();
      Integer.sum(8, 0);
      compressedVector0.norm();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 474.0;
      doubleArray0[2] = 76.36753236814714;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 694.0;
      Vector vector0 = Vector.fromArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      vector0.toMatrixMarket(numberFormat0);
      compressedVector0.equals(vector0, (-3959.779));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      compressedVector0.swapElements(2, 9);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector0 = new CompressedVector(574);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1053.241986941972).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1333.902)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(574, vectorFunction0);
      compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      compressedVector0.swapElements(552, 574);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(949.5258007941164).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1939), vectorFunction1);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.pollFirst();
      CompressedVector.fromCollection(linkedList0);
      compressedVector0.set(552, (-1939));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector0 = new CompressedVector(574);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = decimalFormat0.getDecimalFormatSymbols();
      decimalFormatSymbols0.getInfinity();
      compressedVector0.nonZeroIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)574, 1256.0, (double)574, (-1333.902), 1256.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1333.902)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(255, vectorFunction1);
      compressedVector0.swapElements(255, 574);
      compressedVector0.set(9, 574);
      int int0 = 480;
      org.evosuite.runtime.Random.setNextRandom(480);
      org.evosuite.runtime.Random.setNextRandom((-1456));
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("\u221E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(574);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      compressedVector0.nonZeroIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1053.241986941972).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1333.902)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(574, vectorFunction0);
      compressedVector0.swapElements(574, 540);
      compressedVector0.swapElements(540, 574);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-5), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -5
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(552, 552);
      compressedVector0.setAll(552);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition(675);
      decimalFormat0.applyPattern("coordinate");
      decimalFormat0.parse("*M}vD]MUKo", parsePosition0);
      decimalFormat0.parseObject("WZ", parsePosition0);
      decimalFormat0.getDecimalFormatSymbols();
      compressedVector0.nonZeroIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(265, vectorFunction0);
      compressedVector0.manhattanNorm();
      compressedVector0.swapElements(552, 1);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
