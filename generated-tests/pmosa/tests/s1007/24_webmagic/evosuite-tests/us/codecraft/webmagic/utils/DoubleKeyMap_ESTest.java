/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:17:36 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      doubleKeyMap0.put((Object) "", object0, (Object) "");
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      doubleKeyMap0.newMap();
      doubleKeyMap1.newMap();
      doubleKeyMap1.remove("");
      doubleKeyMap0.remove(object0, (Object) null);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Object>(class1);
      Integer integer0 = new Integer((-1));
      doubleKeyMap2.remove(integer0, (Object) "");
      Integer integer1 = new Integer(932);
      doubleKeyMap2.remove(integer1);
      HashMap<Integer, Map<String, Object>> hashMap1 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap3 = new DoubleKeyMap<Integer, String, Object>(hashMap1);
      Object object1 = doubleKeyMap3.get((Integer) null, "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Integer, Map<Integer, Object>> hashMap0 = new HashMap<Integer, Map<Integer, Object>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(hashMap0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(class0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(map0);
      Object object0 = new Object();
      doubleKeyMap2.get("", object0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Integer>();
      Object object1 = new Object();
      Integer integer0 = null;
      doubleKeyMap3.put(object1, (Object) map0, (Integer) null);
      DoubleKeyMap<Object, String, String> doubleKeyMap4 = new DoubleKeyMap<Object, String, String>(class0);
      Object object2 = new Object();
      doubleKeyMap4.remove(object2);
      HashMap<String, Map<String, String>> hashMap1 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap5 = new DoubleKeyMap<String, String, String>(hashMap1, class0);
      Map<String, String> map1 = doubleKeyMap5.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap4.put((Object) class0, map1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      doubleKeyMap0.put((Object) "", object0, (Object) "");
      doubleKeyMap0.newMap();
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      HashMap<String, Map<Object, String>> hashMap1 = new HashMap<String, Map<Object, String>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(hashMap1);
      Object object1 = new Object();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap2.put((Object) null, "", integer0);
      Integer integer1 = doubleKeyMap2.put((Object) null, "", (Integer) null);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      HashMap<String, Map<Object, String>> hashMap1 = new HashMap<String, Map<Object, String>>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      hashMap1.replace("", (Map<Object, String>) hashMap2);
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(hashMap1);
      doubleKeyMap1.put("", (Object) null, "");
      hashMap0.put("", (Map<String, Object>) null);
      Object object1 = new Object();
      doubleKeyMap1.get("", (Object) hashMap0);
      DoubleKeyMap<Map<String, Object>, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Map<String, Object>, Object, Object>();
      Map<String, Map<Object, Integer>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap3 = new DoubleKeyMap<String, Object, Integer>(map0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>((Map<Object, Map<String, String>>) null, class0);
      Object object0 = new Object();
      doubleKeyMap0.remove(object0, "");
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0, class1);
      doubleKeyMap1.remove((Object) "wrong proto type map ");
      doubleKeyMap1.remove((Object) class0, (Object) "wrong proto type map ");
      Object object1 = new Object();
      doubleKeyMap1.remove((Object) class1, object1);
      doubleKeyMap1.get((Object) "JHJl<)0A", (Object) null);
      HashMap<String, Map<Object, Object>> hashMap1 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(hashMap1);
      doubleKeyMap2.put((String) null, (Object) null, (Object) null);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      doubleKeyMap2.remove((String) null, (Object) hashMap2);
      Object object2 = new Object();
      doubleKeyMap1.get((Object) null, (Object) null);
      HashMap<Integer, Map<String, Object>> hashMap3 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap3 = new DoubleKeyMap<Integer, String, Object>(hashMap3, class0);
      Integer integer0 = new Integer(1203);
      Integer integer1 = new Integer((-159));
      Object object3 = doubleKeyMap3.put(integer1, (String) null, (Object) class1);
      assertNull(object3);
  }
}
