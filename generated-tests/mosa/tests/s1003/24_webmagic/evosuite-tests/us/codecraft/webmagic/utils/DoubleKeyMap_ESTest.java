/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:40:52 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Object, Map<Object, Map<String, Integer>>> hashMap0 = new HashMap<Object, Map<Object, Map<String, Integer>>>();
      DoubleKeyMap<Object, Object, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<String, Integer>>(hashMap0);
      Object object0 = new Object();
      Map<String, Integer> map0 = doubleKeyMap0.get(object0, (Object) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Map<String, Integer>, Map<Map<String, Integer>, Object>> hashMap0 = new HashMap<Map<String, Integer>, Map<Map<String, Integer>, Object>>();
      DoubleKeyMap<Map<String, Integer>, Map<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, Map<String, Integer>, Object>(hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      doubleKeyMap0.remove((Map<String, Integer>) hashMap1, (Map<String, Integer>) hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Map<String, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<Object, Map<String, Integer>>> hashMap0 = new HashMap<Object, Map<Object, Map<String, Integer>>>();
      DoubleKeyMap<Object, Object, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<String, Integer>>(hashMap0);
      Object object0 = new Object();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(class0);
      Map<String, Integer> map0 = doubleKeyMap1.newMap();
      HashMap<Map<String, Integer>, Map<Object, String>> hashMap1 = new HashMap<Map<String, Integer>, Map<Object, String>>();
      DoubleKeyMap<Map<String, Integer>, Object, String> doubleKeyMap2 = new DoubleKeyMap<Map<String, Integer>, Object, String>(hashMap1);
      doubleKeyMap2.put(map0, (Object) class0, "");
      doubleKeyMap2.put(map0, (Object) hashMap0, "");
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      DoubleKeyMap<Map<String, Integer>, String, Integer> doubleKeyMap3 = new DoubleKeyMap<Map<String, Integer>, String, Integer>();
      doubleKeyMap3.get((Map<String, Integer>) hashMap2);
      DoubleKeyMap<Object, String, Map<String, Integer>> doubleKeyMap4 = new DoubleKeyMap<Object, String, Map<String, Integer>>();
      Object object1 = new Object();
      Map<String, Integer> map1 = doubleKeyMap4.put(object1, (String) null, (Map<String, Integer>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Map<String, Integer>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, Object, String>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      doubleKeyMap0.put((Map<String, Integer>) hashMap0, (Object) "37;*@X+ouU]O", "37;*@X+ouU]O");
      HashMap<Integer, Map<Object, String>> hashMap1 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(hashMap1);
      Integer integer0 = new Integer(0);
      doubleKeyMap1.put(integer0, (Object) doubleKeyMap0, (String) null);
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      String string0 = doubleKeyMap1.get(integer1, object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Map<String, Integer>, Map<Map<String, Integer>, Object>> hashMap0 = new HashMap<Map<String, Integer>, Map<Map<String, Integer>, Object>>();
      HashMap<Map<String, Integer>, Object> hashMap1 = new HashMap<Map<String, Integer>, Object>();
      DoubleKeyMap<Map<String, Integer>, Map<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, Map<String, Integer>, Object>(hashMap0);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      hashMap0.putIfAbsent(hashMap2, hashMap1);
      doubleKeyMap0.newMap();
      doubleKeyMap0.remove((Map<String, Integer>) hashMap2, (Map<String, Integer>) hashMap2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Map<String, Integer>, Map<Map<String, Integer>, Object>> hashMap0 = new HashMap<Map<String, Integer>, Map<Map<String, Integer>, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<String, Integer> map0 = doubleKeyMap0.newMap();
      HashMap<Map<String, Integer>, Object> hashMap1 = new HashMap<Map<String, Integer>, Object>();
      Object object0 = new Object();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.merge((Map<String, Integer>) null, object0, biFunction0);
      hashMap0.put(map0, hashMap1);
      DoubleKeyMap<Map<String, Integer>, Map<String, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Map<String, Integer>, Map<String, Integer>, Object>(hashMap0);
      doubleKeyMap1.newMap();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      doubleKeyMap1.remove((Map<String, Integer>) hashMap2, (Map<String, Integer>) hashMap2);
      Object object1 = new Object();
      HashMap<Object, Map<String, String>> hashMap3 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(hashMap3);
      int int0 = 0;
      HashMap<Object, Map<String, Object>> hashMap4 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>(hashMap4);
      doubleKeyMap3.remove((Object) null);
      Integer integer0 = new Integer(0);
      doubleKeyMap2.remove((Object) integer0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap4 = null;
      try {
        doubleKeyMap4 = new DoubleKeyMap<Integer, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
