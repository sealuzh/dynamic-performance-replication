/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:58:54 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(16, 16);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      cCSMatrix0.setAll((-1.0));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 32, doubleArray0);
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(0, 1.0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      cCSMatrix1.nonZeroIteratorOfColumn(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2214, 2214, 0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroIteratorOfColumn(2214);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2214, 2214, 0);
      cCSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(4307, 11, matrixFunction0);
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroIteratorOfColumn(2214);
      cCSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom(0);
      int int0 = (-1851);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric((-1851), (double) (-1851), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1851x-1851
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(3004, 3690, 2252.678, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, (-3985.1));
      cCSMatrix0.trace();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      mockRandom0.nextDouble();
      RowMajorSparseMatrix.identity(3005);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 3005);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      int int0 = (-1);
      cCSMatrix0.getRow(746);
      int int1 = 248;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      CCSMatrix.from1DArray(424, 248, doubleArray0);
      cCSMatrix0.toSparseMatrix();
      int int2 = 2995;
      cCSMatrix0.minInColumn(int2);
      CCSMatrix.from1DArray(int2, int2, doubleArray0);
      cCSMatrix0.min();
      int int3 = 7;
      double double0 = 1.0;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int3, double0);
      cCSMatrix1.nonZeroAt(int0, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[10][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2862);
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("org.la4j.matrix.sparse.CCSMatrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 196;
      CCSMatrix cCSMatrix0 = new CCSMatrix(196, 196);
      cCSMatrix0.nonZeroIteratorOfColumn(196);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.setAll(int0);
      cCSMatrix0.iteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 35;
      Matrix.unit(35, 35);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(35, 35);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.setAll(408.0);
      // Undeclared exception!
      try { 
        cCSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CCSMatrix cCSMatrix0 = new CCSMatrix(3005, 3005);
      cCSMatrix0.getColumn(32);
      cCSMatrix0.max();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(13);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.getRow(0);
      cCSMatrix0.blankOfShape(0, 0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.iteratorOfRow(1);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1, 2795.7957782);
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(123, 386);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2752);
      cCSMatrix0.minInColumn(142);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2214, 2214, 0);
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroIteratorOfColumn(2214);
      cCSMatrix0.max();
      cCSMatrix0.setAll(0);
      cCSMatrix0.nonZeroAt(7, 1000);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      DenseMatrix.unit(9, 9);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(9, 9);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromBinary(byteArray0);
      int int0 = 22;
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3610);
      Matrix.unit(3610, 3610);
      cCSMatrix0.multiply(238.4);
      cCSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = (-2862);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (double) (-2862);
      doubleArray1[6] = (double) 0;
      doubleArray1[5] = (double) (-2862);
      doubleArray1[7] = (double) (-2862);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int3 = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      int int4 = 117;
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 118
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(152);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.minInColumn(4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(4);
      MockRandom mockRandom0 = new MockRandom(152);
      mockRandom0.doubles(1L);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.nonZeroRowMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 152;
      intArray0[2] = 4;
      intArray0[3] = 152;
      intArray0[4] = 152;
      intArray0[5] = 4;
      intArray0[6] = 4;
      int[] intArray1 = new int[1];
      intArray1[0] = 32;
      cCSMatrix0.select(intArray0, intArray1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(intArray0[5], vectorProcedure0);
      int int0 = 13;
      cCSMatrix0.copyOfShape(intArray0[0], int0);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.select(intArray0, intArray1);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 277;
      doubleArray0[1] = (double) 277;
      doubleArray0[2] = (double) 277;
      doubleArray0[3] = (double) 2438;
      int[] intArray0 = new int[1];
      intArray0[0] = 277;
      int[] intArray1 = new int[4];
      intArray0[0] = 2438;
      intArray1[1] = 2438;
      intArray1[2] = 277;
      intArray1[3] = 2438;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2438, 277, 2438, doubleArray0, intArray0, intArray1);
      cCSMatrix0.removeFirstRow();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int int0 = (-2176);
      cCSMatrix0.nonZeroIteratorOfColumn(int0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      int int1 = 772;
      int int2 = 7;
      double double0 = (-3641.275075442723);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int1, int2, double0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, denseMatrix0);
      cCSMatrix0.setRow(intArray1[2], vector0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(16);
      int int0 = 7;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 7;
      doubleArray1[1] = (double) 16;
      doubleArray1[2] = (double) 16;
      doubleArray1[3] = (double) 16;
      doubleArray1[4] = (double) 16;
      doubleArray1[5] = (double) 16;
      doubleArray1[7] = 3194.0;
      doubleArray1[8] = (double) 16;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 16;
      doubleArray2[1] = (double) 7;
      cCSMatrix0.getRow(7);
      CCSMatrix.zero(16, 688);
      cCSMatrix0.each((MatrixProcedure) null);
      long long0 = (-1983L);
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix.random(int0, int0, doubleArray1[4], (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(13, 2013, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2013
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      int int0 = 1;
      cCSMatrix0.iteratorOfRow(1);
      int int1 = (-1);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      mockRandom0.nextInt(1);
      mockRandom0.nextDouble();
      cCSMatrix0.iteratorOfRow((-1238));
      MockRandom mockRandom1 = new MockRandom(0);
      mockRandom1.longs(2731L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(1, 3005, (double) 0, (Random) mockRandom1);
      RowMajorSparseMatrix.identity(3005);
      MockRandom mockRandom2 = new MockRandom((-1238));
      mockRandom1.doubles((long) 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ((CCSMatrix) columnMajorSparseMatrix0).eachNonZero(matrixProcedure0);
      columnMajorSparseMatrix0.nonZeroRowMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      mockRandom0.longs();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.getRow(2187);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      mockRandom0.nextInt(1);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.copyOfShape(1, 1);
      Double double0 = new Double((-2096.046881686688));
      cCSMatrix1.setRow(0, 2891.0);
      CCSMatrix.randomSymmetric(421, (double) 0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.maxInColumn(1);
      MockRandom mockRandom1 = new MockRandom(0L);
      MockRandom mockRandom2 = new MockRandom();
      CCSMatrix.random(1, 421, 2891.0, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(32, 0, 0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, matrix0, matrix0);
      cCSMatrix0.setAll((-1.4014889739564351));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)48;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(8, 9);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2214, 2214, 0);
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroIteratorOfColumn(2214);
      cCSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom((-1034L));
      int int0 = 10;
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(10, 0.0, (Random) mockRandom0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix1.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(16, 16, (-3810.03667651882), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 16;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(16);
      int int1 = 7;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 16;
      cCSMatrix0.copyOfShape(1467, 7);
      Double double0 = new Double(7.0);
      int int2 = (-1);
      cCSMatrix0.setRow((-1), (-1471.78927739642));
      double double1 = 2.0;
      MockRandom mockRandom0 = new MockRandom(int1);
      CCSMatrix.randomSymmetric(int0, double1, (Random) mockRandom0);
      int int3 = 676;
      cCSMatrix0.maxInColumn(int3);
      int[] intArray0 = new int[0];
      Matrix.identity(int2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[17][2];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      MockRandom mockRandom0 = new MockRandom((-725L));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.setAll(8);
      cCSMatrix0.minInColumn(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      MockRandom mockRandom0 = new MockRandom((-725L));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.setAll(8);
      cCSMatrix0.minInColumn(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2142.96548702;
      doubleArray0[1] = 2261.65917392;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix1.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-2862);
      doubleArray1[7] = (double) (-2862);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix1.maxInColumn(0);
      cCSMatrix0.nonZeroAt(1764, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((-134), 7, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 960;
      CCSMatrix cCSMatrix0 = new CCSMatrix(960, 8);
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.nextInt(2);
      mockRandom0.nextDouble();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 324);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 277;
      double double0 = (-2105.59);
      double double1 = (-2097.365902040865);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(34, 2096, (-2097.365902040865));
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = Matrix.identity(277);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, denseMatrix0, denseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2214, 2214, 0);
      cCSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)11).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(4307, 11, matrixFunction0);
      cCSMatrix0.toBinary();
      cCSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom(0);
      int int0 = (-1851);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric((-1851), (double) (-1851), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1851x-1851
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 17, 0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Matrix.randomSymmetric(0, mockRandom0);
      cCSMatrix0.select(intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll(479.42371995);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.iteratorOfColumn(17);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(152, 152);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.minInColumn(152);
      int int0 = (-2478);
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 566;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom(9970L);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(4934, 566.0);
      // Undeclared exception!
      ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2862);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-2862);
      doubleArray1[7] = (double) (-2862);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(0, vectorFunction0);
      int int0 = (-1642);
      cCSMatrix0.maxInColumn(3);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt((-1212), 264);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 264
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-4192L));
      mockRandom0.doubles();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(8, 0.1, (Random) mockRandom0);
      int int0 = 1357;
      cCSMatrix0.getRow(1357);
      cCSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Object object0 = new Object();
      Integer integer0 = new Integer(124);
      int int0 = Double.SIZE;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(64);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2861);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[2] = (double) (-2861);
      doubleArray1[3] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[7] = (double) (-2861);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom((-740L));
      SparseMatrix.randomSymmetric(0, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn((-2861));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2861
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 152;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(152);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      int int1 = 4;
      cCSMatrix0.minInColumn(4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.minInColumn(4);
      MockRandom mockRandom0 = new MockRandom(152);
      mockRandom0.doubles(1L);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.nonZeroRowMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.nonZeroIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.copyOfShape(10, 152);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromMatrixMarket("");
      cCSMatrix1.minInColumn(int1);
      int int2 = (-566);
      double double0 = 0.0;
      CCSMatrix.random(int2, int0, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(16, 75.45569);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(4, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[2] = (double) (-2866);
      doubleArray1[3] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[5] = (double) (-2866);
      doubleArray1[7] = (double) (-2866);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      CCSMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom((-725L));
      SparseMatrix.randomSymmetric(0, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
      Integer integer0 = new Integer(0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.nonZeroAt(1764, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2866.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(0, 7, matrixFunction0);
      int[] intArray0 = new int[2];
      doubleArray1[1] = (double) 0;
      intArray0[1] = 0;
      cCSMatrix0.select(intArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.eachInColumn(4, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(16);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(16, 16);
      cCSMatrix0.setRow(7, (double) 37);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Object object0 = new Object();
      int int0 = 1;
      cCSMatrix0.setRow(1, 546.3529946733064);
      // Undeclared exception!
      try { 
        cCSMatrix1.getOrElse(37, 1269, 546.3529946733064);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      mockRandom0.nextInt(1);
      mockRandom0.nextDouble();
      cCSMatrix0.iteratorOfRow((-1238));
      MockRandom mockRandom1 = new MockRandom(0);
      mockRandom1.longs(2731L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(1, 3005, (double) 0, (Random) mockRandom1);
      RowMajorSparseMatrix.identity(3005);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      ((CCSMatrix) columnMajorSparseMatrix0).minInColumn(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      mockRandom0.doubles(1000L);
      ((CCSMatrix) columnMajorSparseMatrix0).eachNonZero(matrixProcedure0);
      cCSMatrix0.copyOfShape(1, 752);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ((CCSMatrix) columnMajorSparseMatrix0).select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 152;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(152, 152);
      cCSMatrix0.rowMajorIterator();
      int int1 = 4;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2028.1), (double)152, Double.NEGATIVE_INFINITY, (double)152, (double)152).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(4, vectorFunction0);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      SparseVector sparseVector0 = SparseVector.zero(int0, int1);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      Matrix matrix1 = sparseVector0.toRowMatrix();
      ooPlaceKroneckerProduct0.applyCommon(matrix0, matrix1);
      Matrix matrix2 = cCSMatrix0.transpose();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, matrix2, matrix0, matrix2);
      cCSMatrix1.toColumnVector();
      cCSMatrix0.setAll(int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      int int2 = 13;
      SparseVector.zero(int2, int2);
      sparseVector0.toRowMatrix();
      int int3 = (-978);
      Matrix matrix3 = matrix0.insert((Matrix) cCSMatrix0, int3, int1);
      CCSMatrix.block(cCSMatrix1, matrix0, matrix3, matrix1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(151);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      int int0 = 123;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(123, vectorFunction0);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int1 = 1169;
      int int2 = 6;
      SparseVector sparseVector0 = SparseVector.zero((-1038), 6);
      sparseVector0.toColumnMatrix();
      int int3 = 2;
      int int4 = 3;
      cCSMatrix0.getColumn(int0);
      int int5 = 147;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int5, int4, int0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      int int6 = 503;
      CCSMatrix cCSMatrix2 = new CCSMatrix(int2, int1, int6);
      int int7 = 1601;
      cCSMatrix1.copyOfShape(int7, int3);
      int int8 = (-2055);
      int int9 = 30;
      cCSMatrix1.nonZeroAt(int8, int9);
      int int10 = (-1892);
      org.evosuite.runtime.Random.setNextRandom(int10);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(16);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 7;
      doubleArray1[1] = (double) 16;
      doubleArray1[2] = (double) 16;
      doubleArray1[3] = (double) 16;
      doubleArray1[4] = (double) 16;
      doubleArray1[5] = (double) 16;
      doubleArray1[7] = 3194.0;
      doubleArray1[8] = (double) 16;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[1] = (double) 7;
      doubleArray2[2] = 3194.0;
      doubleArray2[3] = 3194.0;
      doubleArray2[4] = (double) 7;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) 16;
      doubleArray4[2] = (double) 16;
      doubleArray4[3] = (double) 16;
      doubleArray4[4] = (double) 16;
      doubleArray4[5] = (double) 7;
      doubleArray4[6] = (-687.54);
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2861);
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.toMatrixMarket();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)(-2861), 479.42371995, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(0, vectorFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape((-2861), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2861x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      mockRandom0.nextInt(1);
      mockRandom0.nextDouble();
      mockRandom0.nextDouble();
      cCSMatrix0.iteratorOfRow((-1238));
      mockRandom0.longs(2731L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(1, 3005, (double) 0, (Random) mockRandom0);
      RowMajorSparseMatrix.identity(3005);
      mockRandom0.setSeed(1000L);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      ((CCSMatrix) columnMajorSparseMatrix0).minInColumn(0);
      mockRandom0.doubles(1000L);
      cCSMatrix0.copyOfShape(1, 752);
      int[] intArray0 = new int[20];
      intArray0[0] = 0;
      Matrix matrix0 = ((CCSMatrix) columnMajorSparseMatrix0).select(intArray0, intArray0);
      matrix0.determinant();
      int int0 = 1704;
      org.evosuite.runtime.Random.setNextRandom(int0);
      cCSMatrix0.toBinary();
      cCSMatrix0.select(intArray0, intArray0);
      String string0 = "Cardinality should be less then or equal to capacity: ";
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(152);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)123, (double)152, 1505.5974033420414, (double)152, (-750.8)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(123, vectorFunction0);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      cCSMatrix0.getColumn(3);
      cCSMatrix0.iteratorOrNonZeroColumns();
      CCSMatrix cCSMatrix1 = new CCSMatrix(32, 3, 822);
      int int0 = 3170;
      int int1 = 8;
      cCSMatrix1.copyOfShape(int0, int1);
      int int2 = 3;
      org.evosuite.runtime.Random.setNextRandom(int2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      mockRandom0.nextInt(1);
      Integer integer0 = new Integer(1);
      int int1 = 8;
      SparseMatrix.identity(8);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.unit(9, 9);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)DenseMatrix.unit(1, 497);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, basic2DMatrix1, cCSMatrix0, basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 2657;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2657);
      cCSMatrix0.nonZeroIterator();
      cCSMatrix0.min();
      int int1 = 1379;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(2657, 2657, 1379);
      cCSMatrix1.infinityNorm();
      double double0 = cCSMatrix0.min();
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.foldRows(vectorAccumulator0);
      cCSMatrix2.min();
      cCSMatrix0.columnMajorIterator();
      long long0 = 1340L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix cCSMatrix3 = CCSMatrix.random(int1, int1, double0, (Random) mockRandom0);
      MatrixVectorOperation<Integer> matrixVectorOperation0 = (MatrixVectorOperation<Integer>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom1 = new MockRandom(int0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.foldColumns(vectorAccumulator1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.non(matrixPredicate0);
      cCSMatrix1.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-2861);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[2] = (double) (-2861);
      doubleArray1[3] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[7] = (double) (-2861);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom((-740L));
      SparseMatrix.randomSymmetric(0, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
      Integer integer0 = new Integer(0);
      Matrix matrix0 = cCSMatrix0.removeFirstColumn();
      int int1 = 1764;
      cCSMatrix0.nonZeroAt(1764, 0);
      matrix0.trace();
      mockRandom0.doubles((long) 1764);
      MockRandom mockRandom1 = new MockRandom();
      cCSMatrix1.min();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MatrixOperation<Matrix> matrixOperation0 = inPlaceCopyMatrixToMatrix0.partiallyApply((DenseMatrix) null);
      // Undeclared exception!
      try { 
        matrix0.apply(matrixOperation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      mockRandom0.nextInt(1);
      mockRandom0.nextDouble();
      int int0 = 1;
      mockRandom0.ints();
      cCSMatrix0.iteratorOfColumn(1);
      MockRandom mockRandom1 = new MockRandom(0);
      mockRandom0.longs();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(1, 3005, (double) 0, (Random) mockRandom1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(Integer.MAX_VALUE, 3263);
      cCSMatrix1.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(16);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      SparseMatrix.zero(416, 17);
      int[] intArray0 = new int[3];
      intArray0[0] = 17;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      intArray0[1] = 416;
      intArray0[2] = 4;
      cCSMatrix0.select(intArray0, intArray0);
      int int0 = Double.SIZE;
      byte[] byteArray0 = null;
      CCSMatrix.fromBinary(byteArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.max();
      String string0 = "";
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-2862);
      doubleArray1[2] = (double) (-2862);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-2862);
      doubleArray1[7] = (double) (-2862);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      MockRandom mockRandom0 = new MockRandom((-725L));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)0, (-478.873815855568), (-2862.0), (double)(-2862)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.minInColumn(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 243;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(243, 243);
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.nonZeroIteratorOfColumn(2);
      int int1 = 208;
      Matrix matrix0 = Matrix.zero(243, 208);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromMatrixMarket("");
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int int2 = 247;
      Matrix.unit(int0, int0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int1, int2, matrixFunction0);
      int int3 = 48;
      int int4 = 241;
      cCSMatrix0.set(int3, int4, int0);
      cCSMatrix0.getOrElse(int0, int3, int2);
      int int5 = (-3637);
      cCSMatrix1.minInColumn(int5);
      int int6 = 1839;
      CCSMatrix.identity(int6);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      int int7 = 9;
      int int8 = 2906;
      matrix0.copyOfShape(int7, int8);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(152);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.iteratorOfRow(8);
      MockRandom mockRandom0 = new MockRandom((-2021L));
      int int0 = 84;
      mockRandom0.nextFloat();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(84, 509, 1.0, (Random) mockRandom0);
      int int1 = (-114);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      String string0 = "This system is singular.";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV(string0);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      CCSMatrix.identity(int0);
      int int2 = 7;
      int int3 = 5;
      CCSMatrix.zero(int1, int3, int2);
      int int4 = 1059;
      CCSMatrix cCSMatrix2 = new CCSMatrix(int3, int4);
      columnMajorSparseMatrix0.removeLastColumn();
      double double1 = Locale.LanguageRange.MIN_WEIGHT;
      CCSMatrix cCSMatrix3 = CCSMatrix.fromMatrixMarket(string0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.eachNonZero(matrixProcedure1);
      cCSMatrix2.getOrElse(int3, int0, int2);
      int int5 = 5;
      cCSMatrix1.copyOfShape(int5, int2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(152);
      int int0 = 4;
      cCSMatrix0.minInColumn(4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.minInColumn(4);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, (double)4, (double)152, (double)4, (double)4).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.spliterator();
      cCSMatrix0.iteratorOfRow(1);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1, 2795.7957782);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[0][5];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix1);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("geCxI}[6@L}3g5E9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3610, 41);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(41, 41);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.sliceBottomRight(8, 133);
      int int0 = 48;
      CCSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)48;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (byte)48;
      doubleArray1[1] = 396.96844338;
      doubleArray1[2] = (double) (-966);
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (byte)48;
      doubleArray2[1] = (double) (byte)48;
      doubleArray2[2] = (double) (byte)48;
      doubleArray2[3] = (double) (byte)48;
      doubleArray2[4] = (-687.54);
      doubleArray2[5] = (double) (byte)48;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1.0;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      mockRandom0.nextInt(1);
      Integer integer0 = new Integer(1);
      SparseMatrix.identity(8);
      DenseMatrix.unit(9, 9);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(1, 1);
      Double double0 = new Double((-2096.046881686688));
      cCSMatrix0.setRow(0, 2891.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2891.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom1 = new MockRandom(1);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      cCSMatrix1.apply((MatrixOperation<Matrix>) ooPlaceMatrixByItsTransposeMultiplication0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2891.0;
      doubleArray0[3] = 2891.0;
      CCSMatrix.from1DArray(1, 1, doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroIteratorOfColumn(3031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3031
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      mockRandom0.nextInt(1);
      Integer integer0 = new Integer(1);
      SparseMatrix.identity(8);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(9, 9);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix1.copyOfShape(1, 1);
      Double double0 = new Double(1);
      matrix0.copyOfShape(0, 8);
      Double double1 = new Double(8);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom1 = new MockRandom(8);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      cCSMatrix1.apply((MatrixOperation<Matrix>) ooPlaceMatrixByItsTransposeMultiplication0);
      // Undeclared exception!
      try { 
        cCSMatrix1.getColumn(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[3] = (double) (-2861);
      doubleArray1[3] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[7] = (double) (-2861);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom((-740L));
      SparseMatrix.randomSymmetric(0, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(0, 0);
      cCSMatrix2.each((MatrixProcedure) null);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix1);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("This matrix can't grow up.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 3610;
      int int1 = 7;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3610, 7);
      int int2 = 816;
      Matrix.constant(816, 3610, (-1.1854793170168132));
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(3610, 3610);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfRows(7);
      cCSMatrix0.setRow(7, (double) 7);
      cCSMatrix1.nonZeroColumnMajorIterator();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, basic2DMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }
}
