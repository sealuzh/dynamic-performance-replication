/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:20:48 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.CreateIndexNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbc.JdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ServiceBoot");
      DBDataType dBDataType0 = DBDataType.getInstance((-2061584299), "DATE");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBColumn0.setDoc("DATE");
      Integer.toUnsignedString((-2061584299));
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder("7e)-g!u/@");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = stringBuilder1.append('n');
      int int0 = 2147483645;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder2.insert(2147483645, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2147483645
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("PRIMARY KEY ", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qG'd)oQg");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "=6`dEBp-";
      stringArray0[1] = "=6`dEBp-";
      stringArray0[2] = "=6`dEBp-";
      stringArray0[3] = "qG'd)oQg";
      stringArray0[4] = "=6`dEBp-";
      stringArray0[5] = "=6`dEBp-";
      stringArray0[6] = "qG'd)oQg";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=6`dEBp-", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("=6`dEBp-", false, dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.setDoc("=6`dEBp-");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueIndex0.setTable(defaultDBTable0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qG'd)oQg", dBTable0, 13, "qG'd)oQg");
      defaultDBColumn0.setDefaultValue("qG'd)oQg");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("qG'd)oQg QG'D)OQG DEFAULT qG'd)oQg NULL", string0);
      
      SQLUtil.removeComments("(x}eDQ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (=6`dEBp-, =6`dEBp-, =6`dEBp-, qG'd)oQg, =6`dEBp-, =6`dEBp-, qG'd)oQg)", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("drop tablebx%gcq$f<&|`?@owjx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.removeComments("alter tabletruncateb'+jkz-antkp?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[1] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[3] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[4] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[5] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[6] = ";5x;+aOgT\u0003 8%s";
      stringArray0[7] = "alter tabletruncateb'+jkz-antkp?";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter tabletruncateb'+jkz-antkp?", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint1.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint1, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter tabletruncateb'+jkz-antkp?", true, stringArray0);
      dBUniqueConstraint1.equals(dBPrimaryKeyConstraint0);
      defaultDBTable0.getComponents();
      dBUniqueConstraint1.setName((String) null);
      String string0 = SQLUtil.substituteMarkers("R3", "upda", "alter tabletruncateb'+jkz-antkp?");
      assertEquals("R3", string0);
      
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, stringBuilder0);
      assertEquals("CONSTRAINT \"alter tabletruncateb'+jkz-antkp?\" ", stringBuilder0.toString());
      
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tabletruncateb'+jkz-antkp?");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      SQLUtil.typeAndName(defaultDBTable0);
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(alter tabletruncateb'+jkz-antkp?, alter tabletruncateb'+jkz-antkp?, , alter tabletruncateb'+jkz-antkp?, alter tabletruncateb'+jkz-antkp?, alter tabletruncateb'+jkz-antkp?, ;5x;+aOgT\u0003 8%s, alter tabletruncateb'+jkz-antkp?)", string1);
      
      SQLUtil.typeAndName(dBUniqueConstraint0);
      String string2 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint alter tabletruncateb'+jkz-antkp?", string2);
      
      SQLUtil.constraintName(dBUniqueConstraint1);
      String string3 = SQLUtil.normalize("alter tabletruncateb'+jkz-antkp?", false);
      assertEquals("alter tabletruncateb '+jkz-antkp?'", string3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select into");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(columnDescriptorList0);
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create table", "select into", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("create table");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'create table'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-44);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F2GB<5&K|");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.databene.jdbacl.SQLUtil", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES F2GB<5&K|()", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "alter sessionalter tabletruncateb'+jkz-antkp?";
      SQLUtil.mutatesDataOrStructure("alter sessionalter tabletruncateb'+jkz-antkp?");
      boolean boolean0 = true;
      DBCatalog dBCatalog0 = new DBCatalog("alter sessionalter tabletruncateb'+jkz-antkp?");
      String string1 = "'?zXV";
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("'?zXV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ''?zXV'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isQuery("V}X&<");
      StringReader stringReader0 = new StringReader("n7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      streamTokenizer0.nval = (double) 46;
      streamTokenizer0.ordinaryChar(46);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.isQuery("n7");
      SQLUtil.parseColumnTypeAndSize("n7");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V}X&<";
      stringArray0[1] = "n7";
      stringArray0[2] = "V}X&<";
      SQLUtil.renderColumnNames(stringArray0);
      DBSchema dBSchema0 = new DBSchema("n7", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b-tree node ", dBSchema0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("n7", "}of@u&sQg+Qqe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("insert@|,n{ni@bz0b4gk[=", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBSchema dBSchema0 = new DBSchema("--");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--", dBSchema0);
      String[] stringArray0 = new String[2];
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      stringArray0[0] = "--";
      stringArray0[1] = "--";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "--", true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ".&h[Zk%UdY/[RNGEQ^", false, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WSHY~8|y|401p]SQ!");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", defaultDBTable0, (-3), "truncate");
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("-- TRUNCATE NOT NULL", string0);
      
      System.setCurrentTimeMillis((-3));
      boolean boolean0 = SQLUtil.isQuery("call");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.innerJoin("execute", stringArray0, "--", "call", stringArray0);
      assertEquals("-- as call on execute.-- = call.-- and execute.-- = call.--", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("jsK-R9i", true);
      assertEquals("jsK - R9i", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "LZxMf=2RF?T7E&F";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rename", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("LZxMf=2RF?T7E&F", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('h');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "LZxMf=2RF?T7E&F");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("hLZxMf=2RF?T7E&Fcreate table null (,\n\tCONSTRAINT rename PRIMARY KEY (LZxMf=2RF?T7E&F)\n)", stringWriter2.toString());
      assertEquals("hLZxMf=2RF?T7E&Fcreate table null (,\n\tCONSTRAINT rename PRIMARY KEY (LZxMf=2RF?T7E&F)\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.removeComments("alter tabletruncateb'+jkz-antkp?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[1] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[2] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[3] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[4] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[5] = "alter tabletruncateb'+jkz-antkp?";
      stringArray0[6] = ";5x;+aOgT\u0003 8%s";
      stringArray0[7] = "alter tabletruncateb'+jkz-antkp?";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter tabletruncateb'+jkz-antkp?", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint1.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint1, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter tabletruncateb'+jkz-antkp?", true, stringArray0);
      dBUniqueConstraint1.equals(dBPrimaryKeyConstraint0);
      defaultDBTable0.getComponents();
      dBUniqueConstraint1.setName((String) null);
      String string0 = SQLUtil.substituteMarkers("R3", "upda", "alter tabletruncateb'+jkz-antkp?");
      assertEquals("R3", string0);
      
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tabletruncateb'+jkz-antkp?");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      SQLUtil.typeAndName(defaultDBTable0);
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(alter tabletruncateb'+jkz-antkp?, alter tabletruncateb'+jkz-antkp?, alter tabletruncateb'+jkz-antkp?, alter tabletruncateb'+jkz-antkp?, alter tabletruncateb'+jkz-antkp?, alter tabletruncateb'+jkz-antkp?, ;5x;+aOgT\u0003 8%s, alter tabletruncateb'+jkz-antkp?)", string1);
      
      String string2 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string2);
      assertNotNull(string2);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, stringBuilder0, nameSpec1);
      assertEquals("CONSTRAINT \"alter tabletruncateb'+jkz-antkp?\" ", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SUM";
      stringArray0[1] = "drop materialized view";
      stringArray0[2] = "rkxG!{";
      stringArray0[3] = "5dR+7y3";
      stringArray0[4] = "azeLM\"noT|";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[5] = "create materialized viewph3}ims";
      stringArray0[6] = "^/WjF\"(j[^";
      stringArray0[7] = "#YJm.fO2\"j#l=a)5]";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("SUM = 'SUM' AND drop materialized view = 'drop materialized view' AND rkxG!{ = 'rkxG!{' AND 5dR+7y3 = '5dR+7y3' AND azeLM\"noT| = 'azeLM\"noT|' AND create materialized viewph3}ims = 'create materialized viewph3}ims' AND ^/WjF\"(j[^ = '^/WjF\"(j[^' AND #YJm.fO2\"j#l=a)5] = '#YJm.fO2\"j#l=a)5]'", string0);
      
      String string1 = SQLUtil.normalize("YDrNi]a9,:>#(T", true);
      assertEquals("YDrNi ] a9, : > # ( T", string1);
      
      String string2 = SQLUtil.innerJoin("rkxG!{", stringArray0, "boolean", (String) null, stringArray0);
      assertEquals("boolean as null on rkxG!{.SUM = null.SUM and rkxG!{.drop materialized view = null.drop materialized view and rkxG!{.rkxG!{ = null.rkxG!{ and rkxG!{.5dR+7y3 = null.5dR+7y3 and rkxG!{.azeLM\"noT| = null.azeLM\"noT| and rkxG!{.create materialized viewph3}ims = null.create materialized viewph3}ims and rkxG!{.^/WjF\"(j[^ = null.^/WjF\"(j[^ and rkxG!{.#YJm.fO2\"j#l=a)5] = null.#YJm.fO2\"j#l=a)5]", string2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "executealias";
      SQLUtil.mutatesDataOrStructure("executealias");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "executealias";
      stringArray0[1] = "executealias";
      String string1 = "C";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "C";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (executealias, executealias, C)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ")", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (), ))", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b'+JKz-AntKP?");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b'+JKz-AntKP?";
      stringArray0[1] = "b'+JKz-AntKP?";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "b'+JKz-AntKP?", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT b'+JKz-AntKP? PRIMARY KEY (b'+JKz-AntKP?, b'+JKz-AntKP?)", string0);
      
      boolean boolean0 = SQLUtil.isDML("b'+JKz-AntKP?");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("b'+JKz-AntKP?", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) nameSpec0;
      objectArray0[1] = (Object) nameSpec0;
      objectArray0[2] = (Object) "b'+JKz-AntKP?";
      objectArray0[3] = (Object) dBPrimaryKeyConstraint0;
      objectArray0[4] = (Object) "b'+JKz-AntKP?";
      objectArray0[5] = (Object) "b'+JKz-AntKP?";
      objectArray0[6] = (Object) "b'+JKz-AntKP?";
      objectArray0[7] = (Object) "b'+JKz-AntKP?";
      String string2 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("b'+JKz-AntKP? = IF_REPRODUCIBLE AND b'+JKz-AntKP? = IF_REPRODUCIBLE", string2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "kYI<)xP)B\"ERs3^y)xM";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "kYI<)xP)B\"ERs3^y)xM");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("()", false);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      String string1 = "renamerename";
      TableContainer tableContainer0 = new TableContainer("renamerename");
      tableContainer0.getTable("create table");
      DBDataType dBDataType0 = DBDataType.getInstance((-1385), "renamerename");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renamerename", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType1 = DBDataType.getInstance(1641, "()");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create table", (DBTable) null, dBDataType1, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = null;
      try {
        defaultDBColumn2 = new DefaultDBColumn("()", (DBTable) null, (-1385), "()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "drop materialized view7c";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop materialized view7c";
      stringArray0[1] = "drop materialized view7c";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view7c", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      CompositeDBObject<?> compositeDBObject0 = dBForeignKeyConstraint0.getOwner();
      SQLUtil.typeAndName(compositeDBObject0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/_BlUu9\"{9");
      String string1 = "delete";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("42ZB6", defaultDBTable0, (-158525226), "table null");
      defaultDBTable0.addColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("delete");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'delete' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ALIAS");
      assertNull(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DBDataType dBDataType0 = DBDataType.getInstance(738, "#t>:N|C");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#t>:N|C", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter materialized viewnot null", (DBTable) null, 738, "#t>:N|C");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("drop index", (DBTable) null, dBDataType0, integer0, integer1);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("#t>:N|C, alter materialized viewnot null, drop index", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Character character0 = new Character('w');
      SQLUtil.renderValue(character0);
      DBTable dBTable0 = null;
      Character.getName(6);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "'w'";
      stringArray0[1] = "'w'";
      stringArray0[2] = "'w'";
      stringArray0[3] = "select into";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "'w'", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter tableleft";
      stringArray0[1] = "1.8.0";
      stringArray0[2] = "alter tableleft";
      stringArray0[3] = "alter tableleft";
      stringArray0[4] = "alter tableleft";
      stringArray0[5] = "alter tableleft";
      stringArray0[6] = "alter tableleft";
      SQLUtil.renderColumnListWithTableName("alter tableleft", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tableleft");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(876);
      StringBuilder stringBuilder3 = stringBuilder2.append(0L);
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '0';
      // Undeclared exception!
      try { 
        stringBuilder3.append(charArray0, 876, 876);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("B8d");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "select into\\c$t,hh";
      SQLUtil.isDDL("select intoc$t,hh");
      SQLUtil.mutatesDataOrStructure("select intoc$t,hh");
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("XSLAB.D", true);
      assertEquals("XSLAB.D", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("XSLAB.D", true, "action", "action");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK action", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("*+KvWnEK5Km?P6B$&*/", false);
      assertEquals("* + KvWnEK5Km ? P6B $ & */", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("fLEM*!");
      DBSchema dBSchema0 = new DBSchema("fLEM*!", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fLEM*!", dBSchema0);
      DBCatalog dBCatalog1 = defaultDBTable0.getCatalog();
      DBTable dBTable0 = dBCatalog1.getTable("fLEM*!", true);
      String string0 = SQLUtil.ownerDotComponent(dBTable0);
      assertEquals("fLEM*!.fLEM*!", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)64;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = SQLUtil.normalize("alter materialized viewiochf:)'m4k%-/(**wi", false);
      assertEquals("alter materialized viewiochf :) 'm4k%-/(**wi'", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Br1|&LxT");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "drop index\u0131";
      stringArray0[1] = "Br1|&LxT";
      stringArray0[2] = "drop index\u0131";
      stringArray0[3] = "drop index\u0131";
      stringArray0[4] = "Br1|&LxT";
      stringArray0[5] = "drop index\u0131";
      stringArray0[6] = "drop index\u0131";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop index\u0131", false, stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "drop index\u0131";
      stringArray1[1] = "drop index\u0131";
      stringArray1[2] = "drop index\u0131";
      stringArray1[3] = "Br1|&LxT";
      stringArray1[4] = "drop index\u0131";
      stringArray1[5] = "drop index\u0131";
      stringArray1[6] = "drop index\u0131";
      stringArray1[7] = "drop index\u0131";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop index\u0131", false, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.normalize("drop index\u0131", true);
      assertEquals("drop index\u0131", string0);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("truncateoue7djgi@^iabsmtu", false);
      String string0 = "update";
      Object object0 = new Object();
      SQLUtil.substituteMarkers("update", "truncateoue7djgi@^iabsmtu", object0);
      SQLUtil.removeComments("truncateoue7djgi@^iabsmtu");
      SQLUtil.mutatesDataOrStructure("update");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      UUID uUID0 = basicUUID0.cloneMe();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTableDescriptor(uUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.isProcedureCall("7c");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7c";
      stringArray0[1] = "7c";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isDDL("7c");
      SQLUtil.mutatesDataOrStructure("OuE7dJgi@^IAbSmtU");
      SQLUtil.isQuery("insert");
      System.setCurrentTimeMillis((-239L));
      SQLUtil.leftJoin("updateconstraint", stringArray0, "insertconstraint", "n9;x`wYNC9dt", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("insertconstraint", false);
      SQLUtil.normalize("k9?\"", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexconstraint");
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getProperties();
      RealDistinctScanStatistics realDistinctScanStatistics0 = new RealDistinctScanStatistics((-481), (-481), 335544364, 784L, (-1402L), (-3371L), 903L, 335544364, "updateconstraint", "OuE7dJgi@^IAbSmtU", false, (-481), (int[]) null, "(", "insertconstraint", (Properties) null, "alter indexconstraint", "OuE7dJgi@^IAbSmtU", "7c", "f81e0010-010c-bc85-060d-000000109ab8", (-1048.6531), 903L);
      FormatableProperties formatableProperties0 = realDistinctScanStatistics0.scanProperties;
      JdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new JdbcConnection("k9 ? \"\"", formatableProperties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value \"k9 ? \"\"\"\"\" for parameter \"url\" [90008-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderValue(sQLUtil0);
      SQLUtil.isDML("[");
      DBSchema dBSchema0 = new DBSchema("org.databene.jdbacl.SQLUtil@1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.databene.jdbacl.SQLUtil@1", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      stringBuilder0.append(105.91616F);
      assertEquals("CONSTRAINT [ 105.91616", stringBuilder0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("org.databene.jdbacl.SQLUtil@1", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      System.setCurrentTimeMillis(3007L);
      DBDataType dBDataType0 = DBDataType.getInstance((-1213877724), "[");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = Integer.getInteger("[", (-1213877724));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{4R<{1x!wC)=", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("[(1,-1213877724)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table9my");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create table9my";
      stringArray0[1] = "create table9my";
      stringArray0[2] = "create table9my";
      stringArray0[3] = "create table9my";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table9my", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" WHERE ");
      Locale locale0 = Locale.CHINA;
      locale0.getDisplayCountry();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "create table9my", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      System.setCurrentTimeMillis(0L);
      String string0 = " DEFAULT ";
      String string1 = "zBYk#h1z9 z\"SP";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable1, "China", false, "Du7aE6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'Du7aE6' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "n<yDa2BQSz{";
      stringArray0[1] = "n<yDa2BQSz{";
      stringArray0[2] = "n<yDa2BQSz{";
      stringArray0[3] = "n<yDa2BQSz{";
      stringArray0[4] = "n<yDa2BQSz{";
      SQLUtil.renderColumnListWithTableName("n<yDa2BQSz{", stringArray0);
      SQLUtil.renderColumnListWithTableName("n<yDa2BQSz{", stringArray0);
      SQLUtil.isProcedureCall("exec");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (n<yDa2BQSz{, n<yDa2BQSz{, n<yDa2BQSz{, n<yDa2BQSz{, n<yDa2BQSz{)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderValue(sQLUtil0);
      SQLUtil.renderValue(sQLUtil0);
      SQLUtil.parseColumnTypeAndSize("org.databene.jdbacl.SQLUtil@1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/>Nb+11Eo_#WK k";
      stringArray0[1] = "org.databene.jdbacl.SQLUtil@1";
      SQLUtil.join("org.databene.jdbacl.SQLUtil@1", "org.databene.jdbacl.SQLUtil@1", stringArray0, "create materialized view", "renameclqbb9q/w", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.databene.jdbacl.SQLUtil@1");
      defaultDBTable0.getUniqueConstraints(true);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "create table";
      stringArray1[1] = "org.databene.jdbacl.SQLUtil@1";
      stringArray1[2] = "h";
      stringArray1[3] = "org.databene.jdbacl.SQLUtil@1";
      stringArray1[4] = "/>Nb+11Eo_#WK k";
      stringArray1[5] = "create table";
      stringArray1[6] = "/>Nb+11Eo_#WK k";
      stringArray1[7] = "renameclqbb9q/w";
      stringArray1[8] = "org.databene.jdbacl.SQLUtil@1";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table", false, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.isProcedureCall(")jr%[.@;%S{[.");
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create table");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("org.databene.jdbacl.SQLUtil@1", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append("]hxL0");
      StringBuilder stringBuilder3 = stringBuilder2.insert(10, (CharSequence) "org.databene.jdbacl.SQLUtil@1");
      // Undeclared exception!
      try { 
        stringBuilder3.insert(10, (CharSequence) "create table", (-770), (-1891161455));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -770, end -1891161455, s.length() 12
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("c<K8W");
      Object object0 = new Object();
      SQLUtil.substituteMarkers("LQM4vxUc", "LQM4vxUc", object0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("java.lang.Object@6fa2d912");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "java.lang.Object@6fa2d912", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.isQuery("PRIMARY KEY ()");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("java.lang.Object@6fa2d912", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("left");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "sqldata still null in writeSQLDatum: ";
      stringArray0[1] = "H:(7?ZJ4";
      stringArray0[2] = "left";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "H:(7?ZJ4", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (sqldata still null in writeSQLDatum: , H:(7?ZJ4, left)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.normalize("TRAILING", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "TRAILING";
      stringArray0[1] = "TRAILING";
      stringArray0[2] = "TRAILING";
      stringArray0[3] = "TRAILING";
      stringArray0[4] = "TRAILING";
      stringArray0[5] = "TRAILING";
      stringArray0[6] = "TRAILING";
      stringArray0[7] = "TRAILING";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isDDL("TRAILING");
      SQLUtil.mutatesStructure("");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("selectalias", stringBuilder0);
      SQLUtil.substituteMarkers("select", "TRAILING", "TRAILING");
      SQLUtil.substituteMarkers("TRAILING", "select", "TRAILING");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexalias");
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      createIndexNode0.getProperties();
      JdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new JdbcConnection("TRAILING", (Properties) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value \"TRAILING\" for parameter \"url\" [90008-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "!GkW>j/*DX8{E*";
      // Undeclared exception!
      SQLUtil.isProcedureCall("!GkW>j/*DX8{E*");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.isQuery("org.apache.derby.impl.store.raw.log.FileLogger");
      SQLUtil.removeComments("org.apache.derby.impl.store.raw.log.FileLogger");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "create tablealter index9my";
      SQLUtil.mutatesDataOrStructure("create tablealter index9my");
      DBTable dBTable0 = null;
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.isDML("t?~p`hJ8!:G");
      SQLUtil.removeComments("create tablenull");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create tablenull";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) sQLUtil0;
      objectArray0[1] = (Object) "create tablenull";
      objectArray0[2] = (Object) "t?~p`hJ8!:G";
      objectArray0[3] = (Object) sQLUtil0;
      objectArray0[4] = (Object) "create tablenull";
      objectArray0[5] = (Object) "create tablenull";
      objectArray0[6] = (Object) "t?~p`hJ8!:G";
      objectArray0[7] = (Object) "create tablenull";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ServiceBoot");
      int int0 = (-2061584299);
      DBDataType dBDataType0 = DBDataType.getInstance((-2061584299), "DATE");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBColumn0.setDoc("DATE");
      Integer.toUnsignedString((-2061584299));
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "e3ad|Jmw+tDK:!d>k^~";
      StringBuilder stringBuilder0 = new StringBuilder("e3ad|Jmw+tDK:!d>k^~");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("e3ad|Jmw+tDK:!d>k^~", stringBuilder0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 's';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = '[';
      charArray0[5] = 'I';
      charArray0[6] = 'y';
      charArray0[7] = 'D';
      charArray0[8] = 'V';
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, 885, (-870));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SQLUtil.join((String) null, "getDate(String)", stringArray0, "renamenot null", "", stringArray0);
      String string0 = "alter table";
      DBSchema dBSchema0 = new DBSchema("getDate(String)");
      dBSchema0.getTable("}TbOT");
      // Undeclared exception!
      try { 
        DBDataType.getInstance(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("n;T[wyclw.IVw;Qam82", "n;T[wyclw.IVw;Qam82", versionNumber0);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("n;T[wyclw.IVw;Qam82", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "n;T[wyclw.IVw;Qam82";
      stringArray0[2] = "n;T[wyclw.IVw;Qam82";
      stringArray0[3] = "n;T[wyclw.IVw;Qam82";
      stringArray0[4] = "";
      stringArray0[5] = "conditional";
      stringArray0[6] = null;
      stringArray0[7] = "p\";JN&M{$G9iVp{\"WF$";
      stringArray0[8] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "n;T[wyclw.IVw;Qam82", true, stringArray0);
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT n;T[wyclw.IVw;Qam82 ", string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("ALIAS");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.renderValue("A\"U7lSt>#E1N<dMh");
      SQLUtil.substituteMarkers("'A\"U7lSt>#E1N<dMh'", "Xlj}r", "A\"U7lSt>#E1N<dMh");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "A\"U7lSt>#E1N<dMh");
      dBSchema0.getTables();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(3646, (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3646
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1283), " DEFAULT ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" DEFAULT ", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" DEFAULT   DEFAULT  NULL", string0);
      
      boolean boolean0 = SQLUtil.isQuery("left");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      String string0 = "";
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9my", dBSchema0);
      String string1 = "updateblob";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(con?-6G";
      stringArray0[1] = "updateblob";
      stringArray0[2] = "(con?-6G";
      stringArray0[3] = "updateblob";
      stringArray0[4] = "(con?-6G";
      stringArray0[5] = "9my";
      stringArray0[6] = "9my";
      stringArray0[7] = "updateblob";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "updateblob", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("9my", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      int int0 = (-856);
      DBDataType dBDataType0 = DBDataType.getInstance((-856), ".f_[stwq_");
      Integer integer0 = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(con?-6G", dBTable0, dBDataType0, (Integer) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBTable dBTable1 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("'Cpx|cQLQB", dBTable1, (-856), "(con?-6G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (con?-6G
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "Unexpected code path";
      SQLUtil.normalize("Unexpected code path", true);
      String string1 = "BLOB";
      SQLUtil.isDML("BLOB");
      String string2 = "create table9my";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("org.postgresql.Driver", (String[]) null, "Unexpected code path", "create table9my", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.isProcedureCall("c$t,Hh");
      SQLUtil.mutatesDataOrStructure("c$t,Hh");
      SQLUtil.isDML("create table9my");
      SQLUtil.mutatesDataOrStructure("left");
      SQLUtil.normalize("c$t,Hh", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("c$t,Hh", dBCatalog0);
      dBSchema0.getTable(" c $ t, Hh");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~P@iy";
      stringArray0[1] = "create table9my";
      stringArray0[2] = " c $ t, Hh";
      stringArray0[3] = "c$t,Hh";
      stringArray0[4] = "left";
      stringArray0[5] = "create table9my";
      stringArray0[6] = " e;zW]<j}bj0b=";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "c$t,Hh", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBColumn dBColumn0 = null;
      String string0 = "COLUMN_PRIVILEGES";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("COLUMN_PRIVILEGES", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      int int0 = 131;
      stringBuilder1.append((CharSequence) stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(131, (-76L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 131
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!Grl;7@NO4vf}av";
      stringArray0[1] = "!Grl;7@NO4vf}av";
      stringArray0[2] = "!Grl;7@NO4vf}av";
      stringArray0[3] = "!Grl;7@NO4vf}av";
      stringArray0[4] = "!Grl;7@NO4vf}av";
      stringArray0[5] = "!Grl;7@NO4vf}av";
      SQLUtil.leftJoin("!Grl;7@NO4vf}av", stringArray0, (String) null, "!Grl;7@NO4vf}av", stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-155), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0);
      Integer integer0 = RawTransaction.COMMIT;
      Integer.sum((-155), 3017);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("f[};(N!W]|FY`#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("9My");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "9My";
      stringArray0[4] = "";
      SQLUtil.innerJoin("", stringArray0, "5TFBA*+rvO-Y", "", stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "9My", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" ~<Cwv!");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "',[YeK3ZIj0=!]R";
      stringArray0[1] = " ~<Cwv!";
      stringArray0[2] = "',[YeK3ZIj0=!]R";
      stringArray0[3] = "',[YeK3ZIj0=!]R";
      stringArray0[4] = "',[YeK3ZIj0=!]R";
      stringArray0[5] = " ~<Cwv!";
      stringArray0[6] = " ~<Cwv!";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " ~<Cwv!", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("',[YeK3ZIj0=!]R", true, dBPrimaryKeyConstraint0);
      defaultDBTable0.getComponents();
      defaultDBTable0.getUniqueConstraints(true);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("',[YeK3ZIj0=!]R", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.leftJoin(" ~<Cwv!", stringArray0, " ~<Cwv!", "ij/C/6&", stringArray0);
      SQLUtil.isQuery("callforeign key");
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      String string1 = SQLUtil.removeComments(" ~<Cwv!");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jx[{_n.u/\fpBecK";
      stringArray0[1] = "jx[{_n.u/\fpBecK";
      String string0 = SQLUtil.renderColumnListWithTableName("jx[{_n.u/\fpBecK", stringArray0);
      assertEquals("jx[{_n.u/\fpBecK.jx[{_n.u/\fpBecK, jx[{_n.u/\fpBecK.jx[{_n.u/\fpBecK", string0);
      
      boolean boolean0 = SQLUtil.isQuery("jx[{_n.u/\fpBecK");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(3402, "jx[{_n.u/\fpBecK.jx[{_n.u/\fpBecK, jx[{_n.u/\fpBecK.jx[{_n.u/\fpBecK");
      Integer integer0 = RawTransaction.ABORT;
      Integer.toUnsignedString(3402);
      Integer.toUnsignedLong(3402);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--c8=r", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("wrong schema");
      defaultDBColumn0.setVersionColumn(false);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("JX[{_N.U/\fPBECK.JX[{_N.U/\fPBECK, JX[{_N.U/\fPBECK.JX[{_N.U/\fPBECK(1)", string1);
      
      String string2 = SQLUtil.normalize("jx[{_n.u/\fpBecK", false);
      assertEquals("jx [ { _n.u / \f pBecK", string2);
      
      String string3 = SQLUtil.innerJoin("JX[{_N.U/FPBECK.JX[{_N.U/FPBECK, JX[{_N.U/FPBECK.JX[{_N.U/FPBECK(1)", stringArray0, "wrong schema", "3402", stringArray0);
      assertEquals("wrong schema as 3402 on JX[{_N.U/FPBECK.JX[{_N.U/FPBECK, JX[{_N.U/FPBECK.JX[{_N.U/FPBECK(1).jx[{_n.u/\fpBecK = 3402.jx[{_n.u/\fpBecK and JX[{_N.U/FPBECK.JX[{_N.U/FPBECK, JX[{_N.U/FPBECK.JX[{_N.U/FPBECK(1).jx[{_n.u/\fpBecK = 3402.jx[{_n.u/\fpBecK", string3);
      
      String string4 = SQLUtil.renderValue("jx[{_n.u/\fpBecK");
      assertEquals("'jx[{_n.u/\fpBecK'", string4);
      
      SQLUtil.typeAndName((DBObject) null);
      String string5 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("--c8=r", string5);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop indexselect intoc$t,hh");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("B53Qb[8d-WRjBz");
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.isDML("table B53Qb[8d-WRjBz");
      SQLUtil.isDML("Ny=g");
      SQLUtil.mutatesStructure("B53Qb[8d-WRjBz");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile(" ADD ");
      MockFile mockFile0 = new MockFile(file0, "select intoc");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isProcedureCall(">");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, ">", false, "into");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ob?u=d26Mt0=J";
      String string0 = SQLUtil.join("ob?u=d26Mt0=J", "ob?u=d26Mt0=J", stringArray0, "ob?u=d26Mt0=J", "ob?u=d26Mt0=J", stringArray0);
      assertEquals("ob?u=d26Mt0=J join ob?u=d26Mt0=J as ob?u=d26Mt0=J on ob?u=d26Mt0=J.ob?u=d26Mt0=J = ob?u=d26Mt0=J.ob?u=d26Mt0=J", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("g", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6m+-*CBU:$zwV$", (DBTable) null, (-461), "{<_,q0q]|6d.$gY");
      String string1 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column 6m+-*CBU:$zwV$", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " unknown. Please check your mapping.");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, " unknown. Please check your mapping.");
      SQLUtil.isProcedureCall("I%n>ec6}mc=e5kiCc\"");
      Random.setNextRandom((-1333));
      SQLUtil.mutatesStructure("create unique indexselect intoc$t,hh");
      String[] stringArray0 = new String[5];
      stringArray0[0] = " unknown. Please check your mapping.";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      stringArray0[1] = ",`BJgfVJP\"djs-5&";
      stringArray0[2] = "I%n>ec6}mc=e5kiCc\"";
      stringArray0[3] = "gu|c~z";
      stringArray0[4] = "`#>5z-GzGjZ4N$Sk-$";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      System.setCurrentTimeMillis(0L);
      SQLUtil sQLUtil0 = new SQLUtil();
      Random.setNextRandom(1459);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "W";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "W", true, "W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'W' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "n~iDx*ewbzP";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n~iDx*ewbzP", (DBSchema) null);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "n~iDx*ewbzP", true, "n~iDx*ewbzP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'n~iDx*ewbzP' not found in table 'n~iDx*ewbzP'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "updateBlob(int, InputStream, long)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updateBlob(int, InputStream, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
