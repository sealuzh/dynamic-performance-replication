/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:10:02 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.net.URI;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Okio;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T5NDL(9` \t", "T5NDL(9` \t");
      Sink sink0 = Okio.sink((File) mockFile0);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Okio.blackhole();
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        Okio.source((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        Okio.source(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        Okio.sink(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Okio.blackhole();
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        Okio.sink((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError((-1439));
      AssertionError assertionError1 = new AssertionError("", assertionError0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((Path) null, (OpenOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        Okio.source((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.appendingSink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockException mockException0 = new MockException();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
      AssertionError assertionError0 = new AssertionError((String) null, mockException0);
      assertionError0.getLocalizedMessage();
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("sink(");
      Okio.sink((OutputStream) mockPrintStream0);
      OpenOption[] openOptionArray0 = new OpenOption[2];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SPARSE;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.WRITE;
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      // Undeclared exception!
      try { 
        Okio.sink((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockFile mockFile0 = new MockFile("data");
      Sink sink0 = Okio.appendingSink(mockFile0);
      Okio.source((File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      AssertionError assertionError0 = new AssertionError(sink0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink.sha256(sink0);
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("data");
      Sink sink0 = Okio.appendingSink(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      AssertionError assertionError0 = new AssertionError(source0);
      HashingSink.sha256(sink0);
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.sink((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "data");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(outputStream0, true);
      AssertionError assertionError0 = new AssertionError("data");
      Okio.isAndroidGetsocknameError(assertionError0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      MockException mockException0 = new MockException();
      assertionError0.initCause(mockException0);
      printStream0.close();
      StandardOpenOption standardOpenOption1 = StandardOpenOption.DELETE_ON_CLOSE;
      HashingSink hashingSink0 = HashingSink.sha256(sink0);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        Okio.sink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("adatga");
      Sink sink0 = Okio.appendingSink(mockFile0);
      Okio.source((File) mockFile0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      realBufferedSink0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, true);
      mockFile0.toURI();
      mockPrintStream0.close();
      AssertionError assertionError0 = new AssertionError(1);
      assertEquals("1", assertionError0.getMessage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("size < 2: ", 29);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      AssertionError assertionError0 = new AssertionError("getsockname failed");
      Okio.isAndroidGetsocknameError(assertionError0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.TRUNCATE_EXISTING;
      MockException mockException0 = new MockException();
      assertionError0.initCause(mockException0);
      Okio.isAndroidGetsocknameError(assertionError0);
      StandardOpenOption standardOpenOption2 = StandardOpenOption.DELETE_ON_CLOSE;
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\r");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.timeout();
      realBufferedSink0.outputStream();
      Sink sink1 = Okio.blackhole();
      assertFalse(sink1.equals((Object)sink0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "adatga";
      MockFile mockFile0 = new MockFile("adatga");
      Sink sink0 = Okio.appendingSink(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      realBufferedSink0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.append('@');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      MockException mockException0 = new MockException("adatga");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.close();
      realBufferedSource1.buffer();
      try { 
        realBufferedSource1.buffer.write(source0, 1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.timeout();
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(703);
      Okio.buffer((Sink) bufferedSink0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 703, inetAddress0, 703);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2f39a572
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("adatga");
      Sink sink0 = Okio.appendingSink(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      realBufferedSink0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, true);
      mockPrintStream0.print((-2249));
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      MockException mockException0 = new MockException("adatga");
      StandardOpenOption standardOpenOption1 = StandardOpenOption.TRUNCATE_EXISTING;
      MockException mockException1 = new MockException("adatga");
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer0 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.require((-2249));
      realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(source0);
      hashingSource0.timeout();
      Source source1 = hashingSource0.delegate();
      try { 
        realBufferedSink0.buffer.write(source1, 3894L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }
}
