/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 20:55:02 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-794.9031);
      doubleArray2[1] = (-2927.554004555843);
      doubleArray2[2] = 1509.492387105135;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1509.492387105135;
      doubleArray3[1] = (-794.9031);
      doubleArray3[2] = (-2927.554004555843);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1069.836253963224);
      doubleArray3[5] = 1509.492387105135;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-794.9031);
      doubleArray4[2] = (-2927.554004555843);
      doubleArray4[3] = (-1069.836253963224);
      doubleArray4[4] = (-1069.836253963224);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 74.9079;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 74.9079;
      doubleArray5[1] = 1509.492387105135;
      doubleArray5[2] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-2927.554004555843);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-0.4375);
      doubleArray6[3] = 1509.492387105135;
      doubleArray6[4] = (-2927.554004555843);
      doubleArray6[5] = 74.9079;
      doubleArray6[6] = (-1.0);
      doubleArray6[7] = (-1.0);
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(0, denseMatrix0.columns());
      
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      assertEquals(6, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 72;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(72);
      Vector vector0 = Vector.constant(72, (-2564));
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow((-2564), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..71
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 107, 80);
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.05454449878744969;
      doubleArray1[1] = (double) 80;
      doubleArray1[2] = (double) 80;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 64.00000000000001;
      doubleArray2[1] = (double) 107;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-691.8294350146774);
      doubleArray3[1] = (double) 80;
      doubleArray3[2] = 64.00000000000001;
      doubleArray3[3] = (-769.100305436);
      doubleArray3[4] = (double) 3;
      doubleArray3[5] = 0.05454449878744969;
      doubleArray3[6] = 0.05454449878744969;
      doubleArray3[7] = (double) 3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 107;
      doubleArray4[1] = 64.00000000000001;
      doubleArray4[2] = 64.00000000000001;
      doubleArray4[3] = (double) 3;
      doubleArray4[4] = 0.05454449878744969;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (double) 3;
      doubleArray5[1] = (-769.100305436);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (double) 3;
      doubleArray6[1] = 0.05454449878744969;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 64.00000000000001;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 3, 98);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3 rows and 98 cols at 0, 0 in a 3x3 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 16;
      Matrix matrix0 = Matrix.unit(23, 16);
      int int1 = 12;
      matrix0.removeFirstColumn();
      matrix0.shuffle();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      MockRandom mockRandom0 = new MockRandom(23);
      Matrix matrix1 = Matrix.randomSymmetric(23, mockRandom0);
      matrix1.determinant();
      matrix1.toCSV();
      // Undeclared exception!
      try { 
        sparseMatrix0.minInRow((-1396));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1396
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 34;
      int int1 = 1727;
      SparseVector sparseVector0 = SparseVector.zero(34, 1727);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertColumn(4, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 34. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 9;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(9, 9);
      sparseMatrix0.copy();
      Matrix matrix0 = sparseMatrix0.subtract((double) 9);
      int int1 = 3106;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, (-53), 22, 22, 3106);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -53, 22
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 48;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(48, (-216.1847029));
      int int1 = (-1434);
      Locale locale0 = Locale.CANADA;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      numberFormat0.setMaximumFractionDigits(48);
      locale0.hasExtensions();
      String string0 = "tW'u";
      // Undeclared exception!
      rowMajorSparseMatrix0.mkString(numberFormat0, "tW'u", "E!L=Q");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 2600;
      SparseVector sparseVector0 = SparseVector.zero(2600);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 6);
      Matrix matrix1 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      sparseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 6, (-1846), 13, (-1846));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 13x-1846
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(186, 186, 625);
      int int0 = 539;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 539;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 186;
      doubleArray0[3] = (double) 539;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 539;
      doubleArray0[6] = (double) 186;
      doubleArray0[7] = (double) 625;
      doubleArray0[8] = (double) 539;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = sparseVector0.multiply(657.915519);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow(3, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 9. Should be: 186.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-990.504018);
      doubleArray2[2] = 2192.658377265;
      doubleArray2[3] = (-1581.30559);
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.power((-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -545.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        matrix0.insertRow(0, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1211.0768883;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2, 2, doubleArray0);
      Matrix matrix0 = denseMatrix0.removeLastRow();
      denseMatrix0.swapRows(8, 8);
      denseMatrix0.rank();
      denseMatrix0.getRow(2);
      matrix0.removeFirstRow();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      Matrix matrix1 = denseMatrix0.copyOfShape(8, 2);
      matrix1.max();
      int int0 = 13;
      // Undeclared exception!
      try { 
        matrix1.maxInRow(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2949, 2949);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      int int0 = 1;
      int int1 = (-1076);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 1, 3225, 10, (-1076), 3225, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 10, -1076
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = Matrix.block(matrix0, matrix0, matrix0, matrix0);
      matrix1.toColumnVector();
      int[] intArray0 = new int[9];
      int int0 = (-782);
      intArray0[0] = (-782);
      intArray0[1] = (-99);
      intArray0[2] = 8;
      intArray0[3] = 8;
      intArray0[4] = (-1);
      intArray0[5] = 7;
      intArray0[6] = 13;
      int int1 = (-372);
      // Undeclared exception!
      try { 
        matrix1.insertColumn(7, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      DenseVector denseVector0 = DenseVector.unit(5);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn((-1431655764), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 1767;
      int int1 = 37;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 1767;
      doubleArray0[2] = (double) 1767;
      doubleArray0[3] = (double) 37;
      doubleArray0[4] = (double) 37;
      doubleArray0[5] = (double) 1767;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1767, 37, doubleArray0);
      int int2 = 16;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(16, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(7, 1052.0);
      MockRandom mockRandom0 = new MockRandom((-443L));
      DenseMatrix denseMatrix0 = DenseMatrix.random(7, 7, mockRandom0);
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) null, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ColumnMajorSparseMatrix.zero(17, 281);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(518, (-3887.786419));
      Matrix matrix0 = denseVector0.toColumnMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transformColumn(0, vectorFunction0);
      assertEquals(1, matrix1.columns());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, matrix0);
      assertEquals(518, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2814, 293);
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 293;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 293;
      doubleArray3[1] = (double) 293;
      doubleArray3[2] = (double) 2814;
      doubleArray3[3] = (double) 2814;
      doubleArray3[4] = (double) 293;
      doubleArray3[5] = (double) 2814;
      doubleArray3[6] = (double) 2814;
      doubleArray3[7] = (double) 293;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 2814;
      doubleArray4[1] = (double) 293;
      doubleArray4[2] = (double) 293;
      doubleArray4[3] = (double) 293;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 293;
      doubleArray5[1] = (double) 2814;
      doubleArray5[2] = (double) 2814;
      doubleArray5[3] = (double) 293;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) denseMatrix1, 311, 293);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 311 rows and 293 cols at 0, 0 from a 5x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(2093, 2093);
      int int0 = 237;
      // Undeclared exception!
      try { 
        matrix0.swapColumns(237, 2093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(1, mockRandom0);
      matrix0.add(1.0);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      // Undeclared exception!
      try { 
        DenseMatrix.constant(1, (-1632), (-437.43));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(8);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3317, 3317);
      // Undeclared exception!
      try { 
        matrix0.subtract((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 8x0 does not equal to 3317x3317.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(5, 24);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(1261.44);
      matrix0.shuffle();
      matrix0.infinityNorm();
      matrix0.max();
      // Undeclared exception!
      try { 
        matrix0.updateColumn(24, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(8, 8);
      MockRandom mockRandom0 = new MockRandom(8);
      DenseMatrix denseMatrix0 = DenseMatrix.random(8, 7, mockRandom0);
      mockRandom0.longs();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 7, 1451, 670, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 7, 1451
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 37;
      Matrix matrix0 = Matrix.zero(37, 37);
      Matrix matrix1 = matrix0.removeFirstRow();
      matrix0.shuffle();
      matrix1.setColumn(3, (double) 11);
      Matrix.identity(1000);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 37, 37, 11, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 37, 37
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(30, 5);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(5, (-1087.6233893529215));
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 420, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 420 rows and 30 cols at 0, 0 in a 5x5 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2526);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      // Undeclared exception!
      denseMatrix0.subtract((double) 2526);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(0);
      Matrix matrix1 = matrix0.copy();
      Matrix.identity(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix1.foldColumn(0, vectorAccumulator0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = matrix0.foldRows(vectorAccumulator1);
      assertTrue(matrix0.equals((Object)matrix1));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 37);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      numberFormat0.setMaximumFractionDigits(37);
      numberFormat0.setMinimumFractionDigits(3);
      matrix0.mkString(numberFormat0);
      matrix0.rank();
      // Undeclared exception!
      try { 
        matrix0.setColumn(37, (double) 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 6;
      Matrix matrix0 = Matrix.constant(6, 6, (-4075.608));
      matrix0.iteratorOfColumn(6);
      Matrix matrix1 = Matrix.identity(6);
      matrix1.insert(matrix0, 6, 6);
      matrix0.transpose();
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric((-2145113355), (-4075.608), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2145113355x-2145113355
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(458, 458);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn((-1797));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1797' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 791.44;
      doubleArray1[1] = 1529.08788347;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 791.44;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 791.44;
      doubleArray2[3] = 1529.08788347;
      doubleArray2[4] = 791.44;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(13, 13, 13);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.mkString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom(5);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(5, mockRandom0);
      denseMatrix0.product();
      int int1 = (-2606);
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        denseMatrix0.set((-2606), 5, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 3323;
      int int1 = 17;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(3323, 17);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.non(matrixPredicate0);
      DecimalFormat decimalFormat0 = new DecimalFormat("TAKEN_FROM_THESE");
      // Undeclared exception!
      try { 
        decimalFormat0.applyLocalizedPattern("ps1eq#n'a(ZQ~Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"ps1eq#n'a(ZQ~Q\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(10, 10);
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 10);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.iteratorOfRow(31);
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 31;
      intArray0[4] = 10;
      intArray0[5] = 1501;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        sparseMatrix0.copyOfShape(10, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(10);
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 10, mockRandom0);
      int int0 = 16;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10, 16);
      denseMatrix0.equals((Matrix) columnMajorSparseMatrix0, (-1523.90549));
      columnMajorSparseMatrix0.removeLastColumn();
      Matrix matrix0 = columnMajorSparseMatrix0.copy();
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '11' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 0.1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-1523.90549);
      Matrix matrix1 = Matrix.from1DArray(1, 1, doubleArray0);
      rowMajorSparseMatrix0.equals(matrix1, 1.0);
      matrix0.determinant();
      SparseMatrix.diagonal(184, 184);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Tl~A`");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.toCSV((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17);
      rowMajorSparseMatrix0.toCSV();
      int int0 = rowMajorSparseMatrix0.rows();
      rowMajorSparseMatrix0.swapRows(17, 17);
      Matrix matrix0 = Matrix.unit(17, 17);
      assertEquals(17, matrix0.columns());
      assertEquals(17, matrix0.rows());
      
      Matrix matrix1 = rowMajorSparseMatrix0.removeColumn(0);
      Matrix matrix2 = matrix1.copyOfRows(2);
      assertEquals(2, matrix2.rows());
      assertEquals(16, matrix2.columns());
      
      rowMajorSparseMatrix0.norm();
      int int1 = rowMajorSparseMatrix0.hashCode();
      assertFalse(int1 == int0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.transform(matrixFunction0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3080);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.9966917000119195;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 125.0;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 4.9E-324;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        matrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 3316;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3316);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      int int1 = (-2424);
      // Undeclared exception!
      try { 
        matrix0.swapRows(3316, (-2424));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3317
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1956.051;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1956.051;
      doubleArray2[1] = 1956.051;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1956.051;
      doubleArray3[1] = 1956.051;
      doubleArray3[2] = 1956.051;
      doubleArray3[3] = 1956.051;
      doubleArray3[4] = 1956.051;
      doubleArray3[5] = 1956.051;
      doubleArray3[6] = 1956.051;
      doubleArray3[7] = 1956.051;
      doubleArray3[8] = 1956.051;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-2351.77);
      doubleArray4[1] = 1956.051;
      doubleArray4[2] = 1956.051;
      doubleArray4[3] = 1956.051;
      doubleArray4[4] = 1956.051;
      doubleArray4[5] = 1956.051;
      doubleArray4[6] = 1956.051;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 1956.051;
      doubleArray5[1] = (-327.878);
      doubleArray5[2] = (-2351.77);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 1956.051;
      doubleArray6[1] = (-327.878);
      doubleArray6[2] = (-327.878);
      doubleArray6[3] = (-327.878);
      doubleArray6[4] = (-2351.77);
      doubleArray6[5] = (-2351.77);
      doubleArray0[5] = doubleArray6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.swapColumns(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2765;
      doubleArray0[1] = (double) 2765;
      doubleArray0[2] = (double) 2765;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2765, 2765, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.divide(2765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 8;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(514, 524, 8);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(0.0);
      // Undeclared exception!
      try { 
        matrix0.slice(5, 728, (-625), 404);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [5..-625][728..404].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(7, 7);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      columnMajorSparseMatrix0.rotate();
      doubleArray1[0] = (double) 7;
      doubleArray0[0] = doubleArray1;
      columnMajorSparseMatrix0.toDenseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      Matrix matrix0 = columnMajorSparseMatrix0.add((double) 7);
      matrix0.determinant();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.nonZeroAt(7, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(8);
      denseVector0.toColumnMatrix();
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      matrix0.copy();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorMatrixOperation<RowMajorSparseMatrix> vectorMatrixOperation0 = null;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-681);
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-681), 1616, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -681x1616
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "60";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("60");
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int0 = (-3609);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-3609);
      doubleArray1[1] = (double) (-3609);
      doubleArray1[2] = (double) (-3609);
      doubleArray1[3] = (double) (-3609);
      doubleArray1[4] = (double) (-3609);
      doubleArray1[5] = (double) (-3609);
      doubleArray1[6] = (double) (-3609);
      doubleArray1[7] = (double) (-3609);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) (-3609);
      doubleArray2[1] = (double) (-3609);
      doubleArray2[2] = (double) (-3609);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 1536.4360242959742;
      doubleArray3[1] = 100.0;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket vector coordinate real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 18;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(18);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(sparseMatrix0, sparseMatrix0);
      matrix0.toBinary();
      matrix0.multiplyByItsTranspose();
      sparseMatrix0.columnMajorIterator();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      NumberFormat.getNumberInstance();
      double double0 = 4.9E-324;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (double) 18;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = (double) 18;
      doubleArray0[4] = 4.9E-324;
      doubleArray0[5] = (double) 18;
      doubleArray0[6] = 4.9E-324;
      doubleArray0[7] = 4.9E-324;
      String[] stringArray0 = new String[0];
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix0 = null;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(17, 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = 1273.4266;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 1;
      denseMatrix0.max();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(17, 1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(191, 191);
      denseMatrix0.minInRow(178);
      // Undeclared exception!
      denseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3319, 7, 3310);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.toColumnMajorSparseMatrix();
      matrix0.iteratorOfRow(3319);
      // Undeclared exception!
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(3, 3);
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix1 = Matrix.randomSymmetric(3, mockRandom0);
      assertEquals(3, matrix1.columns());
      
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      doubleArray1[7] = (double) 3;
      doubleArray1[8] = (double) 3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = (double) 3;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = (double) 3;
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 3;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (double) 3;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = (double) 3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = (double) 3;
      doubleArray5[3] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (double) 3;
      doubleArray6[1] = 1.0;
      doubleArray6[2] = (double) 3;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (double) 3;
      doubleArray7[1] = 1.0;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = (double) 3;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 1.0;
      doubleArray7[6] = 1.0;
      doubleArray7[7] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = (double) 3;
      doubleArray8[1] = 1.0;
      doubleArray8[2] = 1.0;
      doubleArray8[3] = 1.0;
      doubleArray8[4] = 1.0;
      doubleArray8[5] = 1.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = Double.NEGATIVE_INFINITY;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = 1.0;
      doubleArray9[3] = 1604.376;
      doubleArray0[8] = doubleArray9;
      Matrix.from2DArray(doubleArray0);
      matrix0.hashCode();
      matrix0.toDenseMatrix();
      double double0 = matrix0.manhattanNorm();
      assertEquals(9.0, double0, 0.01);
      
      Matrix matrix2 = matrix0.power(1941);
      assertFalse(matrix2.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 1605;
      Matrix matrix0 = Matrix.diagonal(1605, 978.6272);
      matrix0.blankOfColumns(1605);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2262, 2262);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(0.0);
      Matrix matrix1 = matrix0.blankOfRows(2262);
      assertEquals(2262, matrix1.columns());
      assertEquals(2262, matrix1.rows());
      assertEquals(2262, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Matrix matrix0 = Matrix.randomSymmetric(10, mockRandom0);
      matrix0.min();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 10;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (-527.3539051);
      doubleArray1[6] = (double) 10;
      doubleArray1[7] = (double) 10;
      doubleArray1[8] = (double) 10;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 10;
      doubleArray2[1] = (-527.3539051);
      doubleArray2[2] = (-527.3539051);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-527.3539051);
      doubleArray2[5] = (double) 0L;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-527.3539051);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 10;
      doubleArray3[3] = (double) 0L;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-527.3539051);
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (-1773.78764050493);
      doubleArray0[2] = doubleArray3;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      assertEquals(9, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(9, 0.0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 37);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        matrix0.setColumn((-1994091957), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 2248.249;
      doubleArray3[1] = 479.78;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1215.6);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 2248.249;
      doubleArray4[1] = 479.78;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-1215.6);
      doubleArray5[2] = 2248.249;
      doubleArray5[3] = 2248.249;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 2248.249;
      doubleArray6[1] = 479.78;
      doubleArray6[2] = 479.78;
      doubleArray6[3] = 2248.249;
      doubleArray6[4] = 5.684341886080803E-12;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 479.78;
      doubleArray0[6] = doubleArray7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      double double0 = matrix0.infinityNorm();
      assertEquals(7, matrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2084, 2084);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      matrix0.add((Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2982, 2982, 4.9E-324);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-490.3);
      doubleArray1[2] = (-512.346087704);
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(7, 7);
      int int1 = (-856);
      columnMajorSparseMatrix0.getRow((-856));
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      int int2 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        matrix0.transformRow(Integer.MAX_VALUE, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2147483647' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      DenseMatrix denseMatrix0 = DenseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-754);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) (-754);
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) (-754);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-754);
      doubleArray2[1] = (double) (-754);
      doubleArray2[2] = (double) (-754);
      doubleArray2[3] = (double) (-754);
      doubleArray2[4] = 3765.2287022;
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 3765.2287022;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) (-754);
      doubleArray4[2] = (double) (-754);
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 100.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 3765.2287022;
      doubleArray5[3] = 3765.2287022;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = 100.0;
      doubleArray6[2] = (double) (-754);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.1;
      doubleArray6[5] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = (double) (-754);
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(8, matrix0.rows());
      assertEquals(9, matrix0.columns());
      
      Matrix matrix1 = denseMatrix0.transformRow((-754), (VectorFunction) null);
      assertNotSame(matrix1, denseMatrix0);
      assertEquals(0, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 4);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(1, matrix0.columns());
      
      Matrix matrix1 = matrix0.rotate();
      assertEquals(4, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 23;
      int int1 = 16;
      Matrix matrix0 = Matrix.unit(23, 16);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      int int2 = 12;
      matrix0.removeFirstColumn();
      matrix0.shuffle();
      int int3 = (-1396);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 6, 12, 12, (-109), (-1396), 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1396x6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      matrix0.setAll(0.0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      matrix0.fold(matrixAccumulator0);
      linkedList0.spliterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseVector0.spliterator();
      matrix0.update(matrixFunction0);
      matrix0.removeFirstColumn();
      int int0 = 5;
      // Undeclared exception!
      try { 
        matrix0.setRow(5, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(13, 1008);
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(13, 13);
      sparseMatrix0.equals((Matrix) sparseMatrix1, (-1.0));
      double double0 = new Integer(1008);
      sparseMatrix1.columns();
      Matrix matrix0 = sparseMatrix1.removeLastRow();
      assertFalse(sparseMatrix1.equals((Object)sparseMatrix0));
      assertFalse(matrix0.equals((Object)sparseMatrix1));
      
      sparseMatrix0.toMatrixMarket();
      assertEquals(1008, sparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1811.70507698;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 100.0;
      doubleArray1[6] = (-1654.806774090035);
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 100.0;
      doubleArray2[1] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = 1811.70507698;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 100.0;
      doubleArray3[5] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1654.806774090035);
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 1811.70507698;
      doubleArray5[1] = 1811.70507698;
      doubleArray5[2] = 100.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 100.0;
      doubleArray6[2] = 100.0;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = 100.0;
      doubleArray6[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeLastColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 8;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(8, 8);
      int int1 = (-4198);
      int int2 = 9;
      Matrix matrix0 = columnMajorSparseMatrix0.slice(8, (-4198), 8, 9);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x4207 does not equal to 8x8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = matrix0.copy();
      double double0 = matrix0.diagonalProduct();
      assertEquals(1.0, double0, 0.01);
      
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      
      matrix0.toBinary();
      assertTrue(matrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 17;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(17, 17);
      Matrix matrix0 = sparseMatrix0.multiply((double) 17);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '18' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(7, 7);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(7, 198);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [7..7][198..7].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 86.515;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1523.90549);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-741.531427203);
      doubleArray1[7] = (-2080.61);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1523.90549);
      doubleArray2[3] = (-2080.61);
      doubleArray2[4] = 86.515;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 86.515;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 86.515;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 350.362313;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 86.515;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (-741.531427203);
      doubleArray6[1] = (-2080.61);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1976.0;
      doubleArray7[3] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (-532.4);
      doubleArray8[1] = 86.515;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = 86.515;
      doubleArray9[1] = (-2080.61);
      doubleArray9[2] = (-2080.61);
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 0.0;
      doubleArray9[5] = (-741.531427203);
      doubleArray9[6] = (-532.4);
      doubleArray9[7] = (-1523.90549);
      doubleArray9[8] = 86.515;
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(13, 1008);
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(13, 13);
      sparseMatrix0.equals((Matrix) sparseMatrix1, (-1.0));
      // Undeclared exception!
      try { 
        sparseMatrix0.get(1008, 1008);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1008' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 18;
      MockRandom mockRandom0 = new MockRandom(18);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(18, mockRandom0);
      mockRandom0.doubles((-1075.0), (double) 18);
      int int1 = 13;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(13, (-534.4542887483254));
      denseMatrix0.equals((Object) rowMajorSparseMatrix0);
      denseMatrix0.setColumn(13, (double) 13);
      denseMatrix0.mkString("4", "B");
      int int2 = 820;
      // Undeclared exception!
      Matrix.randomSymmetric(820, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 7;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(37, 37, 7);
      Matrix matrix0 = sparseMatrix0.divide(0.0);
      int int1 = (-111);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-111));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(10, 10);
      matrix0.toMatrixMarket();
      matrix0.toString();
      // Undeclared exception!
      try { 
        matrix0.swapRows(6, (-697));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -697
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1655.345066592166);
      doubleArray1[1] = 2405.9;
      doubleArray1[2] = (-1394.067694606);
      doubleArray1[3] = (-1239.2654672691592);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2405.9;
      doubleArray2[2] = (-1394.067694606);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1239.2654672691592);
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 2405.9;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-1394.067694606);
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow(38, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1691, 1691);
      sparseMatrix0.equals((Object) null);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn(1691);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1691' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-280.316777803848);
      doubleArray2[1] = (-895.65);
      doubleArray2[2] = (-1523.90549);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1523.90549);
      doubleArray4[1] = (-1523.90549);
      doubleArray4[2] = (-155.1911963660853);
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2775.21381544;
      doubleArray1[1] = (-286.73);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2042.52;
      doubleArray1[7] = 607.926;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2775.21381544;
      doubleArray2[1] = 2042.52;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 2042.52;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = (-286.73);
      doubleArray2[6] = 2.0;
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = 607.926;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeColumn(1639);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2418, 2418, 2418);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        matrix0.maxInRow((-2742));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2742' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 2136;
      int int1 = 1103;
      double double0 = (-1.0);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2136, 1103, (-1.0));
      denseMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        denseMatrix0.apply((MatrixOperation<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 4346;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1488, 4346, 1488);
      int int1 = 1337;
      Vector vector0 = Vector.zero(2526);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setRow(1488, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2526. Should be: 4346.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(4, mockRandom0);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      assertEquals(15, sparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(7);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = matrix0.foldColumns(vectorAccumulator0);
      matrix0.removeFirstColumn();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      matrix0.fold(matrixAccumulator0);
      matrix0.toCSV();
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      matrix0.shuffle();
      matrix0.multiplyByItsTranspose();
      Matrix matrix1 = Matrix.from1DArray(1112, 1103, doubleArray0);
      // Undeclared exception!
      try { 
        matrix1.minInRow(1112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1112' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1653);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      double double0 = matrix0.minInColumn(428);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1653, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(16, 21, 1269.019432518855);
      matrix0.setColumn(16, 4.9E-324);
      assertEquals(16, matrix0.rows());
      assertEquals(21, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2075, 2075, 2075);
      // Undeclared exception!
      try { 
        denseMatrix0.foldColumn(Integer.MAX_VALUE, (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(3691);
      // Undeclared exception!
      try { 
        ((Matrix)cRSMatrix0).fail("9l4(cQ!#2+8ZVGq8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9l4(cQ!#2+8ZVGq8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4200.68418134655);
      doubleArray0[3] = (-1129.2959353709);
      doubleArray0[4] = 680.33;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-188.8232679418);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.transformColumn(5, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1767;
      int int1 = 37;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 1767;
      doubleArray0[2] = (double) 1767;
      doubleArray0[3] = (double) 37;
      doubleArray0[4] = (double) 37;
      doubleArray0[5] = (double) 1767;
      DenseMatrix.from1DArray(1767, 37, doubleArray0);
      int int2 = 16;
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 254;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 254;
      doubleArray0[1] = (double) 254;
      doubleArray0[2] = (double) 254;
      DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(Integer.MAX_VALUE, 2539, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-693.81386054157);
      doubleArray1[2] = (-2631.7273);
      doubleArray1[3] = 2470.71268;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-693.81386054157);
      doubleArray2[1] = 2470.71268;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 1917.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = (-2631.7273);
      doubleArray2[6] = 2470.71268;
      doubleArray2[7] = (-2631.7273);
      doubleArray2[8] = (-693.81386054157);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-693.81386054157);
      doubleArray3[1] = 2470.71268;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.updateRow(0, vectorFunction0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4);
      Matrix matrix0 = Matrix.randomSymmetric(4, mockRandom0);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 4);
      ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      matrix0.toDenseMatrix();
      SparseVector sparseVector1 = SparseVector.zero(4942);
      Vector vector0 = ooPlaceVectorsAddition0.apply(sparseVector1, sparseVector1);
      // Undeclared exception!
      try { 
        matrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 4942 does not equal to 4.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, 6);
      rowMajorSparseMatrix0.trace();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.get((-2516), (-1663));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2516' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1338, 338);
      // Undeclared exception!
      try { 
        matrix0.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(37);
      assertEquals(0.02702702702702703, sparseMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.removeFirstColumn();
      sparseMatrix0.hashCode();
      cRSMatrix0.blankOfShape(471, 471);
      assertEquals(0.02702702702702703, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 271;
      Matrix matrix0 = Matrix.diagonal(271, 271);
      // Undeclared exception!
      matrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3369;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 3369;
      doubleArray0[5] = (double) 6;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(6, 3369, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.minInRow(3319);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3319' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(10, 10);
      Matrix matrix0 = denseMatrix0.copyOfRows(10);
      Matrix matrix1 = Matrix.fromCSV("");
      matrix1.setRow(10, (-1.0));
      matrix0.iteratorOfRow(10);
      denseMatrix0.copyOfShape(1, 17);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix1.copyOfColumns(10);
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).fail("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-2145089573);
      int int1 = 626;
      // Undeclared exception!
      try { 
        Matrix.zero((-2145089573), 626);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom((-2434L));
      DenseMatrix denseMatrix0 = DenseMatrix.random(4, 4, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      matrix0.columnMajorIterator();
      assertEquals(4, matrix0.rows());
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, matrix0.columns());
      assertEquals(4, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 1321;
      RowMajorSparseMatrix.zero(1321, 1321);
      int int1 = 6;
      int int2 = (-3066);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 1321;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(6, (-3066), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 6x-3066
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      int int0 = 2;
      sparseVector0.norm();
      ooPlaceOuterProduct0.partiallyApply(sparseVector0);
      MockRandom mockRandom0 = new MockRandom((-1628L));
      sparseVector0.euclideanNorm();
      DenseVector denseVector0 = DenseVector.random(2, mockRandom0);
      mockRandom0.longs();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      matrix0.toMatrixMarket((NumberFormat) null);
      matrix0.norm();
      // Undeclared exception!
      try { 
        matrix0.removeRow(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3277.63726626);
      doubleArray0[1] = (double) 695;
      doubleArray0[2] = (double) 695;
      doubleArray0[3] = (double) 695;
      doubleArray0[4] = (double) 695;
      doubleArray0[5] = (double) 695;
      doubleArray0[6] = (double) 695;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) 695;
      Matrix matrix0 = Matrix.from1DArray(695, 695, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 1450;
      Matrix matrix0 = Matrix.zero(1450, 1450);
      int int1 = 1436;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1436, 1436);
      sparseMatrix0.toBinary();
      // Undeclared exception!
      matrix0.kroneckerProduct(sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(7, 7);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      int int1 = (-1047);
      long long0 = 2555L;
      MockRandom mockRandom0 = new MockRandom(2555L);
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        Matrix.random(7, (-1047), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 10;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(48, 10, 48);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        denseMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DenseMatrix.identity(96);
      int int0 = 8;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      String string0 = "Pk";
      // Undeclared exception!
      try { 
        DenseVector.fromCSV("Pk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromCSV("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero((-1770), (-1770), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1770x-1770
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-936.505041559);
      doubleArray1[1] = 1769.4590486;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-936.505041559);
      doubleArray2[2] = (-936.505041559);
      doubleArray2[3] = 1769.4590486;
      doubleArray2[4] = 1769.4590486;
      doubleArray2[6] = (-936.505041559);
      doubleArray2[7] = (-936.505041559);
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.mkString("#Kq*Z[aP+D~", "#Kq*Z[aP+D~");
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      matrix0.fold(matrixAccumulator0);
      Matrix matrix1 = matrix0.shuffle();
      matrix1.toRowMajorSparseMatrix();
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = null;
      // Undeclared exception!
      try { 
        SparseVector.zero((-1897));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1897
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(92);
      // Undeclared exception!
      try { 
        Matrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '93' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 74;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 74;
      doubleArray0[3] = (double) 74;
      doubleArray0[4] = (double) 74;
      doubleArray0[5] = (double) 74;
      doubleArray0[6] = (double) 74;
      doubleArray0[7] = 0.964;
      doubleArray0[8] = (double) 74;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(74, 74, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 74
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 1;
      int int1 = 2481;
      int int2 = 2470;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 2481, 2470);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.fromCSV("     ");
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      cCSMatrix0.trace();
      cRSMatrix1.sum();
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(Integer.MAX_VALUE, (double) 2470);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      // Undeclared exception!
      try { 
        ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 9;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(9, 9);
      columnMajorSparseMatrix0.manhattanNorm();
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      matrix0.equals((Object) "~5&s>HkSg]/s6wL");
      columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      matrix0.copyOfColumns(9);
  }
}
