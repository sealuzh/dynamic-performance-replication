/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:01:01 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(16);
      // Undeclared exception!
      try { 
        CompressedVector.zero(16, 2278);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2278.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(850, 2657);
      byte[] byteArray0 = ((CompressedVector) sparseVector0).toBinary();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 850;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Locale locale0 = Locale.forLanguageTag("K%SDOt9khAoibk");
      NumberFormat.getInstance(locale0);
      MockRandom mockRandom0 = new MockRandom();
      byte byte0 = (byte) (-10);
      CompressedVector.fromBinary(byteArray0);
      int int0 = 1345;
      // Undeclared exception!
      try { 
        Vector.zero((byte) (-10));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1215.0482744629048;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37, 12);
      Vector.unit(37);
      compressedVector0.setAll(37);
      compressedVector0.setAll(12);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(12, vectorFunction0);
      assertEquals(36, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1215.0482744629048;
      doubleArray0[2] = (-3665.43);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertArrayEquals(new double[] {1.0, 1215.0482744629048, (-3665.43)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertNotNull(compressedVector1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(3, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      double double0 = compressedVector0.getOrElse(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      
      boolean boolean0 = compressedVector0.nonZeroAt(707);
      assertFalse(boolean0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      Random.setNextRandom(246);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(246, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2657;
      int int1 = 850;
      SparseVector sparseVector0 = SparseVector.zero(850, 2657);
      assertNotNull(sparseVector0);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(850, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 850;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Locale locale0 = Locale.forLanguageTag("K%SDOt9khAoibk");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ((CompressedVector) sparseVector0).setAll((-190866.77303190756));
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(850, sparseVector0.length());
      assertEquals(850, sparseVector0.cardinality());
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        sparseVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 2657;
      int int1 = 850;
      SparseVector sparseVector0 = SparseVector.zero(850, 2657);
      assertNotNull(sparseVector0);
      assertEquals(850, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 850;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Locale locale0 = Locale.forLanguageTag("K%SDOt9khAoibk");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ((CompressedVector) sparseVector0).setAll((-190866.77303190756));
      assertEquals(850, sparseVector0.cardinality());
      assertEquals(850, sparseVector0.length());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      CompressedVector compressedVector0 = CompressedVector.random(2657, 0.0, (java.util.Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2657, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2, 2);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)70;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(292, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-783.902504);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertNotNull(decimalFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      VectorProcedure vectorProcedure0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(2300, (-783.902504), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 850;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(850);
      assertEquals(850, (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long(850);
      assertEquals(850L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = hashMap0.put(integer0, long0);
      assertNull(long1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector1 = (CompressedVector)Vector.fromMap(hashMap0, 3);
      assertNotNull(compressedVector1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.setAll(0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      int int1 = (-737);
      Random.setNextRandom((-737));
      // Undeclared exception!
      try { 
        CompressedVector.zero((-737));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -737
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      CompressedVector compressedVector0 = new CompressedVector(314);
      assertNotNull(compressedVector0);
      assertEquals(314, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(314);
      assertEquals(314, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(314, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength((byte)16);
      assertNotNull(compressedVector1);
      assertEquals(314, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(314, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(16, compressedVector1.length());
      assertEquals(16, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((int) (byte)16, 3117.0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(2278, (double) 2278, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VectorOperation<CompressedVector> vectorOperation0 = (VectorOperation<CompressedVector>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom((-807L));
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector1 = CompressedVector.random(0, (double) 0, (java.util.Random) mockRandom0);
      assertNotNull(compressedVector1);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(10, vectorFunction0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      
      boolean boolean0 = compressedVector0.nonZeroAt(1393);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(1329, 3114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 3114.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 16);
      assertNotNull(compressedVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(48);
      assertNotNull(compressedVector1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(48, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.each(vectorProcedure0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(48, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      byte[] byteArray0 = compressedVector1.toBinary();
      assertNotNull(byteArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(48, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 500;
      CompressedVector compressedVector0 = CompressedVector.zero(1356, 500);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1356, compressedVector0.length());
      
      compressedVector0.setAll((-2099.3184));
      assertEquals(1356, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1356, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(1356);
      assertFalse(boolean0);
      assertEquals(1356, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1356, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1356, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1356, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -5
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 49.5;
      doubleArray0[1] = 2355.60079889771;
      doubleArray0[3] = (-344.73);
      doubleArray0[4] = (-783.902504);
      doubleArray0[6] = (-3855.894404685001);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.7142857142857143, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertArrayEquals(new double[] {49.5, 2355.60079889771, 0.0, (-344.73), (-783.902504), 0.0, (-3855.894404685001)}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0.7142857142857143, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertArrayEquals(new double[] {49.5, 2355.60079889771, 0.0, (-344.73), (-783.902504), 0.0, (-3855.894404685001)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = Integer.getInteger("}&Dqi6R", 2276);
      assertEquals(2276, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.offerLast(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2276;
      doubleArray0[1] = (double) 2276;
      doubleArray0[2] = (double) 2276;
      Vector vector0 = compressedVector0.add(2276.0);
      assertNotNull(vector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, vector0.length());
      
      compressedVector0.swapElements(17, (-1322));
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      
      Integer integer0 = new Integer(2300);
      assertEquals(2300, (int)integer0);
      assertNotNull(integer0);
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      
      double double1 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertEquals(double1, double0, 0.01);
      
      compressedVector0.setAll(3.0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertNotNull(compressedVector1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      double double2 = mockRandom0.nextDouble();
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = compressedVector0.getOrElse(1, 16);
      assertEquals(3.0, double3, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1248
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(2300, 1365);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      Vector vector0 = Vector.constant(2300, (-3393.116665));
      assertNotNull(vector0);
      assertEquals(2300, vector0.length());
      
      compressedVector0.set(1365, 16);
      assertEquals(2300, compressedVector0.length());
      assertEquals(4.347826086956522E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = new CompressedVector(6257);
      assertNotNull(compressedVector1);
      assertEquals(6257, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      Double double1 = new Double((-3332.4120883725));
      assertEquals((-3332.4120883725), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = compressedVector0.equals((Object) vector0);
      assertFalse(boolean0);
      assertEquals(2300, compressedVector0.length());
      assertEquals(4.347826086956522E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2300, vector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      boolean boolean1 = compressedVector0.nonZeroAt(6257);
      assertFalse(boolean1);
      assertEquals(2300, compressedVector0.length());
      assertEquals(4.347826086956522E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(boolean1 == boolean0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double2 = compressedVector1.foldNonZero(vectorAccumulator0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(6257, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(double2, double0, 0.01);
      
      compressedVector1.swapElements(13, (-2));
      assertEquals(6257, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorIterator vectorIterator1 = compressedVector1.iterator();
      assertNotNull(vectorIterator1);
      assertEquals(6257, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(850, 2657);
      assertNotNull(sparseVector0);
      assertEquals(850, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(850);
      assertEquals(850, (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long(850);
      assertEquals(850L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = hashMap0.put(integer0, long0);
      assertNull(long1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2657);
      assertNotNull(compressedVector0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2657, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3.763643206624012E-4, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      
      double double0 = compressedVector0.norm();
      assertEquals(850.0, double0, 0.01);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2657, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3.763643206624012E-4, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toRowMatrix();
      assertNotNull(cRSMatrix0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2657, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3.763643206624012E-4, compressedVector0.density(), 0.01);
      assertEquals(850.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2657, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3.763643206624012E-4, cRSMatrix0.density(), 0.01);
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(2657, 2657);
      assertNotNull(sparseVector0);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(2657, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2657;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Locale locale0 = Locale.forLanguageTag("K%SDOMPt9khAoibk");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2);
      assertNotNull(list3);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotSame(list0, list3);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertSame(locale0, locale1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ((CompressedVector) sparseVector0).setAll(2657.0);
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(2657, sparseVector0.length());
      assertEquals(2657, sparseVector0.cardinality());
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(598, (-68.791));
      assertNotNull(basicVector0);
      assertEquals(598, basicVector0.length());
      
      ((CompressedVector) sparseVector0).set(598, 2657);
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(2657, sparseVector0.length());
      assertEquals(2657, sparseVector0.cardinality());
      
      boolean boolean0 = sparseVector0.nonZeroAt(598);
      assertTrue(boolean0);
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(2657, sparseVector0.length());
      assertEquals(2657, sparseVector0.cardinality());
      
      boolean boolean1 = sparseVector0.nonZeroAt((-1298));
      assertFalse(boolean1);
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(2657, sparseVector0.length());
      assertEquals(2657, sparseVector0.cardinality());
      assertFalse(boolean1 == boolean0);
      
      ((CompressedVector) sparseVector0).swapElements((-1050), (-1390));
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(2657, sparseVector0.length());
      assertEquals(2657, sparseVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3417.792382327552)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        ((CompressedVector) sparseVector0).updateAt((-1390), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = Double.POSITIVE_INFINITY;
      Double double1 = new Double(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = Float.isFinite((-1900.8466F));
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1900.8466F);
      doubleArray0[2] = (double) (-1900.8466F);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector1);
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {(-1900.8465576171875), 0.0, (-1900.8465576171875), 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copy();
      assertNotNull(compressedVector2);
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(4, compressedVector2.length());
      assertEquals(2, compressedVector2.cardinality());
      assertEquals(0.5, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertArrayEquals(new double[] {(-1900.8465576171875), 0.0, (-1900.8465576171875), 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      VectorOperation<Vector> vectorOperation0 = ooPlaceVectorsAddition0.partiallyApply((SparseVector) compressedVector1);
      assertNotNull(vectorOperation0);
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertArrayEquals(new double[] {(-1900.8465576171875), 0.0, (-1900.8465576171875), 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector1.equals((Object)compressedVector2));
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition1 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition1);
      assertFalse(ooPlaceVectorsAddition1.equals((Object)ooPlaceVectorsAddition0));
      
      LinkedList<CompressedVector> linkedList1 = new LinkedList<CompressedVector>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition1.apply((SparseVector) compressedVector0, (SparseVector) compressedVector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Vector vector0 = Vector.zero(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.length());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (byte)16;
      doubleArray0[6] = 16.0;
      doubleArray0[7] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 16.0, 0.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = new CompressedVector(0);
      assertNotNull(compressedVector1);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1310.1008319)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.375, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 16.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      boolean boolean0 = compressedVector0.nonZeroAt(2299);
      assertFalse(boolean0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.375, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 16.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = compressedVector0.equals((Object) double0);
      assertFalse(boolean0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(1, 1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)292).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(292, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      String string0 = compressedVector0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      Integer integer0 = new Integer((-17));
      assertEquals((-17), (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long(23);
      assertEquals(23L, (long)long0);
      assertNotNull(long0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long1 = hashMap0.put(integer0, long0);
      assertNull(long1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(850, 2657);
      assertNotNull(sparseVector0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(850, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 850;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ((CompressedVector) sparseVector0).setAll(850.0);
      assertEquals(850, sparseVector0.cardinality());
      assertEquals(850, sparseVector0.length());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      
      ((CompressedVector) sparseVector0).set(16, (-1.0));
      assertEquals(850, sparseVector0.cardinality());
      assertEquals(850, sparseVector0.length());
      assertEquals(1.0, sparseVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 37;
      int[] intArray0 = new int[9];
      intArray0[0] = 37;
      intArray0[1] = 37;
      intArray0[2] = 37;
      intArray0[3] = 37;
      intArray0[4] = 37;
      intArray0[5] = 37;
      intArray0[6] = 769;
      intArray0[7] = 37;
      intArray0[8] = 37;
      CompressedVector compressedVector0 = new CompressedVector(37, 37, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(37, compressedVector0.cardinality());
      assertEquals(37, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {37.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {37, 37, 37, 37, 37, 37, 769, 37, 37}, intArray0);
      
      // Undeclared exception!
      try { 
        compressedVector0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = linkedList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = new Float(0.0F);
      assertEquals(0.0F, double0, 0.01);
      
      compressedVector0.setAll(0.0F);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertNotNull(compressedVector1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector1.setAll(1420.129638671875);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copyOfLength(0);
      assertNotNull(compressedVector2);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      compressedVector2.setAll(2.0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector1.equals((Object)compressedVector2));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector3 = CompressedVector.zero(0, 0);
      assertNotNull(compressedVector3);
      assertEquals(0, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.0F).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      
      String string0 = compressedVector3.mkString((NumberFormat) decimalFormat0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1420.129638671875).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector3.updateAt(0, vectorFunction1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-783.902504);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertArrayEquals(new double[] {(-783.902504), 0.0}, doubleArray0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertArrayEquals(new double[] {(-783.902504), 0.0}, doubleArray0, 0.01);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertNotNull(decimalFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertEquals("-783.903, 0", string0);
      assertNotNull(string0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertArrayEquals(new double[] {(-783.902504), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      CompressedVector compressedVector0 = CompressedVector.fromBinary(byteArray0);
      assertNotNull(compressedVector0);
      assertEquals(268435456, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertEquals(268435456, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)16;
      intArray0[1] = 16;
      intArray0[3] = (int) (byte)16;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertNotNull(compressedVector1);
      assertEquals(268435456, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(268435456, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, (byte)16);
      assertNotNull(compressedVector2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(16, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      BasicVector basicVector0 = (BasicVector)Vector.zero(16);
      assertNotNull(basicVector0);
      assertEquals(16, basicVector0.length());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) (byte)16;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) (byte)16;
      doubleArray0[6] = 16.0;
      doubleArray0[7] = (double) 16;
      CompressedVector compressedVector3 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector3);
      assertEquals(8, compressedVector3.length());
      assertEquals(8, compressedVector3.cardinality());
      assertEquals(1.0, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertArrayEquals(new double[] {16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0}, doubleArray0, 0.01);
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      
      VectorIterator vectorIterator1 = compressedVector1.nonZeroIterator();
      assertNotNull(vectorIterator1);
      assertEquals(268435456, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(268435456, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector3);
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      assertFalse(compressedVector1.equals((Object)compressedVector3));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      
      compressedVector2.setAll((-3228.787));
      CompressedVector compressedVector4 = new CompressedVector(16);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector4.updateAt(16, vectorFunction0);
      compressedVector3.nonZeroAt(2299);
      compressedVector0.set((byte)16, 16.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 3708;
      CompressedVector compressedVector0 = new CompressedVector(3708);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3708, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3708, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(3708, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3708, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertSame(compressedVector0, sparseVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -953
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = linkedList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(0.0F);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertNotNull(compressedVector1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector1.setAll(1420.129638671875);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copyOfLength(0);
      assertNotNull(compressedVector2);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      compressedVector0.setAll(2.0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector3 = CompressedVector.zero(0, 0);
      assertNotNull(compressedVector3);
      assertEquals(0, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector3.updateAt(0, vectorFunction1);
      assertEquals(0, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      
      Random.setNextRandom((-985));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2340);
      assertNotNull(compressedVector0);
      assertEquals(2340, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2340, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(2340, 1365);
      assertEquals(2340, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(2340, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Vector vector0 = Vector.random(1365, mockRandom0);
      assertNotNull(vector0);
      assertEquals(1365, vector0.length());
      
      LongStream longStream0 = mockRandom0.longs((long) 2340);
      assertNotNull(longStream0);
      
      boolean boolean0 = compressedVector0.equals(vector0, 3525.27);
      assertFalse(boolean0);
      assertEquals(2340, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1365, vector0.length());
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale1);
      assertNotNull(decimalFormat0);
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#\u00A0##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      compressedVector0.setAll(1365);
      assertEquals(2340, compressedVector0.length());
      assertEquals(2340, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(626, 2671.611607324494);
      assertNotNull(basicVector0);
      assertEquals(626, basicVector0.length());
      assertNotSame(basicVector0, vector0);
      assertFalse(basicVector0.equals((Object)vector0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      VectorOperation<Object> vectorOperation0 = (VectorOperation<Object>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-405.2793620423796)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(2340, compressedVector0.length());
      assertEquals(2340, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean1 = compressedVector0.nonZeroAt(2);
      assertTrue(boolean1);
      assertEquals(2340, compressedVector0.length());
      assertEquals(2340, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean1 == boolean0);
      
      compressedVector0.swapElements(626, 2);
      assertEquals(2340, compressedVector0.length());
      assertEquals(2340, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(2340, compressedVector0.length());
      assertEquals(2340, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(2340, compressedVector0.length());
      assertEquals(2340, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(626, 626);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(626, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2300;
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      Integer integer0 = new Integer(2300);
      assertEquals(2300, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double1 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double1, 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(double1, double0, 0.01);
      
      compressedVector0.setAll(3.0);
      assertEquals(2300, compressedVector0.length());
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int1 = 0;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertNotNull(compressedVector1);
      assertEquals(2300, compressedVector0.length());
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      compressedVector0.setAll(3.0);
      assertEquals(2300, compressedVector0.length());
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector2 = new CompressedVector(2300);
      assertNotNull(compressedVector2);
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(2300, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2657.0, (-2756.9394439893), 2.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector2.update(vectorFunction0);
      assertEquals(3, compressedVector2.cardinality());
      assertEquals(2300, compressedVector2.length());
      assertEquals(0.0013043478260869566, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      double double2 = 1.0;
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2221.9509122584077, 1370.35341, 1.0, (double)0, 1.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector2.update(vectorFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      
      double double0 = compressedVector0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      
      compressedVector0.swapElements(2300, 1365);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale1);
      assertNotNull(decimalFormat0);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      compressedVector0.setAll(1365);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(598, 2647.6);
      assertNotNull(basicVector0);
      assertEquals(598, basicVector0.length());
      
      compressedVector0.set(598, 0.0);
      assertEquals(0.9995652173913043, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(2299, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((-42));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -42
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2287);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2287, compressedVector0.length());
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2287, compressedVector0.length());
      assertEquals(2287, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector1 = (CompressedVector)((CompressedVector) sparseVector0).copyOfLength(2287);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2287, compressedVector0.length());
      assertEquals(2287, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(2287, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertNotSame(sparseVector0, compressedVector1);
      assertSame(sparseVector0, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.setAll(362.4);
      assertEquals(2287, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2287, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(1351, 2287);
      assertNotNull(basicVector0);
      assertEquals(1351, basicVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(8);
      assertTrue(boolean0);
      assertEquals(2287, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2287, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        sparseVector0.getOrElse(2287, 1584);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2287' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(850, 2657);
      assertNotNull(sparseVector0);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(850, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 850;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ((CompressedVector) sparseVector0).setAll(850.0);
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(850, sparseVector0.cardinality());
      assertEquals(850, sparseVector0.length());
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Vector vector0 = Vector.constant(598, (-68.791));
      assertNotNull(vector0);
      assertEquals(598, vector0.length());
      
      ((CompressedVector) sparseVector0).set(598, 16);
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(850, sparseVector0.cardinality());
      assertEquals(850, sparseVector0.length());
      
      boolean boolean0 = sparseVector0.nonZeroAt(598);
      assertTrue(boolean0);
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(850, sparseVector0.cardinality());
      assertEquals(850, sparseVector0.length());
      
      // Undeclared exception!
      try { 
        ((CompressedVector) sparseVector0).swapElements(16, 850);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(2300, sparseVector0.length());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      compressedVector0.setAll(362.4);
      assertEquals(2300, compressedVector0.length());
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertSame(compressedVector0, sparseVector0);
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Vector vector0 = Vector.constant(1351, 2300);
      assertNotNull(vector0);
      assertEquals(1351, vector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(8);
      assertTrue(boolean0);
      assertEquals(2300, compressedVector0.length());
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertSame(compressedVector0, sparseVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1584, (-1472));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(3, sparseVector0.length());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 1338;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1338);
      assertNotNull(compressedVector1);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1338, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.setAll(362.4);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      int int1 = 1351;
      BasicVector basicVector0 = (BasicVector)Vector.constant(2299, 1.0);
      assertNotNull(basicVector0);
      assertEquals(2299, basicVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-1771));
      assertFalse(boolean0);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("K%SDOt9khAoibk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[8] = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "K%SDOt9khAoibk";
      Locale locale0 = Locale.forLanguageTag("K%SDOt9khAoibk");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale2);
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale2);
      assertNotNull(decimalFormat0);
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(2, 598);
      assertNotNull(basicVector0);
      assertEquals(2, basicVector0.length());
      
      compressedVector0.set(2, 2);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.347826086956522E-4, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-270));
      assertFalse(boolean0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.347826086956522E-4, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      
      compressedVector0.swapElements((-270), 2);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.347826086956522E-4, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      Integer integer0 = new Integer(2300);
      assertEquals(2300, (int)integer0);
      assertNotNull(integer0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(2300, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Locale locale0 = Locale.forLanguageTag("K%SDOt9khAoibk");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      compressedVector0.setAll(6);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(6, (-1694.1031963));
      assertNotNull(basicVector0);
      assertEquals(6, basicVector0.length());
      
      compressedVector0.set(9, 2300);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(1405);
      assertTrue(boolean0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
      
      compressedVector0.swapElements(9, 1351);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(850, 2657);
      assertNotNull(sparseVector0);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(850, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 850;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Locale locale0 = Locale.forLanguageTag("K%SDOt9khAoibk");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(598, (-68.791));
      assertNotNull(basicVector0);
      assertEquals(598, basicVector0.length());
      
      ((CompressedVector) sparseVector0).set(598, 16);
      assertEquals(850, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(0.001176470588235294, sparseVector0.density(), 0.01);
      
      boolean boolean0 = sparseVector0.nonZeroAt(598);
      assertTrue(boolean0);
      assertEquals(850, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(0.001176470588235294, sparseVector0.density(), 0.01);
      
      ((CompressedVector) sparseVector0).swapElements(16, 850);
      assertEquals(850, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(0.001176470588235294, sparseVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      Integer integer0 = new Integer(2300);
      assertEquals(2300, (int)integer0);
      assertNotNull(integer0);
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(2300, 205);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      compressedVector0.setAll(2300);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(2300, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(2300, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt(205);
      assertTrue(boolean0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector0.length());
      assertEquals(2300, compressedVector0.cardinality());
      
      int int0 = (-2282);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2282), 143);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      
      Integer integer0 = new Integer(2300);
      assertEquals(2300, (int)integer0);
      assertNotNull(integer0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Locale locale0 = Locale.forLanguageTag("K%SDOt9khAoibk");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale2);
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CHN", locale2.getISO3Country());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale2);
      assertNotNull(decimalFormat0);
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(2, 598);
      assertNotNull(basicVector0);
      assertEquals(2, basicVector0.length());
      
      compressedVector0.set(2, 100.0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertEquals(4.347826086956522E-4, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(1365);
      assertFalse(boolean0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertEquals(4.347826086956522E-4, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(2300, 2);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertEquals(4.347826086956522E-4, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2300;
      CompressedVector compressedVector0 = new CompressedVector(2300);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      Integer integer0 = new Integer(2300);
      assertEquals(2300, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 1365;
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.multiply((-1042.3));
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2300, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-858.4532685)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(2300, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2300, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2300, compressedVector1.length());
      assertEquals(4.347826086956522E-4, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.setAll((-1042.3));
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      // Undeclared exception!
      try { 
        compressedVector1.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)16;
      SparseVector sparseVector0 = SparseVector.zero(2248, 1363);
      assertNotNull(sparseVector0);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(2248, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Locale locale0 = Locale.forLanguageTag("K%SDOt9khAoibk");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.zero(2248);
      assertNotNull(compressedVector0);
      assertEquals(2248, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, sparseVector0);
      
      compressedVector0.setAll(133.362007503815);
      assertEquals(2248, compressedVector0.length());
      assertEquals(2248, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(16, (byte)16);
      assertNotNull(basicVector0);
      assertEquals(16, basicVector0.length());
      
      compressedVector0.set(13, 0.0);
      assertEquals(0.9995551601423488, compressedVector0.density(), 0.01);
      assertEquals(2247, compressedVector0.cardinality());
      assertEquals(2248, compressedVector0.length());
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      
      boolean boolean0 = compressedVector0.nonZeroAt((byte)16);
      assertTrue(boolean0);
      assertEquals(0.9995551601423488, compressedVector0.density(), 0.01);
      assertEquals(2247, compressedVector0.cardinality());
      assertEquals(2248, compressedVector0.length());
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      
      compressedVector0.swapElements((byte)16, 3239);
      assertEquals(0.9995551601423488, compressedVector0.density(), 0.01);
      assertEquals(2247, compressedVector0.cardinality());
      assertEquals(2248, compressedVector0.length());
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2340);
      compressedVector0.max();
      compressedVector0.swapElements(2340, 1365);
      compressedVector0.nonZeroIterator();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockRandom mockRandom0 = new MockRandom();
      Vector vector0 = Vector.random(1365, mockRandom0);
      compressedVector0.equals(vector0, 3525.27);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Locale locale1 = Locale.CANADA_FRENCH;
      NumberFormat.getInstance(locale1);
      compressedVector0.setAll(1365);
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      Vector.constant(626, 2671.611607324494);
      Object object0 = new Object();
      VectorOperation<Object> vectorOperation0 = (VectorOperation<Object>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      compressedVector0.nonZeroAt(2);
      compressedVector0.swapElements(626, 2);
      compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2873);
      mockRandom0.setSeed(0L);
      CompressedVector compressedVector0 = CompressedVector.random(2873, 1.0, (java.util.Random) mockRandom0);
      byte[] byteArray0 = new byte[3];
      compressedVector0.product();
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)3;
      byte byte0 = (byte)18;
      byteArray0[2] = (byte)18;
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((byte)3, (-29));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -29.
         //
         verifyException("org.la4j.Vector", e);
      }
  }
}
