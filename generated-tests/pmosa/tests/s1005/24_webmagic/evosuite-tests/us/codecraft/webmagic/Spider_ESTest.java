/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:11:19 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.PlainText;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.SmartContentSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;
import us.codecraft.webmagic.utils.FilePersistentBase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("T2.%0}Hws):DzD");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T2.%0}Hws):DzD";
      stringArray0[1] = "T2.%0}Hws):DzD";
      stringArray0[2] = "T2.%0}Hws):DzD";
      stringArray0[3] = "T2.%0}Hws):DzD";
      stringArray0[4] = "T2.%0}Hws):DzD";
      stringArray0[5] = "T2.%0}Hws):DzD";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("DG`\"FL +");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("DG`\"FL +");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("p");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setSpawnUrl(false);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) forkJoinPool0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[}5l5W>'/");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.getThreadAlive();
      spider0.thread((ExecutorService) forkJoinPool0, 1124);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("Jb");
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FilePersistentBase.PATH_SEPERATOR = "";
      spider1.getCollectorPipeline();
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.setDownloader((Downloader) null);
      spider2.getCollectorPipeline();
      spider2.downloader = null;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(719);
      Spider spider4 = spider3.thread((ExecutorService) scheduledThreadPoolExecutor0, 5);
      Spider spider5 = spider2.addPipeline(jsonFilePipeline0);
      spider5.downloader((Downloader) null);
      spider4.executorService = (ExecutorService) scheduledThreadPoolExecutor0;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("iO5ic2]pds");
      Spider spider6 = spider4.scheduler(fileCacheQueueScheduler0);
      spider2.getCollectorPipeline();
      Spider spider7 = spider6.setSpawnUrl(true);
      Spider spider8 = spider7.addPipeline(jsonFilePipeline0);
      spider3.getThreadAlive();
      spider6.getPageCount();
      // Undeclared exception!
      try { 
        spider8.thread((-309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Pvj[9.  >B+fE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      String string0 = spider1.getUUID();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertNull(string0);
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "3c2[}5l5W>'/";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[}5l5W>'/");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-601));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qk]J`EEn0Zu}N");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("qk]J`EEn0Zu}N", "qk]J`EEn0Zu}N");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.getUUID();
      // Undeclared exception!
      try { 
        spider1.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("oX$gNbqIw ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 31;
      Spider spider1 = spider0.thread(31);
      Request[] requestArray0 = new Request[7];
      Request request0 = new Request();
      Request request1 = request0.addCookie("", "oX$gNbqIw ");
      requestArray0[0] = request1;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      requestArray0[1] = null;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider1);
      requestArray0[2] = null;
      fileCacheQueueScheduler0.poll(spider1);
      requestArray0[3] = null;
      ResultItems resultItems0 = new ResultItems();
      Request request2 = new Request("application/json");
      ResultItems resultItems1 = resultItems0.setRequest(request2);
      ResultItems resultItems2 = resultItems1.setSkip(true);
      Map<String, Object> map0 = resultItems2.getAll();
      Request request3 = request1.setExtras(map0);
      requestArray0[4] = request3;
      Request request4 = request1.putExtra("Spider {} closed! {} pages downloaded.", spider0);
      requestArray0[5] = request4;
      priorityScheduler0.poll(spider1);
      requestArray0[6] = null;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "threadNum should be more than one!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStartTime();
      spider0.isSpawnUrl();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "threadNum should be more than one!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Scheduler scheduler0 = null;
      Spider spider1 = spider0.scheduler((Scheduler) null);
      spider1.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider1.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("m");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "$o*b]KBB>");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup1, false);
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      spider3.addPipeline(collectorPipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "n}Xur0v:IM@{we%,Y";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n}Xur0v:IM@{we%,Y");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      spider0.checkIfRunning();
      spider0.getUUID();
      spider0.getUUID();
      spider0.getScheduler();
      Page.fail();
      ReplaceSelector replaceSelector0 = null;
      try {
        replaceSelector0 = new ReplaceSelector("n}Xur0v:IM@{we%,Y", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid regex
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "eE\\DJ\\9m'+|4%9hZ0";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("eEDJ9m'+|4%9hZ0");
      Spider spider0 = new Spider(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "threadNum should be more than one!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      spider0.setUUID("threadNum should be more than one!");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.setScheduler(priorityScheduler0);
      String string1 = "#e2t1";
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("#e2t1");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",K/&h");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",K/&h";
      stringArray0[1] = ",K/&h";
      stringArray0[2] = ",K/&h";
      stringArray0[3] = ",K/&h";
      stringArray0[4] = ",K/&h";
      stringArray0[5] = ",K/&h";
      stringArray0[6] = ",K/&h";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",K/&h");
      spider1.setEmptySleepTime(4);
      stringArray0[7] = ",K/&h";
      stringArray0[8] = ",K/&h";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",K/&h");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",K/&h", ",K/&h");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.setPipelines(linkedList0);
      int int0 = 1124;
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[8p}5l5W>'/%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getCollectorPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.clearPipeline();
      AtomicInteger atomicInteger0 = spider0.stat;
      spider0.setSpawnUrl(true);
      spider1.runAsync();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[8p}5l5W>'/%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getCollectorPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("_`F?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status._`F?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("p");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "threadNum should be more than one!");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(3);
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.setSpawnUrl(true);
      spider0.getUUID();
      Spider.Status spider_Status0 = Spider.Status.fromValue(3);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8LsWvmE,:(DUA");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setExitWhenComplete(false);
      int int0 = 3258;
      spider2.thread(3258);
      int int1 = 3;
      int int2 = (-788);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[8p}5l5VW>'/%");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider0.clearPipeline();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-)/;]2U9*&N.3*");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("3c2[8p}5l5VW>'/%", "3c2[8p}5l5VW>'/%");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1124);
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      long long0 = new Integer(1124);
      Spider spider2 = spider1.thread(1124);
      assertTrue(spider2.isExitWhenComplete());
      
      spider0.run();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8LsWvmE,:(DUA");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpawnUrl(false);
      Spider spider1 = spider0.clearPipeline();
      int int0 = 3258;
      spider1.thread(3258);
      int int1 = 3;
      int int2 = (-788);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      spider0.extractAndAddRequests(page1, false);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(3, (-788), 0L, timeUnit0, priorityBlockingQueue0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "threadNum should be more than one!");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(3);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.setSpawnUrl(true);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3, 3, 3, timeUnit0, synchronousQueue0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      threadPoolExecutor0.getQueue();
      spider0.setEmptySleepTime(3);
      spider0.getSite();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}u_%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getCollectorPipeline();
      Spider spider1 = spider0.setDownloader((Downloader) null);
      AtomicInteger atomicInteger0 = new AtomicInteger(3089);
      spider1.stat = atomicInteger0;
      Spider spider2 = new Spider(simplePageProcessor0);
      spider1.setSpawnUrl(true);
      assertTrue(spider1.isSpawnUrl());
      
      spider2.getStatus();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Request[] requestArray0 = new Request[1];
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("A'@t{SK@nX(@ih4");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      priorityScheduler0.getLeftRequestsCount(spider1);
      Spider spider2 = spider1.thread(5);
      boolean boolean0 = spider2.isExitWhenComplete();
      assertTrue(boolean0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1124);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      CountableThreadPool countableThreadPool0 = spider0.threadPool;
      spider2.threadPool = null;
      spider2.getCollectorPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      Spider spider3 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("M3z_.5-5", (String) null);
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1124);
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 81);
      Spider spider5 = spider4.downloader(phantomJSDownloader1);
      spider5.addPipeline(multiPagePipeline0);
      LinkedList<SpiderListener> linkedList2 = new LinkedList<SpiderListener>();
      Integer integer0 = new Integer(81);
      Spider spider6 = spider2.thread(1124);
      Spider spider7 = spider3.setSpawnUrl(false);
      spider7.run();
      spider1.downloader = (Downloader) phantomJSDownloader1;
      Spider.Status.valueOf("Running");
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      List<Request> list0 = page1.getTargetRequests();
      spider6.startRequest(list0);
      spider3.getUUID();
      assertEquals(1, linkedList1.size());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[p}5l5W>'/%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("text", "3c2[p}5l5W>'/%");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.executorService = (ExecutorService) forkJoinPool0;
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[p}5l5W>'/%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("tplJjgO5", "3c2[p}5l5W>'/%");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.initComponent();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":4nhb$J\"=tVt(");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(":4nhb$J\"=tVt(");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XPath can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.setSpawnUrl(false);
      Spider spider4 = spider3.thread(75);
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<Locale.LanguageRange> list0 = spider4.getAll((Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      List<Pipeline> list2 = spider3.getAll((Collection<String>) list1);
      Spider spider5 = spider4.setPipelines(list2);
      Request request0 = new Request("6M4i/");
      Request request1 = request0.setUrl("");
      Request request2 = request1.setCharset(":4nhb$J\"=tVt(");
      // Undeclared exception!
      try { 
        spider5.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider3 = spider2.pipeline(consolePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider5 = spider4.thread((ExecutorService) null, 1131);
      spider5.start();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", retryTimes=");
      fileCacheQueueScheduler0.poll(spider2);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[p}55W>'/%");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("tuZ2", "tuZ2");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tuZ2";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("+eI3h!k .)TX^P");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.pipeline((Pipeline) null);
      Spider spider4 = spider3.addPipeline((Pipeline) null);
      Spider spider5 = spider4.scheduler(queueScheduler0);
      spider5.stop();
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      spider0.getThreadAlive();
      Request request0 = new Request("$BVALUES");
      assertEquals("$BVALUES", request0.getUrl());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "");
      phantomJSDownloader0.setRetryNum(1124);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 1898);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-1));
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.thread(992);
      spider2.run();
      spider0.run();
      Spider spider3 = spider1.setUUID("");
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "3c2[p}5l5W>'/%";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[p}5l5W>'/%");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      spider0.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider0.sleep((-1939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%Qzz{5O");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      ForkJoinPool.commonPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("%Qzz{5O", ".[d~B#QV!Nzgyz]");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider1.startRequest(list0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".[d~B#QV!Nzgyz]";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("DG`\"FL +");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("tplJjgO5", "_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList1);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      spider2.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "tplJjgO5";
      stringArray0[1] = "+}=caRK p";
      stringArray0[2] = ";:@j1z9s";
      stringArray0[3] = "DG`\"FL +";
      stringArray0[4] = "DG`\"FL +";
      stringArray0[5] = "DG`\"FL +";
      stringArray0[6] = "DG`\"FL +";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.run();
      spider1.getThreadAlive();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }
}
