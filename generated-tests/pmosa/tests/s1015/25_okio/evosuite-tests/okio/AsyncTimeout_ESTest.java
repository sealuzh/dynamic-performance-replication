/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:29:39 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.Sink;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.enter();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit((IOException) mockIOException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", (String) null, 65536);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      Sink sink0 = null;
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      Timeout timeout0 = asyncTimeout0.clearTimeout();
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      asyncTimeout0.source(buffer0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = new ByteString((byte[]) null);
      byteString0.utf8 = "";
      buffer1.writeLongLe(359L);
      buffer1.rangeEquals(0L, byteString0, 0, (-1839));
      buffer0.readUtf8Line((long) 0);
      buffer1.readByteString();
      asyncTimeout0.source(buffer1);
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      assertSame(asyncTimeout0, timeout0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable("O}#?", mockIOException0);
      Sink sink0 = asyncTimeout0.sink((Sink) null);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(1L);
      asyncTimeout0.enter();
      boolean boolean0 = asyncTimeout0.exit();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.enter();
      assertTrue(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(1L);
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      asyncTimeout1.exit();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(1000000L);
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout1;
      asyncTimeout1.exit();
      MockIOException mockIOException0 = new MockIOException("aHNxlWX*AY");
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      IOException iOException1 = AsyncTimeout.head.newTimeoutException(iOException0);
      assertEquals("timeout", iOException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(1L);
      asyncTimeout0.deadlineNanoTime(1L);
      asyncTimeout1.enter();
      asyncTimeout0.exit(false);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      IOException iOException1 = asyncTimeout0.exit(iOException0);
      assertSame(iOException1, iOException0);
      assertEquals("java.io.InterruptedIOException: timeout", iOException1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      MockIOException mockIOException0 = new MockIOException("");
      AsyncTimeout.head.exit((IOException) mockIOException0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      AsyncTimeout.head.timeout(100000000L, timeUnit0);
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      MockThrowable mockThrowable0 = new MockThrowable("wVa'$");
      AsyncTimeout.head.deadlineNanoTime(44L);
      AsyncTimeout.head.deadlineNanoTime();
      asyncTimeout1.enter();
      AsyncTimeout.awaitTimeout();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      MockIOException mockIOException0 = new MockIOException("");
      AsyncTimeout.head.exit((IOException) mockIOException0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      AsyncTimeout.head.timeout(100000000L, timeUnit0);
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      MockThrowable mockThrowable0 = new MockThrowable("wVa'$");
      asyncTimeout1.enter();
      assertFalse(asyncTimeout1.hasDeadline());
  }
}
