/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:54:56 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-2359.043198);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2359.043198);
      doubleArray1[1] = 0.05;
      doubleArray1[2] = (-2359.043198);
      doubleArray1[3] = (-2359.043198);
      doubleArray1[4] = 0.05;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-856.7674321519935);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-2359.043198);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-3208.638027123), mnStrategy0, (-856.7674321519935));
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-856.7674321519935), 7);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-283.4309565959467), (-283.4309565959467), (-283.4309565959467), (-283.4309565959467), (-283.4309565959467)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-283.4309565959467), mnStrategy0, 0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, (-283.4309565959467), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-2359.043198);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2359.043198);
      doubleArray1[1] = 0.05;
      doubleArray1[2] = (-2359.043198);
      doubleArray1[3] = (-2359.043198);
      doubleArray1[4] = 0.05;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-856.7674321519935);
      doubleArray1[7] = 0.0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-856.7674321519935);
      doubleArray2[1] = (-2359.043198);
      doubleArray2[2] = (-856.7674321519935);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray2);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianNCycles((-2262));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-2359.043198), mnStrategy0, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, 0.05, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5153.1, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5153.1, mnStrategy0, 0);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, 2316.04855309848, (-2123884926));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5152.505984, (-1304.1352862146198), (-1304.1352862146198), (-1304.1352862146198), 5152.505984).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1304.1352862146198), mnStrategy0, 0.05);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0.05, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5153.1, 5153.1, 2316.04855309848, 1171.54257, 2316.04855309848).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1171.54257, mnStrategy0, 0);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, 2316.04855309848, (-2123884926));
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      int[] intArray2 = new int[1];
      intArray2[0] = (-2123884926);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 2316.04855309848;
      doubleArray1[4] = (double) (-2123884926);
      doubleArray1[5] = (double) (-2123884926);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 4.0E-7;
      doubleArray2[2] = 5153.1;
      MnCross mnCross1 = mnFunctionCross0.cross(intArray1, doubleArray1, doubleArray2, 4.0, 2);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5153.1, (-1304.1352862146198), (-1304.1352862146198)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5153.1, mnStrategy0, 0);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      double[] doubleArray0 = null;
      int int1 = (-2123884926);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, 2316.04855309848, (-2123884926));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5153.1, 10.0, 5153.1).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5153.1, mnStrategy0, 0);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, 2316.04855309848, (-2123884926));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5153.1, 10.0, 5153.1, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5152.684055472613, mnStrategy0, 0);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      double[] doubleArray0 = null;
      mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, 2316.04855309848, (-2123884926));
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, 14.0, (-2546));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5152.505984, (-1304.1352862146198), (-1304.1352862146198), (-1304.1352862146198), 5152.505984).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1304.1352862146198), mnStrategy0, 5152.505984);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5152.505984, (-1304.1352862146198), (-1304.1352862146198), (-1304.1352862146198), 5152.505984).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 1.0E-6);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 1.0E-6, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5153.1, 10.0, 5153.1, 5153.1, 5153.1).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5152.684055472613, mnStrategy0, 0);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      double[] doubleArray0 = null;
      mnUserParameterState0.add("P^7V~#37.%{", (-9.095679218268371E-5), (-9.095679218268371E-5), 5153.1, 5152.684055472613);
      int int1 = (-2123884926);
      mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, 2316.04855309848, (-2123884926));
      int int2 = (-2546);
      double double0 = 1852.3791937092;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 10.0;
      doubleArray1[1] = (-0.24994116570831132);
      doubleArray1[2] = (-9.095679218268371E-5);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-9.095679218268371E-5), 630839736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-303.3567708899), (-303.3567708899), (-303.3567708899), (-303.3567708899), (-303.3567708899)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-303.3567708899), mnStrategy0, 9);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, (-303.3567708899), 9);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-2493.5906432765), (double)0, (-2493.5906432765), (-2493.5906432765)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1477.3769), mnStrategy0, (-1709.6));
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0, (-2123884926));
      mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 1852.3791937092, 4);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-2123884926), mnStrategy0, 100.0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross2 = new MnFunctionCross(fCNBase2, mnUserParameterState0, (-1149.654), mnStrategy0, (-1149.654));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      mnFunctionCross2.cross(intArray0, (double[]) null, doubleArray0, (-2204.0978293614708), 0);
      MnCross mnCross0 = mnFunctionCross2.cross(intArray0, (double[]) null, (double[]) null, (-2123884926), 4);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = 100.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-1709.6);
      doubleArray1[5] = 0.51;
      mnFunctionCross1.cross(intArray0, (double[]) null, doubleArray1, 0.0, 1051);
      MnCross mnCross1 = mnFunctionCross2.cross(intArray0, doubleArray1, doubleArray1, 4.0, 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5153.1, mnStrategy0, 1.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0, 2052);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5153.1, 10.0, 5153.1, 5153.1, 5153.1).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5152.684055472613, mnStrategy0, 0);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      mnUserParameterState0.add("P^7V~#37.%{", (-9.095679218268371E-5), (-9.095679218268371E-5), 5153.1, 5152.684055472613);
      mnUserParameters0.setLowerLimit("P^7V~#37.%{", 2.6);
      mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, 2316.04855309848, (-2123884926));
      double[] doubleArray0 = new double[3];
      mnStrategy0.setHessianNCycles(11);
      doubleArray0[0] = 10.0;
      doubleArray0[2] = (-9.095679218268371E-5);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-9.095679218268371E-5), 630839736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5153.1, 10.0, 5153.1, 5153.1, 5153.1).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5152.684055472613, mnStrategy0, 0);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      mnUserParameterState0.add("P^7V~#37.%{", 5153.1, 5153.1, 5153.1, 5152.684055472613);
      mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, 2316.04855309848, (-2123884950));
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (-0.24994116570831132);
      doubleArray0[2] = 5153.1;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 630839736);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 5152.684055472613, (-2546));
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      int[] intArray0 = new int[1];
      mnUserParameterState0.add("55Uhz>wL^.C|`/f", 0.02897678, 793.4, 0.02897678, 4.0E-7);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1106.512), mnStrategy0, 1945.26753426366);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 793.4;
      doubleArray0[1] = 0.02897678;
      doubleArray0[2] = (double) (-955705596);
      doubleArray0[3] = 4.0E-7;
      doubleArray0[4] = (double) (-955705596);
      doubleArray0[5] = 4.0E-7;
      doubleArray0[6] = (double) (-955705596);
      doubleArray0[7] = 1945.26753426366;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-793.4), 1532);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-551.906330673961), (-551.906330673961), (-551.906330673961), (-551.906330673961), (-551.906330673961)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("yhXD2;Cge+pRe7@", (-551.906330673961), (-551.906330673961), (-5.963060730380534E8), (-3388266.568122276));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-3388266.568122276), mnStrategy0, 0.1);
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5.963060730380534E8);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-551.906330673961), 1440);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5152.684055472613, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      mnUserParameterState0.add("P^7V~#67.%{", 5153.1, 5153.1, 5153.1, 5152.684055472613);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) (-2546);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-0.1), (double)1, 1352.5, (double)(-2546), 2.0).when(fCNBase1).valueOf(any(double[].class));
      mnUserParameterState0.add("", 779.1383948320639);
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1619.08622028), mnStrategy0, 1);
      MnCross mnCross0 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 0.2, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-553.26), (-553.26), (-553.26), (-553.26), (-553.26)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      int[] intArray0 = new int[1];
      mnUserParameterState0.add("", (-553.26), (-553.26), (-553.26), 0.028977);
      mnUserParameterState0.setUpperLimit("", (-184.5554848));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-553.26), mnStrategy0, (-553.26));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-553.26);
      doubleArray0[1] = 0.028977;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.028977, 1439);
      assertNotNull(mnCross0);
  }
}
