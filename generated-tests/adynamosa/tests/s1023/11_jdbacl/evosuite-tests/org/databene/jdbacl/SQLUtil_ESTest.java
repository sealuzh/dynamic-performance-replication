/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 12:12:13 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 4", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter table", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter table\" UNIQUE (, , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("update()", "", "update()");
      assertEquals("'update()'u'update()'p'update()'d'update()'a'update()'t'update()'e'update()'('update()')'update()'", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "r6-NeZ,-=v", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.renderValue(nameSpec0);
      assertEquals("NEVER", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Not all parameters set.");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM Not all parameters set. WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I WHERE ", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@I9n!`lTtb@`Ct");
      SQLUtil.renderCreateTable(defaultDBTable0, true, (NameSpec) null, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("catalog  NOT", defaultDBTable0, (-1183), " NOT");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(" NOT", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      String[] stringArray0 = new String[8];
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("j7S>[;OBnQQN0Rb:El", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(83, charArrayWriter0.size());
      assertEquals("ALTER TABLE null ADD \n\tFOREIGN KEY (, , , , , , , ) REFERENCES null(, , , , , , , )", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      MockPrintStream mockPrintStream0 = new MockPrintStream("9>8T'_xzrx4H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("constraint", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("constraint", dBForeignKeyConstraint0.getName());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "pI(wT", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT pI(wT PRIMARY KEY (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Z?j%XFw@3OHT8H^}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z?j%XFw@3OHT8H^}", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Z?j%XFw@3OHT8H^}", false, stringArray0);
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[14];
      String string0 = SQLUtil.leftJoin("updatejgap96-un3x", stringArray0, (String) null, "VgcR]/b", stringArray0);
      assertEquals("left join null as VgcR]/b on updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null and updatejgap96-un3x.null = VgcR]/b.null", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.leftJoin("selectm>ri$br/|!", stringArray0, "", stringArray0[4], stringArray0);
      assertEquals("left join  as null on selectm>ri$br/|!.null = null.null and selectm>ri$br/|!.null = null.null and selectm>ri$br/|!.null = null.null and selectm>ri$br/|!.null = null.null and selectm>ri$br/|!.null = null.null and selectm>ri$br/|!.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("r!0jG<l:*<Qy\"uj", stringArray0, "r!0jG<l:*<Qy\"uj", (String) null, stringArray0);
      assertEquals("left join r!0jG<l:*<Qy\"uj as null on ", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, "@m=z\"r", "@m=z\"r", stringArray0);
      assertEquals("left join @m=z\"r as @m=z\"r on null.null = @m=z\"r.null and null.null = @m=z\"r.null and null.null = @m=z\"r.null and null.null = @m=z\"r.null and null.null = @m=z\"r.null", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.leftJoin("", stringArray0, " or ", "alter table ", stringArray0);
      assertEquals("left join  or  as alter table  on .null = alter table .null and .null = alter table .null", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("=+Nk!(T6\"Pe|_7HL", " v", (String[]) null, "(1rename()", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join(" NULL", "- ", (String[]) null, "create table", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("_17azj", "KfJ@&lD.UW :", stringArray0, (String) null, "0!j>UT*Vfcps;mb4YBK", stringArray0);
      assertEquals("_17azj join null as 0!j>UT*Vfcps;mb4YBK on KfJ@&lD.UW :.null = 0!j>UT*Vfcps;mb4YBK.null and KfJ@&lD.UW :.null = 0!j>UT*Vfcps;mb4YBK.null and KfJ@&lD.UW :.null = 0!j>UT*Vfcps;mb4YBK.null and KfJ@&lD.UW :.null = 0!j>UT*Vfcps;mb4YBK.null", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("%6Fjy*a9_JgyfHW", "", stringArray0, "2q`ePpsP>KAjN82NoM\"", ")dA<\"", stringArray0);
      assertEquals("%6Fjy*a9_JgyfHW join 2q`ePpsP>KAjN82NoM\" as )dA<\" on .null = )dA<\".null and .null = )dA<\".null", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, "UNIQUE ", stringArray0, "*/", "#", stringArray0);
      assertEquals("*/ as # on ", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin("&i6cmG7pk%Yvl@<vN", stringArray0, "drop tablesht*n4uwpx", "", stringArray0);
      assertEquals("drop tablesht*n4uwpx as  on &i6cmG7pk%Yvl@<vN.null = .null and &i6cmG7pk%Yvl@<vN.null = .null and &i6cmG7pk%Yvl@<vN.null = .null and &i6cmG7pk%Yvl@<vN.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on ", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("K > KcTceBYAtZq.1C", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("#a~*LAntb}&2`>`\"");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SELECT * FROM ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2425);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(7);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2425);
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("ALTER TABLE ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("X\"--pX~[3A", dBSchema0);
      String[] stringArray0 = new String[7];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintStream mockPrintStream0 = new MockPrintStream("9>8T'_xzrx4H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete.(bb= ", defaultDBTable0, (DBDataType) null, integer0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Z?j%XFw@3OHT8H^}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z?j%XFw@3OHT8H^}", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 323, "alter materialized viewupdate");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Character character0 = Character.valueOf('M');
      columnDescriptorList0.add((Object) character0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Character cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("op_allocate_statement ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("()", (String[]) null, "op_allocate_statement ", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("I,.F;k@BP-;3C/", stringArray0, "PRIMARY KEY ", "select into", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, "", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&i6cmG7pk%Yvl@<vN");
      String[] stringArray0 = new String[4];
      String[] stringArray1 = defaultDBTable0.getColumnNames();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter index", stringArray0, "TQV5wZ~<(LUzaR!", "drop tablesht*n4uwpx as  on &i6cmG7pk%Yvl@<vN.{ = .{ and &i6cmG7pk%Yvl@<vN.TQV5wZ~<(LUzaR! = .TQV5wZ~<(LUzaR! and &i6cmG7pk%Yvl@<vN.&i6cmG7pk%Yvl@<vN = .&i6cmG7pk%Yvl@<vN and &i6cmG7pk%Yvl@<vN.{ = .{", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("@z\"R0", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition(",@F)0", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " NOT", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("A{fI?L_+U$aQ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!gPbw6YzW,M", (DBSchema) null);
      String[] stringArray0 = new String[7];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "!gPbw6YzW,M", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SELECT * FROM ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "K > KcTceBYAtZq.1C", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join("inner", (String) null, stringArray0, "", "vp&", stringArray0);
      assertEquals(" as vp& on null.null = vp&.null and null.null = vp&.null and null.null = vp&.null and null.null = vp&.null and null.null = vp&.null and null.null = vp&.null and null.null = vp&.null and null.null = vp&.null", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into9>8t'_xzrx4h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("delete");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create tableprimary key");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("2345.53341298");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique indexzpb}.@");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Character character0 = new Character('`');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'`'", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("op_allocate_statement ", stringArray0);
      String string1 = SQLUtil.renderValue(string0);
      assertEquals("''", string1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!gPbw6YzW,M", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-718), "sMltF,WAd)j)OH9Skr");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("wz$c_!LL", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("SMLTF,WAD)J)OH9SKR(3)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(240, "drop materialized view");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")0]/Qe~=.'\"pBOqDs", defaultDBTable0, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "table null");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("table nullDROP MATERIALIZED VIEW(0,0)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("A", defaultDBTable0, (-72219286), "select");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("SELECT", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Not all parameters set.");
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(1048, "catalog null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("3>AY6d(P=|:5", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("3>AY6d(P=|:5 CATALOG NULL(0,0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " NOT", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NOT\" UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[13];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-1026.625112);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1026.625112", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 1131.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1131", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.renderColumnListWithTableName("ALk_R TABLE ", stringArray0);
      assertEquals("ALk_R TABLE .null, ALk_R TABLE .null, ALk_R TABLE .null, ALk_R TABLE .null, ALk_R TABLE .null, ALk_R TABLE .null, ALk_R TABLE .null, ALk_R TABLE .null, ALk_R TABLE .null, ALk_R TABLE .null", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 2345.53341298;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("2345.53341298", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = SQLUtil.normalize("9>8T'_xzrx4H", false);
      assertEquals("9 > 8T '_xzrx4H'", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = SQLUtil.normalize("\";_W&K:b", false);
      assertEquals("\";_W&K:b\"", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = SQLUtil.normalize("delete.(bb= p-e", false);
      assertEquals("delete.(bb = p - e", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = SQLUtil.normalize("//", false);
      assertEquals("/ /", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/.SELECT * FROM , */.A, */.h ^ k", true);
      assertEquals("*/.SELECT * FROM, */.A, */.h ^ k", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = SQLUtil.normalize("()", false);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = SQLUtil.removeComments("@I9n!`lTtb@`Ct");
      assertEquals("@I9n!`lTtb@`Ct", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog ", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((String) null).when(compositeDBObject0).getObjectType();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertNotNull(string0);
      assertEquals("null null", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("A{fI?L_+U$aQ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "N 1hu2 0", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"N 1hu2 0\" ", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!gPbw6YzW,M", (DBSchema) null);
      String[] stringArray0 = new String[7];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "!gPbw6YzW,M", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT !gPbw6YzW,M ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" 7O.");
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("o$LT><#bhq;rT", true, defaultDBTable0, " OFFSET ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT o$LT><#bhq;rT ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals("null.create", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((CompositeDBObject) null).when(compositeDBObject0).getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(")0]/Qe~=.'\"pBOqDs", false, defaultDBTable0, "setBlob(String, InputStream, long)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition(")0]/Qe~=.'\"pBOqDs", stringBuilder0);
      assertEquals("CONSTRAINT )0]/Qe~=.'\"pBOqDs  or )0]/Qe~=.'\"pBOqDs", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "table null");
      SQLUtil.addRequiredCondition("LsXL$J", stringBuilder0);
      assertEquals("table null and LsXL$J", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.join("", "create table", stringArray0, "LOCATE", "create table", stringArray0);
      assertEquals("LOCATE as create table on create table.null = create table.null and create table.null = create table.null and create table.null = create table.null and create table.null = create table.null and create table.null = create table.null and create table.null = create table.null", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" v");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.hsqldb.Library.user", true, defaultDBTable0, " v");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.hsqldb.Library.user CHECK  v", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("wxnE*SO%N8f=PB[V", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , , ) REFERENCES null(, , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Not all parameters set.");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "a#I\"Eql|J*CGr 4H", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"a#I\"Eql|J*CGr 4H\" UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("A{fI?L_+U$aQ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execyuifv2stobxz iuhh>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete.(bb= p-e");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("renameselect * from");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessiondeletei where");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Character character0 = Character.valueOf('x');
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("null", (String) null, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter materialized viewdelete.(bb= p-e";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("alter materialized viewdelete.(bb= p-e = 'alter materialized viewdelete.(bb= p-e' AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      Object[] objectArray0 = new Object[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = new Integer(47);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("BLOB", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("A?z^'", (DBTable) null, 314, "b*Z)hD!.9e\"");
      defaultDBColumn0.setDefaultValue("A?z^'");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("A?z^' B*Z)HD!.9E\" DEFAULT A?z^' NULL", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete.(bb= ", defaultDBTable0, (DBDataType) null, integer0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("delete.(bb= , delete.(bb= ", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(21, "drop maeialized view");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")0]/Qe~=.'\"pBOqDs", defaultDBTable0, dBDataType0, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(")0]/Qe~=.'\"pBOqDs, )0]/Qe~=.'\"pBOqDs", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(52, charArrayWriter0.size());
      assertEquals("create table null (,\n\tPRIMARY KEY (, , , , , , , )\n)", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" 7O.");
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "catalog null");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("19#vdjV2@r.", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("op_allocate_statement ");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("()", defaultDBTable0, (-209043504), "()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("=WmE\"#EoC(BWU:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: =WmE\"#EoC(BWU:
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(")0]/Qe~=.'\"pBOqDs DROP MATERIALIZED VIEW(0,-1) NULL");
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockFile mockFile0 = new MockFile("setBlob(String, InputStream, long)", "setBlob(String, InputStream, long)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(")0]/Qe~=.'\"pBOqDs", false, defaultDBTable0, "setBlob(String, InputStream, long)");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (-1183), "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "SYS_GUID", stringArray0);
      assertEquals(" as SYS_GUID on .null = SYS_GUID.null and .null = SYS_GUID.null and .null = SYS_GUID.null and .null = SYS_GUID.null and .null = SYS_GUID.null", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf(">TaUt^%");
      String string0 = SQLUtil.substituteMarkers("", "XSLAR.D", versionNumber0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executeorg.apache.derby.iapi.sql.execute.cursorresultset");
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("executeorg.apache.derby.iapi.sql.execute.cursorresultset", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , ) REFERENCES executeorg.apache.derby.iapi.sql.execute.cursorresultset(, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(305, "execyuifv2stobxz iuhh>");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create tablealter materialized viewdelete.(bb= p-e", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "", false, "create tablealter materialized viewdelete.(bb= p-e");
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("create tablealter materialized viewdelete.(bb= p-e NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized viewdelete.(bb= p-e", (DBSchema) null);
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter materialized viewdelete.(bb= p-e", false, stringArray0);
      MockFile mockFile0 = new MockFile("alter materialized viewdelete.(bb= p-e", "Custom type maps are not supported.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
