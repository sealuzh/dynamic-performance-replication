/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 12:04:46 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-396);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "The filter ust not e null", "The filter ust not e null", "The filter ust not e null", "The filter ust not e null");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1426));
      classWriter0.version = 49;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1426), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-1532);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "The filter ust not e null", "The filter ust not e null", "The filter ust not e null", "The filter ust not e null");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-885));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-885), "A%a3S.rB>A7NJ", "A%a3S.rB>A7NJ", "A%a3S.rB>A7NJ", "A%a3S.rB>A7NJ");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-34), "The filter ustnot e nul", "The filter ustnot e nul", "The filter ustnot e nul", "The filter ustnot e nul");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "A%a3S.rB>jA7NJ", (String) null, "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1346, "", "A%a3S.rB>jA7NJ", (String) null, "");
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-37));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "qhe filter ust not e null", "qhe filter ust not e null", "qhe filter ust not e null", "qhe filter ust not e null");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = (-37);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -37
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-37));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "qhe filter ust not e null", "qhe filter ust not e null", "qhe filter ust not e null", "qhe filter ust not e null");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = (-37);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2031));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, (String) null, (String) null, (String) null, classWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "The fiter mus not be null", "The fiter mus not be null", "The fiter mus not be null", "The fiter mus not be null");
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 0, "The fiter mus not be null", "The fiter mus not be null", "The fiter mus not be null", fieldWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.FieldWriter@8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 36, "EANafq%Ae", "EANafq%Ae", "EANafq%Ae", "EANafq%Ae");
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("EANafq%Ae");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "A%a3S.rB>jA7NJ", "", "A%a3S.rB>jA7NJ", (Object) null);
      fieldWriter0.visitAnnotation("A%a3S.rB>jA7NJ", false);
      ByteVector byteVector0 = new ByteVector(131072);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2031));
      classWriter0.version = (-2031);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2031), "Deprecated", "Deprecated", "A%a3S.rB>jA7NJ", "Deprecated");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1206));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2325), "", "", (String) null, "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-34), "The filer ustnot e nul", "The filer ustnot e nul", "The filer ustnot e nul", "The filer ustnot e nul");
      Attribute attribute0 = new Attribute("The filer ustnot e nul");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "The ilter ust nt e null", "The ilter ust nt e null", "The ilter ust nt e null", "The ilter ust nt e null");
      fieldWriter0.visitAnnotation("The ilter ust nt e null", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "The ilter ust nt e null", "The ilter ust nt e null", "The ilter ust nt e null", "The ilter ust nt e null");
      fieldWriter0.visitAnnotation("The ilter ust nt e null", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2031));
      classWriter0.version = (-2031);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2031), "Deprecated", "Deprecated", "A%a3S.rB>jA7NJ", "Deprecated");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1206));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2325), "", "", (String) null, "");
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2488);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2488, "The filter ust not e null", "The filter ust not e null", "The filter ust not e null", "The filter ust not e null");
      fieldWriter0.visitAnnotation("The filter ust not e null", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "A%a3S.rB>jA7NJ", "", "A%a3S.rB>jA7NJ", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1206));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2325), "", "", (String) null, "");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "wheel.asm.Type", "wheel.asm.Type", "wheel.asm.Type", "wheel.asm.Type");
      fieldWriter0.visitEnd();
  }
}
