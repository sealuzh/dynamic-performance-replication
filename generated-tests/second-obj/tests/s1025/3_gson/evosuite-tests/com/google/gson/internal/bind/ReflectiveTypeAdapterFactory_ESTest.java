/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:10:08 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Excluder excluder0 = new Excluder();
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      gson0.toJson((Object) null, (Type) class0);
      Gson gson1 = new Gson();
      Class<ReflectiveTypeAdapterFactory.BoundField> class1 = ReflectiveTypeAdapterFactory.BoundField.class;
      gson1.fromJson("null", (Type) class1);
      Class<String> class2 = String.class;
      TypeToken.get(class2);
      TypeToken.get(class1);
      Class<Integer> class3 = Integer.TYPE;
      assertTrue(class3.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
      Excluder excluder0 = new Excluder();
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      excluder0.create(gson0, typeToken0);
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingPolicy0, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
      gson0.toJson((Object) jsonAdapterAnnotationTypeAdapterFactory0, (Type) class0);
      TypeToken.get((Type) class0);
      excluder0.excludeFieldsWithoutExposeAnnotation();
      Class<Object> class1 = Object.class;
      excluder0.excludeFieldsWithoutExposeAnnotation();
      TypeToken.get(class1);
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory0.create(gson0, typeToken1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstructorConstructor constructorConstructor0 = null;
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
      Excluder excluder0 = new Excluder();
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingPolicy0, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Class<Integer> class1 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class1);
      jsonAdapterAnnotationTypeAdapterFactory0.create(gson0, typeToken0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      gson0.toJson((Object) charArrayWriter1, (Type) class0);
      Gson gson1 = new Gson();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class2 = String.class;
      TypeToken.get(class2);
      Class<Object> class3 = Object.class;
      TypeToken.get(class3);
      Class<Type> class4 = Type.class;
      TypeToken.get(class4);
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory1 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      TypeToken<Type> typeToken1 = TypeToken.get(class4);
      jsonAdapterAnnotationTypeAdapterFactory1.create(gson1, typeToken1);
      // Undeclared exception!
      try { 
        FieldNamingPolicy.valueOf("{\"buf\":[\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\"],\"count\":java.lang.Integer@0000000098}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.gson.FieldNamingPolicy.{\"buf\":[\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\"],\"count\":java.lang.Integer@0000000098}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
      Excluder excluder0 = new Excluder();
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingPolicy0, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
      Gson gson2 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String string0 = File.separator;
      Class<Integer> class0 = Integer.TYPE;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      TypeToken.get(class0);
      Class<Short> class1 = Short.TYPE;
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory1 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory1 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingPolicy0, excluder1, jsonAdapterAnnotationTypeAdapterFactory0);
      reflectiveTypeAdapterFactory1.create(gson1, typeToken0);
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4!o)Ho^S=za+iUsH");
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<String> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<String>((ObjectConstructor<String>) null, hashMap0);
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory_Adapter0.fromJson("[+xu-_'2{cd\";MXRC$+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }
}
