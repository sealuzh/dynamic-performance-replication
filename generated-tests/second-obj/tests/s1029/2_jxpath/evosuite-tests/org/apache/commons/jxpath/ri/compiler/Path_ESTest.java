/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:10:16 GMT 2018
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Path_ESTest extends Path_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.toString();
      // Undeclared exception!
      try { 
        locationPath0.areBasicPredicates(expressionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-255));
      nodeTypeTest0.toString();
      Step step0 = new Step((-255), nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      nodeTypeTest0.toString();
      Step step1 = new Step(34, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      nodeTypeTest0.toString();
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.toString();
      boolean boolean0 = locationPath0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[11];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(5, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      step0.toString();
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Step[] stepArray0 = new Step[3];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, (Expression[]) null, stepArray0);
      expressionPath0.buildContextChain((EvalContext) null, (-1327), false);
      // Undeclared exception!
      try { 
        expressionPath0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step((-3836), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(1, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(2, (NodeTest) null, (Expression[]) null);
      step2.isContextDependent();
      stepArray0[1] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.isSimpleStep(step0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      EvalContext evalContext0 = locationPath0.createContextForStep(unionContext0, 1, (NodeTest) null);
      // Undeclared exception!
      try { 
        locationPath0.evalSteps(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(5, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      step0.toString();
      step0.toString();
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertEquals(0, evalContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step step0 = new Step(16, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1689, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      EvalContext evalContext0 = locationPath0.evalSteps(descendantContext0);
      assertFalse(evalContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer");
      Step step0 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      // Undeclared exception!
      try { 
        expressionPath0.buildContextChain(predicateContext0, 11, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      boolean boolean0 = locationPath0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("{P");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      locationPath0.createContextForStep(nodeSetContext0, 2, nodeNameTest0);
      assertEquals(1, nodeSetContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      boolean boolean0 = locationPath0.areBasicPredicates(expressionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.isContextDependent();
      boolean boolean0 = locationPath0.isSimplePath();
      boolean boolean1 = locationPath0.isSimplePath();
      assertTrue(boolean1);
      
      boolean boolean2 = locationPath0.isAbsolute();
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0WOg");
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.createContextForStep((EvalContext) null, 6, processingInstructionTest0);
      String string0 = locationPath0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      boolean boolean0 = locationPath0.areBasicPredicates(expressionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.evalSteps((EvalContext) null);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?0`\"7x*YMsThVGN!8`");
      processingInstructionTest0.toString();
      processingInstructionTest0.toString();
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      locationPath0.createContextForStep(childContext0, 9, processingInstructionTest0);
      // Undeclared exception!
      try { 
        locationPath0.buildContextChain((EvalContext) null, 9, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      boolean boolean0 = locationPath0.areBasicPredicates(expressionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0[{<e;<0m7");
      locationPath0.createContextForStep((EvalContext) null, 16, processingInstructionTest0);
      locationPath0.createContextForStep((EvalContext) null, 3912, processingInstructionTest0);
      processingInstructionTest0.toString();
      locationPath0.createContextForStep((EvalContext) null, 11, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("o8qM`'>4]", "o8qM`'>4]");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      // Undeclared exception!
      try { 
        locationPath0.createContextForStep((EvalContext) null, 281, nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.toString();
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      namespaceContext0.getContextNodePointer();
      EvalContext evalContext0 = locationPath0.createContextForStep(namespaceContext0, 13, (NodeTest) null);
      assertEquals(0, evalContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      Step step0 = new Step(1, (NodeTest) null, (Expression[]) null);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      boolean boolean1 = locationPath0.isSimpleStep(step0);
      boolean boolean2 = locationPath0.areBasicPredicates((Expression[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      processingInstructionTest0.toString();
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.createContextForStep((EvalContext) null, 10, processingInstructionTest0);
      String string0 = locationPath0.toString();
      assertEquals("null/null/null/null/null/null", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = locationPath0.createContextForStep((EvalContext) null, 3, (NodeTest) null);
      // Undeclared exception!
      try { 
        locationPath0.compute(evalContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      EvalContext evalContext0 = locationPath0.createContextForStep(childContext0, 8, (NodeTest) null);
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, evalContext0.getDocumentOrder());
      assertNotNull(evalContext0);
      
      Step step0 = new Step(2, (NodeTest) null, (Expression[]) null);
      boolean boolean0 = locationPath0.isSimpleStep(step0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      boolean boolean1 = locationPath0.areBasicPredicates((Expression[]) null);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = locationPath0.computeContextDependent();
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) locationPath0;
      Step step0 = new Step(8, (NodeTest) null, expressionArray0);
      step0.isContextDependent();
      step0.isContextDependent();
      step0.isContextDependent();
      boolean boolean0 = locationPath0.isSimpleStep(step0);
      Step step1 = new Step(8, (NodeTest) null, expressionArray0);
      boolean boolean1 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      step0.toString();
      step0.isContextDependent();
      boolean boolean2 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      Step[] stepArray1 = new Step[28];
      stepArray1[0] = step0;
      stepArray1[1] = step0;
      LocationPath locationPath1 = new LocationPath(true, stepArray1);
      boolean boolean3 = locationPath1.isContextDependent();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      Expression[] expressionArray0 = new Expression[4];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) locationPath0;
      locationPath0.areBasicPredicates(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, (Step[]) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(8, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1577));
      Step[] stepArray1 = new Step[0];
      step0.isContextDependent();
      QName qName0 = new QName("round", (String) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      nodeTypeTest0.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 4, nodeTypeTest0);
      assertNotNull(evalContext0);
      
      boolean boolean0 = expressionPath0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      QName qName0 = new QName("e9e?%VfDi");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2, nodeNameTest0, (Expression[]) null);
      locationPath0.isSimpleStep(step0);
      EvalContext evalContext0 = null;
      locationPath0.isContextDependent();
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      boolean boolean0 = false;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      locationPath0.createContextForStep(childContext0, 12, (NodeTest) null);
      locationPath0.computeContextDependent();
      childContext0.toString();
      Step[] stepArray1 = new Step[18];
      LocationPath locationPath1 = new LocationPath(boolean0, stepArray1);
      locationPath1.isAbsolute();
      // Undeclared exception!
      try { 
        locationPath1.getSingleNodePointerForSteps(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeNameTest0);
      EvalContext evalContext0 = locationPath0.buildContextChain(namespaceContext0, 2006, false);
      locationPath0.createContextForStep((EvalContext) null, 7, nodeNameTest0);
      // Undeclared exception!
      try { 
        locationPath0.searchForPath(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("D4&_@V<[ll5W KXh <|");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(5, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(5, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(5, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionPath0.isSimpleExpressionPath();
      String string0 = expressionPath0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("RZ!1<^ -2Y(u(#BTT");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "RZ!1<^ -2Y(u(#BTT");
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      step0.toString();
      Step step1 = new Step(2, nodeNameTest0, expressionArray0);
      step0.isContextDependent();
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      boolean boolean1 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      step0.toString();
      step1.toString();
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[8];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      QName qName0 = new QName("*");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "*");
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      locationPath0.isSimpleStep(step0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step1 = new Step(1427, nodeNameTest0, expressionArray0);
      locationPath0.isSimpleStep(step0);
      QName qName1 = new QName("", "");
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName1);
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[6];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      locationPath0.isContextDependent();
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      locationPath0.isSimpleStep(step0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      assertEquals(0, childContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[6];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      locationPath0.isContextDependent();
      nodeTypeTest0.toString();
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      step0.isContextDependent();
      boolean boolean0 = locationPath0.isSimpleStep(step0);
      assertTrue(boolean0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      boolean boolean1 = locationPath0.areBasicPredicates(expressionArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      EvalContext evalContext0 = rootContext0.getConstantContext(locationPath0);
      locationPath0.searchForPath(evalContext0);
      // Undeclared exception!
      try { 
        rootContext0.nextNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }
}
