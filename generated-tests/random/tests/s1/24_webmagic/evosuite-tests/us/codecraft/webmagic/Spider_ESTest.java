/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 09:27:26 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.utils.FilePersistentBase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "RY|tIMo;K");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("RY|tIMo;K");
      Spider spider3 = spider2.startUrls(list0);
      List<Request> list1 = spider3.getAll((Collection<String>) list0);
      Spider spider4 = spider3.startRequest(list1);
      Spider spider5 = spider4.setPipelines((List<Pipeline>) null);
      spider5.getUUID();
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.thread((ExecutorService) null, 91);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.addPipeline(filePipeline0);
      Page page0 = new Page();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        spider3.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Y,#{SE,;'Q");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("KTe?0|Oy");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("anK", "~#bn:_h{!^h.SkB");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      List<Locale.LanguageRange> list0 = spider2.getAll((Collection<String>) linkedBlockingQueue0);
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingQueue0);
      Spider spider4 = spider3.startUrls(list1);
      Request[] requestArray0 = new Request[0];
      Spider spider5 = spider4.addRequest(requestArray0);
      spider5.getThreadAlive();
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider1.setSpiderListeners((List<SpiderListener>) null);
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "p+j&VqT0XB&=G";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("p+j&VqT0XB&=G");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.setUUID("fA");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "hu35u$jf(ka%\"XO");
      Spider spider5 = spider4.downloader(phantomJSDownloader0);
      spider5.sleep(1000);
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("t^x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(890);
      Spider spider2 = spider1.setExitWhenComplete(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "t^x");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      Spider spider4 = spider3.pipeline((Pipeline) null);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider5 = spider2.setPipelines(linkedList0);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      List<Request> list0 = spider5.getAll((Collection<String>) priorityBlockingQueue0);
      Spider spider6 = spider4.startRequest(list0);
      spider6.thread(86);
      assertEquals(1, linkedList0.size());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      Spider spider3 = spider2.setScheduler((Scheduler) null);
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("CQjR8");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      spider1.uuid = "CQjR8";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider1.setUUID("");
      spider0.getPageCount();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("CQjR8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.CQjR8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ew");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",O~7/", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-1));
      spider1.downloader = (Downloader) phantomJSDownloader1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>(synchronousQueue0);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1, 350L, timeUnit0, linkedBlockingQueue0);
      threadPoolExecutor0.getCorePoolSize();
      Spider spider2 = spider1.setExecutorService(threadPoolExecutor0);
      Spider spider3 = spider2.setUUID("ew");
      boolean boolean0 = spider3.isSpawnUrl();
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "*\\+h";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*+h");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      String[] stringArray0 = new String[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider2 = spider1.addUrl(stringArray0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider3 = spider2.addPipeline(consolePipeline0);
      Spider spider4 = spider3.pipeline(consolePipeline0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        spider4.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", userAgent='");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setUUID("w");
      Spider spider3 = spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", userAgent='", ", userAgent='");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      Spider spider5 = spider4.startRequest((List<Request>) null);
      spider5.stop();
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(975);
      Spider spider4 = spider3.addPipeline((Pipeline) null);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Site site0 = simplePageProcessor1.getSite();
      spider4.site = site0;
      spider3.exitWhenComplete = false;
      Spider spider5 = spider4.pipeline((Pipeline) null);
      spider5.getCollectorPipeline();
      spider4.getScheduler();
      spider2.getSpiderListeners();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1SN#sXuivmNBr@'_T#");
      spider4.setUUID("& ADq5eQ,");
      spider3.setDownloader(phantomJSDownloader0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.thread((ExecutorService) null, 810);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setSpawnUrl(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<wS1AEn!(,%S6Gqm;");
      spider2.setEmptySleepTime(8);
      Spider spider4 = spider3.setUUID("");
      Site site0 = spider1.site;
      Site site1 = site0.setCharset("");
      Site site2 = site1.addCookie("<wS1AEn!(,%S6Gqm;", "kzYPt", (String) null);
      Site site3 = site2.addHeader("Dbs5E\"s-cF'\"pWmBm", (String) null);
      Site site4 = site3.setUseGzip(false);
      spider4.site = site4;
      spider4.getSpiderListeners();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStatus();
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "^uVEV<&Oi5^I~5^M";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("^uVEV<&Oi5^I~5^M");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider1.get("item_");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dy");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dy");
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("dy");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("dy");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Spider spider2 = spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider2.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      String string0 = spider1.getUUID();
      assertNull(string0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      boolean boolean0 = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      Page page0 = new Page();
      spider2.extractAndAddRequests(page0, false);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider.Status.fromValue(1452);
      String string0 = "ef]Rw%";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ef]Rw%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("ef]Rw%");
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("ef]Rw%", (String) null);
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      Spider spider4 = spider3.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider4.setPipelines(linkedList0);
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector((String) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string1 = null;
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("");
      Request request1 = request0.setMethod("");
      Request request2 = request1.putExtra("Running", "");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request3 = request2.setExtras(hashMap0);
      requestArray0[0] = request3;
      Request request4 = request0.setMethod("//title");
      requestArray0[1] = request4;
      Request request5 = request0.setBinaryContent(true);
      requestArray0[2] = request5;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<(za");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      Spider spider3 = spider2.pipeline((Pipeline) null);
      Spider spider4 = spider3.thread(1000);
      Spider spider5 = spider4.setSpawnUrl(true);
      spider5.getSite();
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "1qLl~&hr3t";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("1qLl~&hr3t");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = ";^oDm";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(";^oDm");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string1 = "";
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Spider spider2 = spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider2.thread((-639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 7;
      Spider.Status.fromValue(7);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("J\"g");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("J\"g");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(7, threadPoolExecutor_DiscardOldestPolicy0);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider2.startRequest(list0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("J\"g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider2.getSpiderListeners();
      spider2.setSpiderListeners((List<SpiderListener>) null);
      spider2.uuid = "<-TZnKxyS*]u4";
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(" error");
      Spider spider3 = spider2.pipeline(jsonFilePipeline0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      FilePersistentBase.PATH_SEPERATOR = "fA";
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 1149);
      Spider spider5 = spider4.setExitWhenComplete(false);
      spider5.runAsync();
      String[] stringArray0 = new String[2];
      forkJoinPool0.hasQueuedSubmissions();
      stringArray0[0] = " error";
      stringArray0[1] = "fA";
      // Undeclared exception!
      try { 
        spider5.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = "QQU'iSs=X]hB";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("QQU'iSs=X]hB");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.addPipeline((Pipeline) null);
      String string1 = "us.codecraft.webmagic.selector.BaseElementSelector";
      spider2.setUUID("us.codecraft.webmagic.selector.BaseElementSelector");
      Page page0 = Page.fail();
      page0.setRawText("");
      String string2 = "";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("illegal encoding ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      Spider spider2 = spider1.startRequest((List<Request>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("9F6_Pj9^.#.wLT{", "illegal encoding ");
      phantomJSDownloader0.setRetryNum(659);
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      boolean boolean0 = spider3.isExitWhenComplete();
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "Spider {} started!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setUUID("<}R");
      Request[] requestArray0 = new Request[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider3 = spider2.addRequest(requestArray0);
      FilePipeline filePipeline0 = new FilePipeline("<}R");
      Spider spider4 = spider3.pipeline(filePipeline0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<}R");
      String string1 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<}R", "");
      Request request0 = new Request();
      Request request1 = request0.setCharset("Spider {} started!");
      String string2 = "";
      Request request2 = request1.addCookie("", "fA");
      // Undeclared exception!
      try { 
        spider4.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("NC&Hou6641W%hSa");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2843);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider3 = spider2.setUUID("}c(;`+^~httA%l");
      Spider spider4 = spider3.thread((ExecutorService) scheduledThreadPoolExecutor0, 2843);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      spider0.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("NC&Hou6641W%hSa", (String) null);
      Spider spider5 = spider4.downloader(phantomJSDownloader0);
      spider5.run();
      spider3.getStartTime();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider5.scheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      // Undeclared exception!
      try { 
        fileCacheQueueScheduler0.getTotalRequestsCount(spider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5hC4-WC}E;");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      spider0.start();
      stringArray0[0] = "5hC4-WC}E;";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[1] = "5hC4-WC}E;";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("PgBo,");
      Spider spider0 = new Spider(simplePageProcessor0);
      Json json0 = new Json("us.codecraft.webmagic.selector.Json");
      Class<Pipeline> class0 = Pipeline.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "_r\\f,))W~ey";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_r\f,))W~ey");
      Spider spider0 = new Spider(simplePageProcessor0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("_r\f,))W~ey");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("Pt9lU>$Fj!|");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
