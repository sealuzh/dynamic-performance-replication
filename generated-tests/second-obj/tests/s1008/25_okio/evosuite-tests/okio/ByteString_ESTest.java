/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:23:41 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      realBufferedSink0.close();
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      String string1 = byteString0.base64Url();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = byteString0.toByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.close();
      int int0 = (-13);
      // Undeclared exception!
      try { 
        ByteString.read(mockFileInputStream0, (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -13
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(1L);
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("\r", 16);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.close();
      ByteString.read(mockFileInputStream0, 0);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(":D ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: :D 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Mm$X@^mt<o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: M
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      Charset.defaultCharset();
      String string0 = byteString0.toString();
      assertEquals("[hex=dddd]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.getByte((byte) (-14));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-90);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteString0.indexOf(byteString0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+J/\"d|>2j&E=~I-f@-4");
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.startsWith(byteString0);
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((byte) (-90));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -90
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)14;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64();
      // Undeclared exception!
      try { 
        byteString0.rangeEquals(105, (ByteString) null, 100, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.md5();
      byteString0.toAsciiLowercase();
      byteString0.asByteBuffer();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)97;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.base64Url();
      byteString0.lastIndexOf(byteArray0, (int) (byte) (-42));
      byteString0.toString();
      byteString0.rangeEquals(202, byteArray0, (int) (byte)59, (-1));
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1261), (-520));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-1261 byteCount=-520
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("LA");
      byteString0.toAsciiUppercase();
      ByteString byteString1 = byteString0.sha256();
      byte[] byteArray0 = new byte[1];
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = ObjectStreamConstants.baseWireHandle;
      byteString1.startsWith(byteArray0);
      String string0 = "Unexpected hex digit: ";
      // Undeclared exception!
      try { 
        Charset.forName("Unexpected hex digit: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Unexpected hex digit: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[5] = (byte)70;
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(65);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hex();
      byteString0.base64Url();
      byteString0.lastIndexOf(byteArray0, (int) (byte) (-42));
      byteString0.toString();
      byteString0.rangeEquals((-105), byteArray0, 583, 202);
      int int0 = (-520);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-220), (-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-220 byteCount=-16
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (-2342));
      assertEquals(0, int0);
      
      int int1 = byteString0.lastIndexOf(byteArray0, (-2342));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = ": ";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("size < 2: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ByteString.decodeHex("endIndex > string.length: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.sha1();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("B2z9'CnqrG97X'krA");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      ByteString byteString0 = ByteString.of(byteBuffer1);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString byteString2 = byteString0.substring(10);
      assertEquals(8, byteString2.size());
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((-270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)70;
      byte byte0 = (byte) (-42);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byteString1.write(buffer0);
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      Charset charset0 = Charset.defaultCharset();
      int int0 = 79;
      byteString2.rangeEquals(68, byteString1, 79, (int) (byte)0);
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("<L$u;A*G=");
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.indexOf(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("(5b>S");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-90);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      String string0 = byteString0.utf8();
      assertEquals("(5b>S", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 2;
      ByteString.codePointIndexToCharIndex("beginIndex < 0", 2);
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      ByteString byteString1 = hashingSink0.hash();
      String string0 = byteString1.utf8;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      int int0 = byteString0.lastIndexOf(byteArray0);
      int int1 = byteString1.indexOf(byteString0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)28;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-96);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte) (-96);
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.substring(198, 198);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-2324), (-2324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("i%z?|b/?3bACo3j(", 122);
      assertEquals(16, int0);
      
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      int int1 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      byteString1.base64Url();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      byteString0.rangeEquals((int) (byte)97, byteArray0, (-2657), (-546));
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 2592, 3346);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=2592 byteCount=3346
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)57;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      byteString0.base64();
      byteString0.toAsciiLowercase();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.toAsciiLowercase();
      byteString0.rangeEquals((int) (byte) (-20), byteArray0, 514, (-3026));
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (byte)37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[5] = (byte)70;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.indexOf(byteArray0);
      byteString0.size();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-3892), (int) (byte)70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=-3892 byteCount=70
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("LA");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString0.sha256();
      byte[] byteArray0 = new byte[1];
      ByteString byteString3 = byteString0.substring(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[1];
      int int0 = byteString2.lastIndexOf(byteArray1, 0);
      int int1 = byteString0.indexOf(byteArray0);
      assertTrue(int1 == int0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LA");
      byteString1.utf8();
      assertSame(byteString1, byteString3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      byteString2.endsWith(byteArray0);
      byteString2.asByteBuffer();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-90);
      byteArray1[5] = (byte) (-90);
      byteArray1[6] = (byte) (-90);
      byteArray1[7] = (byte) (-90);
      byteArray1[8] = (byte) (-81);
      byteString2.lastIndexOf(byteArray1, (int) (byte) (-90));
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        byteString1.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("B ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, 4187);
      assertEquals((-1), int0);
      
      ByteString byteString1 = byteString0.sha256();
      int int1 = byteString1.compareTo(byteString0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hashCode();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.timeout();
      ByteString byteString1 = hashingSink0.hash();
      byteString1.lastIndexOf(byteString0, 2721);
      byteString0.startsWith(byteString1);
      ByteString byteString2 = ByteString.encodeUtf8("4}w>lhLg2d]U$Du?\"");
      ByteString byteString3 = byteString1.md5();
      ByteString.codePointIndexToCharIndex("4}w>lhLg2d]U$Du?\"", 2721);
      byteString0.hex();
      byteString0.equals(byteArray0);
      byteString2.compareTo(byteString1);
      ByteBuffer byteBuffer0 = byteString3.asByteBuffer();
      assertFalse(byteBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toAsciiUppercase();
      byte[] byteArray0 = new byte[3];
      HashingSource.md5(buffer0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.base64Url();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-520), (-1261));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=-520 byteCount=-1261
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-44);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(pipe_PipeSource0, byteString0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      HashingSource hashingSource1 = HashingSource.sha1(gzipSource0);
      ByteString byteString1 = hashingSource1.hash();
      byteString1.equals(byteString1);
      // Undeclared exception!
      try { 
        byteString0.getByte(2097);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hashCode();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString1.equals(byteString0);
      String string0 = "";
      ByteString.encodeUtf8("i=t)04jK_z_ut(");
      try { 
        realBufferedSource1.readByteString(3304L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeBase64("");
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeBase64("");
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString.encodeUtf8("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 105);
      try { 
        byteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readAll(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.base64Url();
      byte[] byteArray0 = new byte[6];
      byteString0.toAsciiLowercase();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        ByteString.read(mockFileInputStream0, 48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)83);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=dddddddd]", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString.of(byteArray0);
      Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeUtf8("UwAAAA==");
      byteString2.md5();
      ByteString.codePointIndexToCharIndex("", 4624);
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.equals(byteString0);
      assertTrue(byteString3.equals((Object)byteString1));
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString2.size();
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("LA");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString0.sha256();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString3 = realBufferedSource0.readByteString();
      boolean boolean0 = byteString2.equals(byteString3);
      assertFalse(boolean0);
      
      ByteString byteString4 = byteString1.substring(0);
      byteString1.base64Url();
      byteString4.sha512();
      String string0 = byteString2.toString();
      assertEquals("[hex=bdddd3eedbdedddbddddeddddddbeedd3b3dbddd5eddddddeedbddddeddbdddd]", string0);
      
      int int0 = byteString1.compareTo(byteString4);
      assertEquals(0, int0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byteString2.hashCode();
      assertSame(byteString0, byteString4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      byteString1.rangeEquals(31, byteArray0, 64, 48);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      byteString1.EMPTY.base64Url();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      GzipSink gzipSink0 = new GzipSink(hashingSink0);
      Charset.defaultCharset();
      ByteString.encodeUtf8(";3$");
      ByteString.codePointIndexToCharIndex(",$0gBQw3'VigUB  ", 48);
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.equals(byteString2);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-748), (-748));
      try { 
        ByteString.read(byteArrayInputStream0, 20);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString1 = new ByteString(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int1 = ObjectStreamConstants.baseWireHandle;
      byteString0.toString();
      byteString1.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.encodeUtf8("");
      byteString0.EMPTY.hashCode();
      ByteString.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)84;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("Ft:Z*,QH");
      byteString0.indexOf(byteArray0, (int) (byte) (-12));
      byteString0.size();
      byteString1.startsWith(byteArray0);
      ByteString.codePointIndexToCharIndex("`", (byte) (-12));
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)90;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiUppercase();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 62);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)90);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9>");
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      Inflater inflater0 = new Inflater(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("9>");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.write(mockPrintStream0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("9>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: >
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "LA";
      ByteString byteString0 = ByteString.decodeBase64("LA");
      byteString0.toAsciiUppercase();
      ByteString byteString1 = byteString0.sha256();
      byte[] byteArray0 = new byte[1];
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        byteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = byteString1.substring(0);
      byteString0.utf8();
      byteString0.substring(0, 0);
      byteString1.indexOf(byteString0);
      byteString0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6Qq");
      byteString2.toString();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      Charset.defaultCharset();
      Charset.defaultCharset();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString2 = hashingSink0.hash();
      byteString2.toString();
      buffer0.writeUtf8("");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      ByteString.codePointIndexToCharIndex("X: g", (-2177));
      byteString2.toAsciiUppercase();
  }
}
