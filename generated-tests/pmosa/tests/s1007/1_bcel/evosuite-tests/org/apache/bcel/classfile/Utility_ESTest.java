/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:06:51 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_MAX;
      Utility.getSignature(".");
      try { 
        Utility.methodSignatureArgumentTypes("java.ext.dirs", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.ext.dirs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.compactClassName("The FileFilter must not be null", "The FileFilter must not be null", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "The FileFilter must not be null";
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("The FileFilter must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The FileFilter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.getSignature("short");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "short";
      objectArray0[1] = (Object) "S";
      objectArray0[2] = (Object) "S";
      objectArray0[3] = (Object) "S";
      Utility.printArray(objectArray0, false, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        byteArrayOutputStream0.toString("Byte code error: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.getSignature("");
      String string0 = Utility.convertString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.accessToString(97);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("vVs2[Zw2m", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vVs2[Zw2m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(5);
      assertEquals("public protected", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      try { 
        Utility.methodSignatureArgumentTypes("Byte code error: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-88);
      String string0 = Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[4] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      String string1 = Utility.printArray(objectArray0, true, false);
      String string2 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "H4:6\"@z-Dou'*!Gl_2l", "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.printArray(objectArray0);
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$ef");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$ef'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      String string1 = Utility.compactClassName("ior");
      assertEquals("ior", string1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.replace("k9?cDYZ![i}", "impdep2", "k9?cDYZ![i}");
      assertEquals("k9?cDYZ![i}", string0);
      
      String string1 = Utility.compactClassName("monitorexit");
      assertEquals("monitorexit", string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isSet((-465), 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("z>oRjK_'N4E", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z>oRjK_'N4E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Invalid signature: `";
      stringArray0[1] = "Invalid signature: `";
      stringArray0[2] = "Invalid signature: `";
      stringArray0[3] = "Invalid signature: `";
      Utility.methodTypeToSignature("Invalid signature: `", stringArray0);
      int int0 = 72;
      Utility.accessToString(72);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("static volatile", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `static volatile'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.signatureToString("VMfdo_\"-SPgVb\"!T;gh");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "VMfdo_\"-SPgVb\"!T;gh";
      stringArray0[2] = "void";
      stringArray0[3] = "VMfdo_\"-SPgVb\"!T;gh";
      stringArray0[4] = "VMfdo_\"-SPgVb\"!T;gh";
      stringArray0[5] = "VMfdo_\"-SPgVb\"!T;gh";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8ym@Id%;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8ym@Id%;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "aZ/4m+c&}sQb]89I:iX";
      Utility.convertString("aZ/4m+c&}sQb]89I:iX");
      Utility.getSignature("aZ/4m+c&}sQb]89I:iX");
      boolean boolean0 = false;
      Utility.decode("aZ/4m+c&}sQb]89I:iX", false);
      String string1 = "dcmpg";
      try { 
        Utility.typeOfSignature("dcmpg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dcmpg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.convertString("~");
      assertEquals("~", string0);
      
      String string1 = Utility.compactClassName("(");
      assertEquals("(", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.clearBit((-2211), (-2211));
      Utility.isSet((-163), (-536873123));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("$c{A:6,wz>KOle", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(2653);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A", string0);
      
      short short0 = Utility.searchOpcode("astore_0");
      assertEquals((short)75, short0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.classOrInterface(246);
      Utility.classOrInterface(246);
      try { 
        Utility.decode("Invalid method signature: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*E%pY", "*E%pY", "*E%pY", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *E%pY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      try { 
        Utility.typeOfSignature("5*p?j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5*p?j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      Utility.compactClassName("g", true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.clearBit(0, 0);
      Utility.accessToString(0);
      Utility.accessToString(0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(3622);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.getConstant(0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.accessToString((-460), false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "protected final synchronized interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "protected final synchronized interface abstract strictfp synthetic annotation enum";
      Utility.methodSignatureReturnType("JavaClass.debug", false);
      Utility.format((-460), 104, false, 'Q');
      byte[] byteArray0 = Utility.decode("ldc2_w", false);
      Utility.clearBit(404, 0);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.replace("*#QA:zG;%u7@YM", (String) null, "T%g4`_~Zn$t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.searchOpcode("Unknown constant type ");
      Utility.classOrInterface(167);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\t\t%";
      stringArray0[1] = "Unknown constant type ";
      stringArray0[2] = "\t\t%";
      Utility.methodTypeToSignature("\t\t%", stringArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\"DO[7c]->Li|CuqO%", "LZCDikfx=E5!vos*");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // LZCDikfx=E5!vos*
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('p');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[1];
      try { 
        Utility.methodSignatureReturnType("O=G#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O=G#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature(">ZoadC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >ZoadC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "!Qm02(M'u|%VGh|";
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string1 = "5*p?j";
      Utility.typeOfSignature("T{Auay");
      boolean boolean0 = true;
      Utility.format((byte)14, 46, true, 'T');
      String string2 = null;
      String string3 = null;
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureToString("T{Auay", "", "mIS}'=[V# 0<n4", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: T{Auay
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("_lId8N8", false);
      Utility.isSet(0, (-2265));
      Utility.searchOpcode("FULL");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "R!uy{6wb";
      stringArray0[1] = "_lId8N8";
      stringArray0[2] = "_lId8N8";
      stringArray0[3] = "ew0z.61g_I^y[eJ.";
      stringArray0[4] = "k";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("ew0z.61g_I^y[eJ.", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[eJ.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.accessToString((-460), true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "protected final abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "protected final abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "protected final abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "protected final abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "protected final abstract strictfp synthetic annotation enum";
      objectArray0[5] = (Object) "protected final abstract strictfp synthetic annotation enum";
      objectArray0[6] = objectArray0[2];
      objectArray0[7] = (Object) "protected final abstract strictfp synthetic annotation enum";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"protected final abstract strictfp synthetic annotation enum\", \"protected final abstract strictfp synthetic annotation enum\", \"protected final abstract strictfp synthetic annotation enum\", \"protected final abstract strictfp synthetic annotation enum\", \"protected final abstract strictfp synthetic annotation enum\", \"protected final abstract strictfp synthetic annotation enum\", \"protected final abstract strictfp synthetic annotation enum\", \"protected final abstract strictfp synthetic annotation enum\"", string1);
      assertNotNull(string1);
      
      String string2 = Utility.convertString("protected final abstract strictfp synthetic annotation enum");
      assertTrue(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[0];
      String string3 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
      
      String string4 = Utility.toHexString(byteArray0);
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">\t", ">\t", "^4kv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.decode("$?,bT-]HHCd7>1@8A", false);
      try { 
        Utility.typeOfSignature("$?,bT-]HHCd7>1@8A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $?,bT-]HHCd7>1@8A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CX?]IG";
      stringArray0[1] = "j09jp7pGMrr[TZaN]";
      stringArray0[2] = "CX?]IG";
      stringArray0[3] = "CX?]IG";
      stringArray0[4] = "CX?]IG";
      stringArray0[5] = "CX?]IG";
      Utility.methodTypeToSignature("CX?]IG", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("CX?]IG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CX?]IG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      Utility.isJavaIdentifierPart('D');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-19);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, 32, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CXX?]IG";
      Utility.methodSignatureReturnType("CXX?]IG", true);
      try { 
        Utility.typeOfMethodSignature("CXX?]IG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CXX?]IG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(5);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("irem", string1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "@wwOlk8~Qy]p";
      try { 
        Utility.typeOfSignature("@wwOlk8~Qy]p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @wwOlk8~Qy]p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('2');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)82;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("d3 0d 52", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "d3 0d 52";
      stringArray0[1] = "d3 0d 52";
      stringArray0[2] = "\n     Method Arguments:";
      stringArray0[3] = "d3 0d 52";
      stringArray0[4] = "\n     Method Arguments:";
      String string1 = Utility.methodTypeToSignature("\n     Method Arguments:", stringArray0);
      assertEquals("(Ld3;Ld3;LMethod;Ld3;LMethod;)LMethod;", string1);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = ",w=/";
      try { 
        Utility.typeOfSignature(",w=/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,w=/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#MD%zJ?-R8{.bJU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #MD%zJ?-R8{.bJU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.isJavaIdentifierPart('=');
      try { 
        Utility.methodSignatureReturnType("XR4es-L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XR4es-L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1487, (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-69);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-545), 2860);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-69));
      constantArray0[1] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 284, (-4805), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char char0 = 'A';
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = ".8h{}4*#]i]#Sr%rC-0";
      try { 
        Utility.typeOfSignature(".8h{}4*#]i]#Sr%rC-0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .8h{}4*#]i]#Sr%rC-0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.isJavaIdentifierPart('=');
      Utility.signatureToString("Invalid IOCase name: ", true);
      try { 
        Utility.methodSignatureArgumentTypes("Invalid IOCase name: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid IOCase name: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("S_&3t_*Zu", false);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("PCekjip-[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PCekjip-['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "')h~ ";
      try { 
        Utility.typeOfSignature("')h~ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ')h~ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.isJavaIdentifierPart('2');
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-45);
      byteArray0[1] = (byte)13;
      byte byte0 = (byte)82;
      byteArray0[2] = (byte)82;
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "00 0d 52";
      stringArray0[1] = "00 0d 52";
      stringArray0[2] = "\n     Method Arguments:";
      stringArray0[3] = "00 0d 52";
      stringArray0[4] = "\n     Method Arguments:";
      Utility.methodTypeToSignature("\n     Method Arguments:", stringArray0);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("H|,!\"(-s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H|,!\"(-s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      Utility.isJavaIdentifierPart('D');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)37;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-19);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, 32, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.accessToString((-460), false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "protected final synchronized interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "protected final synchronized interface abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "protected final synchronized interface abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "protected final synchronized interface abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "protected final synchronized interface abstract strictfp synthetic annotation enum";
      objectArray0[5] = (Object) "protected final synchronized interface abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "protected final synchronized interface abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, false, false);
      Utility.convertString("\"");
      String string0 = "O'F{U$#ffB%C`*'Y";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep1");
      byte[] byteArray0 = Utility.decode("O'F{U$#ffB%C`*'Y", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 711, (-460), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.decode("LUDG7tYIKieh;V", false);
      Utility.typeOfSignature("LUDG7tYIKieh;V");
      // Undeclared exception!
      try { 
        Utility.signatureToString("wNx>XT|+(6K5:kJo(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wNx>XT|+(6K5:kJo('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.decode("LUDG7tYIKieh;V", false);
      Utility.typeOfSignature("LUDG7tYIKieh;V");
      Pattern.quote("wNx>XT|+(6K5:kJo(");
      try { 
        Utility.methodSignatureReturnType("The filter must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The filter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = "5*p?j";
      String string1 = "?>...";
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.isJavaIdentifierPart('2');
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-45);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)82;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("00 0d 52");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 0d 52
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(14, 14);
      ConstantLong constantLong0 = new ConstantLong(2860);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Method");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)125, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.decode("$?,bT-]HHCd7>1@8A", false);
      Utility.typeOfSignature("[ePlp 7S i,XKY#I,");
      String string0 = Utility.signatureToString("Sensitive", false);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.decode("\"", false);
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("UDG7tYIKieh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UDG7tYIKieh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodSignatureReturnType("LCLASSPATH;V", false);
      assertEquals("CLASSPATH", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('>');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.decode("LUDG7tYIKieh;V", false);
      String string0 = Utility.signatureToString("LUDG7tYIKieh;V", true);
      assertEquals("UDG7tYIKieh", string0);
      
      String string1 = Utility.replace("ST v``_PVS03f}Q K", "ST v``_PVS03f}Q K", ", npairs = ");
      assertEquals(", npairs = ", string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LLaMRZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LLaMRZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DJlxqG[:0aZ ");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "6L8U%-gE";
      try { 
        Utility.typeOfSignature("6L8U%-gE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6L8U%-gE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("V", false);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Utility.compactClassName("The wildcard array must not be null");
      assertEquals("The wildcard array must not be null", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "The wildcard array must not be null";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[1] = (Object) "The wildcard array must not be null";
      objectArray0[2] = (Object) "The wildcard array must not be null";
      objectArray0[0] = (Object) "The wildcard array must not be null";
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 367, false);
      assertEquals("0:    impdep2\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), (int) (byte) (-61));
      assertEquals("0:    monitorexit\n", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      Utility.methodSignatureReturnType("C7;0HU}#'V}\"t~T", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-32);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      dataInputStream0.reset();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-890), (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 13628. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.compactClassName("impdep1", true);
      assertEquals("impdep1", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "(:&";
      String string1 = "(Unknown attribute ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(:&", "(Unknown attribute ", "$oXZ/^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(7uzoJ", "fy{K[rFCM|k,W2.", "(7uzoJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7uzoJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Utility.typeOfSignature("40_| PsKVfC=(T7C]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 40_| PsKVfC=(T7C]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("F", false);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":H\"|V9MJ`KwLU.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :H\"|V9MJ`KwLU.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Vvfdo_\"-S^gVb\"!T;gh");
      assertEquals((byte)12, byte0);
      
      byte byte1 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte1);
      
      byte[] byteArray0 = Utility.decode("char", false);
      assertArrayEquals(new byte[] {(byte)99, (byte)104, (byte)97, (byte)114}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Gp?$_50ze");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gp?$_50ze
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "7Ym-i";
      try { 
        Utility.typeOfSignature("7Ym-i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Ym-i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X<ROVPCO(Z t^F3?X6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X<ROVPCO(Z t^F3?X6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=u`6/q$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =u`6/q$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OoK*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OoK*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.typeOfSignature("Vvfdo_\"-S^gVb\"!T;gh");
      try { 
        Utility.methodSignatureReturnType("[M*obTZ7}2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M*obTZ7}2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(7uzoJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7uzoJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P.m{dC(*hN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P.m{dC(*hN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "N84/?f4f~WK2QU6!'K";
      try { 
        Utility.typeOfSignature("N84/?f4f~WK2QU6!'K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N84/?f4f~WK2QU6!'K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("java.lang.double");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)90;
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('i');
      Utility.methodSignatureReturnType("CONSTANT_MethodType", false);
      Utility.isSet((byte) (-76), (byte)90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)108;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("Cdd");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.fillup("K;1", (byte)56, true, 'j');
      assertEquals("K;1jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", string1);
      
      String string2 = Utility.convertString("9*)");
      assertEquals("9*)", string2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Yotd,=y1w@\u0003=3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yotd,=y1w@\u0003=3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YpZ5MFeMvo Zp}QZJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YpZ5MFeMvo Zp}QZJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Nc", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid frame type found while parsing stack map table: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      try { 
        Utility.typeOfSignature("<illegal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Utility.typeOfSignature("EBhY$;[j]}=lpm#OVD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EBhY$;[j]}=lpm#OVD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.typeOfSignature("Dxeq`^v9)x$5FO-");
      byte byte0 = Utility.typeOfSignature("Dxeq`^v9)x$5FO-");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/dX#1R.yO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /dX#1R.yO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(5);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      long long0 = new Integer((byte) (-67));
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("OoK*", "OoK*", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 177, (-1003), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)60;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3537), 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("H~LL%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H~LL%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Kgf{jv}Ibb7Q0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kgf{jv}Ibb7Q0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "MethodParameters";
      try { 
        Utility.typeOfSignature("MethodParameters");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MethodParameters
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = Utility.convertString("z7H}lsH{I0*E");
      assertEquals("z7H}lsH{I0*E", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("LCLASSPATH;V", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)75;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 26, 1404, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(5);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte) (-115));
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), 179, true);
      assertEquals("0:    f2d\n1:    f2d\n2:    aaload\n3:    aaload\n4:    lload\t\t%135\n", string1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.isJavaIdentifierPart('P');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)54;
      byte byte0 = (byte)8;
      byteArray0[4] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("sastore", string0);
      
      boolean boolean0 = Utility.isSet((-1556), 76);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = ",,";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)48;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2346, (-1003), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!jx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BwM?*l&OCO.Nk");
      assertEquals((byte)8, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$I$I", string0);
      
      String string1 = Utility.accessToString((int) (byte)8);
      assertEquals("static", string1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.methodTypeToSignature("S_&3t_*Zu", (String[]) null);
      String string0 = Utility.methodTypeToSignature("ifle", (String[]) null);
      assertEquals("()Lifle;", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("areturn", string0);
      
      int int0 = Utility.setBit((byte) (-83), (-852));
      assertEquals((-83), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q 0cg[#s\"@M,uU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q 0cg[#s\"@M,uU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), (int) (byte) (-30), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-617), (byte)92);
      ConstantLong constantLong0 = new ConstantLong((-617));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      String string0 = Utility.methodSignatureReturnType("ZCU#~uR");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-83);
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.isJavaIdentifierPart('P');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)55;
      String string0 = "G_@\"pq";
      try { 
        Utility.methodSignatureReturnType("G_@\"pq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G_@\"pq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      String string0 = Constants.CONSTRUCTOR_NAME;
      // Undeclared exception!
      try { 
        Utility.signatureToString("R{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q 0cg[#s\"@M,uU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q 0cg[#s\"@M,uU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)41;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)41;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("Ro$vPcX!HyEynWHd", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.isJavaIdentifierPart('j');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer(5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, (int) 'j', true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$?,bT-]HHCd7>1@8A", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 177, (int) (byte) (-75), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 298, 1035, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.signatureToString("CLASSPATH component ");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)118;
      byteArray0[0] = (byte)118;
      byte byte1 = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-61);
      byte byte2 = (byte)11;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte) (-56);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-56), 560, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fneg
         // 1:    fload_2
         // 2:    iushr
         // 3:    jsr_w\t\t#-225066226
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte)34);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x2", string0);
      
      int int0 = Utility.clearBit((-2443), 65);
      assertEquals((-2443), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.classOrInterface(59);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte)22);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 13, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-58);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(177, (byte) (-71));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), 1544, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    jsr_w\t\t#96053416
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-56), (int) (byte)11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    monitorexit
         // 2:    iconst_0
         // 3:    fconst_0
         // 4:    fconst_0
         // 5:    monitorexit
         // 6:    iconst_4
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (-3432), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(154, (byte) (-107));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), 194, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    fconst_0
         // 2:    fcmpl
         // 3:    monitorexit
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)2;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2259), 2310, true);
      assertEquals("0:    <illegal opcode>\n1:    imul\n2:    iconst_m1\n", string0);
      
      int int0 = Utility.clearBit((byte)2, (-852));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 205, (int) (byte)52, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte)34);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
      
      int int0 = Utility.clearBit((-2443), 65);
      assertEquals((-2443), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.convertString("4:'T");
      // Undeclared exception!
      try { 
        Utility.signatureToString("4:'T", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4:'T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)86;
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 560;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, (int) (byte)86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)32;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    lload_2
         // 2:    nop
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.close();
      try { 
        Utility.typeOfMethodSignature("(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.isJavaIdentifierPart('j');
      Utility.classOrInterface(5);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-69);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-545), 2860);
      ConstantLong constantLong0 = new ConstantLong((byte) (-69));
      constantArray0[1] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.read(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getstatic");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 284, (-4805), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.signatureToString("CLASSPATH component ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "eS-D,KUGox7673:l";
      stringArray0[2] = "CLASSPATH component ";
      stringArray0[3] = "char";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte) (-72);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1116, 1116, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 560, (int) (byte)9, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(5);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.skip(0L);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore\t\t%189", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Expected class `", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Expected class `'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-29);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)116, (int) (byte)116, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.signatureToString("CLASSPATH component ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte)0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3570), 287, false);
      try { 
        Utility.typeOfSignature("D{d$WrQle;3He");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D{d$WrQle;3He
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("C7;0HU}#'V}\"t~T", true);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)53;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore_1", string1);
      
      int int0 = Utility.setBit((byte) (-59), 775);
      assertEquals((-59), int0);
      
      byte[] byteArray1 = Utility.decode("istore_1", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)115, (byte)116, (byte)111, (byte)114, (byte)101, (byte)95, (byte)49}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload\t\t%106", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      Utility.methodSignatureReturnType("C7;0HU}#'V}\"t~T", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)53;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-32);
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte) (-32);
      byteArray1[4] = (byte) (-100);
      byteArray1[5] = (byte)66;
      byteArray1[6] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)66, (int) (byte) (-100), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("fload_1");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_MAX;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-93);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-889275723), 256, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.isJavaIdentifierPart('j');
      Utility.classOrInterface(5);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)24;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 0, 28, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)34;
      byteArray0[1] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte)34);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "dup2_x2";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "dup2_x2";
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) byteArray0;
      String string1 = Utility.printArray(objectArray0, false, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-43);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)91, 39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      boolean boolean0 = false;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-3308), (int) (byte)3, false);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)88, (int) (byte)114, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      Utility.convertString("C7;0HU}#'V}\"t~T");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("A_fQ;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A_fQ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)25, 1916, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)32;
      byteArray0[3] = (byte) (-68);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 78, false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    newarray\t\t<<illegal type>>\n5:    lload_2\n", string0);
      
      short short0 = Constants.MAJOR_1_4;
      int int0 = Utility.clearBit((byte)32, 2051);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.classOrInterface('j');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-113);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte) (-115);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-113), 810, true);
      MockFile mockFile0 = new MockFile("class");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('G');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      PrintStream printStream1 = mockPrintStream1.format("dload_0", objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "class";
      objectArray1[1] = (Object) "dload_0";
      objectArray1[2] = (Object) "dload_0";
      Utility.printArray(printStream1, objectArray1);
      assertEquals(34L, mockFile0.length());
      
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null}", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.isJavaIdentifierPart('s');
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-45L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1396), (int) (byte)30, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23669. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 298, 197, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.signatureToString("CLASSPATH coTponent ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)82;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Integer integer0 = new Integer((byte) (-70));
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-65);
      byteArray2[1] = (byte) (-105);
      byteArray2[2] = (byte) (-100);
      byteArray2[3] = (byte)82;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, 42, 90, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer(80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte) (-121), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-112);
      byteArray0[3] = (byte) (-125);
      byteArray0[3] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (-1171), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("$3&OJxw}t&swZT", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(7uzoJ", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1822), 82, false);
      try { 
        Utility.typeOfSignature("28@~(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 28@~(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte) (-84));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-38), (int) (byte)75, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 53, 1221, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, 85, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 298, 1035, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Pattern.quote("CLASSPATH component ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QCLASSPATH component E";
      stringArray0[1] = "eS-D,KUGox7673:l";
      stringArray0[2] = "CLASSPATH component ";
      stringArray0[3] = "QCLASSPATH component E";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)91;
      Integer integer0 = new Integer((byte)107);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1371, (int) (byte)107, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)34;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-545), 2860);
      ConstantLong constantLong0 = new ConstantLong((byte)34);
      constantArray0[1] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.read(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1446), (-4805), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-889275714), 181, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ior
         // 1:    fload_1
         // 2:    monitorenter
         // 3:    daload
         // 4:    imul
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (-2960), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("!JnL' d2");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      Utility.format((byte)114, (byte)114, true, 'Y');
      try { 
        Utility.typeOfSignature("114YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 114YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-62);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)109;
      byteArray0[8] = (byte) (-18);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2328, (-1152), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "x}CQ\" 6qGmm9;s0";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1070), (int) (byte)82, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte)114, false);
      assertEquals("0:    frem\n1:    nop\n2:    nop\n3:    nop\n", string0);
      
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      String string1 = Utility.convertString("0:    frem\n1:    nop\n2:    nop\n3:    nop\n");
      assertEquals("0:    frem\\n1:    nop\\n2:    nop\\n3:    nop\\n", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3]@B~X]x_;7b]jC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3]@B~X]x_;7b]jC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Integer integer0 = new Integer(176);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-42);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 152, (int) (byte)12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-62);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(226, (-70));
      ConstantLong constantLong0 = new ConstantLong((-432L));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte) (-128);
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte) (-62);
      byteArray1[6] = (byte) (-62);
      byteSequence0.read(byteArray1);
      Utility.codeToString(byteArray0, constantPool0, 1, 1091, false);
      String string0 = Utility.convertString("void");
      String string1 = Utility.signatureToString("Byte code error: ");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3198, (int) (byte)17, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format(41, 82, false, 'A');
      String string0 = "K7uzoJ";
      Utility.compactClassName("K7uzoJ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("K7uzoJ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K7uzoJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(I", "ApJoT0Yt[.)Oe2", "J}CX(qJ| %_9d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "*G}tB}2c|U\\iYvjn@M";
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-95);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (-2381), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer(1245);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte) (-87);
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte) (-42);
      byteArray1[6] = (byte)3;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-87), 1245, false);
      assertEquals("0:    fload_2\n1:    bipush\t\t-87\n3:    iconst_0\n4:    iconst_1\n5:    <illegal opcode>\n6:    iconst_0\n", string0);
      
      String string1 = Utility.format(80, (-3488), false, 'z');
      assertEquals("80", string1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte) (-128));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 92, (int) (byte) (-62), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.compactClassName("?>...", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ifnonnull\t\t#21287", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.Utility", true);
      String string0 = Utility.compactClassName("org.apache.bcel.classfile.Utility", true);
      assertEquals("org.apache.bcel.classfile.Utility", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)5;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1670), (int) (byte) (-7));
      assertEquals("0:    fload_1\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    freturn\n4:    iconst_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)120, (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Utility.classOrInterface('j');
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-113);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte) (-106);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-113), 810, true);
      assertEquals("0:    d2l\n1:    fload_1\n2:    fcmpg\n", string1);
      
      MockFile mockFile0 = new MockFile("class", "class");
      MockPrintStream mockPrintStream0 = new MockPrintStream("class");
      PrintStream printStream0 = mockPrintStream0.append('G');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      PrintStream printStream1 = mockPrintStream1.format("dload_0", objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "class";
      objectArray1[1] = (Object) "dload_0";
      objectArray1[2] = (Object) "dload_0";
      Utility.printArray(printStream1, objectArray1);
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{null}", string2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1377, (int) (byte)91, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)30);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 1168, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifgt\t\t#30001
         // 3:    lload_1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-7);
      ConstantLong constantLong0 = new ConstantLong(1L);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 46, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("W'MPeRYp).P1|oB4E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'MPeRYp).P1|oB4E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-72);
      try { 
        Utility.typeOfSignature("-3,gC0dVInO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -3,gC0dVInO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)18;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)50;
      byteArray0[1] = (byte) (-103);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte)36);
      assertEquals("0:    fload_2\n1:    ifeq\t\t#4686\n4:    aaload\n5:    nop\n", string1);
      
      String string2 = Utility.fillup("0:    fload_2\n1:    ifeq\t\t#4686\n4:    aaload\n5:    nop\n", (byte)69, true, 'p');
      assertEquals("0:    fload_2\n1:    ifeq\t\t#4686\n4:    aaload\n5:    nop\npppppppppppppp", string2);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte)16);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)16, 121, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("x}CQ\" 6qGmm9;s0", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1), (-1), false);
      assertEquals("0:    ishl\n1:    lushr\n2:    fstore_0\n3:    fastore\n4:    fload_0\n5:    land\n6:    lload_2\n7:    istore\t\t%113\n9:    dstore_0\n10:   ldiv\n11:   ldiv\n12:   dstore\t\t%59\n14:   drem\n15:   faload\n", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)110, (int) (byte)110, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("anewarray", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, (-10), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, (int) (byte) (-101), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byte[] byteArray1 = Utility.decode("multianewarray", false);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-125), false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("multianewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `multianewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)69;
      Integer integer0 = new Integer((-3855));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, 174, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 245, (int) (byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)50;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), 210, true);
      Utility.searchOpcode("THcCDV1Jw>");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "THcCDV1Jw>";
      objectArray0[6] = (Object) byteArray0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "THcCDV1Jw>", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-94);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(229);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2916, (byte) (-126));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-126));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 913, (-3430));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)51;
      byteArray0[8] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte) (-73));
      byteSequence0.read(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-789), (-789), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, 2048);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)29;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)29, 2168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-125);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-947), (int) (byte)83);
      String string1 = Utility.compactClassName("0:    fstore_2\n1:    aastore\n2:    lushr\n3:    arraylength\n4:    lxor\n", "Warning: Padding byte != 0 in ", true);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString((int) (byte) (-66), true);
      assertEquals("private protected static final transient native abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (int) (byte)60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-123));
      assertEquals("0:    i2l\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer(632);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, 121, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-17);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, 47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.convertString("E");
      Utility.compactClassName("mgTPpK3oQshu/'}", "dYg!IV5Zr$BsRr|Rw,", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, 194);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.accessToString(76, true);
      String string0 = "float";
      Utility.getSignature("float");
      String string1 = "";
      Utility.compactClassName("org.apache.bcel.classfile.Constant", "", true);
      try { 
        Utility.decode("org.apache.bcel.classfile.Constant", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-114);
      byteArray0[3] = (byte) (-110);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-1097), (int) (byte) (-114));
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    fcmpl\n1:    d2i\n2:    nop\n3:    <illegal opcode>\n4:    faload\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    fcmpl
         // 1:    d2i
         // 2:    nop
         // 3:    <illegal opcode>
         // 4:    faload
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)29, (int) (byte)29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16669. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "%'h~ ";
      try { 
        Utility.typeOfSignature("%'h~ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %'h~ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-110);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)36;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2094, 216);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 199, (-2733));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)127;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4004), (int) (byte) (-45));
      assertEquals("0:    l2i\n1:    <illegal opcode>\n2:    iadd\n3:    land\n", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-1);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), 3211);
      assertEquals("0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n";
      stringArray0[1] = "0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n";
      stringArray0[2] = "0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n";
      stringArray0[3] = "0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n";
      stringArray0[4] = "0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n";
      stringArray0[5] = "0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n";
      stringArray0[6] = "0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n";
      stringArray0[7] = "0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n";
      Utility.methodTypeToSignature("0:    i2f\n1:    aastore\n2:    <illegal opcode>\n3:    dcmpl\n4:    dstore_1\n5:    impdep2\n", stringArray0);
      String string1 = Utility.methodTypeToSignature("w", stringArray0);
      assertEquals("(L0:;L0:;L0:;L0:;L0:;L0:;L0:;L0:;)Lw;", string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (-4248));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_0
         // 1:    fload_0
         // 2:    fload_0
         // 3:    dup_x2
         // 4:    return
         // 5:    iconst_4
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 87, 1814, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*Rq6sX295Czt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rq6sX295Czt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2, (int) (byte)49, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 2:    monitorenter
         // 3:    daload
         // 4:    imul
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 582, (int) (byte)51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()6O{");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (int) (byte) (-127));
      assertEquals("0:    lor\n", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0:    lor\n";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "0:    lor\n";
      stringArray0[5] = "(ZrJ";
      stringArray0[6] = "(ZrJ";
      stringArray0[7] = "(ZrJ";
      stringArray0[8] = "0:    lor\n";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L0:;L;L;L;L0:;L(ZrJ;L(ZrJ;L(ZrJ;L0:;)L;", string1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "&42B54T,Z&=\"0";
      try { 
        Utility.typeOfSignature("&42B54T,Z&=\"0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &42B54T,Z&=\"0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128));
      assertEquals("0:    ior\n", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("0:    ior\n", stringArray0);
      assertEquals("()L0:;", string1);
      
      String string2 = Utility.methodSignatureToString("()L0:;", "()L0:;", "*F&7B");
      assertEquals("*F&7B 0: ()L0:;()", string2);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$80", string3);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128));
      assertEquals("0:    ior\n", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("0:    ior\n", stringArray0);
      assertEquals("()L0:;", string1);
      
      String string2 = Utility.methodSignatureToString("()L0:;", "()L0:;", "*F&7B");
      assertEquals("*F&7B 0: ()L0:;()", string2);
      
      int int0 = Utility.setBit(188, 162);
      assertEquals(188, int0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "i2s";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)41;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i2s");
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)0;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 1300, false);
      Utility.convertString("0:    swap\n1:    dup_x2\n2:    fload_3\n3:    fstore_0\n4:    lstore_3\n5:    dcmpg\n6:    nop\n");
      try { 
        Utility.methodSignatureArgumentTypes("0:    swap\n1:    dup_x2\n2:    fload_3\n3:    fstore_0\n4:    lstore_3\n5:    dcmpg\n6:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    swap
         // 1:    dup_x2
         // 2:    fload_3
         // 3:    fstore_0
         // 4:    lstore_3
         // 5:    dcmpg
         // 6:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#fN~<ShPe8-8t";
      Utility.methodTypeToSignature("#fN~<ShPe8-8t", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L#fN~<ShPe8-8t;)L#fN~<ShPe8-8t;", (String) null, "#fN~<ShPe8-8t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L#fN~<ShPe8-8t;)L#fN~<ShPe8-8t;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      String string0 = Constants.CONSTRUCTOR_NAME;
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("<init>", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("()L<init>;", "()L<init>;", "*F&7B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
