/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:04:35 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.582978173677475E-4);
      assertEquals(2, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5786.586860242518);
      String string0 = rationalNumber0.toString();
      assertEquals("23516689/4064 (5,786.587)", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1L, (-2157L));
      rationalNumber0.intValue();
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      String string1 = rationalNumber1.toDisplayString();
      assertEquals("-0", string1);
      
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      String string2 = rationalNumber0.toDisplayString();
      assertEquals("5,786.587", string2);
      
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod((-2157L), (-2157));
      assertEquals(1, rationalNumber5.intValue());
      assertEquals(1L, rationalNumber5.longValue());
      
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber6 = rationalNumber0.negate();
      String string3 = rationalNumber6.toString();
      assertEquals("-23516689/4064 (-5,786.587)", string3);
      
      float float0 = rationalNumber3.floatValue();
      assertEquals((-5786.5864F), float0, 0.01F);
      
      rationalNumber2.longValue();
      rationalNumber4.negate();
      assertEquals(5786L, rationalNumber0.longValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836365789688E9);
      assertEquals(2.147483637E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2147483637, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.7538620704726782E-4);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.7537706068046299E-4, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.7537706E-4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0L);
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,647", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1810.5);
      long long0 = rationalNumber0.longValue();
      assertEquals(1810L, long0);
      assertEquals(3621, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 2147483647L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1857.9);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1135L, 1);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1015.467494);
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(612L, (-529L));
      RationalNumber rationalNumber5 = rationalNumber0.negate();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(18579, 1L);
      String string0 = rationalNumber4.toString();
      assertEquals("612/-529 (-1.157)", string0);
      
      rationalNumber0.intValue();
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(612, 10);
      assertEquals(5, rationalNumber7.divisor);
      
      RationalNumber rationalNumber8 = RationalNumber.valueOf((-2.147483647E9));
      String string1 = rationalNumber8.toDisplayString();
      assertEquals("-2147483647", string1);
      
      rationalNumber6.floatValue();
      rationalNumber3.negate();
      RationalNumber rationalNumber9 = rationalNumber3.negate();
      float float0 = rationalNumber9.floatValue();
      assertEquals((-1015.46747F), float0, 0.01F);
      
      rationalNumber1.intValue();
      assertEquals(1857, rationalNumber1.intValue());
      
      RationalNumber.factoryMethod(18579, 1L);
      String string2 = rationalNumber0.toString();
      assertEquals("1", string2);
      
      rationalNumber2.negate();
      String string3 = rationalNumber3.toDisplayString();
      assertEquals("1,015.467", string3);
      
      RationalNumber rationalNumber10 = rationalNumber6.negate();
      rationalNumber10.floatValue();
      rationalNumber10.intValue();
      RationalNumber.valueOf(7091);
      rationalNumber5.intValue();
      RationalNumber rationalNumber11 = RationalNumber.valueOf((-7200680));
      assertEquals((short)8280, rationalNumber11.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      String string0 = rationalNumber0.toString();
      assertEquals("1/100000000 (0)", string0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(100000000);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1);
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(2054L, (-1));
      String string1 = rationalNumber4.toDisplayString();
      assertEquals(1, rationalNumber4.divisor);
      assertEquals("-2054", string1);
      
      RationalNumber.valueOf(1.0E-8);
      rationalNumber0.longValue();
      double double0 = rationalNumber1.doubleValue();
      assertEquals((-1.0E-8), double0, 0.01);
      
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(2147483647L, 100000000);
      assertEquals(21.474836F, rationalNumber5.floatValue(), 0.01F);
      
      rationalNumber3.negate();
      rationalNumber1.floatValue();
      rationalNumber3.floatValue();
      String string2 = rationalNumber1.toString();
      assertEquals("-1/100000000 (-0)", string2);
      
      RationalNumber rationalNumber6 = rationalNumber0.negate();
      String string3 = rationalNumber6.toDisplayString();
      assertEquals("-0", string3);
      
      rationalNumber1.floatValue();
      rationalNumber0.longValue();
      rationalNumber1.longValue();
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(323L, 1);
      rationalNumber1.negate();
      RationalNumber rationalNumber8 = rationalNumber2.negate();
      assertEquals((-100000000L), rationalNumber8.longValue());
      
      String string4 = rationalNumber7.toDisplayString();
      assertEquals("323", string4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2954L, 3355L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(4545.2687552);
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      RationalNumber.factoryMethod(2114L, 2954L);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(65433689);
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      rationalNumber1.toString();
      rationalNumber0.longValue();
      rationalNumber3.toDisplayString();
      rationalNumber0.longValue();
      RationalNumber rationalNumber5 = RationalNumber.valueOf((-2.147483634142797E9));
      String string0 = rationalNumber5.toString();
      assertEquals("-2,147,483,634", string0);
      
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(211, 1L);
      String string1 = rationalNumber3.toDisplayString();
      assertEquals("65433689", string1);
      
      rationalNumber3.doubleValue();
      rationalNumber4.floatValue();
      rationalNumber6.floatValue();
      String string2 = rationalNumber2.toString();
      assertEquals((-4545.2686F), rationalNumber2.floatValue(), 0.01F);
      assertEquals("-65433689/14396 (-4,545.269)", string2);
      assertEquals((-4545L), rationalNumber2.longValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 3279L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.longValue();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      rationalNumber2.toString();
      rationalNumber2.toDisplayString();
      rationalNumber2.toString();
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1439.0102999));
      RationalNumber rationalNumber4 = rationalNumber1.negate();
      rationalNumber4.toString();
      RationalNumber rationalNumber5 = rationalNumber2.negate();
      rationalNumber4.toString();
      rationalNumber2.floatValue();
      rationalNumber2.negate();
      RationalNumber rationalNumber6 = RationalNumber.valueOf((-3200.78609382121));
      rationalNumber1.floatValue();
      rationalNumber3.floatValue();
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod((-139584), 6587);
      String string0 = rationalNumber7.toDisplayString();
      assertEquals("-21.191", string0);
      
      rationalNumber5.longValue();
      RationalNumber.valueOf((-654920.3F));
      RationalNumber rationalNumber8 = RationalNumber.factoryMethod((-6587), 3L);
      String string1 = rationalNumber8.toString();
      assertEquals("-6587/3 (-2,195.667)", string1);
      
      rationalNumber7.doubleValue();
      rationalNumber5.floatValue();
      assertEquals(3279, rationalNumber1.divisor);
      
      float float0 = rationalNumber6.floatValue();
      assertEquals((-3200L), rationalNumber6.longValue());
      assertEquals((-3200.7861F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 2147483672L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.longValue();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-695L), 1077L);
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      String string0 = rationalNumber4.toString();
      assertEquals("695/-1077 (-0.645)", string0);
      
      String string1 = rationalNumber1.toDisplayString();
      assertEquals("1", string1);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf((-1077));
      assertEquals((-1077.0F), rationalNumber5.floatValue(), 0.01F);
      
      RationalNumber.factoryMethod(2147483672L, 1L);
      String string2 = rationalNumber0.toString();
      assertEquals("268435456/-268435459 (-1)", string2);
      
      rationalNumber3.negate();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(0L, (-1077));
      String string3 = rationalNumber6.toString();
      assertEquals("0", string3);
      
      rationalNumber3.floatValue();
      RationalNumber rationalNumber7 = new RationalNumber((-58), 1);
      assertEquals((-58.0), rationalNumber7.doubleValue(), 0.01);
      assertEquals((-58L), rationalNumber7.longValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483672L, 2147483672L);
      rationalNumber0.toDisplayString();
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1.04913669929374E-6);
      assertEquals(1.0491362985422252E-6, rationalNumber1.doubleValue(), 0.01);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-1L), 2147483672L);
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1L));
      String string0 = rationalNumber3.toString();
      assertEquals("-1", string0);
      assertEquals(1, rationalNumber3.divisor);
      
      RationalNumber rationalNumber4 = rationalNumber2.negate();
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(0L, (-1L));
      assertEquals(0.0F, rationalNumber5.floatValue(), 0.01F);
      
      String string1 = rationalNumber4.toString();
      assertEquals("-1/2147483624 (-0)", string1);
      
      rationalNumber4.floatValue();
      assertEquals((-4.656612925119098E-10), rationalNumber4.doubleValue(), 0.01);
      
      RationalNumber rationalNumber6 = new RationalNumber(1, 2147483624);
      assertEquals(2147483624, rationalNumber6.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483659L), 3758L);
      float float0 = rationalNumber0.floatValue();
      assertEquals((-571443.25F), float0, 0.01F);
      
      String string0 = rationalNumber0.toString();
      assertEquals("1073741830/-1879 (-571,443.23)", string0);
  }
}
