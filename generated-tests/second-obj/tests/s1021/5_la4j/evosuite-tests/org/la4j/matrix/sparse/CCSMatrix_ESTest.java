/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:59:08 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.random((-753), (-753), (double) (-753), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = (byte)48;
      byte[] byteArray0 = new byte[19];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(172);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 173
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2938, 226);
      boolean boolean0 = cCSMatrix0.nonZeroAt(2260, 109);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1153, 1153);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.getOrElse(32, 32, 2.0);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.setAll(1.0);
      assertEquals(6, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(30);
      int[] intArray0 = new int[7];
      cCSMatrix0.blank();
      intArray0[2] = 30;
      cCSMatrix0.minInColumn(10);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.diagonalProduct();
      Iterator<Integer> iterator0 = cCSMatrix0.iteratorOrNonZeroColumns();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(2, 2, (double) 2, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[17][7];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[17][7];
      doubleArray1[0] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(4, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(16, 0.0, (Random) null);
      assertEquals(16, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1980;
      doubleArray0[1] = (double) 1980;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1980, 1980, doubleArray0);
      int int0 = (-682);
      int int1 = 0;
      cCSMatrix0.nonZeroAt(int0, int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(3103, 0, doubleArray0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(3103, 1979, (double) 0, (Random) mockRandom0);
      CCSMatrix.block(cCSMatrix0, denseMatrix0, denseMatrix0, cCSMatrix0);
      cCSMatrix0.min();
      cCSMatrix0.setAll(int0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte byte0 = (byte)93;
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      byteArray0[3] = (byte)48;
      int int0 = 8;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(2, 8);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.non(matrixPredicate0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)93, (byte)93);
      cCSMatrix0.set((byte)48, (byte)48, (byte)93);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.foldNonZeroInRow(int0, vectorAccumulator0);
      CCSMatrix.identity(int0);
      cCSMatrix1.euclideanNorm();
      String string0 = "^m";
      CCSMatrix.fromMatrixMarket(string0);
      String string1 = "";
      CCSMatrix cCSMatrix2 = CCSMatrix.fromCSV(string1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachNonZeroInColumn(byte0, vectorProcedure0);
      int int1 = 4699;
      double double0 = (-1203.171496514676);
      cCSMatrix1.set(byteArray0[3], int1, double0);
      String string2 = "${J{Ia\\B%RvlPaAr";
      CCSMatrix.fromCSV(string2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromBinary(byteArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1812, 1812, 1113);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-1760.279834095);
      CCSMatrix.from1DArray(3238, 33, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1980;
      doubleArray0[1] = (double) 1980;
      int int0 = 0;
      CCSMatrix.from1DArray(0, 1980, doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(9, 32, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, (-212.805740285));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.min();
      cCSMatrix0.getColumn(9);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1471, 0, 0);
      denseMatrix0.divide(0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      Matrix matrix0 = cCSMatrix0.blank();
      matrix0.setAll(0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      int int0 = 3;
      int[] intArray0 = new int[4];
      intArray0[1] = 3237;
      intArray0[2] = 3;
      intArray0[3] = 13;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3237, 3, 13, doubleArray0, intArray0, intArray0);
      cCSMatrix0.nonZeroRowMajorIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.min();
      CCSMatrix.identity(int0);
      int int1 = 818;
      cCSMatrix0.minInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2585.6197584347);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)64;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2824, 1970);
      cCSMatrix0.euclideanNorm();
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-982.2);
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[7][4];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.maxInColumn(2);
      cCSMatrix0.setAll(21.0);
      cCSMatrix0.maxInColumn(2);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      SparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(6, 6);
      cCSMatrix1.setAll(2.0);
      cCSMatrix0.toRowVector();
      RowMajorSparseMatrix.zero(319, 6);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1812, 1812, 1113);
      int[] intArray0 = new int[8];
      intArray0[0] = 401;
      intArray0[1] = 1113;
      cCSMatrix0.transformColumn((byte)48, (VectorFunction) null);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toRowVector();
      int int0 = 5;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int0);
      cCSMatrix1.select(intArray0, intArray0);
      int int1 = 932;
      cCSMatrix1.getColumn(int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1183, 1183);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, (double)1, (double)1, (double)1183, (double)1183).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(1, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 31;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(31, (-1.0));
      int int1 = 32;
      int int2 = 676;
      int int3 = 8;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(8, vectorFunction0);
      cCSMatrix0.transformColumn(8, (VectorFunction) null);
      MockRandom mockRandom0 = new MockRandom();
      int int4 = 32;
      int int5 = 2711;
      CCSMatrix cCSMatrix1 = CCSMatrix.random(int3, int5, (double) int1, (Random) mockRandom0);
      double double0 = 568.45766173;
      CCSMatrix.diagonal(int2, double0);
      String string0 = "The density value should be between 0 and 1.0";
      CCSMatrix cCSMatrix2 = CCSMatrix.fromMatrixMarket(string0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.updateAt(int2, int0, matrixFunction0);
      double double1 = 1536.9339;
      CCSMatrix cCSMatrix3 = CCSMatrix.diagonal(int5, double1);
      int int6 = (-1863);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.eachNonZeroInColumn(int6, vectorProcedure0);
      cCSMatrix1.iteratorOfColumn(int4);
      CCSMatrix.identity(int2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(23, (-212.805740285));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (double)1778, (-1.0), 2393.254802220403, (double)9).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(9, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.setColumn(9, (double) 9);
      cCSMatrix0.eachNonZeroInColumn((-1243), vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[7][4];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2, (-31.942745643739));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.getRow((-1));
      cCSMatrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroAt(16, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 627;
      CCSMatrix cCSMatrix0 = new CCSMatrix(627, 627, 627);
      cCSMatrix0.toColumnVector();
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroIterator();
      int int1 = 1161;
      // Undeclared exception!
      try { 
        cCSMatrix0.set(1161, 1161, 627);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1161' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 32, 1.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(9, vectorAccumulator0);
      cCSMatrix0.toBinary();
      int int0 = 16;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      int int1 = 1094;
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(1094);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1094
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 32;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix.diagonal(1183, 1183);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(820, 1183, 8);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure1 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(7);
      cCSMatrix1.subtract((double) 7);
      cCSMatrix1.eachNonZeroInRow(5, (VectorProcedure) null);
      cCSMatrix0.eachInColumn(int0, vectorProcedure1);
      int int1 = (-432);
      cCSMatrix1.eachInColumn(int1, vectorProcedure1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 32, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(32, (-212.805740285));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRow((-345), vectorAccumulator0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix1.toBinary();
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroIteratorOfColumn((-345));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -345
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      CCSMatrix.from2DArray(doubleArray0);
      Matrix.unit(1686, 1686);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(129);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.nonZeroIteratorOfRow(44);
      Matrix.diagonal(44, 1183);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformColumn(1, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 9, 1.0, (Random) mockRandom0);
      CCSMatrix.diagonal(9, (-212.805740285));
      Matrix matrix0 = cCSMatrix0.copyOfShape(9, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(9, 3, matrixFunction0);
      matrix0.transpose();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix1 = matrix0.to(matrixFactory0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix1.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix1.subtract((Matrix) cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 9x2 does not equal to 9x9.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)94;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)48);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(9, (byte)94);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.updateRow(8, vectorFunction0);
      int int0 = (-3715);
      ColumnMajorSparseMatrix.diagonal((-3715), (byte)94);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1183;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1183, 1183);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      int int1 = 44;
      cCSMatrix0.swapColumns(1183, 153);
      RowMajorSparseMatrix.zero(int0, int1);
      int int2 = (-370);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(int2, int0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      String string0 = "SMART";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV(string0);
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, denseMatrix0);
      int int3 = 25;
      cCSMatrix1.getColumn(int3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[7][4];
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 4;
      cCSMatrix0.getRow(4);
      int int1 = 2;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(2, 2, 2);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double double0 = Double.NEGATIVE_INFINITY;
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (-1289.375276747329), (-1289.375276747329), Double.NEGATIVE_INFINITY).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction1);
      CCSMatrix cCSMatrix2 = new CCSMatrix(2, 2, 2);
      // Undeclared exception!
      try { 
        cCSMatrix1.diagonalProduct();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)64;
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.subtract(2.0);
      Matrix matrix1 = inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix0, cCSMatrix0, rowMajorSparseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix1.toColumnMajorSparseMatrix();
      Matrix matrix2 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix1.subtract(matrix2);
      DenseMatrix.block(matrix1, matrix1, matrix1, rowMajorSparseMatrix0);
      CCSMatrix.fromCSV("3");
      matrix1.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroAt(2, 1162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1162
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 242.70064;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = (-212.805740285);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2198.9705;
      doubleArray1[7] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-212.805740285);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 242.70064;
      doubleArray3[1] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 13, 0.0, (Random) mockRandom0);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      // Undeclared exception!
      try { 
        cCSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 39, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(39, (-212.805740285));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      Matrix.identity(9);
      int[] intArray0 = new int[9];
      doubleArray0[2] = (double) 9;
      intArray0[1] = 9;
      intArray0[2] = 39;
      intArray0[3] = 9;
      intArray0[4] = 39;
      intArray0[5] = 9;
      intArray0[6] = (-141);
      intArray0[7] = 39;
      intArray0[8] = 39;
      cCSMatrix1.select(intArray0, intArray0);
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.toCSV();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.subtract(2203.110486138);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(13, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(5, 5);
      cCSMatrix0.maxInColumn(3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3460, 3460, 3460);
      cCSMatrix0.maxInColumn(8);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("Sides of blocks are incompatible!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 30;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(30);
      int[] intArray0 = new int[7];
      Vector vector0 = cCSMatrix0.getRow(20);
      intArray0[2] = 30;
      int int1 = 10;
      cCSMatrix0.insertRow(972, vector0);
      cCSMatrix0.minInColumn(int1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.getColumn(int0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      int int2 = 3222;
      int int3 = (-2135);
      cCSMatrix0.nonZeroAt(int2, int3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-1.0);
      int int0 = 9;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 9, 1.0, (Random) mockRandom0);
      int int1 = 1279;
      cCSMatrix0.copyOfShape(9, 1279);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(3, vectorFunction0);
      ColumnMajorSparseMatrix.diagonal(2, (-1.0));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(4320, vectorProcedure0);
      cCSMatrix0.minInColumn(int1);
      int int2 = 839;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int2, int0, doubleArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      MatrixFunction matrixFunction0 = null;
      int int3 = 1060;
      cCSMatrix1.updateAt(int3, int0, matrixFunction0);
      int int4 = 971;
      CCSMatrix.zero(int2, int3, int4);
      String string0 = "coordinate";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn((byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 9, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(9, (-212.805740285));
      cCSMatrix1.equals((Matrix) cCSMatrix0, (-3142.516));
      mockRandom0.nextFloat();
      Matrix matrix0 = cCSMatrix0.copyOfShape(9, 2);
      cCSMatrix1.minInColumn(7);
      matrix0.removeLastRow();
      int int0 = 74;
      // Undeclared exception!
      try { 
        cCSMatrix0.set(1, 2, 7);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This matrix can't grow up.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      int int0 = 43;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(43, 32);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(32, (-212.805740285));
      double double0 = (-1.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(32, 17, matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (double)32, 1.0, 1.0, (-622.9867)).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction1);
      DenseMatrix denseMatrix0 = null;
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.apply((ColumnMajorSparseMatrix) cCSMatrix1, denseMatrix0);
      MockRandom mockRandom1 = new MockRandom();
      DenseMatrix denseMatrix1 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      int int1 = 730;
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(int1, double0, (Random) mockRandom1);
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, sparseMatrix0);
      CCSMatrix.block(denseMatrix0, sparseMatrix0, denseMatrix1, cCSMatrix1);
      String string0 = "Can not decode CCSMatrix from the given byte array.";
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          double[] doubleArray0 = new double[9];
          doubleArray0[0] = (-1.0);
          MockRandom mockRandom0 = new MockRandom();
          CCSMatrix.random(9, 32, 1.0, (Random) mockRandom0);
          CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, (-212.805740285));
          MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
          doReturn((-1.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
          cCSMatrix0.updateAt(32, 17, matrixFunction0);
          MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
          cCSMatrix0.update(matrixFunction1);
          VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
          cCSMatrix0.eachNonZeroInColumn(13, vectorProcedure0);
          CCSMatrix.fromCSV("");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[4][4];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2, (-31.942745643739));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      cCSMatrix0.copyOfShape(2, 2);
      int int0 = 13;
      // Undeclared exception!
      try { 
        cCSMatrix1.updateAt(13, 24, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 32, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(32, (-212.805740285));
      cCSMatrix0.copyOfShape(9, 2);
      // Undeclared exception!
      try { 
        cCSMatrix1.eachNonZeroInColumn(9, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      int int0 = 9;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 23, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(23, (-212.805740285));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, (double)1778, (-1.0), 2391.15090981547, (double)9).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.updateRow(9, vectorFunction0);
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix2.toCSV();
      CCSMatrix cCSMatrix3 = CCSMatrix.fromCSV("-1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n-1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n-1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n-1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n-1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n-1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n");
      cCSMatrix3.transpose();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, (-212.805740285));
      ColumnMajorSparseMatrix.diagonal(32, 3959.158816805329);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-64.25517737738)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(4, 13, matrixFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix.zero(13, 1057, 1057);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      int int0 = 16;
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(16, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      SparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, (-51128.81356374425));
      cCSMatrix0.rank();
      cCSMatrix0.setAll(2818.146673918157);
      cCSMatrix0.toRowVector();
      CCSMatrix.zero(1, 6, 6);
      RowMajorSparseMatrix.zero(153, 1);
      // Undeclared exception!
      try { 
        DenseMatrix.unit(1, (-940));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 9, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(9, (-212.805740285));
      cCSMatrix1.equals((Matrix) cCSMatrix0, (-3142.516));
      cCSMatrix1.setAll(2393.254802220403);
      int int0 = 2;
      Integer integer0 = new Integer(9);
      Matrix matrix0 = cCSMatrix0.copyOfShape(9, 2);
      cCSMatrix1.minInColumn(7);
      matrix0.removeLastRow();
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random(2, 9, 2.0, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      int int0 = 23;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(23, (-212.805740285));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, (double)1778, (-1.0), 2393.254802220403, (double)9).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(9, vectorFunction0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(23, 1.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.equals((Matrix) columnMajorSparseMatrix0, 0.7);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      cCSMatrix0.copyOfShape(9, 23);
      cCSMatrix0.minInColumn(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.foldNonZeroInColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix1.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      denseMatrix0.non(matrixPredicate0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(561, 561);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix1);
      CCSMatrix.block(cCSMatrix0, matrix0, matrix0, matrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
      ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, denseMatrix0, denseMatrix1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1183, 1183);
      int int0 = 153;
      RowMajorSparseMatrix.zero(44, 1101);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1101, 153);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      String string0 = "SMART";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV(string0);
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix1, denseMatrix0);
      cCSMatrix1.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1061.6535865855533;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(23);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1778, 1778, 23);
      Vector vector0 = cCSMatrix0.toRowVector();
      CCSMatrix.identity(23);
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix1.select(intArray0, intArray0);
      cCSMatrix2.isColumnMajor();
      cCSMatrix1.setColumn(23, vector0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1061.6535865855533;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(48);
      cCSMatrix0.toRowVector();
      CCSMatrix cCSMatrix1 = new CCSMatrix(48, 1778);
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      cCSMatrix0.select(intArray0, intArray0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.zero(1145, 1145);
      MockRandom mockRandom0 = new MockRandom(1145);
      cCSMatrix0.nonZeroColumnMajorIterator();
      CCSMatrix.random((-1384), 732, (double) 9, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1183, 1183);
      int int0 = 135;
      RowMajorSparseMatrix.zero(44, 1101);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)135, (double)135, 2.0, (double)44, 3736.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1101, 135);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("SMART");
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix1, denseMatrix0);
      cCSMatrix1.getColumn(int0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-97);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromBinary(byteArray0);
      int[] intArray0 = new int[8];
      cCSMatrix0.rotate();
      intArray0[5] = (int) (byte)48;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.zero(23, (int) (byte)48);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(44, 23);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("SMART");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
